{"version":3,"sources":["actions/gameLogActions.js","globals/constants.js","reducers/gameLogReducer.js","actions/variablesActions.js","reducers/variablesReducer.js","actions/textActions.js","reducers/textReducer.js","mechanics/TextManager.js","actions/dataActions.js","reducers/dataReducer.js","reducers/rootReducer.js","store/store.js","mechanics/helpers.js","mechanics/GameManager.js","components/GamePage/GameNavBar.jsx","components/GamePage/GameText.jsx","components/GamePage/GameChoiceItem.jsx","components/GamePage/GameChoicesList.jsx","components/GamePage/GamePage.jsx","components/GamePage/GamePageContainer.js","components/GamePage/GameLoading.jsx","components/GamePage/GameLoadingContainer.js","components/MenuPage/MenuList.jsx","components/MenuPage/MenuListContainer.js","components/MenuPage/MenuPage.jsx","components/LogInPage/login.js","components/LeadBoardPage/LeaderBoard.js","App.js","components/common/Footer.jsx","reportWebVitals.js","index.js"],"names":["START_GAME","ADD_TO_LOG","SET_CURRENT_MODULE","SET_CURRENT_NODE_KEY","constants","MODULE_INCIDENT","INCIDENT_STARTING_KEY","POINT_BOOST_SMALL","POINT_BOOST_MEDIUM","POINT_BOOST_LARGE","POINT_BOOST_LARGE02","POINT_BOOST_HUGE","POINT_BOOST_JACKPOT","POINT_COST_MINI_01","POINT_COST_MINI_02","POINT_COST_MINI_03","POINT_COST_MODERATE_01","POINT_COST_MODERATE_02","POINT_COST_MODERATE_03","POINT_COST_HEAVY_01","POINT_COST_HEAVY_02","POINT_COST_HEAVY_03","POINT_COST_MEGA_01","POINT_COST_MEGA_02","POINT_COST_MEGA_03","LINE_BREAK_SEPARATOR","LINK_NODE_PREFIX","FAIL_KEY","END_KEY","CONTINUE_TEXT","FAIL_TEXT","END_TEXT","END_CHOICE","initialState","debugMode","gameStarted","gameLog","currentModule","currentNodeKey","gameLogReducer","nextState","state","action","Object","freeze","type","assign","push","textNodeKey","choiceNodeKey","module","nodeKey","RESET_VARIABLES","SET_VARIABLES","playerVariables","variablesReducer","variablesObject","RESET_TEXT_CHOICES","SET_TEXT","SET_CHOICES","RESET_TEXT_UPDATE","text","textWasUpdated","choices","KEY","textReducer","TextManager","moduleNumber","console","log","this","loadJSON","TextJSON","ChoicesJSON","Promise","resolve","reject","data","error","moduleText","moduleChoices","moduleLinkNodes","textData","linkNodesData","choicesData","i","TEXT","j","k","SET_TEXT_DATA","SET_LINK_NODES_DATA","SET_CHOICES_DATA","SET_ALL_DATA","SET_LOADING","loadModuleData","dispatch","loadModuleAsync","then","loading","dataReducer","rootReducer","combineReducers","game","variables","configureStore","preloadedState","store","createStore","composeWithDevTools","applyMiddleware","thunk","logger","subscribe","getState","modifiedState","localStorage","JSON","stringify","checkIfGameOver","checkIfGameEnded","getItem","parse","name","Score","setItem","score","checkIfGameFail","GameManager","moduleName","startingKey","loadText","loadChoices","key","split","setText","colorClass","substring","checkChoice","choiceData","choice","setChoices","choiceKey","additionalVariableCostA_Key","condition1","checkPlayerVariables","additionalVariableCostA_Equivalence","additionalVariableCostA_Value","additionalVariableCostB_Key","condition2","additionalVariableCostB_Equivalence","additionalVariableCostB_Value","additionalVariableCost_Operator","reference","equivalence","value","addToLog","writeToGameLog","dieRollDestinationA","dieRollDestinationB","dieRollDestinationC","dieRollDestinationD","destinationA_percentage","destinationC_percentage","destinationD_percentage","rollDie","destinationB_percentage","loadStoryNode","destinationA","destinationB","destinationC","destinationD","Math","floor","random","variablesArray","forEach","variable","original","destination","updateCurrentNode","checkKeyForLinkNode","newDestination","processLinkNode","loadGame","loadedLinkNodes","test1","test2","test3","length","linkNode","variable1","getRandomLinkNodeDestination","variable2","variable3","equivalence1","value1","equivalence2","value2","equivalence3","value3","operator1","operator2","dieRollA","dieRollB","dieRollC","dieRollD","GameNavBar","props","seconds","parseInt","setState","interval","setInterval","tick","clearInterval","Navbar","expand","variant","Container","className","to","Nav","React","Component","GameText","displayText","Array","isArray","map","paragraph","style","color","GameChoiceItem","makeDecision","bind","e","preventDefault","cssClasses","gameOver","href","onClick","GameChoicesList","gameChoiceItems","GamePage","dispatchSent","checkIfModuleLoaded","resetTextUpdate","faderClass","setTimeout","connect","GameLoading","Spinner","animation","role","GamePageContainer","MenuList","startNewGame","loadData","startGame","resetTextChoices","resetVariables","setLoading","MenuPage","redirect","MenuListContainer","removeItem","window","location","reload","Login","email","password","Form","Group","size","controlId","Label","Control","autoFocus","onChange","target","Button","block","LoginCred","item","LeaderBoardPage","LeaderBoardData","users","undefined","paginate","asc","App","exact","path","GameLoadingContainer","LeaderBoard","Footer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","content","document","addEventListener","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7e52ff53.chunk.js","sourcesContent":["export const START_GAME = \"START_GAME\";\r\nexport const END_GAME = \"END_GAME\";\r\nexport const ADD_TO_LOG = \"ADD_TO_LOG\";\r\nexport const SET_CURRENT_MODULE = \"SET_CURRENT_MODULE\";\r\nexport const SET_CURRENT_NODE_KEY = \"SET_CURRENT_NODE_KEY\";\r\n\r\nexport const startGame = () => ({\r\n  type: START_GAME,\r\n});\r\n\r\nexport const endGame = () => ({\r\n  type: END_GAME,\r\n});\r\n\r\nexport const addToLog = (textNodeKey, choiceNodeKey) => ({\r\n  type: ADD_TO_LOG,\r\n  textNodeKey,\r\n  choiceNodeKey,\r\n});\r\n\r\nexport const setCurrentModule = (module) => ({\r\n  type: SET_CURRENT_MODULE,\r\n  module,\r\n});\r\n\r\nexport const setCurrentNodeKey = (nodeKey) => ({\r\n  type: SET_CURRENT_NODE_KEY,\r\n  nodeKey,\r\n});\r\n","const constants = {\r\n  // Story module numbers\r\n  MODULE_INCIDENT: 1, // AA\r\n\r\n  INCIDENT_STARTING_KEY: 'AA000AA000AA',\r\n\r\n  // Point boost values for power, intellect, love, etc. for decisions\r\n  POINT_BOOST_SMALL: 1,\r\n  POINT_BOOST_MEDIUM: 2,\r\n  POINT_BOOST_LARGE: 4,\r\n  POINT_BOOST_LARGE02: 8,\r\n  POINT_BOOST_HUGE: 12,\r\n  POINT_BOOST_JACKPOT: 25,\r\n\r\n  // Point costs for decisions\r\n  POINT_COST_MINI_01: 1,\r\n  POINT_COST_MINI_02: 3,\r\n  POINT_COST_MINI_03: 5,\r\n\r\n  POINT_COST_MODERATE_01: 10,\r\n  POINT_COST_MODERATE_02: 15,\r\n  POINT_COST_MODERATE_03: 20,\r\n\r\n  POINT_COST_HEAVY_01: 30,\r\n  POINT_COST_HEAVY_02: 40,\r\n  POINT_COST_HEAVY_03: 50,\r\n\r\n  POINT_COST_MEGA_01: 75,\r\n  POINT_COST_MEGA_02: 100,\r\n  POINT_COST_MEGA_03: 150,\r\n\r\n  LINE_BREAK_SEPARATOR: '\\n\\n',\r\n  LINK_NODE_PREFIX: 'X',\r\n  FAIL_KEY: 'FAIL',\r\n  END_KEY: 'END',\r\n  CONTINUE_TEXT: 'Continue...',\r\n  FAIL_TEXT: 'You failed to solve the issue ,may be next time things will be different.',\r\n  END_TEXT: 'Finished',\r\n  END_CHOICE: 'Return to menu...'\r\n};\r\n\r\nexport default constants;","import {\r\n  START_GAME,\r\n  ADD_TO_LOG,\r\n  SET_CURRENT_MODULE,\r\n  SET_CURRENT_NODE_KEY\r\n} from '../actions/gameLogActions';\r\n\r\nimport constants from '../globals/constants';\r\n\r\nconst initialState = {\r\n  debugMode: false,\r\n  gameStarted: false,\r\n  gameLog: [],\r\n  currentModule: constants.MODULE_INCIDENT,\r\n  currentNodeKey: constants.INCIDENT_STARTING_KEY\r\n}\r\n\r\nconst gameLogReducer = (state = initialState, action) => {\r\n  let nextState;\r\n  Object.freeze(state);\r\n\r\n  switch(action.type) {\r\n    case START_GAME:\r\n      nextState = Object.assign({}, state);\r\n      nextState.gameStarted = true;\r\n      nextState.gameLog = [];\r\n      nextState.currentModule = initialState.currentModule;\r\n      nextState.currentNodeKey = initialState.currentNodeKey;\r\n      return nextState;\r\n    case ADD_TO_LOG:\r\n      nextState = Object.assign({}, state);\r\n      nextState.gameLog.push({\r\n        textNodeKey: action.textNodeKey,\r\n        choiceNodeKey: action.choiceNodeKey\r\n      });\r\n      return nextState;\r\n    case SET_CURRENT_MODULE:\r\n      nextState = Object.assign({}, state);\r\n      nextState.currentModule = action.module;\r\n      return nextState;\r\n    case SET_CURRENT_NODE_KEY:\r\n      nextState = Object.assign({}, state);\r\n      nextState.currentNodeKey = action.nodeKey;\r\n      return nextState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default gameLogReducer;","export const RESET_VARIABLES = 'RESET_VARIABLES';\r\nexport const SET_VARIABLES = 'SET_VARIABLES';\r\n\r\nexport const resetVariables = () => ({\r\n  type: RESET_VARIABLES\r\n});\r\n\r\nexport const setVariables = (variablesObject) => ({\r\n  type: SET_VARIABLES,\r\n  variablesObject,\r\n});","import { RESET_VARIABLES, SET_VARIABLES } from '../actions/variablesActions';\r\n\r\nconst initialState = {\r\n  playerVariables: {}\r\n}\r\n\r\nconst variablesReducer = (state = initialState, action) => {\r\n  let nextState;\r\n  Object.freeze(state);\r\n\r\n  switch(action.type) {\r\n    case RESET_VARIABLES:\r\n      nextState = Object.assign({}, state);\r\n      nextState.playerVariables = initialState.playerVariables;\r\n      return nextState;\r\n    case SET_VARIABLES:\r\n      nextState = Object.assign({}, state);\r\n      nextState.playerVariables = action.variablesObject;\r\n      return nextState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default variablesReducer;","export const RESET_TEXT_CHOICES = 'RESET_TEXT_CHOICES';\r\nexport const SET_TEXT = 'SET_TEXT';\r\nexport const SET_CHOICES = 'SET_CHOICES';\r\nexport const RESET_TEXT_UPDATE = 'RESET_TEXT_UPDATE';\r\n\r\nexport const resetTextChoices = () => ({\r\n  type: RESET_TEXT_CHOICES\r\n});\r\n\r\nexport const setText = text => ({\r\n  type: SET_TEXT,\r\n  text,\r\n});\r\n\r\nexport const setChoices = choices => ({\r\n  type: SET_CHOICES,\r\n  choices,\r\n});\r\n\r\nexport const resetTextUpdate = () => ({\r\n  type: RESET_TEXT_UPDATE\r\n});","import {\r\n  RESET_TEXT_CHOICES,\r\n  SET_TEXT,\r\n  SET_CHOICES,\r\n  RESET_TEXT_UPDATE } from '../actions/textActions';\r\n\r\nconst initialState = {\r\n  text: \"Placeholder text.\",\r\n  textWasUpdated: true,\r\n  choices: [\r\n    {\r\n      KEY: \"AA000AA000AB01\",\r\n      text: \"Placeholder text.\"\r\n    },\r\n    {\r\n      KEY: \"AA000AA000AB02\",\r\n      text: \"Placeholder text.\"\r\n    }\r\n  ]\r\n}\r\n\r\nconst textReducer = (state = initialState, action) => {\r\n  let nextState;\r\n  Object.freeze(state);\r\n\r\n  switch(action.type) {\r\n    case RESET_TEXT_CHOICES:\r\n      nextState = Object.assign({}, state);\r\n      nextState.text = initialState.text;\r\n      nextState.choices = initialState.choices;\r\n      nextState.textWasUpdated = initialState.textWasUpdated;\r\n      return nextState;\r\n    case SET_TEXT:\r\n      nextState = Object.assign({}, state);\r\n      nextState.text = action.text;\r\n      nextState.textWasUpdated = true;\r\n      return nextState;\r\n    case SET_CHOICES:\r\n      nextState = Object.assign({}, state);\r\n      nextState.choices = action.choices;\r\n      nextState.textWasUpdated = true;\r\n      return nextState;\r\n    case RESET_TEXT_UPDATE:\r\n      nextState = Object.assign({}, state);\r\n      nextState.textWasUpdated = false;\r\n      return nextState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default textReducer;","// Webpack loads JSON files by default - parses as JavaScript objects\r\nimport ChoicesJSON from '../storyModules/module01CHOICES.json';\r\nimport TextJSON from '../storyModules/module01TEXT.json';\r\n\r\nimport constants from '../globals/constants';\r\n\r\nexport default class TextManager {\r\n\r\n  // This method loads JSON story data and returns an object\r\n  // structured like this:\r\n  // {\r\n  //   textData: data,\r\n  //   linkNodesData: data,\r\n  //   choicesData: data\r\n  // }\r\n  static loadModule(moduleNumber) {\r\n    console.log('%c Loading story module ' + moduleNumber + '... ', 'color:white; background:orange;');\r\n\r\n    if (moduleNumber === constants.MODULE_INCIDENT) {\r\n      return this.loadJSON(TextJSON, ChoicesJSON);\r\n    } else {\r\n      console.log('%c Error: Invalid story module. ', 'color:white; background:red;');\r\n      return {};\r\n    }\r\n  }\r\n\r\n  // Use this method to asynchronously load the JSON story data.\r\n  // It returns a promise, so it can be chained with .then() or .catch().\r\n  static loadModuleAsync(moduleNumber) {\r\n    console.log('%c Loading story module ' + moduleNumber + '... ', 'color:white; background:orange;');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (moduleNumber === constants.MODULE_INCIDENT) {\r\n        const data = this.loadJSON(TextJSON, ChoicesJSON);\r\n                \r\n        if(data) {\r\n          console.log('%c Successfully loaded story module ' + moduleNumber + '. ', 'color:white; background:green;');\r\n          resolve(data);\r\n        } else {\r\n          console.log('%c Error: Failed to load story module. ', 'color:white; background:red;');\r\n          reject({error: 'Failed to load story module'});\r\n        }        \r\n\r\n      } else {\r\n        console.log('%c Error: Invalid story module. ', 'color:white; background:red;');\r\n        reject({error: 'Invalid story module'});\r\n      }\r\n    });\r\n  }\r\n\r\n  // This method is used to structure and return the JSON story data.\r\n  // It sets the data keys (such as AA000AA000AA) to be keys in the objects.\r\n  // Don't use this method directly. Use either loadModule() or loadModuleAsync().\r\n  // (Create React App is not currently configured to support private methods).\r\n  static loadJSON(moduleText, moduleChoices, moduleLinkNodes) {\r\n    let data = {\r\n        textData: {},\r\n        linkNodesData: {},\r\n        choicesData: {}\r\n      }\r\n\r\n    for (const i in moduleText) {\r\n      data.textData[moduleText[i].KEY] = moduleText[i].TEXT;\r\n    }\r\n\r\n    for (const j in moduleChoices) {\r\n      data.choicesData[moduleChoices[j].KEY] = moduleChoices[j];\r\n    }\r\n\r\n    for (const k in moduleLinkNodes) {\r\n      data.linkNodesData[moduleLinkNodes[k].KEY] = moduleLinkNodes[k];\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","import TextManager from '../mechanics/TextManager';\r\n\r\nexport const SET_TEXT_DATA = 'SET_TEXT_DATA';\r\nexport const SET_LINK_NODES_DATA = 'SET_LINK_NODES_DATA';\r\nexport const SET_CHOICES_DATA = 'SET_CHOICES_DATA';\r\nexport const SET_ALL_DATA = 'SET_ALL_DATA';\r\nexport const SET_LOADING = 'SET_LOADING';\r\n\r\nexport const setTextData = data => ({\r\n  type: SET_TEXT_DATA,\r\n  data,\r\n});\r\n\r\nexport const setLinkNodesData = data => ({\r\n  type: SET_LINK_NODES_DATA,\r\n  data,\r\n});\r\n\r\nexport const setChoicesData = data => ({\r\n  type: SET_CHOICES_DATA,\r\n  data,\r\n});\r\n\r\nexport const setAllData = (textData, linkNodesData, choicesData) => ({\r\n  type: SET_ALL_DATA,\r\n  textData,\r\n  linkNodesData,\r\n  choicesData,\r\n});\r\n\r\nexport const setLoading = loading => ({\r\n  type: SET_LOADING,\r\n  loading,\r\n});\r\n\r\nexport const loadModuleData = moduleNumber => dispatch => (\r\n  TextManager.loadModuleAsync(moduleNumber).then(data => (\r\n    dispatch(setAllData(data.textData, data.linkNodesData, data.choicesData))\r\n  ))\r\n);\r\n","import {\r\n  SET_TEXT_DATA,\r\n  SET_LINK_NODES_DATA,\r\n  SET_CHOICES_DATA,\r\n  SET_ALL_DATA,\r\n  SET_LOADING\r\n} from '../actions/dataActions';\r\n\r\nconst initialState = {\r\n  textData: {},\r\n  linkNodesData: {},\r\n  choicesData: {},\r\n  loading: false\r\n}\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  let nextState;\r\n  Object.freeze(state);\r\n\r\n  switch (action.type) {\r\n    case SET_TEXT_DATA:\r\n      nextState = Object.assign({}, state);\r\n      nextState.textData = action.data;\r\n      return nextState;\r\n    case SET_LINK_NODES_DATA:\r\n      nextState = Object.assign({}, state);\r\n      nextState.linkNodesData = action.data;\r\n      return nextState;\r\n    case SET_CHOICES_DATA:\r\n      nextState = Object.assign({}, state);\r\n      nextState.choicesData = action.data;\r\n      return nextState;\r\n    case SET_ALL_DATA:\r\n      nextState = Object.assign({}, state);\r\n      nextState.textData = action.textData;\r\n      nextState.linkNodesData = action.linkNodesData;\r\n      nextState.choicesData = action.choicesData;\r\n      nextState.loading = false;\r\n      return nextState;\r\n    case SET_LOADING:\r\n      nextState = Object.assign({}, state);\r\n      nextState.loading = action.loading;\r\n      return nextState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default dataReducer;","import { combineReducers } from 'redux';\r\n\r\nimport gameLogReducer from './gameLogReducer.js';\r\nimport variablesReducer from './variablesReducer.js';\r\nimport textReducer from './textReducer.js';\r\nimport dataReducer from './dataReducer.js';\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameLogReducer,\r\n  variables: variablesReducer,\r\n  text: textReducer,\r\n  data: dataReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\nconst configureStore = (preloadedState = {}) => {\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeWithDevTools(applyMiddleware(thunk, logger))\r\n    );\r\n\r\n  store.subscribe(() => {\r\n    let state = store.getState();\r\n    \r\n    // Don't put loaded JSON data in browser storage\r\n    let modifiedState = {\r\n      ...state,\r\n      data: {\r\n        textData: {},\r\n        choicesData: {},\r\n        linkNodesData: {}\r\n      }\r\n    }\r\n    \r\n    localStorage.state = JSON.stringify(modifiedState);\r\n  });\r\n  return store;\r\n}\r\n\r\nexport default configureStore;","import constants from \"../globals/constants\";\r\n\r\nexport function checkIfGameOver(currentNodeKey) {\r\n  return (\r\n    currentNodeKey === constants.FAIL_KEY ||\r\n    currentNodeKey === constants.END_KEY\r\n  );\r\n}\r\n\r\nexport function checkIfGameEnded(currentNodeKey) {\r\n  if (currentNodeKey === constants.END_KEY) {\r\n    if (localStorage.getItem(\"LEADERBOARDDATA\")) {\r\n      JSON.parse(localStorage.getItem(\"LEADERBOARDDATA\")).push({\r\n        name: localStorage.getItem(\"LOGINDATA\"),\r\n        Score: localStorage.getItem(\"start_second\"),\r\n      });\r\n    } else {\r\n      localStorage.setItem(\r\n        \"LEADERBOARDDATA\",\r\n        JSON.stringify([\r\n          {\r\n            name: localStorage.getItem(\"LOGINDATA\"),\r\n            score: localStorage.getItem(\"start_second\"),\r\n          },\r\n        ])\r\n      );\r\n    }\r\n  }\r\n  return currentNodeKey === constants.END_KEY;\r\n}\r\n\r\nexport function checkIfGameFail(currentNodeKey) {\r\n  return currentNodeKey === constants.FAIL_KEY;\r\n}\r\n","import { setText, setChoices } from \"../actions/textActions\";\r\nimport { addToLog, setCurrentNodeKey } from \"../actions/gameLogActions\";\r\nimport { setVariables } from \"../actions/variablesActions\";\r\nimport { checkIfGameOver, checkIfGameFail, checkIfGameEnded } from \"./helpers\";\r\n\r\n// Import Redux store from index.js where it is created.\r\n// Store can be accessed with .getState() and can .dispatch() actions.\r\nimport { store } from \"../index\";\r\n\r\nimport constants from \"../globals/constants\";\r\n\r\nexport default class GameManager {\r\n  // Check if the JSON data for a module has been loaded into the\r\n  // Redux store - return true or false.\r\n  static checkIfModuleLoaded(moduleName) {\r\n    let startingKey = \"\";\r\n\r\n    if (moduleName === constants.MODULE_INCIDENT) {\r\n      startingKey = constants.INCIDENT_STARTING_KEY;\r\n    }\r\n\r\n    return startingKey in store.getState().data.textData;\r\n  }\r\n\r\n  // Call this method to load text and choices into the Redux store based\r\n  // on the current node key.\r\n  static loadGame() {\r\n    this.loadText();\r\n    this.loadChoices();\r\n  }\r\n\r\n  // This method loads text from the JSON text data into the Redux store\r\n  // based on the current node key.\r\n  static loadText() {\r\n    const key = store.getState().game.currentNodeKey;\r\n    let text = \"\";\r\n\r\n    if (checkIfGameFail(key)) {\r\n      text = constants.FAIL_TEXT;\r\n    } else if (checkIfGameEnded(key)) {\r\n      text = constants.END_TEXT;\r\n    } else {\r\n      text = store.getState().data.textData[key];\r\n      text = text.split(constants.LINE_BREAK_SEPARATOR);\r\n    }\r\n\r\n    store.dispatch(setText(text));\r\n  }\r\n\r\n  // This method loads choices from the JSON choices data into the Redux\r\n  // store based on the current node key.\r\n  static loadChoices() {\r\n    let stringTest;\r\n    let choices = [];\r\n\r\n    const currentNodeKey = store.getState().game.currentNodeKey;\r\n\r\n    if (checkIfGameFail(currentNodeKey)) {\r\n      choices.push({\r\n        key: constants.FAIL_KEY,\r\n        text: constants.END_CHOICE,\r\n        colorClass: \"color-choice\",\r\n      });\r\n    } else if (checkIfGameEnded(currentNodeKey)) {\r\n      choices.push({\r\n        key: constants.END_KEY,\r\n        text: constants.END_CHOICE,\r\n        colorClass: \"color-choice\",\r\n      });\r\n    } else {\r\n      const choicesData = store.getState().data.choicesData;\r\n\r\n      // TODO: Redesign to not have to search through all data\r\n      for (const i in choicesData) {\r\n        stringTest = choicesData[i].KEY;\r\n\r\n        if (stringTest.substring(0, 12) === currentNodeKey) {\r\n          if (this.checkChoice(i)) {\r\n            const choiceData = choicesData[i];\r\n\r\n            let choice = {\r\n              key: choiceData.KEY,\r\n              text: choiceData.text,\r\n            };\r\n\r\n            choices.push(choice);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    store.dispatch(setChoices(choices));\r\n  }\r\n\r\n  static checkChoice(choiceKey) {\r\n    const choice = store.getState().data.choicesData[choiceKey];\r\n    // Is this choice available to the player based on their past decisions?\r\n    if (choice.additionalVariableCostA_Key) {\r\n      const condition1 = this.checkPlayerVariables(\r\n        choice.additionalVariableCostA_Key,\r\n        choice.additionalVariableCostA_Equivalence,\r\n        choice.additionalVariableCostA_Value\r\n      );\r\n\r\n      if (choice.additionalVariableCostB_Key) {\r\n        // There are two additional variable costs\r\n\r\n        const condition2 = this.checkPlayerVariables(\r\n          choice.additionalVariableCostB_Key,\r\n          choice.additionalVariableCostB_Equivalence,\r\n          choice.additionalVariableCostB_Value\r\n        );\r\n\r\n        if (choice.additionalVariableCost_Operator === \"&&\") {\r\n          if (condition1 && condition2) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        } else if (choice.additionalVariableCost_Operator === \"||\") {\r\n          if (condition1 || condition2) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          // Then there's an error\r\n          return false;\r\n        }\r\n      } else {\r\n        // There's only one additional variable cost\r\n        if (condition1) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    } else {\r\n      // There are no costs for this choice, so return true\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // This method checks for additional variables in the playerVariables object.\r\n  // It checks on the player's past decisions based on a reference (the variable cost key),\r\n  // the equivalence (logical operator), and value to be checked for. It then\r\n  // returns a boolean (true or false) result.\r\n  static checkPlayerVariables(reference, equivalence, value) {\r\n    const playerVariables = store.getState().variables.playerVariables;\r\n    const defaultValue = 0;\r\n\r\n    // Search for reference and value pair in playerVariables object.\r\n    // If found, checks for whether it's >, <, etc. to the value provided.\r\n    // If it doesn't pass the test to the value, or if not found, it returns false.\r\n\r\n    // Empty string, null, undefined, and 0 are all falsy\r\n    if (!equivalence) {\r\n      // Just search for whether the additional variable is present - value doesn't matter\r\n      return reference in playerVariables;\r\n    } else if (equivalence === \"=\") {\r\n      // Check for presence of variable and value\r\n      return playerVariables[reference] === value;\r\n    } else if (equivalence === \"!=\" && !value) {\r\n      // Checks if the additional variable is present at all and returns false if present, true if not\r\n      // - opposite of first check in this series. e.g. if !(01JennethDead), then returns true.\r\n      return !(reference in playerVariables);\r\n    } else if (equivalence === \"!=\" && value) {\r\n      if (\r\n        reference in playerVariables &&\r\n        playerVariables[reference] !== value\r\n      ) {\r\n        return true;\r\n      } else if (value !== defaultValue) {\r\n        // Variable not found, so assume default value (0)\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else if (equivalence === \"<\") {\r\n      if (reference in playerVariables && playerVariables[reference] < value) {\r\n        return true;\r\n      } else if (value < defaultValue) {\r\n        // Variable not found, so assume default value (0)\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else if (equivalence === \"<=\") {\r\n      if (reference in playerVariables && playerVariables[reference] <= value) {\r\n        return true;\r\n      } else if (value <= defaultValue) {\r\n        // Variable not found, so assume default value (0)\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else if (equivalence === \">\") {\r\n      if (reference in playerVariables && playerVariables[reference] > value) {\r\n        return true;\r\n      } else if (value > defaultValue) {\r\n        // Variable not found, so assume default value (0)\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else if (equivalence === \">=\") {\r\n      if (reference in playerVariables && playerVariables[reference] >= value) {\r\n        return true;\r\n      } else if (value >= defaultValue) {\r\n        // Variable not found, so assume default value (0)\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      // In case anything goes wrong, defaults to returning false\r\n      console.log(\r\n        \"%c checkPlayerVariables() error \",\r\n        \"color:white; background:red;\"\r\n      );\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Write story node decision to gameLog.\r\n  // Dispatch action using Redux.\r\n  static writeToGameLog(textNodeKey, choiceNodeKey) {\r\n    store.dispatch(addToLog(textNodeKey, choiceNodeKey));\r\n  }\r\n\r\n  static makeDecision(choiceNodeKey) {\r\n    const currentNodeKey = store.getState().game.currentNodeKey;\r\n    this.writeToGameLog(currentNodeKey, choiceNodeKey);\r\n\r\n    const choice = store.getState().data.choicesData[choiceNodeKey];\r\n\r\n    // ------------------Randomize destinations------------------\r\n    let dieRollDestinationA;\r\n    let dieRollDestinationB;\r\n    let dieRollDestinationC;\r\n    let dieRollDestinationD;\r\n\r\n    // Empty string, null, undefined, and 0 are all falsy.\r\n    if (!choice.destinationA_percentage) {\r\n      // There's only one destination, go to destinationA.\r\n      this.loadStoryNode(choice.destinationA);\r\n    } else if (!choice.destinationC_percentage) {\r\n      // There's no third destination, so it's between destinationA and destinationB.\r\n      // Can't just check second destination percentage, because there may or may not be a third.\r\n      dieRollDestinationA = this.rollDie() * choice.destinationA_percentage;\r\n      dieRollDestinationB = this.rollDie() * choice.destinationB_percentage;\r\n\r\n      if (dieRollDestinationA > dieRollDestinationB) {\r\n        // go to destinationA\r\n        this.loadStoryNode(choice.destinationA);\r\n      } else {\r\n        // go to destinationB\r\n        this.loadStoryNode(choice.destinationB);\r\n      }\r\n    } else if (!choice.destinationD_percentage) {\r\n      // There's no fourth destination, so it's between destinationA, destinationB, and destinationC\r\n      dieRollDestinationA = this.rollDie() * choice.destinationA_percentage;\r\n      dieRollDestinationB = this.rollDie() * choice.destinationB_percentage;\r\n      dieRollDestinationC = this.rollDie() * choice.destinationC_percentage;\r\n\r\n      if (\r\n        dieRollDestinationA > dieRollDestinationB &&\r\n        dieRollDestinationA > dieRollDestinationC\r\n      ) {\r\n        // go to destinationA\r\n        this.loadStoryNode(choice.destinationA);\r\n      } else if (dieRollDestinationB > dieRollDestinationC) {\r\n        // go to destinationB\r\n\r\n        this.loadStoryNode(choice.destinationB);\r\n      } else {\r\n        // go to destinationC\r\n        this.loadStoryNode(choice.destinationC);\r\n      }\r\n    } else {\r\n      // There are four destinations\r\n      dieRollDestinationA = this.rollDie() * choice.destinationA_percentage;\r\n      dieRollDestinationB = this.rollDie() * choice.destinationB_percentage;\r\n      dieRollDestinationC = this.rollDie() * choice.destinationC_percentage;\r\n      dieRollDestinationD = this.rollDie() * choice.destinationD_percentage;\r\n\r\n      if (\r\n        dieRollDestinationA > dieRollDestinationB &&\r\n        dieRollDestinationA > dieRollDestinationC &&\r\n        dieRollDestinationA > dieRollDestinationD\r\n      ) {\r\n        // go to destinationA\r\n        this.loadStoryNode(choice.destinationA);\r\n      } else if (\r\n        dieRollDestinationB > dieRollDestinationC &&\r\n        dieRollDestinationB > dieRollDestinationD\r\n      ) {\r\n        // go to destinationB\r\n        this.loadStoryNode(choice.destinationB);\r\n      } else if (dieRollDestinationC > dieRollDestinationD) {\r\n        // go to destinationC\r\n        this.loadStoryNode(choice.destinationC);\r\n      } else {\r\n        // go to destinationD\r\n        this.loadStoryNode(choice.destinationD);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to generate random number between 1-100\r\n  static rollDie() {\r\n    return Math.floor(Math.random() * 100) + 1;\r\n  }\r\n\r\n  // Write player variables to object in Redux store.\r\n  // These additional variables keep track of specific player decisions\r\n  // that can be evaluated later in the story.\r\n  // Expects to receive variables as an array of objects (can be only one object):\r\n  // [\r\n  //   {\r\n  //     key: additionalVariableBoostA_Key,\r\n  //     value: additionalVariableBoostA_Value\r\n  //   },\r\n  //   {\r\n  //     key: additionalVariableBoostB_Key,\r\n  //     value: additionalVariableBoostB_Value\r\n  //   }\r\n  // ]\r\n  static writeToPlayerVariables(variablesArray) {\r\n    // Get current playerVariables from the Redux store and copy it (since it is read only).\r\n    const playerVariables = Object.assign(\r\n      {},\r\n      store.getState().variables.playerVariables\r\n    );\r\n\r\n    variablesArray.forEach((variable) => {\r\n      // Check if the variable already exists in playerVariables.\r\n      // If it does, update it.\r\n      if (variable.key in playerVariables) {\r\n        const original = playerVariables[variable.key];\r\n        playerVariables[variable.key] = original + variable.value;\r\n      } else {\r\n        // If variable doesn't exist, add it to playerVariables.\r\n        playerVariables[variable.key] = variable.value;\r\n      }\r\n    });\r\n\r\n    // Dispatch updated playerVariables object to Redux store.\r\n    // Object should retain same structure in which it was received.\r\n    store.dispatch(setVariables(playerVariables));\r\n  }\r\n\r\n  // Load the next story node based on the destination key sent as an argument.\r\n  static loadStoryNode(destination) {\r\n    // Check for either fail or game end conditions.\r\n    if (checkIfGameOver(destination)) {\r\n      this.updateCurrentNode(destination);\r\n    } else {\r\n      // Link node keys are prefixed with an X, so check for it here.\r\n      // If it's not a link node, it's a normal node, so just set it as the new current node.\r\n      if (!this.checkKeyForLinkNode(destination)) {\r\n        this.updateCurrentNode(destination);\r\n      } else {\r\n        // Link node logic - loop through as many link nodes as necessary.\r\n        // Link nodes are used to test for past decisions through the playerVariables object.\r\n        let newDestination = this.processLinkNode(destination);\r\n\r\n        while (this.checkKeyForLinkNode(newDestination)) {\r\n          newDestination = this.processLinkNode(newDestination);\r\n        }\r\n\r\n        this.updateCurrentNode(newDestination);\r\n      }\r\n    }\r\n\r\n    this.loadGame();\r\n  }\r\n\r\n  // Link node keys are prefixed with an X, so check for it here.\r\n  static checkKeyForLinkNode(nodeKey) {\r\n    return nodeKey.substring(0, 1) === constants.LINK_NODE_PREFIX;\r\n  }\r\n\r\n  // Dispatch an action to update the currentNodeKey in the Redux store.\r\n  static updateCurrentNode(destination) {\r\n    store.dispatch(setCurrentNodeKey(destination));\r\n  }\r\n\r\n  // This method is used to examine a link node and determine how to proceed based\r\n  // on whether or not the player has met certain conditions based on past decisions.\r\n  // The method loads all link nodes that match the given destination key, then checks\r\n  // the requirements of each link node based on the playerVariables object in the\r\n  // Redux store. The method returns a new destination (which may be another link node).\r\n  static processLinkNode(destination) {\r\n    let loadedLinkNodes = [];\r\n    let stringTest;\r\n    let test1 = false;\r\n    let test2 = false;\r\n    let test3 = false;\r\n\r\n    // Load the link nodes matching the key pattern into an array.\r\n    // There can be multiple link nodes for a particular key in order to create\r\n    // complex condition chains, such as: IF 01MarryJeneth, go to destination 1,\r\n    // ELSE, go to destination 2. Keys in the same pattern match:\r\n    // XAA001AJ001BD01, XAA001AJ001BD02 - They are the same except for the last\r\n    // two digits, so test for the same first twelve characters.\r\n    const linkNodesData = store.getState().data.linkNodesData;\r\n\r\n    // TODO: Redesign to not have to search through all data\r\n    for (const i in linkNodesData) {\r\n      stringTest = linkNodesData[i].KEY;\r\n      if (stringTest.substring(0, 13) === destination) {\r\n        loadedLinkNodes.push(linkNodesData[i]);\r\n      }\r\n    }\r\n\r\n    // TODO: Review logic\r\n    // In this loop, we check for past decisions (playerVariables) based on\r\n    // requirements in the link node. This can't be a forEach because we need\r\n    // to be able to terminate early and return a destination.\r\n    for (let i = 0; i < loadedLinkNodes.length; i++) {\r\n      const linkNode = loadedLinkNodes[i];\r\n\r\n      if (linkNode.variable1 !== \"ELSE\") {\r\n        // Empty string, null, undefined, and 0 are all falsy.\r\n        if (!linkNode.variable2) {\r\n          // If there's not second variable, then just check for variable1\r\n          if (\r\n            this.checkPlayerVariables(\r\n              linkNode.variable1,\r\n              linkNode.equivalence1,\r\n              linkNode.value1\r\n            )\r\n          ) {\r\n            test1 = true;\r\n          }\r\n        } else if (!linkNode.variable3) {\r\n          // If there's no third variable, then check for variable1 and variable2\r\n          if (\r\n            this.checkPlayerVariables(\r\n              linkNode.variable1,\r\n              linkNode.equivalence1,\r\n              linkNode.value1\r\n            )\r\n          ) {\r\n            test1 = true;\r\n          }\r\n\r\n          if (\r\n            this.checkPlayerVariables(\r\n              linkNode.variable2,\r\n              linkNode.equivalence2,\r\n              linkNode.value2\r\n            )\r\n          ) {\r\n            test2 = true;\r\n          }\r\n        } else {\r\n          // Check for variable1, variable2, and variable3\r\n          if (\r\n            this.checkPlayerVariables(\r\n              linkNode.variable1,\r\n              linkNode.equivalence1,\r\n              linkNode.value1\r\n            )\r\n          ) {\r\n            test1 = true;\r\n          }\r\n\r\n          if (\r\n            this.checkPlayerVariables(\r\n              linkNode.variable2,\r\n              linkNode.equivalence2,\r\n              linkNode.value2\r\n            )\r\n          ) {\r\n            test2 = true;\r\n          }\r\n\r\n          if (\r\n            this.checkPlayerVariables(\r\n              linkNode.variable3,\r\n              linkNode.equivalence3,\r\n              linkNode.value3\r\n            )\r\n          ) {\r\n            test3 = true;\r\n          }\r\n        }\r\n        // -------------------------------------------------------------------------\r\n        // Test the individual variables in combination\r\n        // -------------------------------------------------------------------------\r\n        // Empty string, null, undefined, and 0 are all falsy.\r\n        if (!linkNode.operator1) {\r\n          // If there are no logical operators like && or ||, then this is a single test.\r\n          if (test1) {\r\n            // Go to destination\r\n            return this.getRandomLinkNodeDestination(linkNode);\r\n          }\r\n        } else if (linkNode.operator1 === \"&&\" && !linkNode.operator2) {\r\n          if (test1 && test2) {\r\n            return this.getRandomLinkNodeDestination(linkNode);\r\n          }\r\n        } else if (linkNode.operator1 === \"||\" && !linkNode.operator2) {\r\n          if (test1 || test2) {\r\n            return this.getRandomLinkNodeDestination(linkNode);\r\n          }\r\n        } else if (linkNode.operator1 === \"&&\" && linkNode.operator2 === \"&&\") {\r\n          if (test1 && test2 && test3) {\r\n            return this.getRandomLinkNodeDestination(linkNode);\r\n          }\r\n        } else if (linkNode.operator1 === \"||\" && linkNode.operator2 === \"&&\") {\r\n          if ((test1 || test2) && test3) {\r\n            return this.getRandomLinkNodeDestination(linkNode);\r\n          }\r\n        } else if (linkNode.operator1 === \"&&\" && linkNode.operator2 === \"||\") {\r\n          if ((test1 && test2) || test3) {\r\n            return this.getRandomLinkNodeDestination(linkNode);\r\n          }\r\n        } else if (linkNode.operator1 === \"||\" && linkNode.operator2 === \"||\") {\r\n          if (test1 || test2 || test3) {\r\n            return this.getRandomLinkNodeDestination(linkNode);\r\n          }\r\n        }\r\n      } else {\r\n        // variable1 is ELSE and just go to destination.\r\n        return this.getRandomLinkNodeDestination(linkNode);\r\n      }\r\n    }\r\n    // If nothing is found, an error has occurred.\r\n    console.log(\"%c processLinkNode() error\", \"color:white; background:red;\");\r\n    return null;\r\n  }\r\n\r\n  // Return a destination based on the link node's percentages.\r\n  static getRandomLinkNodeDestination(linkNode) {\r\n    let dieRollA;\r\n    let dieRollB;\r\n    let dieRollC;\r\n    let dieRollD;\r\n\r\n    // Empty string '', null, undefined, and 0 are all falsy.\r\n    if (!linkNode.destinationA_percentage) {\r\n      // There's only one destination, so go to destinationA.\r\n      return linkNode.destinationA;\r\n    } else if (!linkNode.destinationC_percentage) {\r\n      // There's no third destination, so it's between destinationA and destinationB\r\n      dieRollA = this.rollDie() * linkNode.destinationA_percentage;\r\n      dieRollB = this.rollDie() * linkNode.destinationB_percentage;\r\n\r\n      if (dieRollA > dieRollB) {\r\n        return linkNode.destinationA;\r\n      } else {\r\n        return linkNode.destinationB;\r\n      }\r\n    } else if (!linkNode.destinationD_percentage) {\r\n      // There's no fourth destination, so it's between destinationA, destinationB, and destinationC\r\n      dieRollA = this.rollDie() * linkNode.destinationA_percentage;\r\n      dieRollB = this.rollDie() * linkNode.destinationB_percentage;\r\n      dieRollC = this.rollDie() * linkNode.destinationC_percentage;\r\n\r\n      if (dieRollA > dieRollB && dieRollA > dieRollC) {\r\n        return linkNode.destinationA;\r\n      } else if (dieRollB > dieRollC) {\r\n        return linkNode.destinationB;\r\n      } else {\r\n        return linkNode.destinationC;\r\n      }\r\n    } else {\r\n      // There are four destinations\r\n      dieRollA = this.rollDie() * linkNode.destinationA_percentage;\r\n      dieRollB = this.rollDie() * linkNode.destinationB_percentage;\r\n      dieRollC = this.rollDie() * linkNode.destinationC_percentage;\r\n      dieRollD = this.rollDie() * linkNode.destinationD_percentage;\r\n\r\n      if (dieRollA > dieRollB && dieRollA > dieRollC && dieRollA > dieRollD) {\r\n        return linkNode.destinationA;\r\n      } else if (dieRollB > dieRollC && dieRollB > dieRollD) {\r\n        return linkNode.destinationB;\r\n      } else if (dieRollC > dieRollD) {\r\n        return linkNode.destinationC;\r\n      } else {\r\n        return linkNode.destinationD;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { Navbar, Container, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class GameNavBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      seconds: localStorage.getItem(\"start_second\")?parseInt(localStorage.getItem(\"start_second\")) : 0\r\n    };\r\n  }\r\n  tick() {\r\n    this.setState(state => ({\r\n      seconds: state.seconds + 1\r\n    }));\r\n    localStorage.setItem(\"start_second\",this.state.seconds)\r\n  }\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Navbar expand=\"lg\" variant=\"dark\">\r\n        <Container className=\"game-nav-container\">\r\n          <Link to=\"/\" className=\"navbar-brand\">Incident response</Link>\r\n          <h1>{this.state.seconds}</h1>\r\n          <Nav>\r\n            <Link to=\"/\">Menu</Link>\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport class GameText extends React.Component {\r\n  render() {\r\n    const { text } = this.props;\r\n    let displayText = (<p>{text}</p>);\r\n\r\n    if (Array.isArray(text)) {\r\n        displayText = text.map((paragraph, i) => (\r\n          <p style={{color:\"white\"}} key={i}>{paragraph}</p>\r\n        )\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <div className=\"game-text\">\r\n        {displayText}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GameManager from '../../mechanics/GameManager';\r\nimport constants from '../../globals/constants';\r\nimport { checkIfGameOver } from '../../mechanics/helpers';\r\n\r\nexport class GameChoiceItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.makeDecision = this.makeDecision.bind(this);\r\n  }\r\n\r\n  makeDecision(e) {\r\n    e.preventDefault();\r\n    const { choice } = this.props;\r\n\r\n    GameManager.makeDecision(choice.key);\r\n  }\r\n\r\n  render() {\r\n    const { choice } = this.props;\r\n    const cssClasses = `game-choice-item ${choice.colorClass}`;\r\n    const gameOver = checkIfGameOver(choice.key);\r\n\r\n    return (\r\n      <p>\r\n        {!gameOver && <a href=\"/#\" className={ cssClasses } onClick={ this.makeDecision }>\r\n          { choice.text || constants.CONTINUE_TEXT }\r\n        </a>}\r\n        {gameOver && <Link className=\"game-choice-item color-choice\" to=\"/\">{constants.END_CHOICE}</Link>}\r\n      </p>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nimport { GameChoiceItem } from './GameChoiceItem';\r\n\r\nexport class GameChoicesList extends React.Component {\r\n  render() {\r\n    const { choices } = this.props;\r\n    \r\n    const gameChoiceItems = choices.map((choice, i) => (\r\n        <GameChoiceItem\r\n          key={i}\r\n          choice={choice}\r\n        />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <div className=\"game-choices-list\">\r\n        <p className=\"game-choices-info\">\r\n          { choices.length > 1 ? 'Make your decision' : 'Click below to proceed:' }\r\n        </p>\r\n        {gameChoiceItems}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport constants from '../../globals/constants';\r\nimport GameManager from '../../mechanics/GameManager';\r\n\r\nimport { GameNavBar } from './GameNavBar';\r\nimport { GameText } from './GameText';\r\nimport { GameChoicesList } from './GameChoicesList';\r\n\r\nexport class GamePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dispatchSent: false\r\n    };\r\n\r\n    this.checkIfModuleLoaded = this.checkIfModuleLoaded.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.checkIfModuleLoaded()) {    \r\n      GameManager.loadGame();\r\n    }\r\n  }\r\n\r\n  // Check if text data is loaded in Redux store\r\n  checkIfModuleLoaded() {\r\n    return (GameManager.checkIfModuleLoaded(constants.MODULE_INCIDENT));\r\n  }\r\n\r\n  render() {\r\n    const { text,choices, textWasUpdated, resetTextUpdate } = this.props;\r\n\r\n    // Add and then remove fade-in CSS class when text was updated\r\n    // This allows text to fade in once a decision is made.\r\n    // A timer is used to reset the textWasUpdated variable in the Redux store\r\n    // so that the fade-in effect can be used again the next time the text changes.\r\n    // The dispatchSent property is used in the component state so the render function\r\n    // doesn't keep sending resetTextUpdate() dispatches to Redux.\r\n    const faderClass = textWasUpdated ? 'game-text-container fade-in' : 'game-text-container';\r\n\r\n    if (textWasUpdated && !this.state.dispatchSent) {\r\n      this.setState({dispatchSent: true});\r\n\r\n      setTimeout(() => {\r\n        resetTextUpdate();\r\n        this.setState({dispatchSent: false});\r\n      }, 1000)\r\n    }\r\n\r\n    // If module isn't loaded, redirect to menu screen\r\n    if (!this.checkIfModuleLoaded()) {\r\n      return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n      <div className=\"game-page\">\r\n        <GameNavBar />\r\n        <div className=\"d-flex justify-content-center\">\r\n          <div className={faderClass}>\r\n            <GameText text={text} />\r\n            <GameChoicesList choices={choices} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport { GamePage } from './GamePage';\r\n\r\n// Actions\r\nimport { resetTextUpdate } from '../../actions/textActions';\r\n\r\nconst mapStateToProps = state => ({\r\n  text: state.text.text,\r\n  choices: state.text.choices,\r\n  textWasUpdated: state.text.textWasUpdated\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  resetTextUpdate: () => dispatch(resetTextUpdate())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GamePage);\r\n","import React from 'react';\r\n\r\nimport { Spinner } from 'react-bootstrap';\r\nimport GamePageContainer from './GamePageContainer';\r\n\r\nexport class GameLoading extends React.Component {\r\n  render() {\r\n    const { loading } = this.props;\r\n\r\n    if (loading) {\r\n      return (\r\n        <div className=\"loading\">\r\n          <Spinner animation=\"border\" variant=\"light\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      )\r\n    }\r\n    else {  \r\n      return (\r\n        <GamePageContainer />\r\n      );\r\n    }\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport { GameLoading } from './GameLoading';\r\n\r\nconst mapStateToProps = state => ({\r\n  loading: state.data.loading,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(GameLoading);\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport constants from '../../globals/constants';\r\nimport GameManager from '../../mechanics/GameManager';\r\nimport { checkIfGameOver } from '../../mechanics/helpers';\r\n\r\nexport class MenuList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.startNewGame = this.startNewGame.bind(this);\r\n    this.loadData = this.loadData.bind(this);\r\n  }\r\n\r\n  startNewGame() {    \r\n    const {\r\n      startGame,\r\n      resetTextChoices,\r\n      resetVariables,\r\n    } = this.props;\r\n    localStorage.setItem('start_second',0);\r\n\r\n    // Dispatch Redux actions\r\n    startGame();\r\n    resetTextChoices();\r\n    resetVariables();\r\n   \r\n    \r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    const {\r\n      loadModuleData,\r\n      setLoading\r\n    } = this.props;\r\n\r\n    // Check if text data is already loaded - only load if it's not\r\n    if (!(GameManager.checkIfModuleLoaded(constants.MODULE_INCIDENT))) {\r\n      // Set loading flag for GameLoadingContainer\r\n      setLoading(true);\r\n      // Dispatch Redux action to load text data\r\n      loadModuleData(constants.MODULE_INCIDENT);\r\n    }\r\n  }\r\n\r\n  // Starting a new game should load everything from a default state (using\r\n  // the startNewGame function). Resuming a game shouldn't need to load anything,\r\n  // unless the state has been loaded from browser storage (after a hard page\r\n  // refresh, or going to the page again after closing it). The text data is\r\n  // too large to keep in browser storage, so it must be loaded again. \r\n  render() {\r\n    const { gameStarted, currentNodeKey } = this.props;\r\n    const gameOver = (checkIfGameOver(currentNodeKey));\r\n\r\n    return (\r\n      <div className=\"menu-list\">\r\n        <h3><Link to=\"/game\" onClick={ this.startNewGame }>New Game</Link></h3>\r\n        {gameStarted && !gameOver &&\r\n        <h3><Link to=\"/game\" onClick={ this.loadData }>Resume Game</Link></h3>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport { MenuList } from './MenuList';\r\n\r\n// Actions\r\nimport { startGame } from '../../actions/gameLogActions';\r\nimport { resetTextChoices } from '../../actions/textActions';\r\nimport { resetVariables } from '../../actions/variablesActions';\r\nimport { loadModuleData, setLoading } from '../../actions/dataActions';\r\n\r\nconst mapStateToProps = state => ({\r\n  gameStarted: state.game.gameStarted,\r\n  currentNodeKey: state.game.currentNodeKey,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  startGame: () => dispatch(startGame()),\r\n  resetTextChoices: () => dispatch(resetTextChoices()),\r\n  resetVariables: () => dispatch(resetVariables()),\r\n  loadModuleData: moduleNumber => dispatch(loadModuleData(moduleNumber)),\r\n  setLoading: loading => dispatch(setLoading(loading)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MenuList);","import React from 'react';\r\n\r\nimport MenuListContainer from './MenuListContainer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class MenuPage extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      redirect: false,\r\n    };\r\n  }\r\n  componentDidMount(){\r\n  if(localStorage.getItem(\"LOGINDATA\"))\r\n  {\r\n    this.setState({\"name\":localStorage.getItem(\"LOGINDATA\")})\r\n  } \r\n  else{\r\n    this.setState({redirect:true})\r\n  } \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"menu-page fade-in\">\r\n        {this.state.redirect?<Redirect to=\"/login\" />:null}\r\n        <h1 className=\"menu-tagline\" style={{color:\"white\"}}>{`WelCome ${this.state.name?this.state.name.split('@')[0]:\"\"}`}</h1>\r\n        <h1 className=\"menu-title\">Security Awareness</h1>\r\n        <h4 className=\"menu-tagline\">An incident response training game</h4>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <p className=\"menu-info\">Start the game and help your company from attacks</p>\r\n        </div>\r\n        <MenuListContainer />\r\n        <Link to=\"/leadboard\" className=\"navbar-brand\"><h4>LeadBoard</h4></Link><br></br>\r\n        <button onClick={()=>{localStorage.removeItem(\"LOGINDATA\"); window.location.reload()}}>LogOut</button>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./Login.css\";\nimport LoginCred from \"../../dbData/loginCred.json\";\nimport { Redirect } from \"react-router-dom\";\n\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      redirect: false,\n    };\n  }\n  render() {\n    return (\n      <div className=\"Login\">\n        {this.state.redirect ? <Redirect to=\"/\" /> : null}\n        <Form>\n          <Form.Group size=\"lg\" controlId=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              autoFocus\n              type=\"email\"\n              value={this.state.email}\n              onChange={(e) => {\n                this.setState({ email: e.target.value });\n              }}\n            />\n          </Form.Group>\n          <Form.Group size=\"lg\" controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              value={this.state.password}\n              onChange={(e) => {\n                this.setState({ password: e.target.value });\n              }}\n            />\n          </Form.Group>\n          <Button\n            block=\"true\"\n            size=\"lg\"\n            type=\"submit\"\n            onClick={() =>\n              console.log(\n                LoginCred.map((item) => {\n                  if (\n                    item.email === this.state.email &&\n                    item.password === this.state.password\n                  ) {\n                    localStorage.setItem(\"LOGINDATA\", item.email);\n\n                    this.setState({ redirect: true });\n                  }\n                })\n              )\n            }\n          >\n            Login\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\nexport default Login;\n","import React from \"react\";\nimport Leaderboard from \"react-leaderboard\";\nimport \"./Style.css\";\n\nexport class LeaderBoardPage extends React.Component {\n  constructor(props) {\n    super(props);\n    let LeaderBoardData = JSON.parse(localStorage.getItem(\"LEADERBOARDDATA\"));\n    this.state = {\n      users:\n        LeaderBoardData && LeaderBoardData != undefined ? LeaderBoardData : [],\n    };\n  }\n  render() {\n    return (\n      <div className=\"leadboardBox\">\n        {this.state.users.length > 0 ? (\n          <Leaderboard users={this.state.users} paginate={1} asc={false} />\n        ) : (\n          <h1>No Data Found</h1>\n        )}\n      </div>\n    );\n  }\n}\nexport default LeaderBoardPage;\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport GameLoadingContainer from \"./components/GamePage/GameLoadingContainer\";\r\nimport { MenuPage } from \"./components/MenuPage/MenuPage\";\r\nimport { Login } from \"./components/LogInPage/login\";\r\nimport LeaderBoardPage from \"./components/LeadBoardPage/LeaderBoard\";\r\n\r\nconst App = ({ store }) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Container className=\"app\">\r\n        <Switch>\r\n          <Route exact path=\"/game\">\r\n            <GameLoadingContainer />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <MenuPage />\r\n          </Route>\r\n          <Route exact path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <Route exact path=\"/leadboard\">\r\n            <LeaderBoardPage />\r\n          </Route>\r\n        </Switch>\r\n      </Container>\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\n\r\nexport class Footer extends React.Component {\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"footer\">\r\n       \r\n        <p>\r\n        By Muhammad zahid </p>\r\n      </div>\r\n    );\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport configureStore from './store/store';\r\n\r\nimport App from './App';\r\nimport { Footer } from './components/common/Footer';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\n// Load previous state from browser's localStorage into Redux store\r\n// if it exists, otherwise use empty object. Define store at top level\r\n// so it can be exported to be used with GameManager class.\r\nconst preloadedState = localStorage.state ?\r\n  JSON.parse(localStorage.state) : {};\r\nconst store = configureStore(preloadedState);\r\n\r\n// Set up sticky footer with Flexbox by rendering an array.\r\nconst content = [<App store={store} key=\"1\" />, <Footer key=\"2\" />];\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      {content}\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  // If you want to start measuring performance in your app, pass a function\r\n  // to log results (for example: reportWebVitals(console.log))\r\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n  reportWebVitals();\r\n});\r\n\r\n// Export Redux store so it can be imported into GameManager class and accessed\r\n// in its static methods. For React components, use connect() instead.\r\nexport { store };"],"sourceRoot":""}