import { __assign, __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import clsx from 'clsx';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useAutosuggestItems, useFilteredItems, useKeyboardHandler } from './controller';
import Dropdown from '../internal/components/dropdown';
import { useDropdownStatus } from '../internal/components/dropdown-status';
import DropdownFooter from '../internal/components/dropdown-footer';
import { useFormFieldContext } from '../internal/context/form-field-context';
import { getBaseProps } from '../internal/base-component';
import { generateUniqueId, useUniqueId } from '../internal/hooks/use-unique-id';
import useForwardFocus from '../internal/hooks/forward-focus';
import { fireNonCancelableEvent } from '../internal/events';
import { createHighlightedOptionHook } from '../internal/components/options-list/utils/use-highlight-option';
import InternalInput from '../input/internal';
import styles from './styles.css.js';
import { checkOptionValueField } from '../select/utils/check-option-value-field';
import checkControlled from '../internal/hooks/check-controlled';
import { fireCancelableEvent } from '../internal/events/index';
import AutosuggestOptionsList from './options-list';
var isInteractive = function (option) {
    return !!option && !option.disabled && option.type !== 'parent';
};
var isHighlightable = function (option) {
    return !!option && option.type !== 'parent';
};
var useHighlightedOption = createHighlightedOptionHook({ isHighlightable: isHighlightable });
var useLoadMoreItems = function (onLoadItems) {
    var lastFilteringText = useRef(null);
    return useCallback(function (firstPage, samePage, filteringText) {
        if (samePage || !firstPage || filteringText === undefined || lastFilteringText.current !== filteringText) {
            if (filteringText !== undefined) {
                lastFilteringText.current = filteringText;
            }
            if (lastFilteringText.current !== null && onLoadItems) {
                fireNonCancelableEvent(onLoadItems, { filteringText: lastFilteringText.current, firstPage: firstPage, samePage: samePage });
            }
        }
    }, [onLoadItems]);
};
var InternalAutosuggest = React.forwardRef(function (props, ref) {
    var _a;
    var value = props.value, onChange = props.onChange, onBlur = props.onBlur, onFocus = props.onFocus, onKeyUp = props.onKeyUp, onLoadItems = props.onLoadItems, options = props.options, _b = props.filteringType, filteringType = _b === void 0 ? 'auto' : _b, _c = props.statusType, statusType = _c === void 0 ? 'finished' : _c, placeholder = props.placeholder, name = props.name, disabled = props.disabled, _d = props.disableBrowserAutocorrect, disableBrowserAutocorrect = _d === void 0 ? false : _d, autoFocus = props.autoFocus, readOnly = props.readOnly, ariaLabel = props.ariaLabel, ariaRequired = props.ariaRequired, enteredTextLabel = props.enteredTextLabel, onKeyDown = props.onKeyDown, virtualScroll = props.virtualScroll, expandToViewport = props.expandToViewport, onSelect = props.onSelect, selectedAriaLabel = props.selectedAriaLabel, renderHighlightedAriaLive = props.renderHighlightedAriaLive, __dropdownWidth = props.__dropdownWidth, __onOptionClick = props.__onOptionClick, __disableShowAll = props.__disableShowAll, __hideEnteredTextOption = props.__hideEnteredTextOption, __onOpen = props.__onOpen, __internalRootRef = props.__internalRootRef, rest = __rest(props, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onLoadItems", "options", "filteringType", "statusType", "placeholder", "name", "disabled", "disableBrowserAutocorrect", "autoFocus", "readOnly", "ariaLabel", "ariaRequired", "enteredTextLabel", "onKeyDown", "virtualScroll", "expandToViewport", "onSelect", "selectedAriaLabel", "renderHighlightedAriaLive", "__dropdownWidth", "__onOptionClick", "__disableShowAll", "__hideEnteredTextOption", "__onOpen", "__internalRootRef"]);
    var filterText = rest.__filterText;
    filterText = filterText === undefined ? value : filterText;
    checkControlled('Autosuggest', 'value', value, 'onChange', onChange);
    checkOptionValueField('Autosuggest', 'options', options);
    var usingMouse = useRef(true);
    var _e = useState(false), showAll = _e[0], setShowAll = _e[1];
    var _f = useState(false), open = _f[0], setOpen = _f[1];
    var autosuggestItems = useAutosuggestItems(options);
    var filteredItems = useFilteredItems(autosuggestItems, value, filterText, filteringType, showAll, __hideEnteredTextOption);
    var openDropdown = function () { return !readOnly && setOpen(true); };
    var scrollToIndex = useRef(null);
    var _g = useHighlightedOption(filteredItems), highlightedOption = _g.highlightedOption, highlightedIndex = _g.highlightedIndex, moveHighlight = _g.moveHighlight, resetHighlight = _g.resetHighlight, setHighlightedIndex = _g.setHighlightedIndex;
    var closeDropdown = function () {
        setOpen(false);
        resetHighlight();
    };
    var handleBlur = function (event) {
        var _a;
        if (event.currentTarget.contains(event.relatedTarget) || ((_a = dropdownFooterRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
            return;
        }
        closeDropdown();
        fireNonCancelableEvent(onBlur);
    };
    var selectOption = function (option) {
        var value = option.value || '';
        fireNonCancelableEvent(onChange, { value: value });
        var selectedCancelled = fireCancelableEvent(__onOptionClick, option);
        if (!selectedCancelled) {
            closeDropdown();
        }
        else {
            resetHighlight();
        }
        fireNonCancelableEvent(onSelect, { value: value });
    };
    var selectHighlighted = function () {
        if (highlightedOption) {
            if (isInteractive(highlightedOption)) {
                selectOption(highlightedOption);
            }
        }
        else {
            closeDropdown();
        }
    };
    var fireLoadMore = useLoadMoreItems(onLoadItems);
    var handleInputChange = function (e) {
        openDropdown();
        setShowAll(false);
        resetHighlight();
        onChange && onChange(e);
    };
    var handleKeyDown = useKeyboardHandler(moveHighlight, openDropdown, selectHighlighted, usingMouse, open, onKeyDown);
    var handleLoadMore = useCallback(function () {
        options && options.length && statusType === 'pending' && fireLoadMore(false, false);
    }, [fireLoadMore, options, statusType]);
    var handleRecoveryClick = useCallback(function () {
        var _a;
        fireLoadMore(false, true);
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [fireLoadMore]);
    var formFieldContext = useFormFieldContext(rest);
    var baseProps = getBaseProps(rest);
    var inputRef = useRef(null);
    var dropdownFooterRef = useRef(null);
    useForwardFocus(ref, inputRef);
    var selfControlId = useUniqueId('input');
    var controlId = (_a = formFieldContext.controlId) !== null && _a !== void 0 ? _a : selfControlId;
    var dropdownId = useUniqueId('dropdown');
    var listId = useUniqueId('list');
    // From an a11y point of view we only count the dropdown as 'expanded' if there are items that a user can dropdown into
    var expanded = open && filteredItems.length > 1;
    var highlightedOptionId = highlightedOption ? generateUniqueId() : undefined;
    var nativeAttributes = {
        name: name,
        placeholder: placeholder,
        autoFocus: autoFocus,
        onClick: openDropdown,
        role: 'combobox',
        'aria-autocomplete': 'list',
        'aria-expanded': expanded,
        'aria-controls': listId,
        // 'aria-owns' needed for safari+vo to announce activedescendant content
        'aria-owns': listId,
        'aria-label': ariaLabel,
        'aria-activedescendant': highlightedOptionId
    };
    var handleInputFocus = function (e) {
        !__disableShowAll && setShowAll(true);
        var openPrevented = fireCancelableEvent(__onOpen, null);
        if (!openPrevented) {
            openDropdown();
            fireLoadMore(true, false, '');
        }
        onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
    };
    useEffect(function () {
        var _a;
        (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);
    }, [highlightedIndex]);
    var isEmpty = !value && !filteredItems.length;
    var showRecoveryLink = open && statusType === 'error' && props.recoveryText;
    var dropdownStatus = useDropdownStatus(__assign(__assign({}, props), { isEmpty: isEmpty, onRecoveryClick: handleRecoveryClick }));
    var handleMouseDown = function (event) {
        // prevent currently focused element from losing it
        event.preventDefault();
    };
    return (React.createElement("div", __assign({}, baseProps, { className: clsx(styles.root, baseProps.className), ref: __internalRootRef, onBlur: handleBlur }),
        React.createElement(Dropdown, { minWidth: __dropdownWidth, stretchWidth: !__dropdownWidth, trigger: React.createElement(InternalInput, __assign({ type: "search", value: value, onChange: handleInputChange, __onDelayedInput: function (event) { return fireLoadMore(true, false, event.detail.value); }, onFocus: handleInputFocus, onKeyDown: handleKeyDown, onKeyUp: onKeyUp, disabled: disabled, disableBrowserAutocorrect: disableBrowserAutocorrect, readOnly: readOnly, ariaRequired: ariaRequired, ref: inputRef, autoComplete: false, __nativeAttributes: nativeAttributes }, formFieldContext, { controlId: controlId })), onMouseDown: handleMouseDown, open: open, dropdownId: dropdownId, footer: dropdownStatus.isSticky ? (React.createElement("div", { ref: dropdownFooterRef, className: styles['dropdown-footer'] },
                React.createElement(DropdownFooter, { content: dropdownStatus.content, hasItems: filteredItems.length >= 1 }))) : null, expandToViewport: expandToViewport, hasContent: filteredItems.length >= 1 || dropdownStatus.content !== null, trapFocus: !!showRecoveryLink }, open && (React.createElement(AutosuggestOptionsList, { options: filteredItems, highlightedOption: highlightedOption, selectOption: selectOption, highlightedIndex: highlightedIndex, setHighlightedIndex: setHighlightedIndex, highlightedOptionId: highlightedOptionId, highlightText: filterText, listId: listId, controlId: controlId, enteredTextLabel: enteredTextLabel, handleLoadMore: handleLoadMore, hasDropdownStatus: dropdownStatus.content !== null, virtualScroll: virtualScroll, selectedAriaLabel: selectedAriaLabel, renderHighlightedAriaLive: renderHighlightedAriaLive, listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, { content: dropdownStatus.content }) : null, usingMouse: usingMouse })))));
});
export default InternalAutosuggest;
//# sourceMappingURL=internal.js.map