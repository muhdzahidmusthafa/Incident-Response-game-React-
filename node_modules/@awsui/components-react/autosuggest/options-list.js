// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { useSelectVisibleOption, useHighlightVisibleOption, getParentGroup } from './controller';
import VirtualList from './virtual-list';
import PlainList from './plain-list';
import { useAnnouncement } from '../select/utils/use-announcement';
var isInteractive = function (option) {
    return !!option && !option.disabled && option.type !== 'parent';
};
var isHighlightable = function (option) {
    return !!option && option.type !== 'parent';
};
var createMouseEventHandler = function (handler, usingMouse) { return function (itemIndex) {
    // prevent mouse events to avoid losing focus from the input
    usingMouse.current = true;
    if (itemIndex > -1) {
        handler(itemIndex);
    }
}; };
export default function AutosuggestOptionsList(_a) {
    var options = _a.options, highlightedOption = _a.highlightedOption, selectOption = _a.selectOption, highlightedIndex = _a.highlightedIndex, setHighlightedIndex = _a.setHighlightedIndex, highlightedOptionId = _a.highlightedOptionId, highlightText = _a.highlightText, listId = _a.listId, controlId = _a.controlId, enteredTextLabel = _a.enteredTextLabel, handleLoadMore = _a.handleLoadMore, hasDropdownStatus = _a.hasDropdownStatus, virtualScroll = _a.virtualScroll, selectedAriaLabel = _a.selectedAriaLabel, renderHighlightedAriaLive = _a.renderHighlightedAriaLive, listBottom = _a.listBottom, usingMouse = _a.usingMouse;
    var highlightVisibleOption = useHighlightVisibleOption(options, setHighlightedIndex, isHighlightable);
    var selectVisibleOption = useSelectVisibleOption(options, selectOption, isInteractive);
    var handleMouseUp = createMouseEventHandler(selectVisibleOption, usingMouse);
    var handleMouseMove = createMouseEventHandler(highlightVisibleOption, usingMouse);
    var ListComponent = virtualScroll ? VirtualList : PlainList;
    var announcement = useAnnouncement({
        announceSelected: true,
        highlightedOption: highlightedOption,
        getParent: function (option) { var _a; return (_a = getParentGroup(option)) === null || _a === void 0 ? void 0 : _a.option; },
        selectedAriaLabel: selectedAriaLabel,
        renderHighlightedAriaLive: renderHighlightedAriaLive
    });
    return (React.createElement(ListComponent, { listBottom: listBottom, handleLoadMore: handleLoadMore, filteredItems: options, highlightText: highlightText, usingMouse: usingMouse, highlightedOption: highlightedOption, highlightedIndex: highlightedIndex, enteredTextLabel: enteredTextLabel, highlightedA11yProps: highlightedOptionId ? { id: highlightedOptionId } : {}, hasDropdownStatus: hasDropdownStatus, menuProps: { id: listId, ariaLabelledby: controlId, onMouseUp: handleMouseUp, onMouseMove: handleMouseMove }, screenReaderContent: announcement }));
}
//# sourceMappingURL=options-list.js.map