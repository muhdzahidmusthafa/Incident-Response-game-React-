{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useSelectVisibleOption, useHighlightVisibleOption, getParentGroup } from './controller';\nimport VirtualList from './virtual-list';\nimport PlainList from './plain-list';\nimport { useAnnouncement } from '../select/utils/use-announcement';\n\nvar isInteractive = function (option) {\n  return !!option && !option.disabled && option.type !== 'parent';\n};\n\nvar isHighlightable = function (option) {\n  return !!option && option.type !== 'parent';\n};\n\nvar createMouseEventHandler = function (handler, usingMouse) {\n  return function (itemIndex) {\n    // prevent mouse events to avoid losing focus from the input\n    usingMouse.current = true;\n\n    if (itemIndex > -1) {\n      handler(itemIndex);\n    }\n  };\n};\n\nexport default function AutosuggestOptionsList(_a) {\n  var options = _a.options,\n      highlightedOption = _a.highlightedOption,\n      selectOption = _a.selectOption,\n      highlightedIndex = _a.highlightedIndex,\n      setHighlightedIndex = _a.setHighlightedIndex,\n      highlightedOptionId = _a.highlightedOptionId,\n      highlightText = _a.highlightText,\n      listId = _a.listId,\n      controlId = _a.controlId,\n      enteredTextLabel = _a.enteredTextLabel,\n      handleLoadMore = _a.handleLoadMore,\n      hasDropdownStatus = _a.hasDropdownStatus,\n      virtualScroll = _a.virtualScroll,\n      selectedAriaLabel = _a.selectedAriaLabel,\n      renderHighlightedAriaLive = _a.renderHighlightedAriaLive,\n      listBottom = _a.listBottom,\n      usingMouse = _a.usingMouse;\n  var highlightVisibleOption = useHighlightVisibleOption(options, setHighlightedIndex, isHighlightable);\n  var selectVisibleOption = useSelectVisibleOption(options, selectOption, isInteractive);\n  var handleMouseUp = createMouseEventHandler(selectVisibleOption, usingMouse);\n  var handleMouseMove = createMouseEventHandler(highlightVisibleOption, usingMouse);\n  var ListComponent = virtualScroll ? VirtualList : PlainList;\n  var announcement = useAnnouncement({\n    announceSelected: true,\n    highlightedOption: highlightedOption,\n    getParent: function (option) {\n      var _a;\n\n      return (_a = getParentGroup(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel: selectedAriaLabel,\n    renderHighlightedAriaLive: renderHighlightedAriaLive\n  });\n  return React.createElement(ListComponent, {\n    listBottom: listBottom,\n    handleLoadMore: handleLoadMore,\n    filteredItems: options,\n    highlightText: highlightText,\n    usingMouse: usingMouse,\n    highlightedOption: highlightedOption,\n    highlightedIndex: highlightedIndex,\n    enteredTextLabel: enteredTextLabel,\n    highlightedA11yProps: highlightedOptionId ? {\n      id: highlightedOptionId\n    } : {},\n    hasDropdownStatus: hasDropdownStatus,\n    menuProps: {\n      id: listId,\n      ariaLabelledby: controlId,\n      onMouseUp: handleMouseUp,\n      onMouseMove: handleMouseMove\n    },\n    screenReaderContent: announcement\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,sBAAT,EAAiCC,yBAAjC,EAA4DC,cAA5D,QAAkF,cAAlF;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,SAASC,eAAT,QAAgC,kCAAhC;;AAuBA,IAAMC,aAAa,GAAG,UAACC,MAAD,EAAyB;EAC7C,OAAO,CAAC,CAACA,MAAF,IAAY,CAACA,MAAM,CAACC,QAApB,IAAgCD,MAAM,CAACE,IAAP,KAAgB,QAAvD;AACD,CAFD;;AAIA,IAAMC,eAAe,GAAG,UAACH,MAAD,EAAyB;EAC/C,OAAO,CAAC,CAACA,MAAF,IAAYA,MAAM,CAACE,IAAP,KAAgB,QAAnC;AACD,CAFD;;AAIA,IAAME,uBAAuB,GAC3B,UAACC,OAAD,EAAmCC,UAAnC,EAA8E;EAAK,iBAACC,SAAD,EAAkB;IACnG;IACAD,UAAU,CAACE,OAAX,GAAqB,IAArB;;IACA,IAAID,SAAS,GAAG,CAAC,CAAjB,EAAoB;MAClBF,OAAO,CAACE,SAAD,CAAP;IACD;EACF,CANkF;AAMlF,CAPH;;AASA,eAAc,SAAUE,sBAAV,CAAiCC,EAAjC,EAkBgB;MAjB5BC,OAAO;MACPC,iBAAiB;MACjBC,YAAY;MACZC,gBAAgB;MAChBC,mBAAmB;MACnBC,mBAAmB;MACnBC,aAAa;MACbC,MAAM;MACNC,SAAS;MACTC,gBAAgB;MAChBC,cAAc;MACdC,iBAAiB;MACjBC,aAAa;MACbC,iBAAiB;MACjBC,yBAAyB;MACzBC,UAAU;MACVpB,UAAU;EAEV,IAAMqB,sBAAsB,GAAGjC,yBAAyB,CAACiB,OAAD,EAAUI,mBAAV,EAA+BZ,eAA/B,CAAxD;EACA,IAAMyB,mBAAmB,GAAGnC,sBAAsB,CAACkB,OAAD,EAAUE,YAAV,EAAwBd,aAAxB,CAAlD;EACA,IAAM8B,aAAa,GAAGzB,uBAAuB,CAACwB,mBAAD,EAAsBtB,UAAtB,CAA7C;EACA,IAAMwB,eAAe,GAAG1B,uBAAuB,CAACuB,sBAAD,EAAyBrB,UAAzB,CAA/C;EAEA,IAAMyB,aAAa,GAAGR,aAAa,GAAG3B,WAAH,GAAiBC,SAApD;EAEA,IAAMmC,YAAY,GAAGlC,eAAe,CAAC;IACnCmC,gBAAgB,EAAE,IADiB;IAEnCrB,iBAAiB,mBAFkB;IAGnCsB,SAAS,EAAE,kBAAM;MAAA;;MAAI,2BAAc,CAAClC,MAAD,CAAd,MAAsB,IAAtB,IAAsBU,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEV,MAAxB;IAAyD,CAH3C;IAInCwB,iBAAiB,mBAJkB;IAKnCC,yBAAyB;EALU,CAAD,CAApC;EAQA,OACEjC,oBAACuC,aAAD,EAAc;IACZL,UAAU,EAAEA,UADA;IAEZL,cAAc,EAAEA,cAFJ;IAGZc,aAAa,EAAExB,OAHH;IAIZM,aAAa,EAAEA,aAJH;IAKZX,UAAU,EAAEA,UALA;IAMZM,iBAAiB,EAAEA,iBANP;IAOZE,gBAAgB,EAAEA,gBAPN;IAQZM,gBAAgB,EAAEA,gBARN;IASZgB,oBAAoB,EAAEpB,mBAAmB,GAAG;MAAEqB,EAAE,EAAErB;IAAN,CAAH,GAAiC,EAT9D;IAUZM,iBAAiB,EAAEA,iBAVP;IAWZgB,SAAS,EAAE;MAAED,EAAE,EAAEnB,MAAN;MAAcqB,cAAc,EAAEpB,SAA9B;MAAyCqB,SAAS,EAAEX,aAApD;MAAmEY,WAAW,EAAEX;IAAhF,CAXC;IAYZY,mBAAmB,EAAEV;EAZT,CAAd,CADF;AAgBD","names":["React","useSelectVisibleOption","useHighlightVisibleOption","getParentGroup","VirtualList","PlainList","useAnnouncement","isInteractive","option","disabled","type","isHighlightable","createMouseEventHandler","handler","usingMouse","itemIndex","current","AutosuggestOptionsList","_a","options","highlightedOption","selectOption","highlightedIndex","setHighlightedIndex","highlightedOptionId","highlightText","listId","controlId","enteredTextLabel","handleLoadMore","hasDropdownStatus","virtualScroll","selectedAriaLabel","renderHighlightedAriaLive","listBottom","highlightVisibleOption","selectVisibleOption","handleMouseUp","handleMouseMove","ListComponent","announcement","announceSelected","getParent","filteredItems","highlightedA11yProps","id","menuProps","ariaLabelledby","onMouseUp","onMouseMove","screenReaderContent"],"sourceRoot":"","sources":["../../../src/autosuggest/options-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { useSelectVisibleOption, useHighlightVisibleOption, getParentGroup } from './controller';\nimport { AutosuggestItem, AutosuggestProps } from './interfaces';\nimport VirtualList from './virtual-list';\nimport PlainList from './plain-list';\n\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { OptionGroup } from '../internal/components/option/interfaces';\n\nexport interface AutosuggestOptionsListProps\n  extends Pick<\n    AutosuggestProps,\n    'enteredTextLabel' | 'virtualScroll' | 'selectedAriaLabel' | 'renderHighlightedAriaLive'\n  > {\n  options: AutosuggestItem[];\n  highlightedOption?: AutosuggestItem;\n  selectOption: (option: AutosuggestItem) => void;\n  highlightedIndex: number;\n  setHighlightedIndex: (index: number) => void;\n  highlightedOptionId?: string;\n  highlightText: string;\n  listId: string;\n  controlId: string;\n  handleLoadMore: () => void;\n  hasDropdownStatus?: boolean;\n  listBottom?: React.ReactNode;\n  usingMouse: React.MutableRefObject<boolean>;\n}\n\nconst isInteractive = (option?: AutosuggestItem) => {\n  return !!option && !option.disabled && option.type !== 'parent';\n};\n\nconst isHighlightable = (option?: AutosuggestItem) => {\n  return !!option && option.type !== 'parent';\n};\n\nconst createMouseEventHandler =\n  (handler: (index: number) => void, usingMouse: React.MutableRefObject<boolean>) => (itemIndex: number) => {\n    // prevent mouse events to avoid losing focus from the input\n    usingMouse.current = true;\n    if (itemIndex > -1) {\n      handler(itemIndex);\n    }\n  };\n\nexport default function AutosuggestOptionsList({\n  options,\n  highlightedOption,\n  selectOption,\n  highlightedIndex,\n  setHighlightedIndex,\n  highlightedOptionId,\n  highlightText,\n  listId,\n  controlId,\n  enteredTextLabel,\n  handleLoadMore,\n  hasDropdownStatus,\n  virtualScroll,\n  selectedAriaLabel,\n  renderHighlightedAriaLive,\n  listBottom,\n  usingMouse,\n}: AutosuggestOptionsListProps) {\n  const highlightVisibleOption = useHighlightVisibleOption(options, setHighlightedIndex, isHighlightable);\n  const selectVisibleOption = useSelectVisibleOption(options, selectOption, isInteractive);\n  const handleMouseUp = createMouseEventHandler(selectVisibleOption, usingMouse);\n  const handleMouseMove = createMouseEventHandler(highlightVisibleOption, usingMouse);\n\n  const ListComponent = virtualScroll ? VirtualList : PlainList;\n\n  const announcement = useAnnouncement({\n    announceSelected: true,\n    highlightedOption,\n    getParent: option => getParentGroup(option)?.option as undefined | OptionGroup,\n    selectedAriaLabel,\n    renderHighlightedAriaLive,\n  });\n\n  return (\n    <ListComponent\n      listBottom={listBottom}\n      handleLoadMore={handleLoadMore}\n      filteredItems={options}\n      highlightText={highlightText}\n      usingMouse={usingMouse}\n      highlightedOption={highlightedOption}\n      highlightedIndex={highlightedIndex}\n      enteredTextLabel={enteredTextLabel}\n      highlightedA11yProps={highlightedOptionId ? { id: highlightedOptionId } : {}}\n      hasDropdownStatus={hasDropdownStatus}\n      menuProps={{ id: listId, ariaLabelledby: controlId, onMouseUp: handleMouseUp, onMouseMove: handleMouseMove }}\n      screenReaderContent={announcement}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}