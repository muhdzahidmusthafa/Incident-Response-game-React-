{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from 'react';\nimport { useCallback, useRef } from 'react';\nimport { Transition as ReactTransitionGroupTransition } from 'react-transition-group';\nimport { useReducedMotion } from '../../hooks/use-visual-mode';\n/**\n * This component is a wrapper around the CSSTransition component.\n *\n * It provides a second parameter in its rendering function that must be\n * attached to the node that is transitioning.\n */\n\nexport function Transition(_a) {\n  var isIn = _a[\"in\"],\n      children = _a.children,\n      _b = _a.exit,\n      exit = _b === void 0 ? true : _b,\n      _c = _a.onStatusChange,\n      onStatusChange = _c === void 0 ? function () {\n    return void 0;\n  } : _c,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      transitionChangeDelay = _a.transitionChangeDelay,\n      rest = __rest(_a, [\"in\", \"children\", \"exit\", \"onStatusChange\", \"disabled\", \"transitionChangeDelay\"]);\n\n  var transitionRootElement = useRef(null); // the initial state of the transition should be either 'exited' or 'entered' depending\n  // on the `in` property, this mimicks how internally the Transition component works here:\n  // https://github.com/reactjs/react-transition-group/blob/6cbd6aaedaf8e9472007640b429ddb48c6c24158/src/Transition.js#L121\n\n  var _e = useState(isIn ? 'entered' : 'exited'),\n      transitionState = _e[0],\n      setTransitionState = _e[1];\n\n  var motionDisabled = useReducedMotion(transitionRootElement) || disabled;\n  var addTransitionEndListener = useCallback(function (done) {\n    var node = transitionRootElement.current;\n\n    if (node === null) {\n      return;\n    }\n\n    var listener = function (e) {\n      if (e.target === node) {\n        node.removeEventListener('transitionend', listener);\n        node.removeEventListener('animationend', listener);\n        done();\n      }\n    };\n\n    node.addEventListener('transitionend', listener);\n    node.addEventListener('animationend', listener);\n  }, []);\n  return React.createElement(ReactTransitionGroupTransition, __assign({\n    addEndListener: addTransitionEndListener,\n    timeout: motionDisabled ? 0 : undefined,\n    \"in\": isIn,\n    nodeRef: transitionRootElement,\n    exit: exit,\n    onEnter: function (isAppearing) {\n      if (!isAppearing) {\n        setTransitionState('enter');\n        onStatusChange('enter');\n      }\n    },\n    onEntering: function (isAppearing) {\n      var _a;\n\n      if (!isAppearing) {\n        // This line forces the browser to recalculate the layout because we want the starting state in the 'enter' style\n        // to be applied before the animation starts.\n        void ((_a = transitionRootElement.current) === null || _a === void 0 ? void 0 : _a.offsetHeight);\n\n        if (transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering) {\n          setTimeout(function () {\n            setTransitionState('entering');\n            onStatusChange('entering');\n          }, transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering);\n        } else {\n          setTransitionState('entering');\n          onStatusChange('entering');\n        }\n      }\n    },\n    onEntered: function (isAppearing) {\n      if (!isAppearing) {\n        setTransitionState('entered');\n        onStatusChange('entered');\n      }\n    },\n    onExit: function () {\n      setTransitionState('exit');\n      onStatusChange('exit');\n    },\n    onExiting: function () {\n      setTransitionState('exiting');\n      onStatusChange('exiting');\n    },\n    onExited: function () {\n      setTransitionState('exited');\n      onStatusChange('exited');\n    }\n  }, rest), function () {\n    return children(transitionState, transitionRootElement);\n  });\n}","map":{"version":3,"mappings":"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","names":["React","useState","useCallback","useRef","Transition","ReactTransitionGroupTransition","useReducedMotion","_a","isIn","children","_b","exit","_c","onStatusChange","_d","disabled","transitionChangeDelay","rest","transitionRootElement","transitionState","setTransitionState","motionDisabled","addTransitionEndListener","done","node","current","listener","e","target","removeEventListener","addEventListener","__assign","addEndListener","timeout","undefined","nodeRef","onEnter","isAppearing","onEntering","offsetHeight","entering","setTimeout","onEntered","onExit","onExiting","onExited"],"sourceRoot":"","sources":["../../../../../src/internal/components/transition/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport { MutableRefObject, useCallback, useRef } from 'react';\nimport {\n  Transition as ReactTransitionGroupTransition,\n  TransitionStatus as ReactTransitionGroupTransitionStatus,\n} from 'react-transition-group';\nimport { useReducedMotion } from '../../hooks/use-visual-mode';\n\nexport type TransitionStatus = ReactTransitionGroupTransitionStatus | 'enter' | 'exit';\n\nexport interface TransitionProps {\n  in: boolean;\n  exit?: boolean;\n\n  disabled?: boolean;\n\n  children: (state: TransitionStatus, transitioningElementRef: MutableRefObject<any>) => React.ReactNode;\n  onStatusChange?: (status: TransitionStatus) => void;\n  transitionChangeDelay?: { entering?: number };\n}\n\n/**\n * This component is a wrapper around the CSSTransition component.\n *\n * It provides a second parameter in its rendering function that must be\n * attached to the node that is transitioning.\n */\nexport function Transition({\n  in: isIn,\n  children,\n  exit = true,\n  onStatusChange = () => void 0,\n  disabled = false,\n  transitionChangeDelay,\n  ...rest\n}: TransitionProps) {\n  const transitionRootElement = useRef<HTMLElement>(null);\n  // the initial state of the transition should be either 'exited' or 'entered' depending\n  // on the `in` property, this mimicks how internally the Transition component works here:\n  // https://github.com/reactjs/react-transition-group/blob/6cbd6aaedaf8e9472007640b429ddb48c6c24158/src/Transition.js#L121\n  const [transitionState, setTransitionState] = useState<TransitionStatus>(isIn ? 'entered' : 'exited');\n  const motionDisabled = useReducedMotion(transitionRootElement) || disabled;\n\n  const addTransitionEndListener = useCallback((done: () => void) => {\n    const node = transitionRootElement.current;\n\n    if (node === null) {\n      return;\n    }\n    const listener = (e: TransitionEvent | AnimationEvent) => {\n      if (e.target === node) {\n        node.removeEventListener('transitionend', listener);\n        node.removeEventListener('animationend', listener);\n        done();\n      }\n    };\n    node.addEventListener('transitionend', listener);\n    node.addEventListener('animationend', listener);\n  }, []);\n\n  return (\n    <ReactTransitionGroupTransition\n      addEndListener={addTransitionEndListener}\n      timeout={motionDisabled ? 0 : undefined}\n      in={isIn}\n      nodeRef={transitionRootElement}\n      exit={exit}\n      onEnter={isAppearing => {\n        if (!isAppearing) {\n          setTransitionState('enter');\n          onStatusChange('enter');\n        }\n      }}\n      onEntering={isAppearing => {\n        if (!isAppearing) {\n          // This line forces the browser to recalculate the layout because we want the starting state in the 'enter' style\n          // to be applied before the animation starts.\n          void transitionRootElement.current?.offsetHeight;\n\n          if (transitionChangeDelay?.entering) {\n            setTimeout(() => {\n              setTransitionState('entering');\n              onStatusChange('entering');\n            }, transitionChangeDelay?.entering);\n          } else {\n            setTransitionState('entering');\n            onStatusChange('entering');\n          }\n        }\n      }}\n      onEntered={isAppearing => {\n        if (!isAppearing) {\n          setTransitionState('entered');\n          onStatusChange('entered');\n        }\n      }}\n      onExit={() => {\n        setTransitionState('exit');\n        onStatusChange('exit');\n      }}\n      onExiting={() => {\n        setTransitionState('exiting');\n        onStatusChange('exiting');\n      }}\n      onExited={() => {\n        setTransitionState('exited');\n        onStatusChange('exited');\n      }}\n      {...rest}\n    >\n      {() => children(transitionState, transitionRootElement)}\n    </ReactTransitionGroupTransition>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}