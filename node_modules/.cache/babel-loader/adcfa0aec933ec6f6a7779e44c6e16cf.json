{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useContext } from 'react';\nimport { AppLayoutContext } from '../app-layout/visual-refresh/context';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nexport default forwardRef(StickyScrollbar);\n\nfunction StickyScrollbar(_a, ref) {\n  var wrapperRef = _a.wrapperRef,\n      tableRef = _a.tableRef,\n      onScroll = _a.onScroll;\n  var scrollbarRef = React.useRef(null);\n  var scrollbarContentRef = React.useRef(null);\n  var isRefresh = useVisualRefresh(scrollbarRef);\n  var mergedRef = useMergeRefs(ref, scrollbarRef);\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n\n  var offsetBottomClassic = useAppLayoutContext().stickyOffsetBottom;\n  var offsetBottomVisualRefresh = useContext(AppLayoutContext).offsetBottom;\n  var offsetBottom = isRefresh ? offsetBottomVisualRefresh : offsetBottomClassic;\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetBottom);\n  return React.createElement(\"div\", {\n    ref: mergedRef,\n    className: styles['sticky-scrollbar'],\n    onScroll: onScroll\n  }, React.createElement(\"div\", {\n    ref: scrollbarContentRef,\n    className: styles['sticky-scrollbar-content']\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AACA,SAASC,mBAAT,QAAoC,wCAApC;AACA,SAASC,YAAT,QAA6B,kCAA7B;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAQA,eAAeP,UAAU,CAACQ,eAAD,CAAzB;;AAEA,SAASA,eAAT,CAAyBC,EAAzB,EAAmFC,GAAnF,EAAiH;MAAtFC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;EACvD,IAAMC,YAAY,GAAGf,KAAK,CAACgB,MAAN,CAA6B,IAA7B,CAArB;EACA,IAAMC,mBAAmB,GAAGjB,KAAK,CAACgB,MAAN,CAA6B,IAA7B,CAA5B;EACA,IAAME,SAAS,GAAGX,gBAAgB,CAACQ,YAAD,CAAlC;EACA,IAAMI,SAAS,GAAGd,YAAY,CAACM,GAAD,EAAMI,YAAN,CAA9B;EAEA;;;;;EAIQ,IAAoBK,mBAAmB,GAAKhB,mBAAmB,GAAEiB,kBAAjE;EACA,IAAcC,yBAAyB,GAAKpB,UAAU,CAACC,gBAAD,CAAV,CAA4BoB,YAAxE;EACR,IAAMA,YAAY,GAAGL,SAAS,GAAGI,yBAAH,GAA+BF,mBAA7D;EAEAd,kBAAkB,CAACS,YAAD,EAAeE,mBAAf,EAAoCJ,QAApC,EAA8CD,UAA9C,EAA0DW,YAA1D,CAAlB;EAEA,OACEvB;IAAKW,GAAG,EAAEQ,SAAV;IAAqBK,SAAS,EAAEhB,MAAM,CAAC,kBAAD,CAAtC;IAA4DM,QAAQ,EAAEA;EAAtE,GACEd;IAAKW,GAAG,EAAEM,mBAAV;IAA+BO,SAAS,EAAEhB,MAAM,CAAC,0BAAD;EAAhD,EADF,CADF;AAKD","names":["React","forwardRef","useContext","AppLayoutContext","useAppLayoutContext","useMergeRefs","useStickyScrollbar","useVisualRefresh","styles","StickyScrollbar","_a","ref","wrapperRef","tableRef","onScroll","scrollbarRef","useRef","scrollbarContentRef","isRefresh","mergedRef","offsetBottomClassic","stickyOffsetBottom","offsetBottomVisualRefresh","offsetBottom","className"],"sourceRoot":"","sources":["../../../src/table/sticky-scrollbar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useContext } from 'react';\nimport { AppLayoutContext } from '../app-layout/visual-refresh/context';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\n\ninterface StickyScrollbarProps {\n  wrapperRef: React.RefObject<HTMLDivElement>;\n  tableRef: React.RefObject<HTMLTableElement>;\n  onScroll?: React.UIEventHandler<HTMLDivElement>;\n}\n\nexport default forwardRef(StickyScrollbar);\n\nfunction StickyScrollbar({ wrapperRef, tableRef, onScroll }: StickyScrollbarProps, ref: React.Ref<HTMLDivElement>) {\n  const scrollbarRef = React.useRef<HTMLDivElement>(null);\n  const scrollbarContentRef = React.useRef<HTMLDivElement>(null);\n  const isRefresh = useVisualRefresh(scrollbarRef);\n  const mergedRef = useMergeRefs(ref, scrollbarRef);\n\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n  const { stickyOffsetBottom: offsetBottomClassic } = useAppLayoutContext();\n  const { offsetBottom: offsetBottomVisualRefresh } = useContext(AppLayoutContext);\n  const offsetBottom = isRefresh ? offsetBottomVisualRefresh : offsetBottomClassic;\n\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetBottom);\n\n  return (\n    <div ref={mergedRef} className={styles['sticky-scrollbar']} onScroll={onScroll}>\n      <div ref={scrollbarContentRef} className={styles['sticky-scrollbar-content']} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}