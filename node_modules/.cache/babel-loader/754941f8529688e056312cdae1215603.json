{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport focusSvgElement from '../../utils/focus-svg-element';\nimport styles from './styles.css.js';\nexport default forwardRef(ApplicationController);\n\nfunction ApplicationController(_a, ref) {\n  var activeElementKey = _a.activeElementKey,\n      activeElementRef = _a.activeElementRef,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      onKeyDown = _a.onKeyDown;\n  var containerRef = useRef(null);\n  var applicationRef = useRef(null);\n  var focusTransitionRef = useRef(false);\n\n  var _b = useState(false),\n      isFocused = _b[0],\n      setFocused = _b[1]; // Calls provided onFocus handler when the application obtains focus, ignoring internal focus juggling.\n\n\n  var onApplicationFocus = useCallback(function (event) {\n    if (focusTransitionRef.current === false) {\n      setFocused(true);\n      onFocus && onFocus(event);\n    } else {\n      focusTransitionRef.current = false;\n    }\n  }, [onFocus]); // Calls provided onBlur handler when the application loses focus, ignoring internal focus juggling.\n\n  var onApplicationBlur = useCallback(function (event) {\n    if (focusTransitionRef.current === false) {\n      setFocused(false);\n      onBlur && onBlur(event); // The application controller can only be focused programmatically.\n\n      muteApplication(applicationRef.current);\n    }\n  }, [onBlur]);\n  var onApplicationKeyDown = onKeyDown;\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        return focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);\n      }\n    };\n  }, [activeElementRef]); // Re-attaches and re-focuses the application for screen readers to treat it as an update.\n\n  useEffect(function () {\n    // Skip if not focused or if the transition is already happening.\n    if (!isFocused || focusTransitionRef.current === true) {\n      return;\n    } // Delay focus juggle to let the last focus event settle in Firefox.\n    // Without the delay the focus is getting lost.\n\n\n    var timeoutId = setTimeout(function () {\n      focusTransitionRef.current = true;\n      containerRef.current.removeChild(applicationRef.current);\n      containerRef.current.appendChild(applicationRef.current);\n      focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);\n    }, 0);\n    return function () {\n      return clearTimeout(timeoutId);\n    };\n  }, [isFocused, activeElementKey, activeElementRef]);\n  return React.createElement(\"g\", {\n    ref: containerRef\n  }, React.createElement(\"g\", {\n    focusable: false,\n    tabIndex: -1,\n    ref: applicationRef,\n    onFocus: onApplicationFocus,\n    onBlur: onApplicationBlur,\n    onKeyDown: onApplicationKeyDown,\n    className: styles.application\n  }));\n} // Focuses application but before copies aria-attributes from the target.\n\n\nfunction focusApplication(app, target) {\n  // Remove prev attributes.\n  for (var _i = 0, _a = getAttributeNames(app); _i < _a.length; _i++) {\n    var attributeName = _a[_i];\n\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  } // Copy new attributes.\n\n\n  if (target) {\n    for (var _b = 0, _c = getAttributeNames(target); _b < _c.length; _b++) {\n      var attributeName = _c[_b];\n\n      if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n        var attributeValue = target.getAttribute(attributeName);\n        attributeValue && app.setAttribute(attributeName, attributeValue);\n      }\n    }\n  } // Make app focusable.\n\n\n  app.tabIndex = 0;\n  app.setAttribute('focusable', 'true');\n  app.setAttribute('aria-hidden', 'false'); // Focus app.\n\n  focusSvgElement(app);\n} // The application is to be only focused programmatically.\n\n\nfunction muteApplication(app) {\n  // Remove prev attributes.\n  for (var _i = 0, _a = getAttributeNames(app); _i < _a.length; _i++) {\n    var attributeName = _a[_i];\n\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  } // Make app non-focusable.\n\n\n  app.tabIndex = -1;\n  app.setAttribute('focusable', 'false');\n  app.setAttribute('aria-hidden', 'true');\n} // Polyfill for element.getAttributeNames(), IE11\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames#polyfill\n\n\nfunction getAttributeNames(element) {\n  var attributes = element.attributes;\n  var result = new Array(attributes.length);\n\n  for (var i = 0; i < attributes.length; i++) {\n    result[i] = attributes[i].name;\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["React","forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","focusSvgElement","styles","ApplicationController","_a","ref","activeElementKey","activeElementRef","onFocus","onBlur","onKeyDown","containerRef","applicationRef","focusTransitionRef","isFocused","setFocused","onApplicationFocus","event","current","onApplicationBlur","muteApplication","onApplicationKeyDown","focus","timeoutId","setTimeout","removeChild","appendChild","focusApplication","focusable","tabIndex","className","application","app","target","_i","attributeName","slice","removeAttribute","_b","attributeValue","getAttribute","setAttribute","getAttributeNames","element","attributes","result","Array","length","i","name"],"sourceRoot":"","sources":["../../../../../src/internal/components/chart-plot/application-controller.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport focusSvgElement from '../../utils/focus-svg-element';\nimport styles from './styles.css.js';\n\nexport interface ApplicationRef {\n  focus(): void;\n}\n\nexport interface ApplicationControllerProps {\n  activeElementKey: null | string | number | boolean;\n  activeElementRef?: React.RefObject<SVGGElement>;\n  onFocus?: (event: React.FocusEvent<SVGGElement>) => void;\n  onBlur?: (event: React.FocusEvent<SVGGElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n}\n\nexport default forwardRef(ApplicationController);\n\nfunction ApplicationController(\n  { activeElementKey, activeElementRef, onFocus, onBlur, onKeyDown }: ApplicationControllerProps,\n  ref: React.Ref<ApplicationRef>\n) {\n  const containerRef = useRef<SVGGElement>(null);\n  const applicationRef = useRef<SVGGElement>(null);\n  const focusTransitionRef = useRef(false);\n  const [isFocused, setFocused] = useState(false);\n\n  // Calls provided onFocus handler when the application obtains focus, ignoring internal focus juggling.\n  const onApplicationFocus = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(true);\n        onFocus && onFocus(event);\n      } else {\n        focusTransitionRef.current = false;\n      }\n    },\n    [onFocus]\n  );\n  // Calls provided onBlur handler when the application loses focus, ignoring internal focus juggling.\n  const onApplicationBlur = useCallback(\n    (event: React.FocusEvent<SVGGElement>) => {\n      if (focusTransitionRef.current === false) {\n        setFocused(false);\n        onBlur && onBlur(event);\n        // The application controller can only be focused programmatically.\n        muteApplication(applicationRef.current!);\n      }\n    },\n    [onBlur]\n  );\n  const onApplicationKeyDown = onKeyDown;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => focusApplication(applicationRef.current!, activeElementRef?.current || null),\n    }),\n    [activeElementRef]\n  );\n\n  // Re-attaches and re-focuses the application for screen readers to treat it as an update.\n  useEffect(() => {\n    // Skip if not focused or if the transition is already happening.\n    if (!isFocused || focusTransitionRef.current === true) {\n      return;\n    }\n\n    // Delay focus juggle to let the last focus event settle in Firefox.\n    // Without the delay the focus is getting lost.\n    const timeoutId = setTimeout(() => {\n      focusTransitionRef.current = true;\n      containerRef.current!.removeChild(applicationRef.current!);\n      containerRef.current!.appendChild(applicationRef.current!);\n      focusApplication(applicationRef.current!, activeElementRef?.current || null);\n    }, 0);\n\n    return () => clearTimeout(timeoutId);\n  }, [isFocused, activeElementKey, activeElementRef]);\n\n  return (\n    <g ref={containerRef}>\n      <g\n        focusable={false}\n        tabIndex={-1}\n        ref={applicationRef}\n        onFocus={onApplicationFocus}\n        onBlur={onApplicationBlur}\n        onKeyDown={onApplicationKeyDown}\n        className={styles.application}\n      ></g>\n    </g>\n  );\n}\n\n// Focuses application but before copies aria-attributes from the target.\nfunction focusApplication(app: SVGGElement, target: null | SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Copy new attributes.\n  if (target) {\n    for (const attributeName of getAttributeNames(target)) {\n      if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n        const attributeValue = target.getAttribute(attributeName);\n        attributeValue && app.setAttribute(attributeName, attributeValue);\n      }\n    }\n  }\n\n  // Make app focusable.\n  app.tabIndex = 0;\n  app.setAttribute('focusable', 'true');\n  app.setAttribute('aria-hidden', 'false');\n\n  // Focus app.\n  focusSvgElement(app);\n}\n\n// The application is to be only focused programmatically.\nfunction muteApplication(app: SVGGElement) {\n  // Remove prev attributes.\n  for (const attributeName of getAttributeNames(app)) {\n    if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {\n      app.removeAttribute(attributeName);\n    }\n  }\n\n  // Make app non-focusable.\n  app.tabIndex = -1;\n  app.setAttribute('focusable', 'false');\n  app.setAttribute('aria-hidden', 'true');\n}\n\n// Polyfill for element.getAttributeNames(), IE11\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames#polyfill\nfunction getAttributeNames(element: Element) {\n  const attributes = element.attributes;\n  const result = new Array(attributes.length);\n  for (let i = 0; i < attributes.length; i++) {\n    result[i] = attributes[i].name;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}