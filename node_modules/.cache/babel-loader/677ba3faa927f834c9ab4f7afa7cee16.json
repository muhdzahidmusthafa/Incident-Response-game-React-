{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport InternalAutosuggest from '../autosuggest/internal';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { KeyCode } from '../internal/keycode';\nimport { makeCancellable, PromiseCancelledSignal } from '../internal/utils/promises';\nimport styles from './styles.css.js';\nexport var TagControl = React.forwardRef(function (_a, ref) {\n  var row = _a.row,\n      value = _a.value,\n      readOnly = _a.readOnly,\n      defaultOptions = _a.defaultOptions,\n      placeholder = _a.placeholder,\n      errorText = _a.errorText,\n      loadingText = _a.loadingText,\n      suggestionText = _a.suggestionText,\n      tooManySuggestionText = _a.tooManySuggestionText,\n      limit = _a.limit,\n      filteringKey = _a.filteringKey,\n      enteredTextLabel = _a.enteredTextLabel,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      onRequest = _a.onRequest,\n      initialOptionsRef = _a.initialOptionsRef;\n\n  var _b = useState(defaultOptions),\n      options = _b[0],\n      setOptions = _b[1];\n\n  var _c = useState(),\n      statusType = _c[0],\n      setStatusType = _c[1];\n\n  var requestCancelFnRef = useRef({\n    cancel: function () {},\n    isCancelled: function () {\n      return false;\n    }\n  });\n  var latestFilteringQuery = useRef({\n    key: undefined,\n    value: undefined\n  });\n\n  var isSameQuery = function (key, value) {\n    return latestFilteringQuery.current.key === key && latestFilteringQuery.current.value === value;\n  }; // Cancel any active promises on unmount.\n\n\n  useEffect(function () {\n    return function () {\n      return requestCancelFnRef.current.cancel();\n    };\n  }, []);\n\n  var onLoadItems = function (filteringText) {\n    if (!onRequest || isSameQuery(filteringKey, filteringText) || requestCancelFnRef.current.isCancelled()) {\n      return;\n    }\n\n    requestCancelFnRef.current.cancel();\n\n    if (filteringText === '' && (initialOptionsRef === null || initialOptionsRef === void 0 ? void 0 : initialOptionsRef.current) && initialOptionsRef.current.length > 0) {\n      // Load in the background, if the value is empty and we already have suggestions.\n      setOptions(initialOptionsRef.current);\n    }\n\n    if (latestFilteringQuery.current.key !== filteringKey) {\n      setOptions([]);\n    }\n\n    setStatusType('loading');\n    latestFilteringQuery.current = {\n      key: filteringKey,\n      value: filteringText\n    };\n\n    var _a = makeCancellable(onRequest(filteringText)),\n        promise = _a.promise,\n        cancel = _a.cancel,\n        isCancelled = _a.isCancelled;\n\n    promise.then(function (newValues) {\n      var newOptions = newValues.map(function (value) {\n        return {\n          value: value\n        };\n      });\n      setStatusType(undefined);\n      setOptions(newOptions);\n\n      if (initialOptionsRef) {\n        initialOptionsRef.current = newOptions;\n      }\n    })[\"catch\"](function (err) {\n      if (!(err instanceof PromiseCancelledSignal)) {\n        setStatusType('error');\n      }\n    });\n    requestCancelFnRef.current = {\n      cancel: cancel,\n      isCancelled: isCancelled\n    };\n  };\n\n  return React.createElement(InternalAutosuggest, {\n    ref: ref,\n    value: value,\n    readOnly: readOnly,\n    statusType: statusType,\n    options: options.length < limit ? options : [],\n    empty: options.length < limit ? suggestionText : tooManySuggestionText,\n    placeholder: placeholder,\n    errorText: errorText,\n    loadingText: loadingText,\n    enteredTextLabel: enteredTextLabel,\n    onChange: function (_a) {\n      var detail = _a.detail;\n      return onChange(detail.value, row);\n    },\n    onBlur: function () {\n      return onBlur === null || onBlur === void 0 ? void 0 : onBlur(row);\n    },\n    onFocus: function () {\n      onLoadItems('');\n    },\n    onLoadItems: function (_a) {\n      var detail = _a.detail;\n      onLoadItems(detail.filteringText);\n    }\n  });\n});\nexport var UndoButton = React.forwardRef(function (_a, ref) {\n  var children = _a.children,\n      onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n  return React.createElement(\"a\", __assign({}, focusVisible, {\n    ref: ref,\n    role: \"button\",\n    tabIndex: 0,\n    className: styles['undo-button'],\n    onClick: onClick,\n    onKeyDown: function (event) {\n      if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {\n        event.preventDefault();\n      } // Enter activates the button on key down instead of key up.\n\n\n      if (event.keyCode === KeyCode.enter) {\n        onClick();\n      }\n    },\n    onKeyUp: function (event) {\n      // Emulate button behavior, which also fires on space.\n      if (event.keyCode === KeyCode.space) {\n        onClick();\n      }\n    }\n  }), children);\n});","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAGA,OAAOC,mBAAP,MAAgC,yBAAhC;AAIA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,eAAT,EAA0BC,sBAA1B,QAAwD,4BAAxD;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AA0BA,OAAO,IAAMC,UAAU,GAAGV,KAAK,CAACW,UAAN,CACxB,UACEC,EADF,EAmBEC,GAnBF,EAmBgC;MAjB5BC,GAAG;MACHC,KAAK;MACLC,QAAQ;MACRC,cAAc;MACdC,WAAW;MACXC,SAAS;MACTC,WAAW;MACXC,cAAc;MACdC,qBAAqB;MACrBC,KAAK;MACLC,YAAY;MACZC,gBAAgB;MAChBC,QAAQ;MACRC,MAAM;MACNC,SAAS;MACTC,iBAAiB;;EAIb,SAAwB1B,QAAQ,CAA2Bc,cAA3B,CAAhC;EAAA,IAACa,OAAO,QAAR;EAAA,IAAUC,UAAU,QAApB;;EACA,SAA8B5B,QAAQ,EAAtC;EAAA,IAAC6B,UAAU,QAAX;EAAA,IAAaC,aAAa,QAA1B;;EACN,IAAMC,kBAAkB,GAAGhC,MAAM,CAAqD;IACpFiC,MAAM,EAAE,aAAQ,CADoE;IAEpFC,WAAW,EAAE;MAAM;IAAK;EAF4D,CAArD,CAAjC;EAIA,IAAMC,oBAAoB,GAAGnC,MAAM,CAAkB;IAAEoC,GAAG,EAAEC,SAAP;IAAkBxB,KAAK,EAAEwB;EAAzB,CAAlB,CAAnC;;EACA,IAAMC,WAAW,GAAG,UAACF,GAAD,EAA0BvB,KAA1B,EAAuC;IACzD,2BAAoB,CAAC0B,OAArB,CAA6BH,GAA7B,KAAqCA,GAArC,IAA4CD,oBAAoB,CAACI,OAArB,CAA6B1B,KAA7B,KAAuCA,KAAnF;EAAwF,CAD1F,CAT8B,CAY9B;;;EACAd,SAAS,CAAC;IAAM;MAAM,yBAAkB,CAACwC,OAAnB,CAA2BN,MAA3B;IAAmC,CAAzC;EAAyC,CAAhD,EAAkD,EAAlD,CAAT;;EAEA,IAAMO,WAAW,GAAG,UAACC,aAAD,EAAsB;IACxC,IAAI,CAACf,SAAD,IAAcY,WAAW,CAAChB,YAAD,EAAemB,aAAf,CAAzB,IAA0DT,kBAAkB,CAACO,OAAnB,CAA2BL,WAA3B,EAA9D,EAAwG;MACtG;IACD;;IACDF,kBAAkB,CAACO,OAAnB,CAA2BN,MAA3B;;IAEA,IAAIQ,aAAa,KAAK,EAAlB,KAAwBd,iBAAiB,SAAjB,qBAAiB,WAAjB,GAAiB,MAAjB,oBAAiB,CAAEY,OAA3C,KAAsDZ,iBAAiB,CAACY,OAAlB,CAA0BG,MAA1B,GAAmC,CAA7F,EAAgG;MAC9F;MACAb,UAAU,CAACF,iBAAiB,CAACY,OAAnB,CAAV;IACD;;IACD,IAAIJ,oBAAoB,CAACI,OAArB,CAA6BH,GAA7B,KAAqCd,YAAzC,EAAuD;MACrDO,UAAU,CAAC,EAAD,CAAV;IACD;;IACDE,aAAa,CAAC,SAAD,CAAb;IAEAI,oBAAoB,CAACI,OAArB,GAA+B;MAAEH,GAAG,EAAEd,YAAP;MAAqBT,KAAK,EAAE4B;IAA5B,CAA/B;;IAEM,SAAmCpC,eAAe,CAACqB,SAAS,CAACe,aAAD,CAAV,CAAlD;IAAA,IAAEE,OAAO,aAAT;IAAA,IAAWV,MAAM,YAAjB;IAAA,IAAmBC,WAAW,iBAA9B;;IACNS,OAAO,CACJC,IADH,CACQ,qBAAS;MACb,IAAMC,UAAU,GAAGC,SAAS,CAACC,GAAV,CAAc,iBAAK;QAAI,OAAC;UAAElC,KAAK;QAAP,CAAD;MAAW,CAAlC,CAAnB;MACAkB,aAAa,CAACM,SAAD,CAAb;MACAR,UAAU,CAACgB,UAAD,CAAV;;MACA,IAAIlB,iBAAJ,EAAuB;QACrBA,iBAAiB,CAACY,OAAlB,GAA4BM,UAA5B;MACD;IACF,CARH,EASG,OATH,EASS,eAAG;MACR,IAAI,EAAEG,GAAG,YAAY1C,sBAAjB,CAAJ,EAA8C;QAC5CyB,aAAa,CAAC,OAAD,CAAb;MACD;IACF,CAbH;IAcAC,kBAAkB,CAACO,OAAnB,GAA6B;MAAEN,MAAM,QAAR;MAAUC,WAAW;IAArB,CAA7B;EACD,CAjCD;;EAmCA,OACEpC,oBAACI,mBAAD,EAAoB;IAClBS,GAAG,EAAEA,GADa;IAElBE,KAAK,EAAEA,KAFW;IAGlBC,QAAQ,EAAEA,QAHQ;IAIlBgB,UAAU,EAAEA,UAJM;IAKlBF,OAAO,EAAEA,OAAO,CAACc,MAAR,GAAiBrB,KAAjB,GAAyBO,OAAzB,GAAmC,EAL1B;IAMlBqB,KAAK,EAAErB,OAAO,CAACc,MAAR,GAAiBrB,KAAjB,GAAyBF,cAAzB,GAA0CC,qBAN/B;IAOlBJ,WAAW,EAAEA,WAPK;IAQlBC,SAAS,EAAEA,SARO;IASlBC,WAAW,EAAEA,WATK;IAUlBK,gBAAgB,EAAEA,gBAVA;IAWlBC,QAAQ,EAAE,UAACd,EAAD,EAAW;UAARwC,MAAM;MAAO,eAAQ,CAACA,MAAM,CAACrC,KAAR,EAAeD,GAAf,CAAR;IAA2B,CAXnC;IAYlBa,MAAM,EAAE;MAAM,aAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAGb,GAAH,CAAN;IAAa,CAZT;IAalBuC,OAAO,EAAE;MACPX,WAAW,CAAC,EAAD,CAAX;IACD,CAfiB;IAgBlBA,WAAW,EAAE,UAAC9B,EAAD,EAAW;UAARwC,MAAM;MACpBV,WAAW,CAACU,MAAM,CAACT,aAAR,CAAX;IACD;EAlBiB,CAApB,CADF;AAsBD,CA5FuB,CAAnB;AAoGP,OAAO,IAAMW,UAAU,GAAGtD,KAAK,CAACW,UAAN,CACxB,UAACC,EAAD,EAAyCC,GAAzC,EAA0E;MAAvE0C,QAAQ;MAAEC,OAAO;EAClB,IAAMC,YAAY,GAAGpD,eAAe,EAApC;EAEA,OACEL,sCACMyD,YADN,EACkB;IAChB5C,GAAG,EAAEA,GADW;IAEhB6C,IAAI,EAAC,QAFW;IAGhBC,QAAQ,EAAE,CAHM;IAIhBC,SAAS,EAAEnD,MAAM,CAAC,aAAD,CAJD;IAKhB+C,OAAO,EAAEA,OALO;IAMhBK,SAAS,EAAE,iBAAK;MACd,IAAIC,KAAK,CAACC,OAAN,KAAkBzD,OAAO,CAAC0D,KAA1B,IAAmCF,KAAK,CAACC,OAAN,KAAkBzD,OAAO,CAAC2D,KAAjE,EAAwE;QACtEH,KAAK,CAACI,cAAN;MACD,CAHa,CAId;;;MACA,IAAIJ,KAAK,CAACC,OAAN,KAAkBzD,OAAO,CAAC2D,KAA9B,EAAqC;QACnCT,OAAO;MACR;IACF,CAde;IAehBW,OAAO,EAAE,iBAAK;MACZ;MACA,IAAIL,KAAK,CAACC,OAAN,KAAkBzD,OAAO,CAAC0D,KAA9B,EAAqC;QACnCR,OAAO;MACR;IACF;EApBe,CADlB,GAuBGD,QAvBH,CADF;AA2BD,CA/BuB,CAAnB","names":["React","useEffect","useRef","useState","InternalAutosuggest","useFocusVisible","KeyCode","makeCancellable","PromiseCancelledSignal","styles","TagControl","forwardRef","_a","ref","row","value","readOnly","defaultOptions","placeholder","errorText","loadingText","suggestionText","tooManySuggestionText","limit","filteringKey","enteredTextLabel","onChange","onBlur","onRequest","initialOptionsRef","options","setOptions","statusType","setStatusType","requestCancelFnRef","cancel","isCancelled","latestFilteringQuery","key","undefined","isSameQuery","current","onLoadItems","filteringText","length","promise","then","newOptions","newValues","map","err","empty","detail","onFocus","UndoButton","children","onClick","focusVisible","role","tabIndex","className","onKeyDown","event","keyCode","space","enter","preventDefault","onKeyUp"],"sourceRoot":"","sources":["../../../src/tag-editor/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { AutosuggestProps } from '../autosuggest/interfaces';\nimport InternalAutosuggest from '../autosuggest/internal';\nimport { InputProps } from '../input/interfaces';\nimport { DropdownStatusProps } from '../internal/components/dropdown-status';\n\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { KeyCode } from '../internal/keycode';\nimport { makeCancellable, PromiseCancelledSignal } from '../internal/utils/promises';\n\nimport styles from './styles.css.js';\n\ninterface FilteringParams {\n  key?: string;\n  value?: string;\n}\nexport interface TagControlProps {\n  row: number;\n  value: string;\n  readOnly: boolean;\n  defaultOptions: AutosuggestProps.Options;\n  placeholder: string;\n  errorText: string;\n  loadingText: string;\n  suggestionText: string;\n  tooManySuggestionText: string;\n  limit: number;\n  filteringKey?: string;\n  enteredTextLabel: (value: string) => string;\n  onChange: (value: string, row: number) => void;\n  onBlur?: (row: number) => void;\n  onRequest?: (value: string) => Promise<readonly string[]>;\n\n  initialOptionsRef?: React.MutableRefObject<AutosuggestProps.Options>;\n}\n\nexport const TagControl = React.forwardRef(\n  (\n    {\n      row,\n      value,\n      readOnly,\n      defaultOptions,\n      placeholder,\n      errorText,\n      loadingText,\n      suggestionText,\n      tooManySuggestionText,\n      limit,\n      filteringKey,\n      enteredTextLabel,\n      onChange,\n      onBlur,\n      onRequest,\n      initialOptionsRef,\n    }: TagControlProps,\n    ref: React.Ref<InputProps.Ref>\n  ) => {\n    const [options, setOptions] = useState<AutosuggestProps.Options>(defaultOptions);\n    const [statusType, setStatusType] = useState<DropdownStatusProps.StatusType>();\n    const requestCancelFnRef = useRef<{ cancel: () => void; isCancelled: () => boolean }>({\n      cancel: () => {},\n      isCancelled: () => false,\n    });\n    const latestFilteringQuery = useRef<FilteringParams>({ key: undefined, value: undefined });\n    const isSameQuery = (key: string | undefined, value: string) =>\n      latestFilteringQuery.current.key === key && latestFilteringQuery.current.value === value;\n\n    // Cancel any active promises on unmount.\n    useEffect(() => () => requestCancelFnRef.current.cancel(), []);\n\n    const onLoadItems = (filteringText: string) => {\n      if (!onRequest || isSameQuery(filteringKey, filteringText) || requestCancelFnRef.current.isCancelled()) {\n        return;\n      }\n      requestCancelFnRef.current.cancel();\n\n      if (filteringText === '' && initialOptionsRef?.current && initialOptionsRef.current.length > 0) {\n        // Load in the background, if the value is empty and we already have suggestions.\n        setOptions(initialOptionsRef.current);\n      }\n      if (latestFilteringQuery.current.key !== filteringKey) {\n        setOptions([]);\n      }\n      setStatusType('loading');\n\n      latestFilteringQuery.current = { key: filteringKey, value: filteringText };\n\n      const { promise, cancel, isCancelled } = makeCancellable(onRequest(filteringText));\n      promise\n        .then(newValues => {\n          const newOptions = newValues.map(value => ({ value }));\n          setStatusType(undefined);\n          setOptions(newOptions);\n          if (initialOptionsRef) {\n            initialOptionsRef.current = newOptions;\n          }\n        })\n        .catch(err => {\n          if (!(err instanceof PromiseCancelledSignal)) {\n            setStatusType('error');\n          }\n        });\n      requestCancelFnRef.current = { cancel, isCancelled };\n    };\n\n    return (\n      <InternalAutosuggest\n        ref={ref}\n        value={value}\n        readOnly={readOnly}\n        statusType={statusType}\n        options={options.length < limit ? options : []}\n        empty={options.length < limit ? suggestionText : tooManySuggestionText}\n        placeholder={placeholder}\n        errorText={errorText}\n        loadingText={loadingText}\n        enteredTextLabel={enteredTextLabel}\n        onChange={({ detail }) => onChange(detail.value, row)}\n        onBlur={() => onBlur?.(row)}\n        onFocus={() => {\n          onLoadItems('');\n        }}\n        onLoadItems={({ detail }) => {\n          onLoadItems(detail.filteringText);\n        }}\n      />\n    );\n  }\n);\n\nexport interface UndoButtonProps {\n  children: React.ReactNode;\n  onClick: () => void;\n}\n\nexport const UndoButton = React.forwardRef(\n  ({ children, onClick }: UndoButtonProps, ref: React.Ref<HTMLAnchorElement>) => {\n    const focusVisible = useFocusVisible();\n\n    return (\n      <a\n        {...focusVisible}\n        ref={ref}\n        role=\"button\"\n        tabIndex={0}\n        className={styles['undo-button']}\n        onClick={onClick}\n        onKeyDown={event => {\n          if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {\n            event.preventDefault();\n          }\n          // Enter activates the button on key down instead of key up.\n          if (event.keyCode === KeyCode.enter) {\n            onClick();\n          }\n        }}\n        onKeyUp={event => {\n          // Emulate button behavior, which also fires on space.\n          if (event.keyCode === KeyCode.space) {\n            onClick();\n          }\n        }}\n      >\n        {children}\n      </a>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}