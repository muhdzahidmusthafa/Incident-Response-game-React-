{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef, useState } from 'react';\nimport { addDays, addMonths, isSameMonth, startOfMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport useFocusVisible from '../../internal/hooks/focus-visible/index.js';\nimport CalendarHeader from './header';\nimport Grid from './grid';\nimport moveFocusHandler from './utils/move-focus-handler';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id/index.js';\nimport { formatDate, memoizedDate } from './utils/date.js';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update.js';\nimport { normalizeStartOfWeek } from './utils/locales.js';\n\nvar Calendar = function (_a) {\n  var locale = _a.locale,\n      startOfWeek = _a.startOfWeek,\n      displayedDate = _a.displayedDate,\n      todayAriaLabel = _a.todayAriaLabel,\n      selectedDate = _a.selectedDate,\n      isDateEnabled = _a.isDateEnabled,\n      onChangeMonth = _a.onChangeMonth,\n      onSelectDate = _a.onSelectDate,\n      previousMonthLabel = _a.previousMonthLabel,\n      nextMonthLabel = _a.nextMonthLabel;\n  var normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, locale);\n  var focusVisible = useFocusVisible();\n  var headerId = useUniqueId('calendar-dialog-title-');\n  var elementRef = useRef(null);\n  var gridWrapperRef = useRef(null);\n\n  var _b = useState(null),\n      focusedDate = _b[0],\n      setFocusedDate = _b[1];\n\n  var selectFocusedDate = function (selected, baseDate) {\n    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n      return selected;\n    }\n\n    var today = new Date();\n\n    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n      return today;\n    }\n\n    if (isDateEnabled(baseDate)) {\n      return baseDate;\n    }\n\n    return null;\n  };\n\n  var getBaseDate = function (date) {\n    var startDate = startOfMonth(date);\n\n    if (isDateEnabled(startDate)) {\n      return startDate;\n    }\n\n    return moveFocusHandler(startDate, isDateEnabled, function (date) {\n      return addDays(date, 1);\n    });\n  };\n\n  var baseDate = getBaseDate(displayedDate);\n  var focusedOrSelectedDate = focusedDate || selectFocusedDate(selectedDate, baseDate);\n\n  var onHeaderChangeMonthHandler = function (isPrevious) {\n    onChangeMonth(addMonths(baseDate, isPrevious ? -1 : 1));\n    setFocusedDate(null);\n  };\n\n  var onGridChangeMonthHandler = function (newMonth) {\n    onChangeMonth(newMonth);\n    setFocusedDate(null);\n  };\n\n  var onGridFocusDateHandler = function (_a) {\n    var date = _a.date;\n\n    if (date) {\n      var value = memoizedDate('focused', formatDate(date));\n      setFocusedDate(value);\n    }\n  };\n\n  var onGridSelectDateHandler = function (detail) {\n    onSelectDate(detail);\n    setFocusedDate(null);\n  }; // The focused date changes as a feedback to keyboard navigation in the grid.\n  // Once changed, the corresponding day button needs to receive the actual focus.\n\n\n  useEffectOnUpdate(function () {\n    var _a, _b;\n\n    if (focusedDate) {\n      (_b = (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(\".\".concat(styles['calendar-day-focusable']))) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n  }, [focusedDate]);\n\n  var onGridBlur = function (event) {\n    var _a;\n\n    var newFocusTargetIsInGrid = event.relatedTarget && ((_a = gridWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget));\n\n    if (!newFocusTargetIsInGrid) {\n      setFocusedDate(null);\n    }\n  };\n\n  return React.createElement(\"div\", __assign({}, focusVisible, {\n    className: styles.calendar,\n    tabIndex: 0,\n    role: \"application\",\n    \"aria-describedby\": headerId,\n    ref: elementRef\n  }), React.createElement(\"div\", {\n    className: styles['calendar-inner']\n  }, React.createElement(CalendarHeader, {\n    headerId: headerId,\n    baseDate: baseDate,\n    locale: locale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: previousMonthLabel,\n    nextMonthLabel: nextMonthLabel\n  }), React.createElement(\"div\", {\n    onBlur: onGridBlur,\n    ref: gridWrapperRef\n  }, React.createElement(Grid, {\n    locale: locale,\n    baseDate: baseDate,\n    isDateEnabled: isDateEnabled,\n    focusedDate: focusedOrSelectedDate,\n    onSelectDate: onGridSelectDateHandler,\n    onFocusDate: onGridFocusDateHandler,\n    onChangeMonth: onGridChangeMonthHandler,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: todayAriaLabel,\n    selectedDate: selectedDate,\n    handleFocusMove: moveFocusHandler\n  }))));\n};\n\nexport default Calendar;","map":{"version":3,"mappings":"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","names":["React","useRef","useState","addDays","addMonths","isSameMonth","startOfMonth","styles","useFocusVisible","CalendarHeader","Grid","moveFocusHandler","useUniqueId","formatDate","memoizedDate","useEffectOnUpdate","normalizeStartOfWeek","Calendar","_a","locale","startOfWeek","displayedDate","todayAriaLabel","selectedDate","isDateEnabled","onChangeMonth","onSelectDate","previousMonthLabel","nextMonthLabel","normalizedStartOfWeek","focusVisible","headerId","elementRef","gridWrapperRef","focusedDate","setFocusedDate","selectFocusedDate","selected","baseDate","today","Date","getBaseDate","date","startDate","focusedOrSelectedDate","onHeaderChangeMonthHandler","isPrevious","onGridChangeMonthHandler","newMonth","onGridFocusDateHandler","value","onGridSelectDateHandler","detail","current","querySelector","_b","focus","onGridBlur","event","newFocusTargetIsInGrid","relatedTarget","contains","className","calendar","tabIndex","role","ref","onBlur","onFocusDate","handleFocusMove"],"sourceRoot":"","sources":["../../../../src/date-picker/calendar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useState } from 'react';\nimport { addDays, addMonths, isSameMonth, startOfMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport { BaseComponentProps } from '../../internal/base-component';\nimport useFocusVisible from '../../internal/hooks/focus-visible/index.js';\nimport { DatePickerProps } from '../interfaces';\nimport { CalendarTypes } from './definitions';\nimport CalendarHeader from './header';\nimport Grid, { DateChangeHandlerNullable } from './grid';\nimport moveFocusHandler from './utils/move-focus-handler';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id/index.js';\nimport { formatDate, memoizedDate } from './utils/date.js';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update.js';\nimport { normalizeStartOfWeek } from './utils/locales.js';\nexport interface DateChangeHandler {\n  (detail: CalendarTypes.DateDetail): void;\n}\n\nexport interface MonthChangeHandler {\n  (newMonth: Date): void;\n}\n\nexport type DayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\ninterface HeaderChangeMonthHandler {\n  (isPreviousButtonClick?: boolean): void;\n}\n\ninterface CalendarProps extends BaseComponentProps {\n  locale: string;\n  startOfWeek: number | undefined;\n  selectedDate: Date | null;\n  displayedDate: Date;\n  isDateEnabled: DatePickerProps.IsDateEnabledFunction;\n  nextMonthLabel: string;\n  previousMonthLabel: string;\n  todayAriaLabel: string;\n\n  onChangeMonth: MonthChangeHandler;\n  onSelectDate: DateChangeHandler;\n}\n\nconst Calendar = ({\n  locale,\n  startOfWeek,\n  displayedDate,\n  todayAriaLabel,\n  selectedDate,\n  isDateEnabled,\n  onChangeMonth,\n  onSelectDate,\n  previousMonthLabel,\n  nextMonthLabel,\n}: CalendarProps) => {\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, locale);\n  const focusVisible = useFocusVisible();\n  const headerId = useUniqueId('calendar-dialog-title-');\n  const elementRef = useRef<HTMLDivElement>(null);\n  const gridWrapperRef = useRef<HTMLDivElement>(null);\n  const [focusedDate, setFocusedDate] = useState<Date | null>(null);\n\n  const selectFocusedDate = (selected: Date | null, baseDate: Date): Date | null => {\n    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n      return selected;\n    }\n    const today = new Date();\n    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n      return today;\n    }\n    if (isDateEnabled(baseDate)) {\n      return baseDate;\n    }\n    return null;\n  };\n\n  const getBaseDate = (date: Date) => {\n    const startDate = startOfMonth(date);\n    if (isDateEnabled(startDate)) {\n      return startDate;\n    }\n    return moveFocusHandler(startDate, isDateEnabled, (date: Date) => addDays(date, 1));\n  };\n\n  const baseDate: Date = getBaseDate(displayedDate);\n  const focusedOrSelectedDate = focusedDate || selectFocusedDate(selectedDate, baseDate);\n\n  const onHeaderChangeMonthHandler: HeaderChangeMonthHandler = isPrevious => {\n    onChangeMonth(addMonths(baseDate, isPrevious ? -1 : 1));\n    setFocusedDate(null);\n  };\n\n  const onGridChangeMonthHandler: MonthChangeHandler = newMonth => {\n    onChangeMonth(newMonth);\n    setFocusedDate(null);\n  };\n\n  const onGridFocusDateHandler: DateChangeHandlerNullable = ({ date }) => {\n    if (date) {\n      const value = memoizedDate('focused', formatDate(date));\n      setFocusedDate(value);\n    }\n  };\n\n  const onGridSelectDateHandler: DateChangeHandler = detail => {\n    onSelectDate(detail);\n    setFocusedDate(null);\n  };\n\n  // The focused date changes as a feedback to keyboard navigation in the grid.\n  // Once changed, the corresponding day button needs to receive the actual focus.\n  useEffectOnUpdate(() => {\n    if (focusedDate) {\n      (elementRef.current?.querySelector(`.${styles['calendar-day-focusable']}`) as HTMLDivElement)?.focus();\n    }\n  }, [focusedDate]);\n\n  const onGridBlur = (event: React.FocusEvent) => {\n    const newFocusTargetIsInGrid = event.relatedTarget && gridWrapperRef.current?.contains(event.relatedTarget as Node);\n    if (!newFocusTargetIsInGrid) {\n      setFocusedDate(null);\n    }\n  };\n\n  return (\n    <div\n      {...focusVisible}\n      className={styles.calendar}\n      tabIndex={0}\n      role=\"application\"\n      aria-describedby={headerId}\n      ref={elementRef}\n    >\n      <div className={styles['calendar-inner']}>\n        <CalendarHeader\n          headerId={headerId}\n          baseDate={baseDate}\n          locale={locale}\n          onChangeMonth={onHeaderChangeMonthHandler}\n          previousMonthLabel={previousMonthLabel}\n          nextMonthLabel={nextMonthLabel}\n        />\n        <div onBlur={onGridBlur} ref={gridWrapperRef}>\n          <Grid\n            locale={locale}\n            baseDate={baseDate}\n            isDateEnabled={isDateEnabled}\n            focusedDate={focusedOrSelectedDate}\n            onSelectDate={onGridSelectDateHandler}\n            onFocusDate={onGridFocusDateHandler}\n            onChangeMonth={onGridChangeMonthHandler}\n            startOfWeek={normalizedStartOfWeek}\n            todayAriaLabel={todayAriaLabel}\n            selectedDate={selectedDate}\n            handleFocusMove={moveFocusHandler}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}