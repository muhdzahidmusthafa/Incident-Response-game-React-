{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { nodeContains } from '../../internal/utils/dom';\nimport styles from '../styles.css.js';\nimport { isYThreshold } from '../utils';\nvar MAX_HOVER_MARGIN = 6;\nexport function useMouseHover(_a) {\n  var plotRef = _a.plotRef,\n      scaledSeries = _a.scaledSeries,\n      barGroups = _a.barGroups,\n      highlightSeries = _a.highlightSeries,\n      highlightPoint = _a.highlightPoint,\n      highlightGroup = _a.highlightGroup,\n      clearHighlightedSeries = _a.clearHighlightedSeries,\n      isGroupNavigation = _a.isGroupNavigation,\n      isHandlersDisabled = _a.isHandlersDisabled;\n\n  var _b = useState(null),\n      verticalMarkerLeft = _b[0],\n      setVerticalMarkerLeft = _b[1];\n\n  var onSeriesMouseMove = function (event) {\n    var svgRect = event.target.getBoundingClientRect();\n    var offsetX = event.clientX - svgRect.left;\n    var offsetY = event.clientY - svgRect.top;\n    var closestX = scaledSeries.map(function (v) {\n      return v.x;\n    }).reduce(function (prev, curr) {\n      return Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev;\n    }, -Infinity);\n    var closestY = scaledSeries.filter(function (v) {\n      return v.x === closestX || isYThreshold(v.series);\n    }).map(function (v) {\n      return v.y;\n    }).reduce(function (prev, curr) {\n      return Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev;\n    }, -Infinity);\n\n    if (isFinite(closestX)) {\n      setVerticalMarkerLeft(closestX);\n\n      if (isFinite(closestY) && Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN) {\n        var _a = scaledSeries.filter(function (s) {\n          return (s.x === closestX || isYThreshold(s.series)) && s.y === closestY;\n        })[0],\n            color = _a.color,\n            datum = _a.datum,\n            series = _a.series;\n        highlightSeries(series);\n        highlightPoint({\n          x: closestX,\n          y: closestY,\n          color: color,\n          datum: datum,\n          series: series\n        });\n      } else {\n        highlightSeries(null);\n        highlightPoint(null);\n      }\n    }\n  };\n\n  var onGroupMouseMove = function (event) {\n    var svgRect = event.target.getBoundingClientRect();\n    var offsetX = event.clientX - svgRect.left;\n    var offsetY = event.clientY - svgRect.top; // If hovering over some group - highlight it.\n\n    for (var groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {\n      var _a = barGroups[groupIndex].position,\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n\n      if (x <= offsetX && offsetX <= x + width && y <= offsetY && offsetY <= y + height) {\n        highlightGroup(groupIndex);\n        return;\n      }\n    } // Otherwise - clear the highlight.\n\n\n    clearHighlightedSeries();\n  };\n\n  var onSVGMouseMove = function (event) {\n    if (event.target === plotRef.current.svg && !isHandlersDisabled) {\n      if (isGroupNavigation) {\n        onGroupMouseMove(event);\n      } else if (scaledSeries.length > 0) {\n        onSeriesMouseMove(event);\n      }\n    }\n  };\n\n  var onSVGMouseOut = function (event) {\n    if (isHandlersDisabled) {\n      return;\n    }\n\n    if (!nodeContains(plotRef.current.svg, event.relatedTarget) || // `classList` is not supported on IE11 for SVG elements\n    (event.relatedTarget && event.relatedTarget.getAttribute('class') || '').split(' ').indexOf(styles.series) > -1) {\n      setVerticalMarkerLeft(null);\n      clearHighlightedSeries();\n    }\n  };\n\n  return {\n    verticalMarkerLeft: verticalMarkerLeft,\n    onSVGMouseMove: onSVGMouseMove,\n    onSVGMouseOut: onSVGMouseOut\n  };\n}","map":{"version":3,"mappings":"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","names":["useState","nodeContains","styles","isYThreshold","MAX_HOVER_MARGIN","useMouseHover","_a","plotRef","scaledSeries","barGroups","highlightSeries","highlightPoint","highlightGroup","clearHighlightedSeries","isGroupNavigation","isHandlersDisabled","verticalMarkerLeft","setVerticalMarkerLeft","onSeriesMouseMove","event","svgRect","target","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","closestX","map","x","reduce","prev","curr","Math","abs","Infinity","closestY","filter","v","series","y","isFinite","s","color","datum","onGroupMouseMove","groupIndex","length","position","width","height","onSVGMouseMove","current","svg","onSVGMouseOut","relatedTarget","getAttribute","split","indexOf"],"sourceRoot":"","sources":["../../../../src/mixed-line-bar-chart/hooks/use-mouse-hover.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { nodeContains } from '../../internal/utils/dom';\n\nimport { ScaledBarGroup } from '../make-scaled-bar-groups';\nimport { ScaledPoint } from '../make-scaled-series';\n\nimport styles from '../styles.css.js';\nimport { ChartPlotRef } from '../../internal/components/chart-plot';\nimport { MixedLineBarChartProps } from '../interfaces';\nimport { isYThreshold } from '../utils';\n\nconst MAX_HOVER_MARGIN = 6;\n\nexport interface UseMouseHoverProps<T> {\n  plotRef: React.RefObject<ChartPlotRef>;\n  scaledSeries: ReadonlyArray<ScaledPoint<T>>;\n  barGroups: ScaledBarGroup<T>[];\n  highlightSeries: (series: MixedLineBarChartProps.ChartSeries<T> | null) => void;\n  highlightPoint: (point: ScaledPoint<T> | null) => void;\n  highlightGroup: (groupIndex: number) => void;\n  clearHighlightedSeries: () => void;\n  isGroupNavigation: boolean;\n  isHandlersDisabled: boolean;\n}\n\nexport function useMouseHover<T>({\n  plotRef,\n  scaledSeries,\n  barGroups,\n  highlightSeries,\n  highlightPoint,\n  highlightGroup,\n  clearHighlightedSeries,\n  isGroupNavigation,\n  isHandlersDisabled,\n}: UseMouseHoverProps<T>) {\n  const [verticalMarkerLeft, setVerticalMarkerLeft] = useState<number | null>(null);\n\n  const onSeriesMouseMove = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    const svgRect = (event.target as SVGElement).getBoundingClientRect();\n    const offsetX = event.clientX - svgRect.left;\n    const offsetY = event.clientY - svgRect.top;\n\n    const closestX = scaledSeries\n      .map(v => v.x)\n      .reduce((prev, curr) => (Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev), -Infinity);\n\n    const closestY = scaledSeries\n      .filter(v => v.x === closestX || isYThreshold(v.series))\n      .map(v => v.y)\n      .reduce((prev, curr) => (Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev), -Infinity);\n\n    if (isFinite(closestX)) {\n      setVerticalMarkerLeft(closestX);\n      if (\n        isFinite(closestY) &&\n        Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN &&\n        Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN\n      ) {\n        const [{ color, datum, series }] = scaledSeries.filter(\n          s => (s.x === closestX || isYThreshold(s.series)) && s.y === closestY\n        );\n        highlightSeries(series);\n        highlightPoint({ x: closestX, y: closestY, color, datum, series });\n      } else {\n        highlightSeries(null);\n        highlightPoint(null);\n      }\n    }\n  };\n\n  const onGroupMouseMove = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    const svgRect = (event.target as SVGElement).getBoundingClientRect();\n    const offsetX = event.clientX - svgRect.left;\n    const offsetY = event.clientY - svgRect.top;\n\n    // If hovering over some group - highlight it.\n    for (let groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {\n      const {\n        position: { x, y, width, height },\n      } = barGroups[groupIndex];\n\n      if (x <= offsetX && offsetX <= x + width && y <= offsetY && offsetY <= y + height) {\n        highlightGroup(groupIndex);\n        return;\n      }\n    }\n    // Otherwise - clear the highlight.\n    clearHighlightedSeries();\n  };\n\n  const onSVGMouseMove = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    if (event.target === plotRef.current!.svg && !isHandlersDisabled) {\n      if (isGroupNavigation) {\n        onGroupMouseMove(event);\n      } else if (scaledSeries.length > 0) {\n        onSeriesMouseMove(event);\n      }\n    }\n  };\n\n  const onSVGMouseOut = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n    if (isHandlersDisabled) {\n      return;\n    }\n    if (\n      !nodeContains(plotRef.current!.svg, event.relatedTarget as Element) ||\n      // `classList` is not supported on IE11 for SVG elements\n      ((event.relatedTarget && (event.relatedTarget as Element).getAttribute('class')) || '')\n        .split(' ')\n        .indexOf(styles.series) > -1\n    ) {\n      setVerticalMarkerLeft(null);\n      clearHighlightedSeries();\n    }\n  };\n\n  return { verticalMarkerLeft, onSVGMouseMove, onSVGMouseOut };\n}\n"]},"metadata":{},"sourceType":"module"}