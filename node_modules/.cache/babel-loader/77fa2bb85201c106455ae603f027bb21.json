{"ast":null,"code":"import { KeyCode } from '../../internal/keycode';\nvar KEYBOARD_SINGLE_STEP_SIZE = 10;\nvar KEYBOARD_MULTIPLE_STEPS_SIZE = 60;\n\nvar getCurrentSize = function (splitPanelRef) {\n  if (!splitPanelRef || !splitPanelRef.current) {\n    return {\n      splitPanelHeight: 0,\n      splitPanelWidth: 0\n    };\n  }\n\n  var safeParseFloat = function (size) {\n    if (size === void 0) {\n      size = '';\n    }\n\n    return parseFloat(size) || 0;\n  };\n\n  return {\n    splitPanelHeight: safeParseFloat(splitPanelRef.current.style.height),\n    splitPanelWidth: safeParseFloat(splitPanelRef.current.style.width)\n  };\n};\n\nexport var useKeyboardEvents = function (_a) {\n  var position = _a.position,\n      setSidePanelWidth = _a.setSidePanelWidth,\n      setBottomPanelHeight = _a.setBottomPanelHeight,\n      splitPanelRef = _a.splitPanelRef;\n  return function (event) {\n    var setSizeFunction;\n    var currentSize;\n    var maxSize;\n\n    var _a = getCurrentSize(splitPanelRef),\n        splitPanelHeight = _a.splitPanelHeight,\n        splitPanelWidth = _a.splitPanelWidth;\n\n    if (position === 'side') {\n      setSizeFunction = setSidePanelWidth;\n      currentSize = splitPanelWidth; // don't need the exact max size as it's constrained in the set size function\n\n      maxSize = window.innerWidth;\n    } else {\n      setSizeFunction = setBottomPanelHeight;\n      currentSize = splitPanelHeight; // don't need the exact max size as it's constrained in the set size function\n\n      maxSize = window.innerHeight;\n    }\n\n    var isEventHandled = true;\n\n    switch (event.keyCode) {\n      case KeyCode.left:\n      case KeyCode.up:\n        setSizeFunction(currentSize + KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n\n      case KeyCode.right:\n      case KeyCode.down:\n        setSizeFunction(currentSize - KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n\n      case KeyCode.pageUp:\n        setSizeFunction(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n\n      case KeyCode.pageDown:\n        setSizeFunction(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n\n      case KeyCode.home:\n        setSizeFunction(maxSize);\n        break;\n\n      case KeyCode.end:\n        setSizeFunction(0);\n        break;\n\n      default:\n        isEventHandled = false;\n    }\n\n    if (isEventHandled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n};","map":{"version":3,"mappings":"AAGA,SAASA,OAAT,QAAwB,wBAAxB;AAGA,IAAMC,yBAAyB,GAAG,EAAlC;AACA,IAAMC,4BAA4B,GAAG,EAArC;;AAEA,IAAMC,cAAc,GAAG,UAACC,aAAD,EAAgD;EACrE,IAAI,CAACA,aAAD,IAAkB,CAACA,aAAa,CAACC,OAArC,EAA8C;IAC5C,OAAO;MACLC,gBAAgB,EAAE,CADb;MAELC,eAAe,EAAE;IAFZ,CAAP;EAID;;EAED,IAAMC,cAAc,GAAG,UAACC,IAAD,EAAU;IAAT;MAAAA;IAAS;;IAAK,iBAAU,CAACA,IAAD,CAAV,IAAoB,CAApB;EAAqB,CAA3D;;EAEA,OAAO;IACLH,gBAAgB,EAAEE,cAAc,CAACJ,aAAa,CAACC,OAAd,CAAsBK,KAAtB,CAA4BC,MAA7B,CAD3B;IAELJ,eAAe,EAAEC,cAAc,CAACJ,aAAa,CAACC,OAAd,CAAsBK,KAAtB,CAA4BE,KAA7B;EAF1B,CAAP;AAID,CAdD;;AAgBA,OAAO,IAAMC,iBAAiB,GAAG,UAACC,EAAD,EAKd;MAJjBC,QAAQ;MACRC,iBAAiB;MACjBC,oBAAoB;MACpBb,aAAa;EAEb,OAAO,UAACc,KAAD,EAA2B;IAChC,IAAIC,eAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,OAAJ;;IAEM,SAAwClB,cAAc,CAACC,aAAD,CAAtD;IAAA,IAAEE,gBAAgB,sBAAlB;IAAA,IAAoBC,eAAe,qBAAnC;;IAEN,IAAIQ,QAAQ,KAAK,MAAjB,EAAyB;MACvBI,eAAe,GAAGH,iBAAlB;MACAI,WAAW,GAAGb,eAAd,CAFuB,CAGvB;;MACAc,OAAO,GAAGC,MAAM,CAACC,UAAjB;IACD,CALD,MAKO;MACLJ,eAAe,GAAGF,oBAAlB;MACAG,WAAW,GAAGd,gBAAd,CAFK,CAGL;;MACAe,OAAO,GAAGC,MAAM,CAACE,WAAjB;IACD;;IAED,IAAIC,cAAc,GAAG,IAArB;;IACA,QAAQP,KAAK,CAACQ,OAAd;MACE,KAAK1B,OAAO,CAAC2B,IAAb;MACA,KAAK3B,OAAO,CAAC4B,EAAb;QACET,eAAe,CAACC,WAAW,GAAGnB,yBAAf,CAAf;QACA;;MACF,KAAKD,OAAO,CAAC6B,KAAb;MACA,KAAK7B,OAAO,CAAC8B,IAAb;QACEX,eAAe,CAACC,WAAW,GAAGnB,yBAAf,CAAf;QACA;;MACF,KAAKD,OAAO,CAAC+B,MAAb;QACEZ,eAAe,CAACC,WAAW,GAAGlB,4BAAf,CAAf;QACA;;MACF,KAAKF,OAAO,CAACgC,QAAb;QACEb,eAAe,CAACC,WAAW,GAAGlB,4BAAf,CAAf;QACA;;MACF,KAAKF,OAAO,CAACiC,IAAb;QACEd,eAAe,CAACE,OAAD,CAAf;QACA;;MACF,KAAKrB,OAAO,CAACkC,GAAb;QACEf,eAAe,CAAC,CAAD,CAAf;QACA;;MACF;QACEM,cAAc,GAAG,KAAjB;IAtBJ;;IAyBA,IAAIA,cAAJ,EAAoB;MAClBP,KAAK,CAACiB,cAAN;MACAjB,KAAK,CAACkB,eAAN;IACD;EACF,CAjDD;AAkDD,CAxDM","names":["KeyCode","KEYBOARD_SINGLE_STEP_SIZE","KEYBOARD_MULTIPLE_STEPS_SIZE","getCurrentSize","splitPanelRef","current","splitPanelHeight","splitPanelWidth","safeParseFloat","size","style","height","width","useKeyboardEvents","_a","position","setSidePanelWidth","setBottomPanelHeight","event","setSizeFunction","currentSize","maxSize","window","innerWidth","innerHeight","isEventHandled","keyCode","left","up","right","down","pageUp","pageDown","home","end","preventDefault","stopPropagation"],"sourceRoot":"","sources":["../../../../src/split-panel/utils/use-keyboard-events.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { SizeControlProps } from '../interfaces';\n\nconst KEYBOARD_SINGLE_STEP_SIZE = 10;\nconst KEYBOARD_MULTIPLE_STEPS_SIZE = 60;\n\nconst getCurrentSize = (splitPanelRef?: React.RefObject<HTMLDivElement>) => {\n  if (!splitPanelRef || !splitPanelRef.current) {\n    return {\n      splitPanelHeight: 0,\n      splitPanelWidth: 0,\n    };\n  }\n\n  const safeParseFloat = (size = '') => parseFloat(size) || 0;\n\n  return {\n    splitPanelHeight: safeParseFloat(splitPanelRef.current.style.height),\n    splitPanelWidth: safeParseFloat(splitPanelRef.current.style.width),\n  };\n};\n\nexport const useKeyboardEvents = ({\n  position,\n  setSidePanelWidth,\n  setBottomPanelHeight,\n  splitPanelRef,\n}: SizeControlProps) => {\n  return (event: React.KeyboardEvent) => {\n    let setSizeFunction;\n    let currentSize;\n    let maxSize;\n\n    const { splitPanelHeight, splitPanelWidth } = getCurrentSize(splitPanelRef);\n\n    if (position === 'side') {\n      setSizeFunction = setSidePanelWidth;\n      currentSize = splitPanelWidth;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerWidth;\n    } else {\n      setSizeFunction = setBottomPanelHeight;\n      currentSize = splitPanelHeight;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerHeight;\n    }\n\n    let isEventHandled = true;\n    switch (event.keyCode) {\n      case KeyCode.left:\n      case KeyCode.up:\n        setSizeFunction(currentSize + KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n      case KeyCode.right:\n      case KeyCode.down:\n        setSizeFunction(currentSize - KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n      case KeyCode.pageUp:\n        setSizeFunction(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.pageDown:\n        setSizeFunction(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.home:\n        setSizeFunction(maxSize);\n        break;\n      case KeyCode.end:\n        setSizeFunction(0);\n        break;\n      default:\n        isEventHandled = false;\n    }\n\n    if (isEventHandled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}