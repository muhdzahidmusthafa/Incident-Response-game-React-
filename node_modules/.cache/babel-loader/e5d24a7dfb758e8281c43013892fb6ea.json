{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { useUniqueId } from '../../hooks/use-unique-id';\nimport { KeyCode } from '../../keycode';\nimport LiveRegion from '../live-region/index';\nimport ApplicationController from './application-controller';\nimport FocusOutline from './focus-outline';\nimport focusSvgElement from '../../utils/focus-svg-element';\nvar DEFAULT_PLOT_FOCUS_OFFSET = 3;\nvar DEFAULT_ELEMENT_FOCUS_OFFSET = 3;\n/**\n  An extension for the SVG to be used for charts. It includes a controller element to\n  handle the focus and keyboard interactions in a way that is supported by screen readers.\n\n  The application mimics the aria-activedescendant behavior which is unsupported by Safari. The\n  activeElementRef is the pointer to the secondary-focus element and activeElementKey denotes when\n  the focus transition was made.\n\n  Alternatively, ariaLiveRegion can be used to make announcements.\n*/\n\nexport default forwardRef(ChartPlot);\n\nfunction ChartPlot(_a, ref) {\n  var _b;\n\n  var width = _a.width,\n      height = _a.height,\n      transform = _a.transform,\n      offsetTop = _a.offsetTop,\n      offsetBottom = _a.offsetBottom,\n      offsetLeft = _a.offsetLeft,\n      offsetRight = _a.offsetRight,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaRoleDescription = _a.ariaRoleDescription,\n      ariaDescription = _a.ariaDescription,\n      ariaDescribedby = _a.ariaDescribedby,\n      activeElementKey = _a.activeElementKey,\n      activeElementRef = _a.activeElementRef,\n      ariaLiveRegion = _a.ariaLiveRegion,\n      isClickable = _a.isClickable,\n      isPrecise = _a.isPrecise,\n      children = _a.children,\n      onMouseDown = _a.onMouseDown,\n      onKeyDown = _a.onKeyDown,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      _c = _a.focusOffset,\n      focusOffset = _c === void 0 ? DEFAULT_PLOT_FOCUS_OFFSET : _c,\n      _d = _a.activeElementFocusOffset,\n      activeElementFocusOffset = _d === void 0 ? DEFAULT_ELEMENT_FOCUS_OFFSET : _d,\n      restProps = __rest(_a, [\"width\", \"height\", \"transform\", \"offsetTop\", \"offsetBottom\", \"offsetLeft\", \"offsetRight\", \"ariaLabel\", \"ariaLabelledby\", \"ariaRoleDescription\", \"ariaDescription\", \"ariaDescribedby\", \"activeElementKey\", \"activeElementRef\", \"ariaLiveRegion\", \"isClickable\", \"isPrecise\", \"children\", \"onMouseDown\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"focusOffset\", \"activeElementFocusOffset\"]);\n\n  var svgRef = useRef(null);\n  var applicationRef = useRef(null);\n  var plotClickedRef = useRef(false);\n\n  var _e = useState(false),\n      isPlotFocused = _e[0],\n      setPlotFocused = _e[1];\n\n  var _f = useState(false),\n      isApplicationFocused = _f[0],\n      setApplicationFocused = _f[1];\n\n  var internalDescriptionId = useUniqueId('awsui-chart-plot__description');\n  var ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(' ');\n  useImperativeHandle(ref, function () {\n    return {\n      svg: svgRef.current,\n      focusPlot: function () {\n        return focusSvgElement(svgRef.current);\n      },\n      focusApplication: function () {\n        return applicationRef.current.focus();\n      }\n    };\n  });\n\n  var onPlotMouseDown = function (event) {\n    onMouseDown && onMouseDown(event); // Record the click was made for the application focus handler.\n\n    plotClickedRef.current = true;\n  };\n\n  var onPlotFocus = function (event) {\n    if (event.target === svgRef.current && !plotClickedRef.current) {\n      setPlotFocused(true);\n    } // The click should focus the underling application bypassing the svg.\n    else if (plotClickedRef.current) {\n      applicationRef.current.focus();\n    }\n  };\n\n  var onPlotBlur = function (event) {\n    if (event.target === svgRef.current) {\n      setPlotFocused(false);\n    }\n  }; // Once one of the expected keys is pressed the focus is delegated to the application controller.\n\n\n  var onPlotKeyDown = function (event) {\n    if (isPlotFocused) {\n      // Delegate the focus to the application if one of the expected keys was pressed.\n      var codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];\n\n      if (codes.indexOf(event.keyCode) !== -1) {\n        applicationRef.current.focus();\n      }\n    }\n  };\n\n  var onApplicationFocus = function (event) {\n    onFocus && onFocus(event, plotClickedRef.current ? 'mouse' : 'keyboard'); // \"Release\" the click reference to not affect the next call of this handler.\n\n    plotClickedRef.current = false;\n    setApplicationFocused(true);\n  };\n\n  var onApplicationBlur = function (event) {\n    onBlur && onBlur(event);\n    setApplicationFocused(false);\n  };\n\n  var onApplicationKeyDown = onKeyDown;\n  var plotFocusable = !isApplicationFocused;\n  var plotTabIndex = plotFocusable ? 0 : -1;\n  var plotAria = !isApplicationFocused ? {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescriptionId,\n    'aria-roledescription': ariaRoleDescription\n  } : {};\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", __assign({}, restProps, {\n    focusable: plotFocusable,\n    tabIndex: plotTabIndex,\n    role: \"application\",\n    \"aria-hidden\": \"false\"\n  }, plotAria, {\n    ref: svgRef,\n    width: width,\n    height: height,\n    style: {\n      marginTop: offsetTop,\n      marginBottom: offsetBottom,\n      marginLeft: offsetLeft,\n      marginRight: offsetRight\n    },\n    className: clsx(styles.root, (_b = {}, _b[styles.clickable] = isClickable, _b[styles.precise] = isPrecise, _b)),\n    onMouseDown: onPlotMouseDown,\n    onFocus: onPlotFocus,\n    onBlur: onPlotBlur,\n    onKeyDown: onPlotKeyDown\n  }), React.createElement(FocusOutline, {\n    elementRef: svgRef,\n    elementKey: isPlotFocused,\n    offset: focusOffset\n  }), React.createElement(\"g\", {\n    transform: transform,\n    role: \"group\"\n  }, React.createElement(ApplicationController, {\n    activeElementKey: activeElementKey || null,\n    activeElementRef: activeElementRef,\n    ref: applicationRef,\n    onFocus: onApplicationFocus,\n    onBlur: onApplicationBlur,\n    onKeyDown: onApplicationKeyDown\n  }), ariaDescription && plotFocusable && React.createElement(\"desc\", {\n    \"aria-hidden\": \"true\",\n    id: internalDescriptionId\n  }, ariaDescription), children, React.createElement(FocusOutline, {\n    elementRef: activeElementRef,\n    elementKey: isApplicationFocused && activeElementKey,\n    offset: activeElementFocusOffset\n  }))), React.createElement(LiveRegion, null, ariaLiveRegion));\n}","map":{"version":3,"mappings":"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","names":["React","forwardRef","useImperativeHandle","useRef","useState","clsx","styles","useUniqueId","KeyCode","LiveRegion","ApplicationController","FocusOutline","focusSvgElement","DEFAULT_PLOT_FOCUS_OFFSET","DEFAULT_ELEMENT_FOCUS_OFFSET","ChartPlot","_a","ref","height","transform","offsetTop","offsetBottom","offsetLeft","offsetRight","ariaLabel","ariaLabelledby","ariaRoleDescription","ariaDescription","ariaDescribedby","activeElementKey","activeElementRef","ariaLiveRegion","isClickable","isPrecise","children","onMouseDown","onKeyDown","onFocus","onBlur","_c","focusOffset","_d","activeElementFocusOffset","restProps","svgRef","applicationRef","plotClickedRef","isPlotFocused","setPlotFocused","isApplicationFocused","setApplicationFocused","internalDescriptionId","ariaDescriptionId","filter","Boolean","join","svg","current","focusPlot","focusApplication","focus","onPlotMouseDown","event","onPlotFocus","target","onPlotBlur","onPlotKeyDown","codes","space","enter","up","left","right","down","indexOf","keyCode","onApplicationFocus","onApplicationBlur","onApplicationKeyDown","plotFocusable","plotTabIndex","plotAria","focusable","tabIndex","role","width","style","marginTop","marginBottom","marginLeft","marginRight","className","root","_b","clickable","precise","elementRef","elementKey","offset","id"],"sourceRoot":"","sources":["../../../../../src/internal/components/chart-plot/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport styles from './styles.css.js';\nimport { useUniqueId } from '../../hooks/use-unique-id';\n\nimport { KeyCode } from '../../keycode';\nimport LiveRegion from '../live-region/index';\nimport ApplicationController, { ApplicationRef } from './application-controller';\nimport FocusOutline from './focus-outline';\nimport focusSvgElement from '../../utils/focus-svg-element';\n\nconst DEFAULT_PLOT_FOCUS_OFFSET = 3;\nconst DEFAULT_ELEMENT_FOCUS_OFFSET = 3;\n\nexport interface ChartPlotRef {\n  svg: SVGSVGElement;\n  focusPlot(): void;\n  focusApplication(): void;\n}\n\nexport interface ChartPlotProps {\n  width: number;\n  height: number;\n  transform?: string;\n  offsetTop?: number;\n  offsetBottom?: number;\n  offsetLeft?: number;\n  offsetRight?: number;\n  focusOffset?: number;\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  ariaDescription?: string;\n  ariaDescribedby?: string;\n  ariaRoleDescription?: string;\n  activeElementKey?: null | string | number | boolean;\n  activeElementRef?: React.RefObject<SVGGElement>;\n  activeElementFocusOffset?: number;\n  ariaLiveRegion?: React.ReactNode;\n  isClickable?: boolean;\n  isPrecise?: boolean;\n  onMouseDown?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onMouseMove?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onMouseOut?: (event: React.MouseEvent<SVGSVGElement>) => void;\n  onFocus?: (event: React.FocusEvent<SVGGElement>, trigger: 'mouse' | 'keyboard') => void;\n  onBlur?: (event: React.FocusEvent<SVGGElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<SVGGElement>) => void;\n  children: React.ReactNode;\n}\n\n/**\n  An extension for the SVG to be used for charts. It includes a controller element to\n  handle the focus and keyboard interactions in a way that is supported by screen readers.\n\n  The application mimics the aria-activedescendant behavior which is unsupported by Safari. The\n  activeElementRef is the pointer to the secondary-focus element and activeElementKey denotes when\n  the focus transition was made.\n\n  Alternatively, ariaLiveRegion can be used to make announcements.\n*/\nexport default forwardRef(ChartPlot);\n\nfunction ChartPlot(\n  {\n    width,\n    height,\n    transform,\n    offsetTop,\n    offsetBottom,\n    offsetLeft,\n    offsetRight,\n    ariaLabel,\n    ariaLabelledby,\n    ariaRoleDescription,\n    ariaDescription,\n    ariaDescribedby,\n    activeElementKey,\n    activeElementRef,\n    ariaLiveRegion,\n    isClickable,\n    isPrecise,\n    children,\n    onMouseDown,\n    onKeyDown,\n    onFocus,\n    onBlur,\n    focusOffset = DEFAULT_PLOT_FOCUS_OFFSET,\n    activeElementFocusOffset = DEFAULT_ELEMENT_FOCUS_OFFSET,\n    ...restProps\n  }: ChartPlotProps,\n  ref: React.Ref<ChartPlotRef>\n) {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const applicationRef = useRef<ApplicationRef>(null);\n  const plotClickedRef = useRef(false);\n  const [isPlotFocused, setPlotFocused] = useState(false);\n  const [isApplicationFocused, setApplicationFocused] = useState(false);\n\n  const internalDescriptionId = useUniqueId('awsui-chart-plot__description');\n  const ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(' ');\n\n  useImperativeHandle(ref, () => ({\n    svg: svgRef.current!,\n    focusPlot: () => focusSvgElement(svgRef.current!),\n    focusApplication: () => applicationRef.current!.focus(),\n  }));\n\n  const onPlotMouseDown = (event: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    onMouseDown && onMouseDown(event);\n    // Record the click was made for the application focus handler.\n    plotClickedRef.current = true;\n  };\n  const onPlotFocus = (event: React.FocusEvent<SVGSVGElement>) => {\n    if (event.target === svgRef.current && !plotClickedRef.current) {\n      setPlotFocused(true);\n    }\n    // The click should focus the underling application bypassing the svg.\n    else if (plotClickedRef.current) {\n      applicationRef.current!.focus();\n    }\n  };\n  const onPlotBlur = (event: React.FocusEvent<SVGSVGElement>) => {\n    if (event.target === svgRef.current) {\n      setPlotFocused(false);\n    }\n  };\n  // Once one of the expected keys is pressed the focus is delegated to the application controller.\n  const onPlotKeyDown = (event: React.KeyboardEvent) => {\n    if (isPlotFocused) {\n      // Delegate the focus to the application if one of the expected keys was pressed.\n      const codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];\n      if (codes.indexOf(event.keyCode) !== -1) {\n        applicationRef.current!.focus();\n      }\n    }\n  };\n\n  const onApplicationFocus = (event: React.FocusEvent<SVGGElement>) => {\n    onFocus && onFocus(event, plotClickedRef.current ? 'mouse' : 'keyboard');\n    // \"Release\" the click reference to not affect the next call of this handler.\n    plotClickedRef.current = false;\n    setApplicationFocused(true);\n  };\n  const onApplicationBlur = (event: React.FocusEvent<SVGGElement>) => {\n    onBlur && onBlur(event);\n    setApplicationFocused(false);\n  };\n  const onApplicationKeyDown = onKeyDown;\n\n  const plotFocusable = !isApplicationFocused;\n  const plotTabIndex = plotFocusable ? 0 : -1;\n  const plotAria = !isApplicationFocused\n    ? {\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledby,\n        'aria-describedby': ariaDescriptionId,\n        'aria-roledescription': ariaRoleDescription,\n      }\n    : {};\n\n  return (\n    <>\n      <svg\n        {...restProps}\n        focusable={plotFocusable}\n        tabIndex={plotTabIndex}\n        role=\"application\"\n        aria-hidden=\"false\"\n        {...plotAria}\n        ref={svgRef}\n        width={width}\n        height={height}\n        style={{\n          marginTop: offsetTop,\n          marginBottom: offsetBottom,\n          marginLeft: offsetLeft,\n          marginRight: offsetRight,\n        }}\n        className={clsx(styles.root, {\n          [styles.clickable]: isClickable,\n          [styles.precise]: isPrecise,\n        })}\n        onMouseDown={onPlotMouseDown}\n        onFocus={onPlotFocus}\n        onBlur={onPlotBlur}\n        onKeyDown={onPlotKeyDown}\n      >\n        <FocusOutline elementRef={svgRef} elementKey={isPlotFocused} offset={focusOffset} />\n\n        <g transform={transform} role=\"group\">\n          <ApplicationController\n            activeElementKey={activeElementKey || null}\n            activeElementRef={activeElementRef}\n            ref={applicationRef}\n            onFocus={onApplicationFocus}\n            onBlur={onApplicationBlur}\n            onKeyDown={onApplicationKeyDown}\n          />\n\n          {/* Only show description when plot is focusable to avoid repetition in Safari and Firefox */}\n          {ariaDescription && plotFocusable && (\n            <desc aria-hidden=\"true\" id={internalDescriptionId}>\n              {ariaDescription}\n            </desc>\n          )}\n\n          {children}\n\n          <FocusOutline\n            elementRef={activeElementRef}\n            elementKey={isApplicationFocused && activeElementKey}\n            offset={activeElementFocusOffset}\n          />\n        </g>\n      </svg>\n\n      <LiveRegion>{ariaLiveRegion}</LiveRegion>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}