{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { usePrevious } from '../../internal/hooks/use-previous';\n\nvar AsyncStore =\n/** @class */\nfunction () {\n  function AsyncStore(state) {\n    this._listeners = [];\n    this._state = state;\n  }\n\n  AsyncStore.prototype.get = function () {\n    return this._state;\n  };\n\n  AsyncStore.prototype.set = function (cb) {\n    var _this = this;\n\n    var prevState = this._state;\n    var newState = cb(prevState);\n    this._state = newState;\n    unstable_batchedUpdates(function () {\n      for (var _i = 0, _a = _this._listeners; _i < _a.length; _i++) {\n        var _b = _a[_i],\n            selector = _b[0],\n            listener = _b[1];\n\n        if (selector(prevState) !== selector(newState)) {\n          listener(newState, prevState);\n        }\n      }\n    });\n  };\n\n  AsyncStore.prototype.subscribe = function (selector, listener) {\n    var _this = this;\n\n    this._listeners.push([selector, listener]);\n\n    return function () {\n      return _this.unsubscribe(listener);\n    };\n  };\n\n  AsyncStore.prototype.unsubscribe = function (listener) {\n    for (var index = 0; index < this._listeners.length; index++) {\n      var _a = this._listeners[index],\n          storedListener = _a[1];\n\n      if (storedListener === listener) {\n        this._listeners.splice(index, 1);\n\n        break;\n      }\n    }\n  };\n\n  return AsyncStore;\n}();\n\nexport default AsyncStore;\nexport function useReaction(store, selector, effect) {\n  useLayoutEffect(function () {\n    var unsubscribe = store.subscribe(selector, function (newState, prevState) {\n      return effect(selector(newState), selector(prevState));\n    });\n    return unsubscribe;\n  }, // ignoring selector and effect as they are expected to stay constant\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [store]);\n}\nexport function useSelector(store, selector) {\n  var _a = useState(selector(store.get())),\n      state = _a[0],\n      setState = _a[1];\n\n  useReaction(store, selector, function (newState) {\n    setState(newState);\n  }); // When store changes we need the state to be updated synchronously to avoid inconsistencies.\n\n  var prevStore = usePrevious(store);\n\n  if (prevStore !== null && prevStore !== store) {\n    return selector(store.get());\n  }\n\n  return state;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,uBAAT,QAAwC,WAAxC;AACA,SAASC,WAAT,QAA4B,mCAA5B;;AAWA;AAAA;AAAA;EAIE,oBAAYC,KAAZ,EAAoB;IAFpB,kBAAkD,EAAlD;IAGE,KAAKC,MAAL,GAAcD,KAAd;EACD;;EAEDE;IACE,OAAO,KAAKD,MAAZ;EACD,CAFD;;EAIAC,qCAAIC,EAAJ,EAAuB;IAAvB;;IACE,IAAMC,SAAS,GAAG,KAAKH,MAAvB;IACA,IAAMI,QAAQ,GAAGF,EAAE,CAACC,SAAD,CAAnB;IAEA,KAAKH,MAAL,GAAcI,QAAd;IAEAP,uBAAuB,CAAC;MACtB,KAAmC,sBAAI,CAACQ,UAAxC,EAAmCC,cAAnC,EAAmCA,IAAnC,EAAoD;QAAzC;QAAA,IAACC,QAAQ,QAAT;QAAA,IAAWC,QAAQ,QAAnB;;QACT,IAAID,QAAQ,CAACJ,SAAD,CAAR,KAAwBI,QAAQ,CAACH,QAAD,CAApC,EAAgD;UAC9CI,QAAQ,CAACJ,QAAD,EAAWD,SAAX,CAAR;QACD;MACF;IACF,CANsB,CAAvB;EAOD,CAbD;;EAeAF,2CAAaM,QAAb,EAAuCC,QAAvC,EAA4D;IAA5D;;IACE,KAAKH,UAAL,CAAgBI,IAAhB,CAAqB,CAACF,QAAD,EAAWC,QAAX,CAArB;;IAEA,OAAO;MAAM,YAAI,CAACE,WAAL,CAAiBF,QAAjB;IAA0B,CAAvC;EACD,CAJD;;EAMAP,6CAAYO,QAAZ,EAAmC;IACjC,KAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKN,UAAL,CAAgBO,MAA5C,EAAoDD,KAAK,EAAzD,EAA6D;MACrD,SAAqB,KAAKN,UAAL,CAAgBM,KAAhB,CAArB;MAAA,IAAGE,cAAc,QAAjB;;MAEN,IAAIA,cAAc,KAAKL,QAAvB,EAAiC;QAC/B,KAAKH,UAAL,CAAgBS,MAAhB,CAAuBH,KAAvB,EAA8B,CAA9B;;QACA;MACD;IACF;EACF,CATD;;EAUF;AAAC,CA3CD;;;AA6CA,OAAM,SAAUI,WAAV,CAA4BC,KAA5B,EAA0DT,QAA1D,EAAoFU,MAApF,EAAuG;EAC3GtB,eAAe,CACb;IACE,IAAMe,WAAW,GAAGM,KAAK,CAACE,SAAN,CAAgBX,QAAhB,EAA0B,UAACH,QAAD,EAAWD,SAAX,EAAoB;MAChE,aAAM,CAACI,QAAQ,CAACH,QAAD,CAAT,EAAqBG,QAAQ,CAACJ,SAAD,CAA7B,CAAN;IAA+C,CAD7B,CAApB;IAGA,OAAOO,WAAP;EACD,CANY,EAOb;EACA;EACA,CAACM,KAAD,CATa,CAAf;AAWD;AAED,OAAM,SAAUG,WAAV,CAA4BH,KAA5B,EAA0DT,QAA1D,EAAkF;EAChF,SAAoBX,QAAQ,CAAIW,QAAQ,CAACS,KAAK,CAACI,GAAN,EAAD,CAAZ,CAA5B;EAAA,IAACrB,KAAK,QAAN;EAAA,IAAQsB,QAAQ,QAAhB;;EAENN,WAAW,CAACC,KAAD,EAAQT,QAAR,EAAkB,oBAAQ;IACnCc,QAAQ,CAACjB,QAAD,CAAR;EACD,CAFU,CAAX,CAHsF,CAOtF;;EACA,IAAMkB,SAAS,GAAGxB,WAAW,CAACkB,KAAD,CAA7B;;EACA,IAAIM,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKN,KAAxC,EAA+C;IAC7C,OAAOT,QAAQ,CAACS,KAAK,CAACI,GAAN,EAAD,CAAf;EACD;;EAED,OAAOrB,KAAP;AACD","names":["useLayoutEffect","useState","unstable_batchedUpdates","usePrevious","state","_state","AsyncStore","cb","prevState","newState","_listeners","_i","selector","listener","push","unsubscribe","index","length","storedListener","splice","useReaction","store","effect","subscribe","useSelector","get","setState","prevStore"],"sourceRoot":"","sources":["../../../../src/area-chart/model/async-store.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useLayoutEffect, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\nimport { usePrevious } from '../../internal/hooks/use-previous';\n\ntype Selector<S, R> = (state: S) => R;\ntype Listener<S> = (state: S, prevState: S) => any;\n\nexport interface ReadonlyAsyncStore<S> {\n  get(): S;\n  subscribe<R>(selector: Selector<S, R>, listener: Listener<S>): () => void;\n  unsubscribe(listener: Listener<any>): void;\n}\n\nexport default class AsyncStore<S> implements ReadonlyAsyncStore<S> {\n  _state: S;\n  _listeners: [Selector<S, any>, Listener<any>][] = [];\n\n  constructor(state: S) {\n    this._state = state;\n  }\n\n  get(): S {\n    return this._state;\n  }\n\n  set(cb: (state: S) => S): void {\n    const prevState = this._state;\n    const newState = cb(prevState);\n\n    this._state = newState;\n\n    unstable_batchedUpdates(() => {\n      for (const [selector, listener] of this._listeners) {\n        if (selector(prevState) !== selector(newState)) {\n          listener(newState, prevState);\n        }\n      }\n    });\n  }\n\n  subscribe<R>(selector: Selector<S, R>, listener: Listener<S>): () => void {\n    this._listeners.push([selector, listener]);\n\n    return () => this.unsubscribe(listener);\n  }\n\n  unsubscribe(listener: Listener<any>): void {\n    for (let index = 0; index < this._listeners.length; index++) {\n      const [, storedListener] = this._listeners[index];\n\n      if (storedListener === listener) {\n        this._listeners.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\n\nexport function useReaction<S, R>(store: ReadonlyAsyncStore<S>, selector: Selector<S, R>, effect: Listener<R>): void {\n  useLayoutEffect(\n    () => {\n      const unsubscribe = store.subscribe(selector, (newState, prevState) =>\n        effect(selector(newState), selector(prevState))\n      );\n      return unsubscribe;\n    },\n    // ignoring selector and effect as they are expected to stay constant\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [store]\n  );\n}\n\nexport function useSelector<S, R>(store: ReadonlyAsyncStore<S>, selector: Selector<S, R>): R {\n  const [state, setState] = useState<R>(selector(store.get()));\n\n  useReaction(store, selector, newState => {\n    setState(newState);\n  });\n\n  // When store changes we need the state to be updated synchronously to avoid inconsistencies.\n  const prevStore = usePrevious(store);\n  if (prevStore !== null && prevStore !== store) {\n    return selector(store.get());\n  }\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}