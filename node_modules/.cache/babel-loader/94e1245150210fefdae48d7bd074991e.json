{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nexport var ExpandableSectionHeader = function (_a) {\n  var id = _a.id,\n      className = _a.className,\n      variant = _a.variant,\n      children = _a.children,\n      expanded = _a.expanded,\n      ariaControls = _a.ariaControls,\n      ariaLabelledBy = _a.ariaLabelledBy,\n      onKeyUp = _a.onKeyUp,\n      onKeyDown = _a.onKeyDown,\n      onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n  var icon = React.createElement(InternalIcon, {\n    size: variant === 'container' ? 'medium' : 'normal',\n    className: clsx(styles.icon, expanded && styles.expanded),\n    name: \"caret-down-filled\"\n  });\n  var ariaAttributes = {\n    'aria-controls': ariaControls,\n    'aria-expanded': expanded\n  };\n  var triggerClassName = clsx(styles.trigger, styles[\"trigger-\".concat(variant)], expanded && styles['trigger-expanded']);\n\n  if (variant === 'navigation') {\n    return React.createElement(\"div\", {\n      id: id,\n      className: clsx(className, triggerClassName),\n      onClick: onClick\n    }, React.createElement(\"button\", __assign({\n      className: styles['icon-container'],\n      type: \"button\",\n      \"aria-labelledby\": ariaLabelledBy\n    }, focusVisible, ariaAttributes), icon), children);\n  }\n\n  return React.createElement(\"div\", __assign({\n    id: id,\n    role: \"button\",\n    className: clsx(className, triggerClassName, styles.focusable, expanded && styles.expanded),\n    tabIndex: 0,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onClick: onClick\n  }, focusVisible, ariaAttributes), React.createElement(\"div\", {\n    className: styles['icon-container']\n  }, icon), children);\n};","map":{"version":3,"mappings":";AAGA,OAAOA,KAAP,MAA0E,OAA1E;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAeA,OAAO,IAAMC,uBAAuB,GAAG,UAACC,EAAD,EAWR;MAV7BC,EAAE;MACFC,SAAS;MACTC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,YAAY;MACZC,cAAc;MACdC,OAAO;MACPC,SAAS;MACTC,OAAO;EAEP,IAAMC,YAAY,GAAGhB,eAAe,EAApC;EAEA,IAAMiB,IAAI,GACRlB,oBAACE,YAAD,EAAa;IACXiB,IAAI,EAAEV,OAAO,KAAK,WAAZ,GAA0B,QAA1B,GAAqC,QADhC;IAEXD,SAAS,EAAEL,IAAI,CAACC,MAAM,CAACc,IAAR,EAAcP,QAAQ,IAAIP,MAAM,CAACO,QAAjC,CAFJ;IAGXS,IAAI,EAAC;EAHM,CAAb,CADF;EAOA,IAAMC,cAAc,GAAG;IACrB,iBAAiBT,YADI;IAErB,iBAAiBD;EAFI,CAAvB;EAKA,IAAMW,gBAAgB,GAAGnB,IAAI,CAACC,MAAM,CAACmB,OAAR,EAAiBnB,MAAM,CAAC,kBAAWK,OAAX,CAAD,CAAvB,EAA+CE,QAAQ,IAAIP,MAAM,CAAC,kBAAD,CAAjE,CAA7B;;EACA,IAAIK,OAAO,KAAK,YAAhB,EAA8B;IAC5B,OACET;MAAKO,EAAE,EAAEA,EAAT;MAAaC,SAAS,EAAEL,IAAI,CAACK,SAAD,EAAYc,gBAAZ,CAA5B;MAA2DN,OAAO,EAAEA;IAApE,GACEhB;MACEQ,SAAS,EAAEJ,MAAM,CAAC,gBAAD,CADnB;MAEEoB,IAAI,EAAC,QAFP;MAEe,mBACIX;IAHnB,GAIMI,YAJN,EAKMI,cALN,GAOGH,IAPH,CADF,EAUGR,QAVH,CADF;EAcD;;EAED,OACEV;IACEO,EAAE,EAAEA,EADN;IAEEkB,IAAI,EAAC,QAFP;IAGEjB,SAAS,EAAEL,IAAI,CAACK,SAAD,EAAYc,gBAAZ,EAA8BlB,MAAM,CAACsB,SAArC,EAAgDf,QAAQ,IAAIP,MAAM,CAACO,QAAnE,CAHjB;IAIEgB,QAAQ,EAAE,CAJZ;IAKEb,OAAO,EAAEA,OALX;IAMEC,SAAS,EAAEA,SANb;IAOEC,OAAO,EAAEA;EAPX,GAQMC,YARN,EASMI,cATN,GAWErB;IAAKQ,SAAS,EAAEJ,MAAM,CAAC,gBAAD;EAAtB,GAA2Cc,IAA3C,CAXF,EAYGR,QAZH,CADF;AAgBD,CA5DM","names":["React","useFocusVisible","InternalIcon","clsx","styles","ExpandableSectionHeader","_a","id","className","variant","children","expanded","ariaControls","ariaLabelledBy","onKeyUp","onKeyDown","onClick","focusVisible","icon","size","name","ariaAttributes","triggerClassName","trigger","type","role","focusable","tabIndex"],"sourceRoot":"","sources":["../../../src/expandable-section/expandable-section-header.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ExpandableSectionProps } from './interfaces';\nimport React, { KeyboardEventHandler, MouseEventHandler, ReactNode } from 'react';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\n\ninterface ExpandableSectionHeaderProps {\n  id: string;\n  className?: string;\n  variant: ExpandableSectionProps.Variant;\n  children?: ReactNode;\n  expanded: boolean;\n  ariaControls: string;\n  ariaLabelledBy: string;\n  onKeyUp: KeyboardEventHandler;\n  onKeyDown: KeyboardEventHandler;\n  onClick: MouseEventHandler;\n}\n\nexport const ExpandableSectionHeader = ({\n  id,\n  className,\n  variant,\n  children,\n  expanded,\n  ariaControls,\n  ariaLabelledBy,\n  onKeyUp,\n  onKeyDown,\n  onClick,\n}: ExpandableSectionHeaderProps) => {\n  const focusVisible = useFocusVisible();\n\n  const icon = (\n    <InternalIcon\n      size={variant === 'container' ? 'medium' : 'normal'}\n      className={clsx(styles.icon, expanded && styles.expanded)}\n      name=\"caret-down-filled\"\n    />\n  );\n  const ariaAttributes = {\n    'aria-controls': ariaControls,\n    'aria-expanded': expanded,\n  };\n\n  const triggerClassName = clsx(styles.trigger, styles[`trigger-${variant}`], expanded && styles['trigger-expanded']);\n  if (variant === 'navigation') {\n    return (\n      <div id={id} className={clsx(className, triggerClassName)} onClick={onClick}>\n        <button\n          className={styles['icon-container']}\n          type=\"button\"\n          aria-labelledby={ariaLabelledBy}\n          {...focusVisible}\n          {...ariaAttributes}\n        >\n          {icon}\n        </button>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id={id}\n      role=\"button\"\n      className={clsx(className, triggerClassName, styles.focusable, expanded && styles.expanded)}\n      tabIndex={0}\n      onKeyUp={onKeyUp}\n      onKeyDown={onKeyDown}\n      onClick={onClick}\n      {...focusVisible}\n      {...ariaAttributes}\n    >\n      <div className={styles['icon-container']}>{icon}</div>\n      {children}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}