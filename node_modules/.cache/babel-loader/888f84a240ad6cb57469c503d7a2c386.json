{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { TabButton } from './tab-button';\nimport { InternalButton } from '../button/internal';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\n\nfunction InternalStatusBar(_a) {\n  var _b, _c;\n\n  var languageLabel = _a.languageLabel,\n      cursorPosition = _a.cursorPosition,\n      paneStatus = _a.paneStatus,\n      onErrorPaneToggle = _a.onErrorPaneToggle,\n      onWarningPaneToggle = _a.onWarningPaneToggle,\n      onTabFocus = _a.onTabFocus,\n      onTabBlur = _a.onTabBlur,\n      errorsTabRef = _a.errorsTabRef,\n      warningsTabRef = _a.warningsTabRef,\n      isTabFocused = _a.isTabFocused,\n      paneId = _a.paneId,\n      onPreferencesOpen = _a.onPreferencesOpen,\n      i18nStrings = _a.i18nStrings,\n      errorCount = _a.errorCount,\n      warningCount = _a.warningCount,\n      leftBarRef = _a.leftBarRef,\n      isVirtual = _a.isVirtual,\n      minifyCounters = _a.minifyCounters,\n      isRefresh = _a.isRefresh;\n  var errorText = \"\".concat(i18nStrings.errorsTab, \": \").concat(errorCount);\n  var warningText = \"\".concat(i18nStrings.warningsTab, \": \").concat(warningCount); // Virtual status bar is inaccessible for screen readers and keyboard interactions.\n\n  return React.createElement(\"div\", {\n    className: clsx(styles['status-bar'], (_b = {}, _b[styles['status-bar-with-hidden-pane']] = paneStatus === 'hidden', _b[styles['status-bar-virtual']] = isVirtual, _b)),\n    \"aria-hidden\": isVirtual\n  }, React.createElement(\"div\", {\n    className: clsx(styles['status-bar__left'], (_c = {}, _c[styles['status-bar__left-virtual']] = isVirtual, _c)),\n    ref: leftBarRef\n  }, React.createElement(\"span\", {\n    className: styles['status-bar__language-mode']\n  }, languageLabel), React.createElement(\"span\", {\n    className: styles['status-bar__cursor-position']\n  }, cursorPosition), React.createElement(\"div\", {\n    role: \"tablist\"\n  }, React.createElement(TabButton, {\n    text: minifyCounters ? \" \".concat(errorCount) : errorText,\n    className: styles['tab-button--errors'],\n    iconName: \"status-negative\",\n    disabled: errorCount === 0 || isVirtual,\n    active: paneStatus === 'error',\n    onClick: onErrorPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: errorsTabRef,\n    ariaLabel: errorText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  }), React.createElement(\"span\", {\n    className: styles['tab-button--divider']\n  }), React.createElement(TabButton, {\n    text: minifyCounters ? \" \".concat(warningCount) : warningText,\n    className: styles['tab-button--warnings'],\n    iconName: \"status-warning\",\n    disabled: warningCount === 0 || isVirtual,\n    active: paneStatus === 'warning',\n    onClick: onWarningPaneToggle,\n    onFocus: onTabFocus,\n    onBlur: onTabBlur,\n    ref: warningsTabRef,\n    tabIndex: paneStatus === 'error' && isTabFocused ? -1 : undefined,\n    ariaHidden: paneStatus === 'error' && isTabFocused ? true : undefined,\n    ariaLabel: warningText,\n    paneId: paneId,\n    isRefresh: isRefresh\n  }))), React.createElement(\"div\", {\n    className: styles['status-bar__right']\n  }, React.createElement(\"div\", {\n    className: styles['status-bar__cog-button']\n  }, React.createElement(InternalButton, {\n    disabled: isVirtual,\n    formAction: \"none\",\n    variant: \"icon\",\n    iconName: \"settings\",\n    iconAlt: \"Settings\",\n    ariaLabel: i18nStrings.preferencesButtonAriaLabel,\n    onClick: onPreferencesOpen,\n    __nativeAttributes: {\n      tabIndex: paneStatus !== 'hidden' && isTabFocused ? -1 : undefined,\n      'aria-hidden': paneStatus !== 'hidden' && isTabFocused ? true : undefined\n    }\n  }))));\n}\n\nexport var StatusBar = function (props) {\n  // create a virtual status bar, in order to calculate the width with full tab button text\n  // and decide if tab button text needs to be reduced\n  var _a = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      realWidth = _a[0],\n      statusLeftBarRef = _a[1];\n\n  var _b = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      virtualWidth = _b[0],\n      virtualStatusLeftBarRef = _b[1];\n\n  var minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;\n  return React.createElement(React.Fragment, null, React.createElement(InternalStatusBar, __assign({\n    isVirtual: false\n  }, props, {\n    leftBarRef: statusLeftBarRef,\n    minifyCounters: minifyCounters\n  })), React.createElement(InternalStatusBar, __assign({\n    isVirtual: true\n  }, props, {\n    leftBarRef: virtualStatusLeftBarRef,\n    minifyCounters: false\n  })));\n};","map":{"version":3,"mappings":"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","names":["React","clsx","styles","TabButton","InternalButton","useContainerQuery","InternalStatusBar","_a","languageLabel","cursorPosition","paneStatus","onErrorPaneToggle","onWarningPaneToggle","onTabFocus","onTabBlur","errorsTabRef","warningsTabRef","isTabFocused","paneId","onPreferencesOpen","i18nStrings","errorCount","warningCount","leftBarRef","isVirtual","minifyCounters","isRefresh","errorText","errorsTab","concat","warningText","warningsTab","className","_b","_c","ref","role","text","iconName","disabled","active","onClick","onFocus","onBlur","ariaLabel","tabIndex","undefined","ariaHidden","formAction","variant","iconAlt","preferencesButtonAriaLabel","__nativeAttributes","StatusBar","props","width","realWidth","statusLeftBarRef","virtualWidth","virtualStatusLeftBarRef","__assign"],"sourceRoot":"","sources":["../../../src/code-editor/status-bar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { TabButton } from './tab-button';\nimport { InternalButton } from '../button/internal';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport { CodeEditorProps } from './interfaces';\n\ninterface StatusBarProps {\n  languageLabel: string;\n  cursorPosition: string;\n  paneStatus: string;\n  errorsTabRef: React.RefObject<HTMLButtonElement>;\n  warningsTabRef: React.RefObject<HTMLButtonElement>;\n  isTabFocused: boolean;\n  paneId: string;\n  i18nStrings: CodeEditorProps.I18nStrings;\n  errorCount: number;\n  warningCount: number;\n  isRefresh: boolean;\n\n  onErrorPaneToggle: () => void;\n  onWarningPaneToggle: () => void;\n  onTabFocus?: React.FocusEventHandler<HTMLButtonElement>;\n  onTabBlur?: React.FocusEventHandler<HTMLButtonElement>;\n  onPreferencesOpen: () => void;\n  onHeightChange?: (height: number | null) => void;\n}\n\ntype InternalStatusBarProps = StatusBarProps & {\n  leftBarRef: React.Ref<HTMLDivElement>;\n  isVirtual: boolean;\n  minifyCounters: boolean;\n};\n\nfunction InternalStatusBar({\n  languageLabel,\n  cursorPosition,\n  paneStatus,\n  onErrorPaneToggle,\n  onWarningPaneToggle,\n  onTabFocus,\n  onTabBlur,\n  errorsTabRef,\n  warningsTabRef,\n  isTabFocused,\n  paneId,\n  onPreferencesOpen,\n  i18nStrings,\n  errorCount,\n  warningCount,\n  leftBarRef,\n  isVirtual,\n  minifyCounters,\n  isRefresh,\n}: InternalStatusBarProps) {\n  const errorText = `${i18nStrings.errorsTab}: ${errorCount}`;\n  const warningText = `${i18nStrings.warningsTab}: ${warningCount}`;\n\n  // Virtual status bar is inaccessible for screen readers and keyboard interactions.\n\n  return (\n    <div\n      className={clsx(styles['status-bar'], {\n        [styles['status-bar-with-hidden-pane']]: paneStatus === 'hidden',\n        [styles['status-bar-virtual']]: isVirtual,\n      })}\n      aria-hidden={isVirtual}\n    >\n      <div\n        className={clsx(styles['status-bar__left'], {\n          [styles['status-bar__left-virtual']]: isVirtual,\n        })}\n        ref={leftBarRef}\n      >\n        <span className={styles['status-bar__language-mode']}>{languageLabel}</span>\n        <span className={styles['status-bar__cursor-position']}>{cursorPosition}</span>\n\n        <div role=\"tablist\">\n          <TabButton\n            text={minifyCounters ? ` ${errorCount}` : errorText}\n            className={styles['tab-button--errors']}\n            iconName=\"status-negative\"\n            disabled={errorCount === 0 || isVirtual}\n            active={paneStatus === 'error'}\n            onClick={onErrorPaneToggle}\n            onFocus={onTabFocus}\n            onBlur={onTabBlur}\n            ref={errorsTabRef}\n            ariaLabel={errorText}\n            paneId={paneId}\n            isRefresh={isRefresh}\n          />\n          <span className={styles['tab-button--divider']}></span>\n          <TabButton\n            text={minifyCounters ? ` ${warningCount}` : warningText}\n            className={styles['tab-button--warnings']}\n            iconName=\"status-warning\"\n            disabled={warningCount === 0 || isVirtual}\n            active={paneStatus === 'warning'}\n            onClick={onWarningPaneToggle}\n            onFocus={onTabFocus}\n            onBlur={onTabBlur}\n            ref={warningsTabRef}\n            tabIndex={paneStatus === 'error' && isTabFocused ? -1 : undefined}\n            ariaHidden={paneStatus === 'error' && isTabFocused ? true : undefined}\n            ariaLabel={warningText}\n            paneId={paneId}\n            isRefresh={isRefresh}\n          />\n        </div>\n      </div>\n\n      <div className={styles['status-bar__right']}>\n        <div className={styles['status-bar__cog-button']}>\n          <InternalButton\n            disabled={isVirtual}\n            formAction=\"none\"\n            variant=\"icon\"\n            iconName=\"settings\"\n            iconAlt=\"Settings\"\n            ariaLabel={i18nStrings.preferencesButtonAriaLabel}\n            onClick={onPreferencesOpen}\n            __nativeAttributes={{\n              tabIndex: paneStatus !== 'hidden' && isTabFocused ? -1 : undefined,\n              'aria-hidden': paneStatus !== 'hidden' && isTabFocused ? true : undefined,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const StatusBar = (props: StatusBarProps) => {\n  // create a virtual status bar, in order to calculate the width with full tab button text\n  // and decide if tab button text needs to be reduced\n  const [realWidth, statusLeftBarRef] = useContainerQuery(rect => rect.width);\n  const [virtualWidth, virtualStatusLeftBarRef] = useContainerQuery(rect => rect.width);\n\n  const minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;\n\n  return (\n    <>\n      <InternalStatusBar isVirtual={false} {...props} leftBarRef={statusLeftBarRef} minifyCounters={minifyCounters} />\n      <InternalStatusBar isVirtual={true} {...props} leftBarRef={virtualStatusLeftBarRef} minifyCounters={false} />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}