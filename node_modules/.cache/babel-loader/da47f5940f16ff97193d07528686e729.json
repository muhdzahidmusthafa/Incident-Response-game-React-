{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nexport default function Main() {\n  var _a;\n\n  var _b = useContext(AppLayoutContext),\n      breadcrumbs = _b.breadcrumbs,\n      content = _b.content,\n      contentHeader = _b.contentHeader,\n      contentType = _b.contentType,\n      disableContentPaddings = _b.disableContentPaddings,\n      dynamicOverlapHeight = _b.dynamicOverlapHeight,\n      hasNotificationsContent = _b.hasNotificationsContent,\n      isNavigationOpen = _b.isNavigationOpen,\n      isSplitPanelOpen = _b.isSplitPanelOpen,\n      isToolsOpen = _b.isToolsOpen,\n      isMobile = _b.isMobile,\n      isAnyPanelOpen = _b.isAnyPanelOpen,\n      mainElement = _b.mainElement;\n\n  var splitPanelPosition = useContext(SplitPanelContext).position;\n  var isUnfocusable = isMobile && isAnyPanelOpen;\n  return React.createElement(\"div\", {\n    className: clsx(styles.container, styles[\"content-type-\".concat(contentType)], styles[\"split-panel-position-\".concat(splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom')], (_a = {}, _a[styles['disable-content-paddings']] = disableContentPaddings, _a[styles['has-breadcrumbs']] = breadcrumbs, _a[styles['has-dynamic-overlap-height']] = dynamicOverlapHeight > 0, _a[styles['has-header']] = contentHeader, _a[styles['has-notifications-content']] = hasNotificationsContent, _a[styles['is-navigation-open']] = isNavigationOpen, _a[styles['is-tools-open']] = isToolsOpen, _a[styles['is-split-panel-open']] = isSplitPanelOpen, _a[styles.unfocusable] = isUnfocusable, _a), testutilStyles.content),\n    ref: mainElement\n  }, content);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,iBAAT,QAAkC,4CAAlC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AAEA,eAAc,SAAUC,IAAV,GAAc;;;EACpB,SAcFN,UAAU,CAACE,gBAAD,CAdR;EAAA,IACJK,WAAW,iBADP;EAAA,IAEJC,OAAO,aAFH;EAAA,IAGJC,aAAa,mBAHT;EAAA,IAIJC,WAAW,iBAJP;EAAA,IAKJC,sBAAsB,4BALlB;EAAA,IAMJC,oBAAoB,0BANhB;EAAA,IAOJC,uBAAuB,6BAPnB;EAAA,IAQJC,gBAAgB,sBARZ;EAAA,IASJC,gBAAgB,sBATZ;EAAA,IAUJC,WAAW,iBAVP;EAAA,IAWJC,QAAQ,cAXJ;EAAA,IAYJC,cAAc,oBAZV;EAAA,IAaJC,WAAW,iBAbP;;EAgBE,IAAUC,kBAAkB,GAAKpB,UAAU,CAACG,iBAAD,CAAV,CAA6BkB,QAA9D;EACR,IAAMC,aAAa,GAAGL,QAAQ,IAAIC,cAAlC;EAEA,OACEnB;IACEwB,SAAS,EAAEtB,IAAI,CACbG,MAAM,CAACoB,SADM,EAEbpB,MAAM,CAAC,uBAAgBM,WAAhB,CAAD,CAFO,EAGbN,MAAM,CAAC,+BAAwBgB,kBAAkB,SAAlB,sBAAkB,WAAlB,wBAAsB,QAA9C,CAAD,CAHO,GAGmDK,SAE9DA,GAACrB,MAAM,CAAC,0BAAD,CAAP,IAAsCO,sBAFwB,EAG9Dc,GAACrB,MAAM,CAAC,iBAAD,CAAP,IAA6BG,WAHiC,EAI9DkB,GAACrB,MAAM,CAAC,4BAAD,CAAP,IAAwCQ,oBAAoB,GAAG,CAJD,EAK9Da,GAACrB,MAAM,CAAC,YAAD,CAAP,IAAwBK,aALsC,EAM9DgB,GAACrB,MAAM,CAAC,2BAAD,CAAP,IAAuCS,uBANuB,EAO9DY,GAACrB,MAAM,CAAC,oBAAD,CAAP,IAAgCU,gBAP8B,EAQ9DW,GAACrB,MAAM,CAAC,eAAD,CAAP,IAA2BY,WARmC,EAS9DS,GAACrB,MAAM,CAAC,qBAAD,CAAP,IAAiCW,gBAT6B,EAU9DU,GAACrB,MAAM,CAACsB,WAAR,IAAsBJ,aAVwC,IAHnD,GAebjB,cAAc,CAACG,OAfF,CADjB;IAkBEmB,GAAG,EAAER;EAlBP,GAoBGX,OApBH,CADF;AAwBD","names":["React","useContext","clsx","AppLayoutContext","SplitPanelContext","styles","testutilStyles","Main","breadcrumbs","content","contentHeader","contentType","disableContentPaddings","dynamicOverlapHeight","hasNotificationsContent","isNavigationOpen","isSplitPanelOpen","isToolsOpen","isMobile","isAnyPanelOpen","mainElement","splitPanelPosition","position","isUnfocusable","className","container","_a","unfocusable","ref"],"sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/main.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nexport default function Main() {\n  const {\n    breadcrumbs,\n    content,\n    contentHeader,\n    contentType,\n    disableContentPaddings,\n    dynamicOverlapHeight,\n    hasNotificationsContent,\n    isNavigationOpen,\n    isSplitPanelOpen,\n    isToolsOpen,\n    isMobile,\n    isAnyPanelOpen,\n    mainElement,\n  } = useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition } = useContext(SplitPanelContext);\n  const isUnfocusable = isMobile && isAnyPanelOpen;\n\n  return (\n    <div\n      className={clsx(\n        styles.container,\n        styles[`content-type-${contentType}`],\n        styles[`split-panel-position-${splitPanelPosition ?? 'bottom'}`],\n        {\n          [styles['disable-content-paddings']]: disableContentPaddings,\n          [styles['has-breadcrumbs']]: breadcrumbs,\n          [styles['has-dynamic-overlap-height']]: dynamicOverlapHeight > 0,\n          [styles['has-header']]: contentHeader,\n          [styles['has-notifications-content']]: hasNotificationsContent,\n          [styles['is-navigation-open']]: isNavigationOpen,\n          [styles['is-tools-open']]: isToolsOpen,\n          [styles['is-split-panel-open']]: isSplitPanelOpen,\n          [styles.unfocusable]: isUnfocusable,\n        },\n        testutilStyles.content\n      )}\n      ref={mainElement}\n    >\n      {content}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}