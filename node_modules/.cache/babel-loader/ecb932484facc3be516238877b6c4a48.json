{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMemo } from 'react';\n/**\n * useMergeRefs merges multiple refs into single ref callback.\n *\n * For example\n *  const mergedRef = useMergeRefs(ref1, ref2, ref3)\n *  <div ref={refs}>...</div>\n */\n\nexport function useMergeRefs() {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  return useMemo(function () {\n    if (refs.every(function (ref) {\n      return ref === null || ref === undefined;\n    })) {\n      return null;\n    }\n\n    return function (value) {\n      refs.forEach(function (ref) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref !== null && ref !== undefined) {\n          ref.current = value;\n        }\n      });\n    }; // ESLint expects an array literal which we can not provide here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAgBA,OAAhB,QAA+B,OAA/B;AAEA;;;;;;;;AAOA,OAAM,SAAUC,YAAV,GAAsB;EAAC;;OAAA,yCAAuF;IAAvFC;;;EAC3B,OAAOF,OAAO,CAAC;IACb,IAAIE,IAAI,CAACC,KAAL,CAAW,eAAG;MAAI,UAAG,KAAK,IAAR,IAAgBC,GAAG,KAAKC,SAAxB;IAAiC,CAAnD,CAAJ,EAA0D;MACxD,OAAO,IAAP;IACD;;IACD,OAAO,UAACC,KAAD,EAAW;MAChBJ,IAAI,CAACK,OAAL,CAAa,eAAG;QACd,IAAI,OAAOH,GAAP,KAAe,UAAnB,EAA+B;UAC7BA,GAAG,CAACE,KAAD,CAAH;QACD,CAFD,MAEO,IAAIF,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA5B,EAAuC;UAC3CD,GAAmC,CAACI,OAApC,GAA8CF,KAA9C;QACF;MACF,CAND;IAOD,CARD,CAJa,CAab;IACA;EACD,CAfa,EAeXJ,IAfW,CAAd;AAgBD","names":["useMemo","useMergeRefs","refs","every","ref","undefined","value","forEach","current"],"sourceRoot":"","sources":["../../../../../src/internal/hooks/use-merge-refs/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\n\n/**\n * useMergeRefs merges multiple refs into single ref callback.\n *\n * For example\n *  const mergedRef = useMergeRefs(ref1, ref2, ref3)\n *  <div ref={refs}>...</div>\n */\nexport function useMergeRefs(...refs: Array<React.RefCallback<any> | React.MutableRefObject<any> | null | undefined>) {\n  return useMemo(() => {\n    if (refs.every(ref => ref === null || ref === undefined)) {\n      return null;\n    }\n    return (value: any) => {\n      refs.forEach(ref => {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref !== null && ref !== undefined) {\n          (ref as React.MutableRefObject<any>).current = value;\n        }\n      });\n    };\n    // ESLint expects an array literal which we can not provide here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n"]},"metadata":{},"sourceType":"module"}