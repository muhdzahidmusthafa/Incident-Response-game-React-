{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext } from 'react';\nimport AppBar from './app-bar';\nimport { AppLayoutContext, AppLayoutProvider } from './context';\nimport Background from './background';\nimport Header from './header';\nimport Layout from './layout';\nimport Main from './main';\nimport Navigation from './navigation';\nimport Notifications from './notifications';\nimport SplitPanel from './split-panel';\nimport Tools from './tools';\n/**\n * In mobile viewports the AppBar position changes to sticky and is placed\n * above the notifications. This is handled by adjusting the row positions\n * in CSS for the AppBar and Notifications components relative to the grid\n * definition in the Layout component. In order to keep alignment between\n * the visual ordering and logical ordering of the document the logical order\n * of these components is also modified in the markup below.\n */\n\nvar AppLayoutWithRef = React.forwardRef(function AppLayout(props, ref) {\n  var isMobile = useContext(AppLayoutContext).isMobile;\n  return React.createElement(AppLayoutProvider, __assign({}, props, {\n    ref: ref\n  }), React.createElement(SplitPanel, null, React.createElement(Layout, null, React.createElement(Background, null), React.createElement(Navigation, null), isMobile && React.createElement(AppBar, null), React.createElement(Notifications, null), !isMobile && React.createElement(AppBar, null), React.createElement(Header, null), React.createElement(Main, null), React.createElement(SplitPanel.Bottom, null), React.createElement(Tools, null, React.createElement(SplitPanel.Side, null)))));\n});\nexport default AppLayoutWithRef;","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,WAApD;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA;;;;;;;;;AAQA,IAAMC,gBAAgB,GAAGb,KAAK,CAACc,UAAN,CAAiB,SAASC,SAAT,CACxCC,KADwC,EAExCC,GAFwC,EAEN;EAE1B,YAAQ,GAAKhB,UAAU,CAACE,gBAAD,CAAV,CAA4Be,QAAzC;EAER,OACElB,oBAACI,iBAAD,EAAkBe,aAAKH,KAAL,EAAU;IAAEC,GAAG,EAAEA;EAAP,CAAV,CAAlB,EACEjB,oBAACW,UAAD,EAAW,IAAX,EACEX,oBAACO,MAAD,EAAO,IAAP,EACEP,oBAACK,UAAD,EAAW,IAAX,CADF,EAGEL,oBAACS,UAAD,EAAW,IAAX,CAHF,EAKGS,QAAQ,IAAIlB,oBAACE,MAAD,EAAO,IAAP,CALf,EAOEF,oBAACU,aAAD,EAAc,IAAd,CAPF,EASG,CAACQ,QAAD,IAAalB,oBAACE,MAAD,EAAO,IAAP,CAThB,EAWEF,oBAACM,MAAD,EAAO,IAAP,CAXF,EAaEN,oBAACQ,IAAD,EAAK,IAAL,CAbF,EAeER,oBAACW,UAAU,CAACS,MAAZ,EAAkB,IAAlB,CAfF,EAiBEpB,oBAACY,KAAD,EAAM,IAAN,EACEZ,oBAACW,UAAU,CAACU,IAAZ,EAAgB,IAAhB,CADF,CAjBF,CADF,CADF,CADF;AA2BD,CAjCwB,CAAzB;AAmCA,eAAeR,gBAAf","names":["React","useContext","AppBar","AppLayoutContext","AppLayoutProvider","Background","Header","Layout","Main","Navigation","Notifications","SplitPanel","Tools","AppLayoutWithRef","forwardRef","AppLayout","props","ref","isMobile","__assign","Bottom","Side"],"sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport AppBar from './app-bar';\nimport { AppLayoutContext, AppLayoutProvider } from './context';\nimport { AppLayoutProps } from '../interfaces';\nimport Background from './background';\nimport Header from './header';\nimport Layout from './layout';\nimport Main from './main';\nimport Navigation from './navigation';\nimport Notifications from './notifications';\nimport SplitPanel from './split-panel';\nimport Tools from './tools';\n\n/**\n * In mobile viewports the AppBar position changes to sticky and is placed\n * above the notifications. This is handled by adjusting the row positions\n * in CSS for the AppBar and Notifications components relative to the grid\n * definition in the Layout component. In order to keep alignment between\n * the visual ordering and logical ordering of the document the logical order\n * of these components is also modified in the markup below.\n */\nconst AppLayoutWithRef = React.forwardRef(function AppLayout(\n  props: AppLayoutProps,\n  ref: React.Ref<AppLayoutProps.Ref>\n) {\n  const { isMobile } = useContext(AppLayoutContext);\n\n  return (\n    <AppLayoutProvider {...props} ref={ref}>\n      <SplitPanel>\n        <Layout>\n          <Background />\n\n          <Navigation />\n\n          {isMobile && <AppBar />}\n\n          <Notifications />\n\n          {!isMobile && <AppBar />}\n\n          <Header />\n\n          <Main />\n\n          <SplitPanel.Bottom />\n\n          <Tools>\n            <SplitPanel.Side />\n          </Tools>\n        </Layout>\n      </SplitPanel>\n    </AppLayoutProvider>\n  );\n});\n\nexport default AppLayoutWithRef;\n"]},"metadata":{},"sourceType":"module"}