{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useMemo } from 'react';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport { generateUniqueId } from '../../internal/hooks/use-unique-id';\nvar Trigger = React.forwardRef(function (_a, ref) {\n  var ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      controlId = _a.controlId,\n      invalid = _a.invalid,\n      triggerProps = _a.triggerProps,\n      selectedOption = _a.selectedOption,\n      triggerVariant = _a.triggerVariant,\n      inFilteringToken = _a.inFilteringToken,\n      isOpen = _a.isOpen,\n      placeholder = _a.placeholder,\n      disabled = _a.disabled,\n      ariaLabel = _a.ariaLabel;\n  var id = useMemo(function () {\n    return controlId !== null && controlId !== void 0 ? controlId : generateUniqueId();\n  }, [controlId]);\n  var triggerContent = null;\n\n  if (!selectedOption) {\n    triggerContent = React.createElement(\"span\", {\n      \"aria-disabled\": \"true\",\n      className: clsx(styles.placeholder, styles.trigger),\n      id: triggerProps.ariaLabelledby\n    }, placeholder);\n  } else if (triggerVariant === 'option') {\n    triggerContent = React.createElement(Option, {\n      id: triggerProps.ariaLabelledby,\n      option: __assign(__assign({}, selectedOption), {\n        disabled: disabled\n      }),\n      triggerVariant: true\n    });\n  } else {\n    triggerContent = React.createElement(\"span\", {\n      id: triggerProps.ariaLabelledby,\n      className: styles.trigger\n    }, selectedOption.label || selectedOption.value);\n  }\n\n  var mergedRef = useMergeRefs(triggerProps.ref, ref);\n  return React.createElement(ButtonTrigger, __assign({}, triggerProps, {\n    id: id,\n    ref: mergedRef,\n    pressed: isOpen,\n    disabled: disabled,\n    invalid: invalid,\n    inFilteringToken: inFilteringToken,\n    ariaLabel: ariaLabel,\n    ariaDescribedby: ariaDescribedby,\n    ariaLabelledby: [ariaLabelledby, triggerProps.ariaLabelledby].filter(function (label) {\n      return !!label;\n    }).join(' ')\n  }), triggerContent);\n});\nexport default Trigger;","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,YAAT,QAA6B,qCAA7B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AAcA,IAAMC,OAAO,GAAGR,KAAK,CAACS,UAAN,CACd,UACEC,EADF,EAeEC,GAfF,EAemC;MAb/BC,cAAc;MACdC,eAAe;MACfC,SAAS;MACTC,OAAO;MACPC,YAAY;MACZC,cAAc;MACdC,cAAc;MACdC,gBAAgB;MAChBC,MAAM;MACNC,WAAW;MACXC,QAAQ;MACRC,SAAS;EAIX,IAAMC,EAAE,GAAGvB,OAAO,CAAC;IAAM,gBAAS,SAAT,aAAS,WAAT,eAAaM,gBAAgB,EAA7B;EAA+B,CAAtC,EAAwC,CAACO,SAAD,CAAxC,CAAlB;EAEA,IAAIW,cAAc,GAAG,IAArB;;EACA,IAAI,CAACR,cAAL,EAAqB;IACnBQ,cAAc,GACZzB;MAAA,iBACgB,MADhB;MAEE0B,SAAS,EAAEvB,IAAI,CAACE,MAAM,CAACgB,WAAR,EAAqBhB,MAAM,CAACsB,OAA5B,CAFjB;MAGEH,EAAE,EAAER,YAAY,CAACJ;IAHnB,GAKGS,WALH,CADF;EASD,CAVD,MAUO,IAAIH,cAAc,KAAK,QAAvB,EAAiC;IACtCO,cAAc,GACZzB,oBAACM,MAAD,EAAO;MAACkB,EAAE,EAAER,YAAY,CAACJ,cAAlB;MAAkCgB,MAAM,wBAAOX,cAAP,GAAqB;QAAEK,QAAQ;MAAV,CAArB,CAAxC;MAA2EJ,cAAc,EAAE;IAA3F,CAAP,CADF;EAGD,CAJM,MAIA;IACLO,cAAc,GACZzB;MAAMwB,EAAE,EAAER,YAAY,CAACJ,cAAvB;MAAuCc,SAAS,EAAErB,MAAM,CAACsB;IAAzD,GACGV,cAAc,CAACY,KAAf,IAAwBZ,cAAc,CAACa,KAD1C,CADF;EAKD;;EAED,IAAMC,SAAS,GAAG7B,YAAY,CAACc,YAAY,CAACL,GAAd,EAAmBA,GAAnB,CAA9B;EAEA,OACEX,oBAACI,aAAD,EAAc4B,aACRhB,YADQ,EACI;IAChBQ,EAAE,EAAEA,EADY;IAEhBb,GAAG,EAAEoB,SAFW;IAGhBE,OAAO,EAAEb,MAHO;IAIhBE,QAAQ,EAAEA,QAJM;IAKhBP,OAAO,EAAEA,OALO;IAMhBI,gBAAgB,EAAEA,gBANF;IAOhBI,SAAS,EAAEA,SAPK;IAQhBV,eAAe,EAAEA,eARD;IAShBD,cAAc,EAAE,CAACA,cAAD,EAAiBI,YAAY,CAACJ,cAA9B,EAA8CsB,MAA9C,CAAqD,iBAAK;MAAI,QAAC,CAACL,KAAF;IAAO,CAArE,EAAuEM,IAAvE,CAA4E,GAA5E;EATA,CADJ,CAAd,EAYGV,cAZH,CADF;AAgBD,CA7Da,CAAhB;AAgEA,eAAejB,OAAf","names":["React","useMemo","useMergeRefs","clsx","ButtonTrigger","styles","Option","generateUniqueId","Trigger","forwardRef","_a","ref","ariaLabelledby","ariaDescribedby","controlId","invalid","triggerProps","selectedOption","triggerVariant","inFilteringToken","isOpen","placeholder","disabled","ariaLabel","id","triggerContent","className","trigger","option","label","value","mergedRef","__assign","pressed","filter","join"],"sourceRoot":"","sources":["../../../../src/select/parts/trigger.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport ButtonTrigger from '../../internal/components/button-trigger';\nimport { SelectProps } from '../interfaces';\nimport styles from './styles.css.js';\nimport { OptionDefinition } from '../../internal/components/option/interfaces';\nimport { FormFieldValidationControlProps } from '../../internal/context/form-field-context';\nimport Option from '../../internal/components/option';\nimport { generateUniqueId } from '../../internal/hooks/use-unique-id';\nimport { SelectTriggerProps } from '../utils/use-select';\n\nexport interface TriggerProps extends FormFieldValidationControlProps {\n  placeholder: string | undefined;\n  disabled: boolean | undefined;\n  ariaLabel: string | undefined;\n  triggerProps: SelectTriggerProps;\n  selectedOption: OptionDefinition | null;\n  isOpen?: boolean;\n  triggerVariant?: SelectProps.TriggerVariant;\n  inFilteringToken?: boolean;\n}\n\nconst Trigger = React.forwardRef(\n  (\n    {\n      ariaLabelledby,\n      ariaDescribedby,\n      controlId,\n      invalid,\n      triggerProps,\n      selectedOption,\n      triggerVariant,\n      inFilteringToken,\n      isOpen,\n      placeholder,\n      disabled,\n      ariaLabel,\n    }: TriggerProps,\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const id = useMemo(() => controlId ?? generateUniqueId(), [controlId]);\n\n    let triggerContent = null;\n    if (!selectedOption) {\n      triggerContent = (\n        <span\n          aria-disabled=\"true\"\n          className={clsx(styles.placeholder, styles.trigger)}\n          id={triggerProps.ariaLabelledby}\n        >\n          {placeholder}\n        </span>\n      );\n    } else if (triggerVariant === 'option') {\n      triggerContent = (\n        <Option id={triggerProps.ariaLabelledby} option={{ ...selectedOption, disabled }} triggerVariant={true} />\n      );\n    } else {\n      triggerContent = (\n        <span id={triggerProps.ariaLabelledby} className={styles.trigger}>\n          {selectedOption.label || selectedOption.value}\n        </span>\n      );\n    }\n\n    const mergedRef = useMergeRefs(triggerProps.ref, ref);\n\n    return (\n      <ButtonTrigger\n        {...triggerProps}\n        id={id}\n        ref={mergedRef}\n        pressed={isOpen}\n        disabled={disabled}\n        invalid={invalid}\n        inFilteringToken={inFilteringToken}\n        ariaLabel={ariaLabel}\n        ariaDescribedby={ariaDescribedby}\n        ariaLabelledby={[ariaLabelledby, triggerProps.ariaLabelledby].filter(label => !!label).join(' ')}\n      >\n        {triggerContent}\n      </ButtonTrigger>\n    );\n  }\n);\n\nexport default Trigger;\n"]},"metadata":{},"sourceType":"module"}