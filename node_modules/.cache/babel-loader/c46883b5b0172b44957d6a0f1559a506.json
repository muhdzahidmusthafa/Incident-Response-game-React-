{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { addMonths, endOfDay, isBefore, startOfDay, startOfMonth, isAfter, isSameMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport CalendarHeader from './header';\nimport { Grids, selectFocusedDate } from './grids';\nimport moveFocusHandler from '../../date-picker/calendar/utils/move-focus-handler';\nimport { formatDate, formatTime, formatISOStringWithoutTimezone, parseDate } from '../../date-picker/calendar/utils/date';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalFormField from '../../form-field/internal';\nimport DateInput from '../../internal/components/date-input';\nimport InternalTimeInput from '../../time-input/internal';\nimport clsx from 'clsx';\nimport { getBaseDate } from './get-base-date.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getDateLabel, renderTimeLabel } from '../../date-picker/calendar/utils/intl';\nimport LiveRegion from '../../internal/components/live-region';\nimport { normalizeStartOfWeek } from '../../date-picker/calendar/utils/locales';\nexport default forwardRef(Calendar);\n\nfunction Calendar(_a, ref) {\n  var _b;\n\n  var locale = _a.locale,\n      startOfWeek = _a.startOfWeek,\n      isDateEnabled = _a.isDateEnabled,\n      onSelectDateRange = _a.onSelectDateRange,\n      _c = _a.initialEndDate,\n      initialEndDate = _c === void 0 ? '' : _c,\n      _d = _a.initialStartDate,\n      initialStartDate = _d === void 0 ? '' : _d,\n      i18nStrings = _a.i18nStrings,\n      dateOnly = _a.dateOnly,\n      isSingleGrid = _a.isSingleGrid,\n      timeInputFormat = _a.timeInputFormat;\n  var elementRef = useRef(null);\n  var normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, locale);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        if (elementRef.current) {\n          var prevButton = elementRef.current.getElementsByClassName(styles['calendar-prev-month-btn'])[0];\n          prevButton === null || prevButton === void 0 ? void 0 : prevButton.focus();\n        }\n      }\n    };\n  });\n\n  var _e = initialStartDate.split('T'),\n      _f = _e[0],\n      initialStartDateString = _f === void 0 ? '' : _f,\n      _g = _e[1],\n      initialStartTimeString = _g === void 0 ? '' : _g;\n\n  var _h = initialEndDate.split('T'),\n      _j = _h[0],\n      initialEndDateString = _j === void 0 ? '' : _j,\n      _k = _h[1],\n      initialEndTimeString = _k === void 0 ? '' : _k;\n\n  var _l = useState(initialStartDateString),\n      startDateString = _l[0],\n      setStartDateString = _l[1];\n\n  var _m = useState(initialStartTimeString),\n      startTimeString = _m[0],\n      setStartTimeString = _m[1];\n\n  var _o = useState(initialEndDateString),\n      endDateString = _o[0],\n      setEndDateString = _o[1];\n\n  var _p = useState(initialEndTimeString),\n      endTimeString = _p[0],\n      setEndTimeString = _p[1];\n\n  var selectedStartDate = parseDate(startDateString, true);\n  var selectedEndDate = parseDate(endDateString, true);\n\n  var _q = useState(''),\n      announcement = _q[0],\n      setAnnouncement = _q[1];\n\n  var _r = useState(function () {\n    if (startDateString) {\n      var startDate = parseDate(startDateString);\n\n      if (isSingleGrid) {\n        return startOfMonth(startDate);\n      }\n\n      return startOfMonth(addMonths(startDate, 1));\n    }\n\n    if (endDateString) {\n      return startOfMonth(parseDate(endDateString));\n    }\n\n    return startOfMonth(Date.now());\n  }),\n      currentMonth = _r[0],\n      setCurrentMonth = _r[1];\n\n  var _s = useState(function () {\n    if (selectedStartDate) {\n      if (isSameMonth(selectedStartDate, currentMonth)) {\n        return selectedStartDate;\n      }\n\n      if (!isSingleGrid && isSameMonth(selectedStartDate, addMonths(currentMonth, -1))) {\n        return selectedStartDate;\n      }\n    }\n\n    return selectFocusedDate(selectedStartDate, currentMonth, isDateEnabled);\n  }),\n      focusedDate = _s[0],\n      setFocusedDate = _s[1];\n\n  useEffect(function () {\n    // This effect \"synchronizes\" the local state update back up to the overall DateRangePicker component\n    var startDate = formatISOStringWithoutTimezone(startDateString, startTimeString);\n    var endDate = formatISOStringWithoutTimezone(endDateString, endTimeString);\n\n    if (startDate !== initialStartDate || endDate !== initialEndDate) {\n      onSelectDateRange({\n        startDate: startDate,\n        endDate: endDate,\n        type: 'absolute'\n      });\n    }\n  }, [startDateString, startTimeString, endDateString, endTimeString, onSelectDateRange, initialStartDate, initialEndDate]);\n\n  var onSelectDateHandler = function (selectedDate) {\n    // recommended to include the start/end time announced with the selection\n    // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n    var announceStart = function (startDate) {\n      return i18nStrings.startDateLabel + ', ' + getDateLabel(locale, startDate) + ', ' + i18nStrings.startTimeLabel + ', ' + renderTimeLabel(locale, startDate, timeInputFormat) + '. ';\n    };\n\n    var announceEnd = function (endDate) {\n      return i18nStrings.endDateLabel + ', ' + getDateLabel(locale, endDate) + ', ' + i18nStrings.endTimeLabel + ', ' + renderTimeLabel(locale, endDate, timeInputFormat) + '. ';\n    };\n\n    var announceRange = function (startDate, endDate) {\n      if (!i18nStrings.renderSelectedAbsoluteRangeAriaLive) {\n        return \"\".concat(getDateLabel(locale, startDate), \" \\u2013 \").concat(getDateLabel(locale, endDate));\n      }\n\n      return i18nStrings.renderSelectedAbsoluteRangeAriaLive(getDateLabel(locale, startDate), getDateLabel(locale, endDate));\n    }; // If both fields are empty, we set the start date\n\n\n    if (!startDateString && !endDateString) {\n      var startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setAnnouncement(announceStart(startDate));\n      return;\n    } // If both fields are set, we start new\n\n\n    if (startDateString && endDateString) {\n      var startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setEndDateString('');\n      setEndTimeString('');\n      setAnnouncement(announceStart(startDate));\n      return;\n    } // If only the END date is empty, we fill it (and swap dates if needed)\n\n\n    if (startDateString && !endDateString) {\n      var parsedStartDate = parseDate(startDateString);\n\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        var startDate = startOfDay(selectedDate);\n        var endDate = endOfDay(parsedStartDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, endDate));\n      } else {\n        var endDate = endOfDay(selectedDate);\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(parsedStartDate, endDate));\n      }\n\n      return;\n    } // If only the START date is empty, we fill it (and swap dates if needed)\n\n\n    if (!startDateString && endDateString) {\n      var existingEndDate = parseDate(endDateString);\n\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        var startDate = startOfDay(existingEndDate);\n        var endDate = endOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(startDate, endDate));\n      } else {\n        var startDate = startOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, existingEndDate));\n      }\n\n      return;\n    } // All possible conditions are covered above\n\n  };\n\n  var onHeaderChangeMonthHandler = function (isPrevious) {\n    var newCurrentMonth = addMonths(currentMonth, isPrevious ? -1 : 1);\n    setCurrentMonth(newCurrentMonth);\n    var newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    var newBaseDate = getBaseDate(newBaseDateMonth, 1, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n\n  var onChangeStartDate = function (e) {\n    setStartDateString(e.detail.value);\n\n    if (e.detail.value.length >= 8) {\n      var newCurrentMonth = startOfMonth(parseDate(e.detail.value));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n\n  var onChangeEndDate = function (e) {\n    setEndDateString(e.detail.value);\n  };\n\n  var constrainttextId = useUniqueId('awsui-area-date-range-picker');\n  constrainttextId = i18nStrings.dateTimeConstraintText ? constrainttextId : '';\n  return React.createElement(React.Fragment, null, React.createElement(InternalSpaceBetween, {\n    size: \"m\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles.calendar, (_b = {}, _b[styles['one-grid']] = isSingleGrid, _b)),\n    role: \"application\",\n    ref: elementRef\n  }, React.createElement(CalendarHeader, {\n    baseDate: currentMonth,\n    locale: locale,\n    onChangeMonth: onHeaderChangeMonthHandler,\n    previousMonthLabel: i18nStrings.previousMonthAriaLabel,\n    nextMonthLabel: i18nStrings.nextMonthAriaLabel,\n    isSingleGrid: isSingleGrid\n  }), React.createElement(Grids, {\n    isSingleGrid: isSingleGrid,\n    locale: locale,\n    baseDate: currentMonth,\n    focusedDate: focusedDate,\n    onFocusedDateChange: setFocusedDate,\n    isDateEnabled: isDateEnabled,\n    onSelectDate: onSelectDateHandler,\n    onChangeMonth: setCurrentMonth,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: i18nStrings.todayAriaLabel,\n    selectedStartDate: selectedStartDate,\n    selectedEndDate: selectedEndDate,\n    handleFocusMove: moveFocusHandler\n  })), React.createElement(InternalSpaceBetween, {\n    direction: \"vertical\",\n    size: \"xxs\"\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: isSingleGrid ? 'vertical' : 'horizontal'\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper']\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__date']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.startDateLabel,\n    stretch: true\n  }, React.createElement(DateInput, {\n    value: startDateString,\n    autoComplete: false,\n    disableBrowserAutocorrect: true,\n    disableAutocompleteOnBlur: false,\n    className: styles['start-date-input'],\n    onChange: onChangeStartDate,\n    placeholder: \"YYYY/MM/DD\",\n    ariaDescribedby: constrainttextId\n  }))), !dateOnly && React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__time']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.startTimeLabel,\n    stretch: true\n  }, React.createElement(InternalTimeInput, {\n    value: startTimeString,\n    onChange: function (e) {\n      return setStartTimeString(e.detail.value);\n    },\n    format: timeInputFormat,\n    placeholder: timeInputFormat,\n    className: styles['start-time-input'],\n    ariaDescribedby: constrainttextId\n  })))), React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper']\n  }, React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__date']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.endDateLabel,\n    stretch: true\n  }, React.createElement(DateInput, {\n    value: endDateString,\n    autoComplete: false,\n    disableBrowserAutocorrect: true,\n    disableAutocompleteOnBlur: false,\n    className: styles['end-date-input'],\n    onChange: onChangeEndDate,\n    placeholder: \"YYYY/MM/DD\",\n    ariaDescribedby: constrainttextId\n  }))), !dateOnly && React.createElement(\"div\", {\n    className: styles['date-and-time-wrapper__time']\n  }, React.createElement(InternalFormField, {\n    label: i18nStrings.endTimeLabel,\n    stretch: true\n  }, React.createElement(InternalTimeInput, {\n    value: endTimeString,\n    onChange: function (e) {\n      return setEndTimeString(e.detail.value);\n    },\n    format: timeInputFormat,\n    placeholder: timeInputFormat,\n    className: styles['end-time-input'],\n    ariaDescribedby: constrainttextId\n  }))))), i18nStrings.dateTimeConstraintText && React.createElement(\"div\", {\n    className: styles['date-and-time-constrainttext'],\n    id: constrainttextId\n  }, i18nStrings.dateTimeConstraintText))), React.createElement(LiveRegion, null, React.createElement(\"span\", {\n    className: styles['calendar-aria-live']\n  }, announcement)));\n}","map":{"version":3,"mappings":"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","names":["React","forwardRef","useEffect","useImperativeHandle","useRef","useState","addMonths","endOfDay","isBefore","startOfDay","startOfMonth","isAfter","isSameMonth","styles","CalendarHeader","Grids","selectFocusedDate","moveFocusHandler","formatDate","formatTime","formatISOStringWithoutTimezone","parseDate","InternalSpaceBetween","InternalFormField","DateInput","InternalTimeInput","clsx","getBaseDate","useUniqueId","getDateLabel","renderTimeLabel","LiveRegion","normalizeStartOfWeek","Calendar","_a","ref","locale","startOfWeek","isDateEnabled","onSelectDateRange","_c","initialEndDate","_d","initialStartDate","i18nStrings","dateOnly","isSingleGrid","timeInputFormat","elementRef","normalizedStartOfWeek","focus","current","prevButton","getElementsByClassName","split","_f","initialStartDateString","_g","initialStartTimeString","_j","initialEndDateString","_k","initialEndTimeString","startDateString","setStartDateString","startTimeString","setStartTimeString","endDateString","setEndDateString","endTimeString","setEndTimeString","selectedStartDate","selectedEndDate","announcement","setAnnouncement","startDate","Date","now","currentMonth","setCurrentMonth","focusedDate","setFocusedDate","endDate","type","onSelectDateHandler","selectedDate","announceStart","startDateLabel","startTimeLabel","announceEnd","endDateLabel","endTimeLabel","announceRange","renderSelectedAbsoluteRangeAriaLive","concat","parsedStartDate","existingEndDate","onHeaderChangeMonthHandler","newCurrentMonth","isPrevious","newBaseDateMonth","newBaseDate","onChangeStartDate","e","detail","value","length","onChangeEndDate","constrainttextId","dateTimeConstraintText","size","className","calendar","_b","role","baseDate","onChangeMonth","previousMonthLabel","previousMonthAriaLabel","nextMonthLabel","nextMonthAriaLabel","onFocusedDateChange","onSelectDate","todayAriaLabel","handleFocusMove","direction","label","stretch","autoComplete","disableBrowserAutocorrect","disableAutocompleteOnBlur","onChange","placeholder","ariaDescribedby","format","id"],"sourceRoot":"","sources":["../../../../src/date-range-picker/calendar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { addMonths, endOfDay, isBefore, startOfDay, startOfMonth, isAfter, isSameMonth } from 'date-fns';\nimport styles from '../styles.css.js';\nimport { BaseComponentProps } from '../../internal/base-component';\nimport { DateRangePickerProps, Focusable } from '../interfaces';\nimport CalendarHeader from './header';\nimport { Grids, selectFocusedDate } from './grids';\nimport moveFocusHandler from '../../date-picker/calendar/utils/move-focus-handler';\nimport {\n  formatDate,\n  formatTime,\n  formatISOStringWithoutTimezone,\n  parseDate,\n} from '../../date-picker/calendar/utils/date';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalFormField from '../../form-field/internal';\nimport { InputProps } from '../../input/interfaces';\nimport DateInput from '../../internal/components/date-input';\nimport { TimeInputProps } from '../../time-input/interfaces';\nimport InternalTimeInput from '../../time-input/internal';\nimport clsx from 'clsx';\nimport { getBaseDate } from './get-base-date.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { getDateLabel, renderTimeLabel } from '../../date-picker/calendar/utils/intl';\nimport LiveRegion from '../../internal/components/live-region';\nimport { normalizeStartOfWeek } from '../../date-picker/calendar/utils/locales';\n\nexport interface DateChangeHandler {\n  (detail: Date): void;\n}\n\nexport interface MonthChangeHandler {\n  (newMonth: Date): void;\n}\n\nexport type DayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\ninterface HeaderChangeMonthHandler {\n  (isPreviousButtonClick?: boolean): void;\n}\n\nexport interface CalendarProps extends BaseComponentProps {\n  locale: string;\n  startOfWeek: number | undefined;\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction;\n  onSelectDateRange: (value: DateRangePickerProps.AbsoluteValue) => void;\n  initialStartDate: string | undefined;\n  initialEndDate: string | undefined;\n  i18nStrings: DateRangePickerProps.I18nStrings;\n  dateOnly: boolean;\n  timeInputFormat: TimeInputProps.Format;\n  isSingleGrid: boolean;\n}\n\nexport default forwardRef(Calendar);\n\nfunction Calendar(\n  {\n    locale,\n    startOfWeek,\n    isDateEnabled,\n    onSelectDateRange,\n    initialEndDate = '',\n    initialStartDate = '',\n    i18nStrings,\n    dateOnly,\n    isSingleGrid,\n    timeInputFormat,\n  }: CalendarProps,\n  ref: React.Ref<Focusable>\n) {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, locale);\n\n  useImperativeHandle(ref, () => ({\n    focus() {\n      if (elementRef.current) {\n        const prevButton = elementRef.current.getElementsByClassName(styles['calendar-prev-month-btn'])[0];\n        (prevButton as undefined | HTMLButtonElement)?.focus();\n      }\n    },\n  }));\n\n  const [initialStartDateString = '', initialStartTimeString = ''] = initialStartDate.split('T');\n  const [initialEndDateString = '', initialEndTimeString = ''] = initialEndDate.split('T');\n\n  const [startDateString, setStartDateString] = useState(initialStartDateString);\n  const [startTimeString, setStartTimeString] = useState(initialStartTimeString);\n\n  const [endDateString, setEndDateString] = useState(initialEndDateString);\n  const [endTimeString, setEndTimeString] = useState(initialEndTimeString);\n\n  const selectedStartDate = parseDate(startDateString, true);\n  const selectedEndDate = parseDate(endDateString, true);\n\n  const [announcement, setAnnouncement] = useState('');\n\n  const [currentMonth, setCurrentMonth] = useState(() => {\n    if (startDateString) {\n      const startDate = parseDate(startDateString);\n      if (isSingleGrid) {\n        return startOfMonth(startDate);\n      }\n      return startOfMonth(addMonths(startDate, 1));\n    }\n    if (endDateString) {\n      return startOfMonth(parseDate(endDateString));\n    }\n    return startOfMonth(Date.now());\n  });\n\n  const [focusedDate, setFocusedDate] = useState<Date | null>(() => {\n    if (selectedStartDate) {\n      if (isSameMonth(selectedStartDate, currentMonth)) {\n        return selectedStartDate;\n      }\n      if (!isSingleGrid && isSameMonth(selectedStartDate, addMonths(currentMonth, -1))) {\n        return selectedStartDate;\n      }\n    }\n    return selectFocusedDate(selectedStartDate, currentMonth, isDateEnabled);\n  });\n\n  useEffect(() => {\n    // This effect \"synchronizes\" the local state update back up to the overall DateRangePicker component\n\n    const startDate = formatISOStringWithoutTimezone(startDateString, startTimeString);\n    const endDate = formatISOStringWithoutTimezone(endDateString, endTimeString);\n\n    if (startDate !== initialStartDate || endDate !== initialEndDate) {\n      onSelectDateRange({\n        startDate,\n        endDate,\n        type: 'absolute',\n      });\n    }\n  }, [\n    startDateString,\n    startTimeString,\n    endDateString,\n    endTimeString,\n    onSelectDateRange,\n    initialStartDate,\n    initialEndDate,\n  ]);\n\n  const onSelectDateHandler = (selectedDate: Date) => {\n    // recommended to include the start/end time announced with the selection\n    // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n    const announceStart = (startDate: Date) => {\n      return (\n        i18nStrings.startDateLabel +\n        ', ' +\n        getDateLabel(locale, startDate) +\n        ', ' +\n        i18nStrings.startTimeLabel +\n        ', ' +\n        renderTimeLabel(locale, startDate, timeInputFormat) +\n        '. '\n      );\n    };\n\n    const announceEnd = (endDate: Date) => {\n      return (\n        i18nStrings.endDateLabel +\n        ', ' +\n        getDateLabel(locale, endDate) +\n        ', ' +\n        i18nStrings.endTimeLabel +\n        ', ' +\n        renderTimeLabel(locale, endDate, timeInputFormat) +\n        '. '\n      );\n    };\n\n    const announceRange = (startDate: Date, endDate: Date) => {\n      if (!i18nStrings.renderSelectedAbsoluteRangeAriaLive) {\n        return `${getDateLabel(locale, startDate)} – ${getDateLabel(locale, endDate)}`;\n      }\n      return i18nStrings.renderSelectedAbsoluteRangeAriaLive(\n        getDateLabel(locale, startDate),\n        getDateLabel(locale, endDate)\n      );\n    };\n\n    // If both fields are empty, we set the start date\n    if (!startDateString && !endDateString) {\n      const startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n      setAnnouncement(announceStart(startDate));\n      return;\n    }\n\n    // If both fields are set, we start new\n    if (startDateString && endDateString) {\n      const startDate = startOfDay(selectedDate);\n      setStartDateString(formatDate(startDate));\n      setStartTimeString(formatTime(startDate));\n\n      setEndDateString('');\n      setEndTimeString('');\n      setAnnouncement(announceStart(startDate));\n      return;\n    }\n\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    if (startDateString && !endDateString) {\n      const parsedStartDate = parseDate(startDateString);\n\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n\n        const startDate = startOfDay(selectedDate);\n        const endDate = endOfDay(parsedStartDate);\n\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, endDate));\n      } else {\n        const endDate = endOfDay(selectedDate);\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(parsedStartDate, endDate));\n      }\n      return;\n    }\n\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    if (!startDateString && endDateString) {\n      const existingEndDate = parseDate(endDateString);\n\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n\n        const startDate = startOfDay(existingEndDate);\n        const endDate = endOfDay(selectedDate);\n\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n\n        setEndDateString(formatDate(endDate));\n        setEndTimeString(formatTime(endDate));\n        setAnnouncement(announceEnd(endDate) + announceRange(startDate, endDate));\n      } else {\n        const startDate = startOfDay(selectedDate);\n        setStartDateString(formatDate(startDate));\n        setStartTimeString(formatTime(startDate));\n        setAnnouncement(announceStart(startDate) + announceRange(startDate, existingEndDate));\n      }\n      return;\n    }\n    // All possible conditions are covered above\n  };\n\n  const onHeaderChangeMonthHandler: HeaderChangeMonthHandler = isPrevious => {\n    const newCurrentMonth = addMonths(currentMonth, isPrevious ? -1 : 1);\n    setCurrentMonth(newCurrentMonth);\n\n    const newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);\n    const newBaseDate = getBaseDate(newBaseDateMonth, 1, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n\n  const onChangeStartDate: InputProps['onChange'] = e => {\n    setStartDateString(e.detail.value);\n\n    if (e.detail.value.length >= 8) {\n      const newCurrentMonth = startOfMonth(parseDate(e.detail.value));\n      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));\n    }\n  };\n\n  const onChangeEndDate: InputProps['onChange'] = e => {\n    setEndDateString(e.detail.value);\n  };\n\n  let constrainttextId = useUniqueId('awsui-area-date-range-picker');\n  constrainttextId = i18nStrings.dateTimeConstraintText ? constrainttextId : '';\n\n  return (\n    <>\n      <InternalSpaceBetween size=\"m\">\n        <div\n          className={clsx(styles.calendar, {\n            [styles['one-grid']]: isSingleGrid,\n          })}\n          role=\"application\"\n          ref={elementRef}\n        >\n          <CalendarHeader\n            baseDate={currentMonth}\n            locale={locale}\n            onChangeMonth={onHeaderChangeMonthHandler}\n            previousMonthLabel={i18nStrings.previousMonthAriaLabel}\n            nextMonthLabel={i18nStrings.nextMonthAriaLabel}\n            isSingleGrid={isSingleGrid}\n          />\n\n          <Grids\n            isSingleGrid={isSingleGrid}\n            locale={locale}\n            baseDate={currentMonth}\n            focusedDate={focusedDate}\n            onFocusedDateChange={setFocusedDate}\n            isDateEnabled={isDateEnabled}\n            onSelectDate={onSelectDateHandler}\n            onChangeMonth={setCurrentMonth}\n            startOfWeek={normalizedStartOfWeek}\n            todayAriaLabel={i18nStrings.todayAriaLabel}\n            selectedStartDate={selectedStartDate}\n            selectedEndDate={selectedEndDate}\n            handleFocusMove={moveFocusHandler}\n          />\n        </div>\n        <InternalSpaceBetween direction=\"vertical\" size=\"xxs\">\n          <InternalSpaceBetween size=\"xs\" direction={isSingleGrid ? 'vertical' : 'horizontal'}>\n            <div className={styles['date-and-time-wrapper']}>\n              <div className={styles['date-and-time-wrapper__date']}>\n                <InternalFormField label={i18nStrings.startDateLabel} stretch={true}>\n                  <DateInput\n                    value={startDateString}\n                    autoComplete={false}\n                    disableBrowserAutocorrect={true}\n                    disableAutocompleteOnBlur={false}\n                    className={styles['start-date-input']}\n                    onChange={onChangeStartDate}\n                    placeholder=\"YYYY/MM/DD\"\n                    ariaDescribedby={constrainttextId}\n                  />\n                </InternalFormField>\n              </div>\n              {!dateOnly && (\n                <div className={styles['date-and-time-wrapper__time']}>\n                  <InternalFormField label={i18nStrings.startTimeLabel} stretch={true}>\n                    <InternalTimeInput\n                      value={startTimeString}\n                      onChange={e => setStartTimeString(e.detail.value)}\n                      format={timeInputFormat}\n                      placeholder={timeInputFormat}\n                      className={styles['start-time-input']}\n                      ariaDescribedby={constrainttextId}\n                    />\n                  </InternalFormField>\n                </div>\n              )}\n            </div>\n\n            <div className={styles['date-and-time-wrapper']}>\n              <div className={styles['date-and-time-wrapper__date']}>\n                <InternalFormField label={i18nStrings.endDateLabel} stretch={true}>\n                  <DateInput\n                    value={endDateString}\n                    autoComplete={false}\n                    disableBrowserAutocorrect={true}\n                    disableAutocompleteOnBlur={false}\n                    className={styles['end-date-input']}\n                    onChange={onChangeEndDate}\n                    placeholder=\"YYYY/MM/DD\"\n                    ariaDescribedby={constrainttextId}\n                  />\n                </InternalFormField>\n              </div>\n              {!dateOnly && (\n                <div className={styles['date-and-time-wrapper__time']}>\n                  <InternalFormField label={i18nStrings.endTimeLabel} stretch={true}>\n                    <InternalTimeInput\n                      value={endTimeString}\n                      onChange={e => setEndTimeString(e.detail.value)}\n                      format={timeInputFormat}\n                      placeholder={timeInputFormat}\n                      className={styles['end-time-input']}\n                      ariaDescribedby={constrainttextId}\n                    />\n                  </InternalFormField>\n                </div>\n              )}\n            </div>\n          </InternalSpaceBetween>\n          {i18nStrings.dateTimeConstraintText && (\n            <div className={styles['date-and-time-constrainttext']} id={constrainttextId}>\n              {i18nStrings.dateTimeConstraintText}\n            </div>\n          )}\n        </InternalSpaceBetween>\n      </InternalSpaceBetween>\n      <LiveRegion>\n        <span className={styles['calendar-aria-live']}>{announcement}</span>\n      </LiveRegion>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}