{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalIcon from '../icon/internal';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nexport var Segment = React.forwardRef(function (_a, ref) {\n  var _b, _c;\n\n  var disabled = _a.disabled,\n      text = _a.text,\n      iconName = _a.iconName,\n      iconAlt = _a.iconAlt,\n      iconUrl = _a.iconUrl,\n      iconSvg = _a.iconSvg,\n      isActive = _a.isActive,\n      onClick = _a.onClick,\n      onKeyDown = _a.onKeyDown,\n      tabIndex = _a.tabIndex;\n  var focusVisible = useFocusVisible();\n  return React.createElement(\"button\", __assign({\n    className: clsx(styles.segment, (_b = {}, _b[styles.disabled] = !!disabled, _b), (_c = {}, _c[styles.selected] = isActive, _c))\n  }, focusVisible, {\n    ref: ref,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    disabled: disabled,\n    type: \"button\",\n    tabIndex: tabIndex,\n    \"aria-pressed\": isActive ? 'true' : 'false',\n    \"aria-label\": !text ? iconAlt : undefined\n  }), (iconName || iconUrl || iconSvg) && React.createElement(InternalIcon, {\n    className: clsx(styles.icon, text ? styles['with-text'] : styles['with-no-text']),\n    name: iconName,\n    url: iconUrl,\n    svg: iconSvg,\n    alt: iconAlt,\n    variant: disabled ? 'disabled' : 'normal'\n  }), React.createElement(\"span\", null, text));\n});","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AASA,OAAO,IAAMC,OAAO,GAAGL,KAAK,CAACM,UAAN,CACrB,UACEC,EADF,EAEEC,GAFF,EAEmC;;;MAD/BC,QAAQ;MAAEC,IAAI;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,OAAO;MAAEC,OAAO;MAAEC,QAAQ;MAAEC,OAAO;MAAEC,SAAS;MAAEC,QAAQ;EAG7F,IAAMC,YAAY,GAAGf,eAAe,EAApC;EACA,OACEJ;IACEoB,SAAS,EAAEnB,IAAI,CAACE,MAAM,CAACkB,OAAR,GAAeC,SAAIA,GAACnB,MAAM,CAACM,QAAR,IAAmB,CAAC,CAACA,QAAzB,EAAiCa,EAAhD,IAAgDC,SAAMA,GAACpB,MAAM,CAACqB,QAAR,IAAmBT,QAAzB,EAAiCQ,EAAjF;EADjB,GAEMJ,YAFN,EAEkB;IAChBX,GAAG,EAAEA,GADW;IAEhBQ,OAAO,EAAEA,OAFO;IAGhBC,SAAS,EAAEA,SAHK;IAIhBR,QAAQ,EAAEA,QAJM;IAKhBgB,IAAI,EAAC,QALW;IAMhBP,QAAQ,EAAEA,QANM;IAME,gBACJH,QAAQ,GAAG,MAAH,GAAY,OAPlB;IAOyB,cAC7B,CAACL,IAAD,GAAQE,OAAR,GAAkBc;EARd,CAFlB,GAYG,CAACf,QAAQ,IAAIE,OAAZ,IAAuBC,OAAxB,KACCd,oBAACE,YAAD,EAAa;IACXkB,SAAS,EAAEnB,IAAI,CAACE,MAAM,CAACwB,IAAR,EAAcjB,IAAI,GAAGP,MAAM,CAAC,WAAD,CAAT,GAAyBA,MAAM,CAAC,cAAD,CAAjD,CADJ;IAEXyB,IAAI,EAAEjB,QAFK;IAGXkB,GAAG,EAAEhB,OAHM;IAIXiB,GAAG,EAAEhB,OAJM;IAKXiB,GAAG,EAAEnB,OALM;IAMXoB,OAAO,EAAEvB,QAAQ,GAAG,UAAH,GAAgB;EANtB,CAAb,CAbJ,EAsBET,kCAAOU,IAAP,CAtBF,CADF;AA0BD,CAhCoB,CAAhB","names":["React","clsx","InternalIcon","styles","useFocusVisible","Segment","forwardRef","_a","ref","disabled","text","iconName","iconAlt","iconUrl","iconSvg","isActive","onClick","onKeyDown","tabIndex","focusVisible","className","segment","_b","_c","selected","type","undefined","icon","name","url","svg","alt","variant"],"sourceRoot":"","sources":["../../../src/segmented-control/segment.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { SegmentedControlProps } from './interfaces';\nimport InternalIcon from '../icon/internal';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../internal/hooks/focus-visible';\n\nexport interface SegmentProps extends SegmentedControlProps.Option {\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onKeyDown: (event: React.KeyboardEvent<HTMLButtonElement>) => void;\n  isActive: boolean;\n  tabIndex: number;\n}\n\nexport const Segment = React.forwardRef(\n  (\n    { disabled, text, iconName, iconAlt, iconUrl, iconSvg, isActive, onClick, onKeyDown, tabIndex }: SegmentProps,\n    ref: React.Ref<HTMLButtonElement>\n  ) => {\n    const focusVisible = useFocusVisible();\n    return (\n      <button\n        className={clsx(styles.segment, { [styles.disabled]: !!disabled }, { [styles.selected]: isActive })}\n        {...focusVisible}\n        ref={ref}\n        onClick={onClick}\n        onKeyDown={onKeyDown}\n        disabled={disabled}\n        type=\"button\"\n        tabIndex={tabIndex}\n        aria-pressed={isActive ? 'true' : 'false'}\n        aria-label={!text ? iconAlt : undefined}\n      >\n        {(iconName || iconUrl || iconSvg) && (\n          <InternalIcon\n            className={clsx(styles.icon, text ? styles['with-text'] : styles['with-no-text'])}\n            name={iconName}\n            url={iconUrl}\n            svg={iconSvg}\n            alt={iconAlt}\n            variant={disabled ? 'disabled' : 'normal'}\n          />\n        )}\n        <span>{text}</span>\n      </button>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}