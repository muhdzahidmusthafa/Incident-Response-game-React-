{"ast":null,"code":"var _jsxFileName = \"/Users/igostu/test/project/src/components/MenuPage/MenuList.jsx\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport constants from \"../../globals/constants\";\nimport GameManager from \"../../mechanics/GameManager\";\nimport { checkIfGameOver } from \"../../mechanics/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MenuButton = withStyles(theme => ({\n  root: {\n    color: \"#34eb46\",\n    backgroundColor: purple[500],\n    \"&:hover\": {\n      backgroundColor: purple[700]\n    }\n  }\n}))(Button);\nexport class MenuList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.startNewGame = this.startNewGame.bind(this);\n    this.loadData = this.loadData.bind(this);\n  }\n\n  startNewGame() {\n    const {\n      startGame,\n      resetTextChoices,\n      resetVariables\n    } = this.props;\n    localStorage.setItem(\"start_second\", 0); // Dispatch Redux actions\n\n    startGame();\n    resetTextChoices();\n    resetVariables();\n    this.loadData();\n  }\n\n  loadData() {\n    const {\n      loadModuleData,\n      setLoading\n    } = this.props; // Check if text data is already loaded - only load if it's not\n\n    if (!GameManager.checkIfModuleLoaded(constants.MODULE_INCIDENT)) {\n      // Set loading flag for GameLoadingContainer\n      setLoading(true); // Dispatch Redux action to load text data\n\n      loadModuleData(constants.MODULE_INCIDENT);\n    }\n  } // Starting a new game should load everything from a default state (using\n  // the startNewGame function). Resuming a game shouldn't need to load anything,\n  // unless the state has been loaded from browser storage (after a hard page\n  // refresh, or going to the page again after closing it). The text data is\n  // too large to keep in browser storage, so it must be loaded again.\n\n\n  render() {\n    const {\n      gameStarted,\n      currentNodeKey\n    } = this.props;\n    const gameOver = checkIfGameOver(currentNodeKey);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(MenuButton, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/game\",\n            onClick: this.startNewGame,\n            children: \"New Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), gameStarted && !gameOver && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/game\",\n          onClick: this.loadData,\n          children: \"Resume Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","Link","constants","GameManager","checkIfGameOver","MenuButton","withStyles","theme","root","color","backgroundColor","purple","Button","MenuList","Component","constructor","props","startNewGame","bind","loadData","startGame","resetTextChoices","resetVariables","localStorage","setItem","loadModuleData","setLoading","checkIfModuleLoaded","MODULE_INCIDENT","render","gameStarted","currentNodeKey","gameOver"],"sources":["/Users/igostu/test/project/src/components/MenuPage/MenuList.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport constants from \"../../globals/constants\";\r\nimport GameManager from \"../../mechanics/GameManager\";\r\nimport { checkIfGameOver } from \"../../mechanics/helpers\";\r\n\r\nconst MenuButton = withStyles((theme) => ({\r\n  root: {\r\n    color: \"#34eb46\",\r\n    backgroundColor: purple[500],\r\n    \"&:hover\": {\r\n      backgroundColor: purple[700],\r\n    },\r\n  },\r\n}))(Button);\r\nexport class MenuList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.startNewGame = this.startNewGame.bind(this);\r\n    this.loadData = this.loadData.bind(this);\r\n  }\r\n\r\n  startNewGame() {\r\n    const { startGame, resetTextChoices, resetVariables } = this.props;\r\n    localStorage.setItem(\"start_second\", 0);\r\n\r\n    // Dispatch Redux actions\r\n    startGame();\r\n    resetTextChoices();\r\n    resetVariables();\r\n\r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    const { loadModuleData, setLoading } = this.props;\r\n\r\n    // Check if text data is already loaded - only load if it's not\r\n    if (!GameManager.checkIfModuleLoaded(constants.MODULE_INCIDENT)) {\r\n      // Set loading flag for GameLoadingContainer\r\n      setLoading(true);\r\n      // Dispatch Redux action to load text data\r\n      loadModuleData(constants.MODULE_INCIDENT);\r\n    }\r\n  }\r\n\r\n  // Starting a new game should load everything from a default state (using\r\n  // the startNewGame function). Resuming a game shouldn't need to load anything,\r\n  // unless the state has been loaded from browser storage (after a hard page\r\n  // refresh, or going to the page again after closing it). The text data is\r\n  // too large to keep in browser storage, so it must be loaded again.\r\n  render() {\r\n    const { gameStarted, currentNodeKey } = this.props;\r\n    const gameOver = checkIfGameOver(currentNodeKey);\r\n\r\n    return (\r\n      <div className=\"menu-list\">\r\n        <h3>\r\n          <MenuButton>\r\n            <Link to=\"/game\" onClick={this.startNewGame}>\r\n              New Game\r\n            </Link>\r\n          </MenuButton>\r\n        </h3>\r\n        {gameStarted && !gameOver && (\r\n          <h3>\r\n            <Link to=\"/game\" onClick={this.loadData}>\r\n              Resume Game\r\n            </Link>\r\n          </h3>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,eAAT,QAAgC,yBAAhC;;AAEA,MAAMC,UAAU,GAAGC,UAAU,CAAEC,KAAD,KAAY;EACxCC,IAAI,EAAE;IACJC,KAAK,EAAE,SADH;IAEJC,eAAe,EAAEC,MAAM,CAAC,GAAD,CAFnB;IAGJ,WAAW;MACTD,eAAe,EAAEC,MAAM,CAAC,GAAD;IADd;EAHP;AADkC,CAAZ,CAAD,CAAV,CAQfC,MARe,CAAnB;AASA,OAAO,MAAMC,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;EAC5CC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IAEA,KAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;IACA,KAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;EACD;;EAEDD,YAAY,GAAG;IACb,MAAM;MAAEG,SAAF;MAAaC,gBAAb;MAA+BC;IAA/B,IAAkD,KAAKN,KAA7D;IACAO,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqC,CAArC,EAFa,CAIb;;IACAJ,SAAS;IACTC,gBAAgB;IAChBC,cAAc;IAEd,KAAKH,QAAL;EACD;;EAEDA,QAAQ,GAAG;IACT,MAAM;MAAEM,cAAF;MAAkBC;IAAlB,IAAiC,KAAKV,KAA5C,CADS,CAGT;;IACA,IAAI,CAACb,WAAW,CAACwB,mBAAZ,CAAgCzB,SAAS,CAAC0B,eAA1C,CAAL,EAAiE;MAC/D;MACAF,UAAU,CAAC,IAAD,CAAV,CAF+D,CAG/D;;MACAD,cAAc,CAACvB,SAAS,CAAC0B,eAAX,CAAd;IACD;EACF,CA9B2C,CAgC5C;EACA;EACA;EACA;EACA;;;EACAC,MAAM,GAAG;IACP,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAkC,KAAKf,KAA7C;IACA,MAAMgB,QAAQ,GAAG5B,eAAe,CAAC2B,cAAD,CAAhC;IAEA,oBACE;MAAK,SAAS,EAAC,WAAf;MAAA,wBACE;QAAA,uBACE,QAAC,UAAD;UAAA,uBACE,QAAC,IAAD;YAAM,EAAE,EAAC,OAAT;YAAiB,OAAO,EAAE,KAAKd,YAA/B;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,EAQGa,WAAW,IAAI,CAACE,QAAhB,iBACC;QAAA,uBACE,QAAC,IAAD;UAAM,EAAE,EAAC,OAAT;UAAiB,OAAO,EAAE,KAAKb,QAA/B;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAkBD;;AA3D2C"},"metadata":{},"sourceType":"module"}