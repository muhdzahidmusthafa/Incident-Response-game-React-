{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useRef } from 'react';\nimport clsx from 'clsx';\nimport { matchesX, getKeyValue } from './utils';\nimport styles from './styles.css.js';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport default function BarSeries(_a) {\n  var _b;\n\n  var axis = _a.axis,\n      series = _a.series,\n      color = _a.color,\n      xScale = _a.xScale,\n      yScale = _a.yScale,\n      highlighted = _a.highlighted,\n      dimmed = _a.dimmed,\n      highlightedGroupIndex = _a.highlightedGroupIndex,\n      stackedBarOffsets = _a.stackedBarOffsets,\n      totalSeriesCount = _a.totalSeriesCount,\n      seriesIndex = _a.seriesIndex,\n      plotSize = _a.plotSize,\n      chartAreaClipPath = _a.chartAreaClipPath;\n  var seriesRef = useRef(null);\n  var isRefresh = useVisualRefresh(seriesRef);\n  var xCoordinates = useMemo(function () {\n    var _a;\n\n    if (series.type !== 'bar' || !xScale.isCategorical()) {\n      return [];\n    }\n\n    var yContinuosScale = yScale.d3Scale;\n    var xPoints = series.data.map(function (_a) {\n      var x = _a.x;\n      return xScale.d3Scale(x) || NaN;\n    });\n    var zeroY = (_a = yScale.d3Scale(0)) !== null && _a !== void 0 ? _a : NaN;\n    var baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;\n    var barWidth = xScale.d3Scale.bandwidth();\n    var PADDING = 4;\n    var MINWIDTH = 4;\n\n    if (!stackedBarOffsets && totalSeriesCount > 1) {\n      // Regular grouped bars\n      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;\n      barWidth = Math.max(barWidth, MINWIDTH);\n    }\n\n    return xPoints.map(function (x, i) {\n      var _a, _b;\n\n      var d = series.data[i];\n      var barX = x;\n      var yValue = d.y;\n\n      if (stackedBarOffsets) {\n        // Stacked bars\n        var offsetMap = d.y < 0 ? stackedBarOffsets.negativeOffsets : stackedBarOffsets.positiveOffsets;\n        yValue = d.y + (offsetMap[getKeyValue(d.x)] || 0);\n      } else if (totalSeriesCount > 1) {\n        // Regular grouped bars\n        barX += seriesIndex * (barWidth + PADDING);\n      } // Account for negative values growing \"down\" instead of \"up\"\n\n\n      yValue = yValue < 0 ? yValue - d.y : yValue;\n      return {\n        x: barX,\n        y: (_a = yContinuosScale(yValue)) !== null && _a !== void 0 ? _a : NaN,\n        width: barWidth,\n        height: Math.abs(((_b = yContinuosScale(d.y)) !== null && _b !== void 0 ? _b : NaN) - baseY)\n      };\n    });\n  }, [series, xScale, yScale, plotSize, stackedBarOffsets, totalSeriesCount, seriesIndex]);\n  var highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;\n  return React.createElement(\"g\", {\n    \"aria-label\": series.title,\n    clipPath: \"url(#\".concat(chartAreaClipPath, \")\"),\n    className: clsx(styles.series, styles['series--bar'], (_b = {}, _b[styles['series--highlighted']] = highlighted, _b[styles['series--dimmed']] = dimmed, _b)),\n    ref: seriesRef\n  }, xCoordinates.map(function (_a, i) {\n    var _b;\n\n    var x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n    return isFinite(x) && isFinite(height) && React.createElement(\"rect\", {\n      key: \"bar-\".concat(i),\n      fill: color,\n      x: axis === 'x' ? x : y - height,\n      y: axis === 'x' ? y : x,\n      width: axis === 'x' ? width : height,\n      height: axis === 'x' ? height : width,\n      rx: isRefresh ? '4px' : '0px',\n      className: clsx(styles.series__rect, (_b = {}, _b[styles['series--dimmed']] = highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x), _b))\n    });\n  }));\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","useRef","clsx","matchesX","getKeyValue","styles","useVisualRefresh","BarSeries","_a","axis","series","color","xScale","yScale","highlighted","dimmed","highlightedGroupIndex","stackedBarOffsets","totalSeriesCount","seriesIndex","plotSize","chartAreaClipPath","seriesRef","isRefresh","xCoordinates","type","isCategorical","yContinuosScale","d3Scale","xPoints","data","map","x","NaN","zeroY","baseY","isFinite","Math","min","barWidth","bandwidth","PADDING","MINWIDTH","max","i","d","barX","yValue","y","offsetMap","negativeOffsets","positiveOffsets","width","height","abs","_b","highlightedXValue","domain","title","clipPath","className","ref","key","fill","rx","series__rect"],"sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/bar-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useRef } from 'react';\nimport clsx from 'clsx';\nimport { ScaleContinuousNumeric, ScaleTime } from 'd3-scale';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport { matchesX, getKeyValue, StackedOffsets } from './utils';\nimport styles from './styles.css.js';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nexport interface BarSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  series: MixedLineBarChartProps.BarDataSeries<T>;\n\n  color: string;\n  totalSeriesCount: number;\n  seriesIndex: number;\n\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n\n  plotSize: number;\n  chartAreaClipPath: string;\n\n  highlighted: boolean;\n  dimmed: boolean;\n  highlightedGroupIndex: number | null;\n\n  // Contains the cumulative offset for each x value in a stacked bar chart\n  stackedBarOffsets?: StackedOffsets;\n}\n\nexport default function BarSeries<T extends ChartDataTypes>({\n  axis,\n  series,\n  color,\n  xScale,\n  yScale,\n  highlighted,\n  dimmed,\n  highlightedGroupIndex,\n  stackedBarOffsets,\n  totalSeriesCount,\n  seriesIndex,\n  plotSize,\n  chartAreaClipPath,\n}: BarSeriesProps<T>) {\n  const seriesRef = useRef(null);\n  const isRefresh = useVisualRefresh(seriesRef);\n\n  const xCoordinates = useMemo(() => {\n    if (series.type !== 'bar' || !xScale.isCategorical()) {\n      return [];\n    }\n\n    const yContinuosScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number> = yScale.d3Scale;\n    const xPoints = (series.data as ReadonlyArray<MixedLineBarChartProps.Datum<ChartDataTypes>>).map(\n      ({ x }) => xScale.d3Scale(x) || NaN\n    );\n\n    const zeroY = yScale.d3Scale(0) ?? NaN;\n    const baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;\n\n    let barWidth = xScale.d3Scale.bandwidth();\n\n    const PADDING = 4;\n    const MINWIDTH = 4;\n\n    if (!stackedBarOffsets && totalSeriesCount > 1) {\n      // Regular grouped bars\n      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;\n      barWidth = Math.max(barWidth, MINWIDTH);\n    }\n\n    return xPoints.map((x, i) => {\n      const d = series.data[i];\n      let barX = x;\n      let yValue = d.y;\n\n      if (stackedBarOffsets) {\n        // Stacked bars\n        const offsetMap = d.y < 0 ? stackedBarOffsets.negativeOffsets : stackedBarOffsets.positiveOffsets;\n        yValue = d.y + (offsetMap[getKeyValue(d.x)] || 0);\n      } else if (totalSeriesCount > 1) {\n        // Regular grouped bars\n        barX += seriesIndex * (barWidth + PADDING);\n      }\n\n      // Account for negative values growing \"down\" instead of \"up\"\n      yValue = yValue < 0 ? yValue - d.y : yValue;\n\n      return {\n        x: barX,\n        y: yContinuosScale(yValue) ?? NaN,\n        width: barWidth,\n        height: Math.abs((yContinuosScale(d.y) ?? NaN) - baseY),\n      };\n    });\n  }, [series, xScale, yScale, plotSize, stackedBarOffsets, totalSeriesCount, seriesIndex]);\n\n  const highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;\n\n  return (\n    <g\n      aria-label={series.title}\n      clipPath={`url(#${chartAreaClipPath})`}\n      className={clsx(styles.series, styles['series--bar'], {\n        [styles['series--highlighted']]: highlighted,\n        [styles['series--dimmed']]: dimmed,\n      })}\n      ref={seriesRef}\n    >\n      {xCoordinates.map(\n        ({ x, y, width, height }, i) =>\n          isFinite(x) &&\n          isFinite(height) && (\n            <rect\n              key={`bar-${i}`}\n              fill={color}\n              x={axis === 'x' ? x : y - height}\n              y={axis === 'x' ? y : x}\n              width={axis === 'x' ? width : height}\n              height={axis === 'x' ? height : width}\n              rx={isRefresh ? '4px' : '0px'}\n              className={clsx(styles.series__rect, {\n                [styles['series--dimmed']]:\n                  highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x),\n              })}\n            />\n          )\n      )}\n    </g>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}