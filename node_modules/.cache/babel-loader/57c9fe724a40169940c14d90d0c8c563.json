{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useImperativeHandle, useRef } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalButton } from '../button/internal';\nimport { AdditionalInfo } from './additional-info';\nimport { Row } from './row';\nimport styles from './styles.css.js';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport InternalBox from '../box/internal';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar InternalAttributeEditor = React.forwardRef(function (_a, ref) {\n  var additionalInfo = _a.additionalInfo,\n      disableAddButton = _a.disableAddButton,\n      definition = _a.definition,\n      items = _a.items,\n      _b = _a.isItemRemovable,\n      isItemRemovable = _b === void 0 ? function () {\n    return true;\n  } : _b,\n      empty = _a.empty,\n      addButtonText = _a.addButtonText,\n      removeButtonText = _a.removeButtonText,\n      onAddButtonClick = _a.onAddButtonClick,\n      onRemoveButtonClick = _a.onRemoveButtonClick,\n      _c = _a.__internalRootRef,\n      __internalRootRef = _c === void 0 ? null : _c,\n      props = __rest(_a, [\"additionalInfo\", \"disableAddButton\", \"definition\", \"items\", \"isItemRemovable\", \"empty\", \"addButtonText\", \"removeButtonText\", \"onAddButtonClick\", \"onRemoveButtonClick\", \"__internalRootRef\"]);\n\n  var _d = useContainerBreakpoints(['default', 'xxs', 'xs']),\n      breakpoint = _d[0],\n      breakpointRef = _d[1];\n\n  var removeButtonRefs = useRef([]);\n  var baseProps = getBaseProps(props);\n  var isEmpty = items && items.length === 0;\n  useImperativeHandle(ref, function () {\n    return {\n      focusRemoveButton: function (rowIndex) {\n        var _a;\n\n        (_a = removeButtonRefs.current[rowIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    };\n  });\n  var mergedRef = useMergeRefs(breakpointRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(baseProps.className, styles.root)\n  }), React.createElement(InternalBox, {\n    margin: {\n      bottom: 'l'\n    }\n  }, isEmpty && React.createElement(\"div\", {\n    className: styles.empty\n  }, empty), items.map(function (item, index) {\n    return React.createElement(Row, {\n      key: index,\n      index: index,\n      breakpoint: breakpoint,\n      item: item,\n      definition: definition,\n      removable: isItemRemovable(item),\n      removeButtonText: removeButtonText,\n      removeButtonRefs: removeButtonRefs.current,\n      onRemoveButtonClick: onRemoveButtonClick\n    });\n  })), React.createElement(InternalButton, {\n    className: styles['add-button'],\n    disabled: disableAddButton,\n    onClick: onAddButtonClick,\n    formAction: \"none\"\n  }, addButtonText), additionalInfo && React.createElement(AdditionalInfo, null, additionalInfo));\n});\nexport default InternalAttributeEditor;","map":{"version":3,"mappings":"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","names":["React","useImperativeHandle","useRef","clsx","getBaseProps","InternalButton","AdditionalInfo","Row","styles","useContainerBreakpoints","InternalBox","useMergeRefs","InternalAttributeEditor","forwardRef","_a","ref","disableAddButton","definition","items","_b","isItemRemovable","empty","addButtonText","removeButtonText","onAddButtonClick","onRemoveButtonClick","_c","__internalRootRef","props","breakpoint","breakpointRef","removeButtonRefs","baseProps","isEmpty","length","focusRemoveButton","rowIndex","current","focus","mergedRef","className","root","margin","bottom","map","item","index","key","removable","disabled","onClick","formAction","additionalInfo"],"sourceRoot":"","sources":["../../../src/attribute-editor/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useImperativeHandle, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\n\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\n\nimport { AttributeEditorForwardRefType, AttributeEditorProps } from './interfaces';\nimport { AdditionalInfo } from './additional-info';\nimport { Row } from './row';\n\nimport styles from './styles.css.js';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport InternalBox from '../box/internal';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { SomeRequired } from '../internal/types';\n\ntype InternalAttributeEditorProps<T> = SomeRequired<AttributeEditorProps<T>, 'items'> & InternalBaseComponentProps;\n\nconst InternalAttributeEditor = React.forwardRef(\n  <T,>(\n    {\n      additionalInfo,\n      disableAddButton,\n      definition,\n      items,\n      isItemRemovable = () => true,\n      empty,\n      addButtonText,\n      removeButtonText,\n      onAddButtonClick,\n      onRemoveButtonClick,\n      __internalRootRef = null,\n      ...props\n    }: InternalAttributeEditorProps<T>,\n    ref: React.Ref<AttributeEditorProps.Ref>\n  ) => {\n    const [breakpoint, breakpointRef] = useContainerBreakpoints(['default', 'xxs', 'xs']);\n    const removeButtonRefs = useRef<Array<ButtonProps.Ref | undefined>>([]);\n\n    const baseProps = getBaseProps(props);\n    const isEmpty = items && items.length === 0;\n\n    useImperativeHandle(ref, () => ({\n      focusRemoveButton(rowIndex: number) {\n        removeButtonRefs.current[rowIndex]?.focus();\n      },\n    }));\n\n    const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);\n\n    return (\n      <div {...baseProps} ref={mergedRef} className={clsx(baseProps.className, styles.root)}>\n        <InternalBox margin={{ bottom: 'l' }}>\n          {isEmpty && <div className={styles.empty}>{empty}</div>}\n          {items.map((item, index) => (\n            <Row\n              key={index}\n              index={index}\n              breakpoint={breakpoint}\n              item={item}\n              definition={definition}\n              removable={isItemRemovable(item)}\n              removeButtonText={removeButtonText}\n              removeButtonRefs={removeButtonRefs.current}\n              onRemoveButtonClick={onRemoveButtonClick}\n            />\n          ))}\n        </InternalBox>\n        <InternalButton\n          className={styles['add-button']}\n          disabled={disableAddButton}\n          onClick={onAddButtonClick}\n          formAction=\"none\"\n        >\n          {addButtonText}\n        </InternalButton>\n        {additionalInfo && <AdditionalInfo>{additionalInfo}</AdditionalInfo>}\n      </div>\n    );\n  }\n) as AttributeEditorForwardRefType;\n\nexport default InternalAttributeEditor;\n"]},"metadata":{},"sourceType":"module"}