{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\n\nvar splitOnFiltering = function (str, highlightText) {\n  // Filtering needs to be case insensitive\n  var filteringPattern = highlightText.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n  var regexp = new RegExp(filteringPattern, 'gi');\n  var noMatches = str.split(regexp);\n  var matches = str.match(regexp);\n  return {\n    noMatches: noMatches,\n    matches: matches\n  };\n};\n\nvar Highlight = function (_a) {\n  var str = _a.str;\n  return str ? React.createElement(\"span\", {\n    className: clsx(styles['filtering-match-highlight'])\n  }, str) : null;\n};\n\nexport default function HighlightMatch(_a) {\n  var str = _a.str,\n      highlightText = _a.highlightText;\n\n  if (!str || !highlightText) {\n    return React.createElement(React.Fragment, null, str);\n  }\n\n  if (str === highlightText) {\n    return React.createElement(Highlight, {\n      str: str\n    });\n  }\n\n  var _b = splitOnFiltering(str, highlightText),\n      noMatches = _b.noMatches,\n      matches = _b.matches;\n\n  var highlighted = [];\n  noMatches.forEach(function (noMatch, idx) {\n    highlighted.push(noMatch);\n\n    if (matches && idx < matches.length) {\n      highlighted.push(React.createElement(Highlight, {\n        key: idx,\n        str: matches[idx]\n      }));\n    }\n  });\n  return React.createElement(\"span\", null, highlighted);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,gBAAgB,GAAG,UAACC,GAAD,EAAcC,aAAd,EAAmC;EAC1D;EACA,IAAMC,gBAAgB,GAAGD,aAAa,CAACE,OAAd,CAAsB,uBAAtB,EAA+C,MAA/C,CAAzB;EACA,IAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAWH,gBAAX,EAA6B,IAA7B,CAAf;EACA,IAAMI,SAAS,GAAGN,GAAG,CAACO,KAAJ,CAAUH,MAAV,CAAlB;EACA,IAAMI,OAAO,GAAGR,GAAG,CAACS,KAAJ,CAAUL,MAAV,CAAhB;EAEA,OAAO;IAAEE,SAAS,WAAX;IAAaE,OAAO;EAApB,CAAP;AACD,CARD;;AAeA,IAAME,SAAS,GAAG,UAACC,EAAD,EAA6B;MAA1BX,GAAG;EACtB,UAAG,GAAGJ;IAAMgB,SAAS,EAAEd,IAAI,CAACD,MAAM,CAAC,2BAAD,CAAP;EAArB,GAA6DG,GAA7D,CAAH,GAA8E,IAAjF;AAAqF,CADvF;;AAGA,eAAc,SAAUa,cAAV,CAAyBF,EAAzB,EAAoE;MAAzCX,GAAG;MAAEC,aAAa;;EACzD,IAAI,CAACD,GAAD,IAAQ,CAACC,aAAb,EAA4B;IAC1B,OAAOL,0CAAGI,GAAH,CAAP;EACD;;EAED,IAAIA,GAAG,KAAKC,aAAZ,EAA2B;IACzB,OAAOL,oBAACc,SAAD,EAAU;MAACV,GAAG,EAAEA;IAAN,CAAV,CAAP;EACD;;EAEK,SAAyBD,gBAAgB,CAACC,GAAD,EAAMC,aAAN,CAAzC;EAAA,IAAEK,SAAS,eAAX;EAAA,IAAaE,OAAO,aAApB;;EAEN,IAAMM,WAAW,GAA6B,EAA9C;EAEAR,SAAS,CAACS,OAAV,CAAkB,UAACC,OAAD,EAAUC,GAAV,EAAa;IAC7BH,WAAW,CAACI,IAAZ,CAAiBF,OAAjB;;IAEA,IAAIR,OAAO,IAAIS,GAAG,GAAGT,OAAO,CAACW,MAA7B,EAAqC;MACnCL,WAAW,CAACI,IAAZ,CAAiBtB,oBAACc,SAAD,EAAU;QAACU,GAAG,EAAEH,GAAN;QAAWjB,GAAG,EAAEQ,OAAO,CAACS,GAAD;MAAvB,CAAV,CAAjB;IACD;EACF,CAND;EAQA,OAAOrB,kCAAOkB,WAAP,CAAP;AACD","names":["React","styles","clsx","splitOnFiltering","str","highlightText","filteringPattern","replace","regexp","RegExp","noMatches","split","matches","match","Highlight","_a","className","HighlightMatch","highlighted","forEach","noMatch","idx","push","length","key"],"sourceRoot":"","sources":["../../../../../src/internal/components/option/highlight-match.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport clsx from 'clsx';\n\nconst splitOnFiltering = (str: string, highlightText: string) => {\n  // Filtering needs to be case insensitive\n  const filteringPattern = highlightText.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n  const regexp = new RegExp(filteringPattern, 'gi');\n  const noMatches = str.split(regexp);\n  const matches = str.match(regexp);\n\n  return { noMatches, matches };\n};\n\nexport interface HighlightMatchProps {\n  str?: string;\n  highlightText?: string;\n}\n\nconst Highlight = ({ str }: HighlightMatchProps) =>\n  str ? <span className={clsx(styles['filtering-match-highlight'])}>{str}</span> : null;\n\nexport default function HighlightMatch({ str, highlightText }: HighlightMatchProps) {\n  if (!str || !highlightText) {\n    return <>{str}</>;\n  }\n\n  if (str === highlightText) {\n    return <Highlight str={str} />;\n  }\n\n  const { noMatches, matches } = splitOnFiltering(str, highlightText);\n\n  const highlighted: (string | JSX.Element)[] = [];\n\n  noMatches.forEach((noMatch, idx) => {\n    highlighted.push(noMatch);\n\n    if (matches && idx < matches.length) {\n      highlighted.push(<Highlight key={idx} str={matches[idx]} />);\n    }\n  });\n\n  return <span>{highlighted}</span>;\n}\n"]},"metadata":{},"sourceType":"module"}