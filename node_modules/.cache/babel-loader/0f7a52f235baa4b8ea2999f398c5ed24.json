{"ast":null,"code":"import React from 'react';\nimport InternalSpinner from '../spinner/internal';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { InternalButton } from '../button/internal';\nimport { warnOnce } from '../internal/logging';\nimport { isDevelopment } from '../internal/is-development';\nvar ICON_TYPES = {\n  success: 'status-positive',\n  warning: 'status-warning',\n  info: 'status-info',\n  error: 'status-negative'\n};\n\nfunction actionButton(buttonText, onButtonClick) {\n  return React.createElement(InternalButton, {\n    onClick: onButtonClick,\n    className: styles['action-button'],\n    formAction: \"none\"\n  }, buttonText);\n}\n\nfunction dismissButton(dismissLabel, onDismiss) {\n  return React.createElement(\"div\", {\n    className: styles['dismiss-button-wrapper']\n  }, React.createElement(InternalButton, {\n    onClick: onDismiss,\n    className: styles['dismiss-button'],\n    variant: \"flashbar-icon\",\n    iconName: \"close\",\n    formAction: \"none\",\n    ariaLabel: dismissLabel\n  }));\n}\n\nexport var Flash = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var header = _a.header,\n      content = _a.content,\n      dismissible = _a.dismissible,\n      dismissLabel = _a.dismissLabel,\n      loading = _a.loading,\n      action = _a.action,\n      buttonText = _a.buttonText,\n      onButtonClick = _a.onButtonClick,\n      onDismiss = _a.onDismiss,\n      className = _a.className,\n      transitionState = _a.transitionState,\n      _c = _a.type,\n      type = _c === void 0 ? 'info' : _c;\n\n  if (isDevelopment) {\n    if (buttonText && !onButtonClick) {\n      warnOnce('Flashbar', \"You provided a `buttonText` prop without an `onButtonClick` handler. This will render a non-interactive action button.\");\n    }\n\n    if (dismissible && !onDismiss) {\n      warnOnce('Flashbar', \"You have set the `dismissible` prop without an `onDismiss` handler. This will render a non-interactive dismiss button.\");\n    }\n  }\n\n  var button = action || buttonText && actionButton(buttonText, onButtonClick);\n  var iconType = ICON_TYPES[type];\n  var icon = loading ? React.createElement(InternalSpinner, null) : React.createElement(InternalIcon, {\n    name: iconType\n  });\n  var effectiveType = loading ? 'info' : type;\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles.flash, styles[\"flash-type-\".concat(effectiveType)], className, transitionState ? (_b = {}, _b[styles.enter] = transitionState === 'enter', _b[styles.entering] = transitionState === 'entering', _b[styles.entered] = transitionState === 'entered', _b[styles.exit] = transitionState === 'exit', _b[styles.exiting] = transitionState === 'exiting', _b[styles.exited] = transitionState === 'exited', _b) : '')\n  }, React.createElement(\"div\", {\n    className: clsx(styles['flash-icon'], styles['flash-text'])\n  }, icon), React.createElement(\"div\", {\n    className: styles['flash-body']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['flash-message'], styles['flash-text'])\n  }, React.createElement(\"div\", {\n    className: styles['flash-header']\n  }, header), React.createElement(\"div\", {\n    className: styles['flash-content']\n  }, content)), button && React.createElement(\"div\", {\n    className: styles['action-button-wrapper']\n  }, button)), dismissible && dismissButton(dismissLabel, onDismiss));\n});","map":{"version":3,"mappings":"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","names":["React","InternalSpinner","InternalIcon","clsx","styles","InternalButton","warnOnce","isDevelopment","ICON_TYPES","success","warning","info","error","actionButton","buttonText","onButtonClick","onClick","className","formAction","dismissButton","dismissLabel","onDismiss","variant","iconName","ariaLabel","Flash","forwardRef","_a","ref","header","content","dismissible","loading","action","transitionState","_c","type","button","iconType","icon","name","effectiveType","flash","_b","enter","entering","entered","exit","exiting","exited"],"sourceRoot":"","sources":["../../../src/flashbar/flash.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { FlashbarProps } from './interfaces';\nimport React from 'react';\nimport InternalSpinner from '../spinner/internal';\nimport InternalIcon from '../icon/internal';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { InternalButton } from '../button/internal';\nimport { warnOnce } from '../internal/logging';\nimport { isDevelopment } from '../internal/is-development';\n\nconst ICON_TYPES = {\n  success: 'status-positive',\n  warning: 'status-warning',\n  info: 'status-info',\n  error: 'status-negative',\n} as const;\n\nfunction actionButton(\n  buttonText: FlashbarProps.MessageDefinition['buttonText'],\n  onButtonClick: FlashbarProps.MessageDefinition['onButtonClick']\n) {\n  return (\n    <InternalButton onClick={onButtonClick} className={styles['action-button']} formAction=\"none\">\n      {buttonText}\n    </InternalButton>\n  );\n}\n\nfunction dismissButton(\n  dismissLabel: FlashbarProps.MessageDefinition['dismissLabel'],\n  onDismiss: FlashbarProps.MessageDefinition['onDismiss']\n) {\n  return (\n    <div className={styles['dismiss-button-wrapper']}>\n      <InternalButton\n        onClick={onDismiss}\n        className={styles['dismiss-button']}\n        variant=\"flashbar-icon\"\n        iconName=\"close\"\n        formAction=\"none\"\n        ariaLabel={dismissLabel}\n      />\n    </div>\n  );\n}\n\ninterface Flash extends FlashbarProps.MessageDefinition {\n  className: string;\n  transitionState?: string;\n}\n\nexport const Flash = React.forwardRef(\n  (\n    {\n      header,\n      content,\n      dismissible,\n      dismissLabel,\n      loading,\n      action,\n      buttonText,\n      onButtonClick,\n      onDismiss,\n      className,\n      transitionState,\n      type = 'info',\n    }: Flash,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    if (isDevelopment) {\n      if (buttonText && !onButtonClick) {\n        warnOnce(\n          'Flashbar',\n          `You provided a \\`buttonText\\` prop without an \\`onButtonClick\\` handler. This will render a non-interactive action button.`\n        );\n      }\n\n      if (dismissible && !onDismiss) {\n        warnOnce(\n          'Flashbar',\n          `You have set the \\`dismissible\\` prop without an \\`onDismiss\\` handler. This will render a non-interactive dismiss button.`\n        );\n      }\n    }\n\n    const button = action || (buttonText && actionButton(buttonText, onButtonClick));\n\n    const iconType = ICON_TYPES[type];\n\n    const icon = loading ? <InternalSpinner /> : <InternalIcon name={iconType} />;\n\n    const effectiveType = loading ? 'info' : type;\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          styles.flash,\n          styles[`flash-type-${effectiveType}`],\n          className,\n          transitionState\n            ? {\n                [styles.enter]: transitionState === 'enter',\n                [styles.entering]: transitionState === 'entering',\n                [styles.entered]: transitionState === 'entered',\n                [styles.exit]: transitionState === 'exit',\n                [styles.exiting]: transitionState === 'exiting',\n                [styles.exited]: transitionState === 'exited',\n              }\n            : ''\n        )}\n      >\n        <div className={clsx(styles['flash-icon'], styles['flash-text'])}>{icon}</div>\n        <div className={styles['flash-body']}>\n          <div className={clsx(styles['flash-message'], styles['flash-text'])}>\n            <div className={styles['flash-header']}>{header}</div>\n            <div className={styles['flash-content']}>{content}</div>\n          </div>\n          {button && <div className={styles['action-button-wrapper']}>{button}</div>}\n        </div>\n        {dismissible && dismissButton(dismissLabel, onDismiss)}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}