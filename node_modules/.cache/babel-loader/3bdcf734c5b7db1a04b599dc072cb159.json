{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The layoutElement ref will be used by the resize observers to calculate the offset from\n * the top and bottom of the viewport based on the header and footer elements. This is to\n * ensure the Layout component minimum height will fill 100% of the viewport less those\n * cumulative heights.\n */\n\nexport default function Layout(_a) {\n  var _b, _c, _d, _e, _f, _g;\n\n  var children = _a.children;\n\n  var _h = useContext(AppLayoutContext),\n      contentHeader = _h.contentHeader,\n      contentType = _h.contentType,\n      disableBodyScroll = _h.disableBodyScroll,\n      disableContentHeaderOverlap = _h.disableContentHeaderOverlap,\n      dynamicOverlapHeight = _h.dynamicOverlapHeight,\n      footerHeight = _h.footerHeight,\n      hasNotificationsContent = _h.hasNotificationsContent,\n      headerHeight = _h.headerHeight,\n      isNavigationOpen = _h.isNavigationOpen,\n      isSplitPanelOpen = _h.isSplitPanelOpen,\n      isToolsOpen = _h.isToolsOpen,\n      layoutElement = _h.layoutElement,\n      layoutWidth = _h.layoutWidth,\n      mainOffsetLeft = _h.mainOffsetLeft,\n      maxContentWidth = _h.maxContentWidth,\n      minContentWidth = _h.minContentWidth,\n      navigationHide = _h.navigationHide,\n      notificationsHeight = _h.notificationsHeight,\n      setOffsetBottom = _h.setOffsetBottom,\n      splitPanel = _h.splitPanel,\n      stickyNotifications = _h.stickyNotifications,\n      toolsHide = _h.toolsHide;\n\n  var _j = useContext(SplitPanelContext),\n      getSplitPanelHeader = _j.getHeader,\n      splitPanelPosition = _j.position,\n      splitPanelSize = _j.size;\n\n  var isOverlapDisabled = getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap); // Content gaps on the left and right are used with the minmax function in the CSS grid column definition\n\n  var hasContentGapLeft = getContentGapLeft(isNavigationOpen, navigationHide);\n  var hasContentGapRight = getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide);\n  /**\n   * Determine the offsetBottom value based on the presence of a footer element and\n   * the SplitPanel component. Ignore the SplitPanel if it is not in the bottom\n   * position. Use the size property if it is open and the header height if it is closed.\n   */\n\n  useLayoutEffect(function handleOffsetBottom() {\n    var offsetBottom = footerHeight;\n\n    if (splitPanel && splitPanelPosition === 'bottom') {\n      if (isSplitPanelOpen) {\n        offsetBottom += splitPanelSize;\n      } else {\n        var splitPanelHeader = getSplitPanelHeader();\n        offsetBottom += splitPanelHeader ? splitPanelHeader.clientHeight : 0;\n      }\n    }\n\n    setOffsetBottom(offsetBottom);\n  }, [footerHeight, getSplitPanelHeader, isSplitPanelOpen, setOffsetBottom, splitPanelPosition, splitPanel, splitPanelSize]);\n  return React.createElement(\"main\", {\n    className: clsx(styles.layout, styles[\"content-type-\".concat(contentType)], styles[\"split-panel-position-\".concat(splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom')], (_b = {}, _b[styles['disable-body-scroll']] = disableBodyScroll, _b[testutilStyles['disable-body-scroll-root']] = disableBodyScroll, _b[styles['has-content-gap-left']] = hasContentGapLeft, _b[styles['has-content-gap-right']] = hasContentGapRight, _b[styles['has-max-content-width']] = maxContentWidth && maxContentWidth > 0, _b[styles['has-split-panel']] = splitPanel, _b[styles['has-sticky-notifications']] = stickyNotifications && hasNotificationsContent, _b[styles['is-overlap-disabled']] = isOverlapDisabled, _b), testutilStyles.root),\n    ref: layoutElement,\n    style: __assign(__assign(__assign(__assign((_c = {}, _c[customCssProps.headerHeight] = \"\".concat(headerHeight, \"px\"), _c[customCssProps.footerHeight] = \"\".concat(footerHeight, \"px\"), _c[customCssProps.layoutWidth] = \"\".concat(layoutWidth, \"px\"), _c[customCssProps.mainOffsetLeft] = \"\".concat(mainOffsetLeft, \"px\"), _c), maxContentWidth && (_d = {}, _d[customCssProps.maxContentWidth] = \"\".concat(maxContentWidth, \"px\"), _d)), minContentWidth && (_e = {}, _e[customCssProps.minContentWidth] = \"\".concat(minContentWidth, \"px\"), _e)), (_f = {}, _f[customCssProps.notificationsHeight] = \"\".concat(notificationsHeight, \"px\"), _f)), !isOverlapDisabled && dynamicOverlapHeight > 0 && (_g = {}, _g[customCssProps.overlapHeight] = \"\".concat(dynamicOverlapHeight, \"px\"), _g))\n  }, children);\n}\n/**\n * When the Navigation and Tools are present the grid definition has the center column\n * touch the first and last columns with no gap. The forms with the circular buttons\n * for Navigation and Tools have internal padding which creates the necessary\n * horizontal space when the drawers are closed. The remaining conditions below\n * determine the necessity of utilizing the content gap left property to create\n * horizontal space between the center column and its adjacent siblings.\n */\n\nfunction getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide) {\n  var hasContentGapRight = false; // Main is touching the edge of the Layout and needs a content gap\n\n  if (!splitPanel && toolsHide) {\n    hasContentGapRight = true;\n  } // Main is touching the Tools drawer and needs a content gap\n\n\n  if ((!splitPanel || !isSplitPanelOpen) && !toolsHide && isToolsOpen) {\n    hasContentGapRight = true;\n  } // Main is touching the edge of the Layout and needs a content gap\n\n\n  if (splitPanel && splitPanelPosition === 'bottom' && (isToolsOpen || toolsHide)) {\n    hasContentGapRight = true;\n  } // Main is touching the Split Panel drawer and needs a content gap\n\n\n  if (splitPanel && isSplitPanelOpen && splitPanelPosition === 'side') {\n    hasContentGapRight = true;\n  }\n\n  return hasContentGapRight;\n}\n/**\n * Additional function to determine whether or not a content gap is needed\n * on the left (see the getContentGapRight function). The same render logic applies\n * regarding the center column touching an adjacent sibling but the only\n * component state that needs to be tracked is the Navigation.\n */\n\n\nfunction getContentGapLeft(isNavigationOpen, navigationHide) {\n  return isNavigationOpen || navigationHide ? true : false;\n}\n/**\n * Determine whether the overlap between the contentHeader and content slots should be disabled.\n * The disableContentHeaderOverlap property is absolute and will always disable the overlap\n * if it is set to true. If there is no contentHeader then the overlap should be disabled\n * unless there is a dynamicOverlapHeight. The dynamicOverlapHeight property is set by a\n * component in the content slot that needs to manually control the overlap height. Components\n * such as the Table (full page variant), Wizard, ContentLayout use this property and will\n * retain the overlap even if there is nothing rendered in the contentHeader slot.\n */\n\n\nfunction getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap) {\n  var isOverlapDisabled = false;\n\n  if (disableContentHeaderOverlap) {\n    isOverlapDisabled = true;\n  } else if (!contentHeader && dynamicOverlapHeight <= 0) {\n    isOverlapDisabled = true;\n  }\n\n  return isOverlapDisabled;\n}","map":{"version":3,"mappings":"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","names":["React","useContext","useLayoutEffect","clsx","AppLayoutContext","SplitPanelContext","styles","testutilStyles","customCssProps","Layout","_a","children","contentHeader","contentType","disableBodyScroll","disableContentHeaderOverlap","dynamicOverlapHeight","footerHeight","hasNotificationsContent","headerHeight","isNavigationOpen","isSplitPanelOpen","isToolsOpen","layoutElement","layoutWidth","mainOffsetLeft","maxContentWidth","minContentWidth","navigationHide","notificationsHeight","setOffsetBottom","splitPanel","stickyNotifications","toolsHide","getSplitPanelHeader","splitPanelPosition","splitPanelSize","isOverlapDisabled","getOverlapDisabled","hasContentGapLeft","getContentGapLeft","hasContentGapRight","getContentGapRight","handleOffsetBottom","offsetBottom","splitPanelHeader","clientHeight","className","layout","_b","root","ref","style","_c","_d","_e","_f","_g","overlapHeight"],"sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/layout.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { AppLayoutProps } from '../interfaces';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\n/**\n * The layoutElement ref will be used by the resize observers to calculate the offset from\n * the top and bottom of the viewport based on the header and footer elements. This is to\n * ensure the Layout component minimum height will fill 100% of the viewport less those\n * cumulative heights.\n */\nexport default function Layout({ children }: LayoutProps) {\n  const {\n    contentHeader,\n    contentType,\n    disableBodyScroll,\n    disableContentHeaderOverlap,\n    dynamicOverlapHeight,\n    footerHeight,\n    hasNotificationsContent,\n    headerHeight,\n    isNavigationOpen,\n    isSplitPanelOpen,\n    isToolsOpen,\n    layoutElement,\n    layoutWidth,\n    mainOffsetLeft,\n    maxContentWidth,\n    minContentWidth,\n    navigationHide,\n    notificationsHeight,\n    setOffsetBottom,\n    splitPanel,\n    stickyNotifications,\n    toolsHide,\n  } = useContext(AppLayoutContext);\n\n  const {\n    getHeader: getSplitPanelHeader,\n    position: splitPanelPosition,\n    size: splitPanelSize,\n  } = useContext(SplitPanelContext);\n\n  const isOverlapDisabled = getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap);\n\n  // Content gaps on the left and right are used with the minmax function in the CSS grid column definition\n  const hasContentGapLeft = getContentGapLeft(isNavigationOpen, navigationHide);\n  const hasContentGapRight = getContentGapRight(\n    splitPanelPosition,\n    isSplitPanelOpen,\n    isToolsOpen,\n    splitPanel,\n    toolsHide\n  );\n\n  /**\n   * Determine the offsetBottom value based on the presence of a footer element and\n   * the SplitPanel component. Ignore the SplitPanel if it is not in the bottom\n   * position. Use the size property if it is open and the header height if it is closed.\n   */\n  useLayoutEffect(\n    function handleOffsetBottom() {\n      let offsetBottom = footerHeight;\n\n      if (splitPanel && splitPanelPosition === 'bottom') {\n        if (isSplitPanelOpen) {\n          offsetBottom += splitPanelSize;\n        } else {\n          const splitPanelHeader = getSplitPanelHeader();\n          offsetBottom += splitPanelHeader ? splitPanelHeader.clientHeight : 0;\n        }\n      }\n\n      setOffsetBottom(offsetBottom);\n    },\n    [\n      footerHeight,\n      getSplitPanelHeader,\n      isSplitPanelOpen,\n      setOffsetBottom,\n      splitPanelPosition,\n      splitPanel,\n      splitPanelSize,\n    ]\n  );\n\n  return (\n    <main\n      className={clsx(\n        styles.layout,\n        styles[`content-type-${contentType}`],\n        styles[`split-panel-position-${splitPanelPosition ?? 'bottom'}`],\n        {\n          [styles['disable-body-scroll']]: disableBodyScroll,\n          [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n          [styles['has-content-gap-left']]: hasContentGapLeft,\n          [styles['has-content-gap-right']]: hasContentGapRight,\n          [styles['has-max-content-width']]: maxContentWidth && maxContentWidth > 0,\n          [styles['has-split-panel']]: splitPanel,\n          [styles['has-sticky-notifications']]: stickyNotifications && hasNotificationsContent,\n          [styles['is-overlap-disabled']]: isOverlapDisabled,\n        },\n        testutilStyles.root\n      )}\n      ref={layoutElement}\n      style={{\n        [customCssProps.headerHeight]: `${headerHeight}px`,\n        [customCssProps.footerHeight]: `${footerHeight}px`,\n        [customCssProps.layoutWidth]: `${layoutWidth}px`,\n        [customCssProps.mainOffsetLeft]: `${mainOffsetLeft}px`,\n        ...(maxContentWidth && { [customCssProps.maxContentWidth]: `${maxContentWidth}px` }),\n        ...(minContentWidth && { [customCssProps.minContentWidth]: `${minContentWidth}px` }),\n        [customCssProps.notificationsHeight]: `${notificationsHeight}px`,\n        ...(!isOverlapDisabled &&\n          dynamicOverlapHeight > 0 && { [customCssProps.overlapHeight]: `${dynamicOverlapHeight}px` }),\n      }}\n    >\n      {children}\n    </main>\n  );\n}\n\n/**\n * When the Navigation and Tools are present the grid definition has the center column\n * touch the first and last columns with no gap. The forms with the circular buttons\n * for Navigation and Tools have internal padding which creates the necessary\n * horizontal space when the drawers are closed. The remaining conditions below\n * determine the necessity of utilizing the content gap left property to create\n * horizontal space between the center column and its adjacent siblings.\n */\nfunction getContentGapRight(\n  splitPanelPosition: AppLayoutProps.SplitPanelPosition,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  splitPanel?: React.ReactNode,\n  toolsHide?: boolean\n) {\n  let hasContentGapRight = false;\n\n  // Main is touching the edge of the Layout and needs a content gap\n  if (!splitPanel && toolsHide) {\n    hasContentGapRight = true;\n  }\n\n  // Main is touching the Tools drawer and needs a content gap\n  if ((!splitPanel || !isSplitPanelOpen) && !toolsHide && isToolsOpen) {\n    hasContentGapRight = true;\n  }\n\n  // Main is touching the edge of the Layout and needs a content gap\n  if (splitPanel && splitPanelPosition === 'bottom' && (isToolsOpen || toolsHide)) {\n    hasContentGapRight = true;\n  }\n\n  // Main is touching the Split Panel drawer and needs a content gap\n  if (splitPanel && isSplitPanelOpen && splitPanelPosition === 'side') {\n    hasContentGapRight = true;\n  }\n\n  return hasContentGapRight;\n}\n\n/**\n * Additional function to determine whether or not a content gap is needed\n * on the left (see the getContentGapRight function). The same render logic applies\n * regarding the center column touching an adjacent sibling but the only\n * component state that needs to be tracked is the Navigation.\n */\nfunction getContentGapLeft(isNavigationOpen: boolean, navigationHide?: boolean) {\n  return isNavigationOpen || navigationHide ? true : false;\n}\n\n/**\n * Determine whether the overlap between the contentHeader and content slots should be disabled.\n * The disableContentHeaderOverlap property is absolute and will always disable the overlap\n * if it is set to true. If there is no contentHeader then the overlap should be disabled\n * unless there is a dynamicOverlapHeight. The dynamicOverlapHeight property is set by a\n * component in the content slot that needs to manually control the overlap height. Components\n * such as the Table (full page variant), Wizard, ContentLayout use this property and will\n * retain the overlap even if there is nothing rendered in the contentHeader slot.\n */\nfunction getOverlapDisabled(\n  dynamicOverlapHeight: number,\n  contentHeader?: React.ReactNode,\n  disableContentHeaderOverlap?: boolean\n) {\n  let isOverlapDisabled = false;\n\n  if (disableContentHeaderOverlap) {\n    isOverlapDisabled = true;\n  } else if (!contentHeader && dynamicOverlapHeight <= 0) {\n    isOverlapDisabled = true;\n  }\n\n  return isOverlapDisabled;\n}\n"]},"metadata":{},"sourceType":"module"}