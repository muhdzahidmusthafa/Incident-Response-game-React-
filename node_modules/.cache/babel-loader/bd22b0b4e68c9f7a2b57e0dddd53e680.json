{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { copyPreferences, mergePreferences, ModalContentLayout, PageSizePreference, WrapLinesPreference, CustomPreference } from './utils';\nimport VisibleContentPreference from './visible-content';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nvar ModalContent = function (_a) {\n  var _b = _a.preferences,\n      preferences = _b === void 0 ? {} : _b,\n      pageSizePreference = _a.pageSizePreference,\n      wrapLinesPreference = _a.wrapLinesPreference,\n      customPreference = _a.customPreference,\n      visibleContentPreference = _a.visibleContentPreference,\n      onChange = _a.onChange;\n\n  if (!visibleContentPreference && !pageSizePreference && !wrapLinesPreference && customPreference) {\n    return React.createElement(CustomPreference, {\n      value: preferences.custom,\n      customPreference: customPreference,\n      onChange: function (custom) {\n        return onChange({\n          custom: custom\n        });\n      }\n    });\n  }\n\n  return React.createElement(ModalContentLayout, {\n    left: React.createElement(InternalSpaceBetween, {\n      size: \"l\"\n    }, pageSizePreference && React.createElement(PageSizePreference, __assign({\n      value: preferences.pageSize\n    }, pageSizePreference, {\n      onChange: function (pageSize) {\n        return onChange({\n          pageSize: pageSize\n        });\n      }\n    })), wrapLinesPreference && React.createElement(WrapLinesPreference, __assign({\n      value: preferences.wrapLines\n    }, wrapLinesPreference, {\n      onChange: function (wrapLines) {\n        return onChange({\n          wrapLines: wrapLines\n        });\n      }\n    })), customPreference && React.createElement(CustomPreference, {\n      value: preferences.custom,\n      customPreference: customPreference,\n      onChange: function (custom) {\n        return onChange({\n          custom: custom\n        });\n      }\n    })),\n    right: visibleContentPreference && React.createElement(VisibleContentPreference, __assign({\n      value: preferences.visibleContent\n    }, visibleContentPreference, {\n      onChange: function (visibleContent) {\n        return onChange({\n          visibleContent: visibleContent\n        });\n      }\n    }))\n  });\n};\n\nexport default function CollectionPreferences(_a) {\n  var title = _a.title,\n      confirmLabel = _a.confirmLabel,\n      cancelLabel = _a.cancelLabel,\n      _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b,\n      onConfirm = _a.onConfirm,\n      onCancel = _a.onCancel,\n      visibleContentPreference = _a.visibleContentPreference,\n      pageSizePreference = _a.pageSizePreference,\n      wrapLinesPreference = _a.wrapLinesPreference,\n      preferences = _a.preferences,\n      customPreference = _a.customPreference,\n      rest = __rest(_a, [\"title\", \"confirmLabel\", \"cancelLabel\", \"disabled\", \"onConfirm\", \"onCancel\", \"visibleContentPreference\", \"pageSizePreference\", \"wrapLinesPreference\", \"preferences\", \"customPreference\"]);\n\n  var __internalRootRef = useBaseComponent('CollectionPreferences').__internalRootRef;\n\n  checkControlled('CollectioPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  var baseProps = getBaseProps(rest);\n\n  var _c = useState(false),\n      modalVisible = _c[0],\n      setModalVisible = _c[1];\n\n  var _d = useState(copyPreferences(preferences || {})),\n      temporaryPreferences = _d[0],\n      setTemporaryPreferences = _d[1];\n\n  var triggerRef = useRef(null);\n  var dialogPreviouslyOpen = useRef(false);\n  useEffect(function () {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n\n  var onConfirmListener = function () {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n\n  var onCancelListener = function () {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(InternalButton, {\n    ref: triggerRef,\n    className: styles['trigger-button'],\n    disabled: disabled,\n    ariaLabel: title,\n    onClick: function () {\n      setTemporaryPreferences(copyPreferences(preferences || {}));\n      setModalVisible(true);\n    },\n    variant: \"icon\",\n    iconName: \"settings\",\n    formAction: \"none\"\n  }), !disabled && modalVisible && React.createElement(InternalModal, {\n    className: styles['modal-root'],\n    visible: true,\n    header: title,\n    footer: React.createElement(InternalBox, {\n      float: \"right\"\n    }, React.createElement(InternalSpaceBetween, {\n      direction: \"horizontal\",\n      size: \"xs\"\n    }, React.createElement(InternalButton, {\n      className: styles['cancel-button'],\n      variant: \"link\",\n      formAction: \"none\",\n      onClick: onCancelListener\n    }, cancelLabel), React.createElement(InternalButton, {\n      className: styles['confirm-button'],\n      variant: \"primary\",\n      formAction: \"none\",\n      onClick: onConfirmListener\n    }, confirmLabel))),\n    closeAriaLabel: cancelLabel,\n    size: \"large\",\n    onDismiss: onCancelListener\n  }, React.createElement(ModalContent, {\n    preferences: temporaryPreferences,\n    visibleContentPreference: visibleContentPreference,\n    pageSizePreference: pageSizePreference,\n    wrapLinesPreference: wrapLinesPreference,\n    customPreference: customPreference,\n    onChange: function (changedPreferences) {\n      return setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n    }\n  })));\n}\napplyDisplayName(CollectionPreferences, 'CollectionPreferences');","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","clsx","fireNonCancelableEvent","getBaseProps","InternalBox","InternalButton","InternalModal","InternalSpaceBetween","copyPreferences","mergePreferences","ModalContentLayout","PageSizePreference","WrapLinesPreference","CustomPreference","VisibleContentPreference","checkControlled","styles","applyDisplayName","useBaseComponent","ModalContent","_a","_b","preferences","pageSizePreference","wrapLinesPreference","customPreference","visibleContentPreference","onChange","value","custom","left","size","__assign","pageSize","wrapLines","right","visibleContent","CollectionPreferences","confirmLabel","cancelLabel","disabled","onConfirm","onCancel","rest","__internalRootRef","baseProps","modalVisible","setModalVisible","temporaryPreferences","setTemporaryPreferences","triggerRef","dialogPreviouslyOpen","current","focus","onConfirmListener","onCancelListener","className","root","ref","ariaLabel","title","onClick","variant","iconName","formAction","visible","header","footer","float","direction","closeAriaLabel","onDismiss","changedPreferences"],"sourceRoot":"","sources":["../../../src/collection-preferences/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalBox from '../box/internal';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport {\n  copyPreferences,\n  mergePreferences,\n  ModalContentLayout,\n  PageSizePreference,\n  WrapLinesPreference,\n  CustomPreference,\n} from './utils';\nimport VisibleContentPreference from './visible-content';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { CollectionPreferencesProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nexport { CollectionPreferencesProps };\n\ninterface ModalContentProps\n  extends Pick<\n    CollectionPreferencesProps,\n    'preferences' | 'visibleContentPreference' | 'pageSizePreference' | 'wrapLinesPreference' | 'customPreference'\n  > {\n  onChange: (preferences: CollectionPreferencesProps.Preferences) => void;\n}\n\nconst ModalContent = ({\n  preferences = {},\n  pageSizePreference,\n  wrapLinesPreference,\n  customPreference,\n  visibleContentPreference,\n  onChange,\n}: ModalContentProps) => {\n  if (!visibleContentPreference && !pageSizePreference && !wrapLinesPreference && customPreference) {\n    return (\n      <CustomPreference\n        value={preferences.custom}\n        customPreference={customPreference}\n        onChange={custom => onChange({ custom })}\n      />\n    );\n  }\n  return (\n    <ModalContentLayout\n      left={\n        <InternalSpaceBetween size=\"l\">\n          {pageSizePreference && (\n            <PageSizePreference\n              value={preferences.pageSize}\n              {...pageSizePreference}\n              onChange={pageSize => onChange({ pageSize })}\n            />\n          )}\n          {wrapLinesPreference && (\n            <WrapLinesPreference\n              value={preferences.wrapLines}\n              {...wrapLinesPreference}\n              onChange={wrapLines => onChange({ wrapLines })}\n            />\n          )}\n          {customPreference && (\n            <CustomPreference\n              value={preferences.custom}\n              customPreference={customPreference}\n              onChange={custom => onChange({ custom })}\n            />\n          )}\n        </InternalSpaceBetween>\n      }\n      right={\n        visibleContentPreference && (\n          <VisibleContentPreference\n            value={preferences.visibleContent}\n            {...visibleContentPreference}\n            onChange={visibleContent => onChange({ visibleContent })}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default function CollectionPreferences({\n  title,\n  confirmLabel,\n  cancelLabel,\n  disabled = false,\n  onConfirm,\n  onCancel,\n  visibleContentPreference,\n  pageSizePreference,\n  wrapLinesPreference,\n  preferences,\n  customPreference,\n  ...rest\n}: CollectionPreferencesProps) {\n  const { __internalRootRef } = useBaseComponent('CollectionPreferences');\n  checkControlled('CollectioPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  const baseProps = getBaseProps(rest);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [temporaryPreferences, setTemporaryPreferences] = useState(copyPreferences(preferences || {}));\n  const triggerRef = useRef<ButtonProps.Ref>(null);\n  const dialogPreviouslyOpen = useRef(false);\n  useEffect(() => {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n\n  const onConfirmListener = () => {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n\n  const onCancelListener = () => {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={__internalRootRef}>\n      <InternalButton\n        ref={triggerRef}\n        className={styles['trigger-button']}\n        disabled={disabled}\n        ariaLabel={title}\n        onClick={() => {\n          setTemporaryPreferences(copyPreferences(preferences || {}));\n          setModalVisible(true);\n        }}\n        variant=\"icon\"\n        iconName=\"settings\"\n        formAction=\"none\"\n      />\n      {!disabled && modalVisible && (\n        <InternalModal\n          className={styles['modal-root']}\n          visible={true}\n          header={title}\n          footer={\n            <InternalBox float=\"right\">\n              <InternalSpaceBetween direction=\"horizontal\" size=\"xs\">\n                <InternalButton\n                  className={styles['cancel-button']}\n                  variant=\"link\"\n                  formAction=\"none\"\n                  onClick={onCancelListener}\n                >\n                  {cancelLabel}\n                </InternalButton>\n                <InternalButton\n                  className={styles['confirm-button']}\n                  variant=\"primary\"\n                  formAction=\"none\"\n                  onClick={onConfirmListener}\n                >\n                  {confirmLabel}\n                </InternalButton>\n              </InternalSpaceBetween>\n            </InternalBox>\n          }\n          closeAriaLabel={cancelLabel}\n          size=\"large\"\n          onDismiss={onCancelListener}\n        >\n          <ModalContent\n            preferences={temporaryPreferences}\n            visibleContentPreference={visibleContentPreference}\n            pageSizePreference={pageSizePreference}\n            wrapLinesPreference={wrapLinesPreference}\n            customPreference={customPreference}\n            onChange={changedPreferences =>\n              setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences))\n            }\n          />\n        </InternalModal>\n      )}\n    </div>\n  );\n}\n\napplyDisplayName(CollectionPreferences, 'CollectionPreferences');\n"]},"metadata":{},"sourceType":"module"}