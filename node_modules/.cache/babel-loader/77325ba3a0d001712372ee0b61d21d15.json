{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps } from './utils';\nexport default function DataSeries(_a) {\n  var axis = _a.axis,\n      plotHeight = _a.plotHeight,\n      plotWidth = _a.plotWidth,\n      highlightedGroupIndex = _a.highlightedGroupIndex,\n      highlightedSeries = _a.highlightedSeries,\n      stackedBars = _a.stackedBars,\n      isGroupNavigation = _a.isGroupNavigation,\n      visibleSeries = _a.visibleSeries,\n      xScale = _a.xScale,\n      yScale = _a.yScale;\n  var chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n  var stackedBarOffsetMaps = useMemo(function () {\n    if (!stackedBars) {\n      return [];\n    }\n\n    var barData = [];\n    visibleSeries.forEach(function (_a) {\n      var series = _a.series;\n\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      }\n    });\n    return calculateOffsetMaps(barData);\n  }, [visibleSeries, stackedBars]);\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: plotWidth,\n    height: plotHeight\n  }))), React.createElement(\"g\", {\n    \"aria-hidden\": isGroupNavigation ? true : undefined,\n    role: \"group\"\n  }, visibleSeries.map(function (_a, index) {\n    var _b;\n\n    var series = _a.series,\n        color = _a.color;\n    var isHighlighted = series === highlightedSeries;\n    var isDimmed = !!highlightedSeries && !isHighlighted;\n\n    switch (series.type) {\n      case 'line':\n      case 'threshold':\n        {\n          return React.createElement(\"g\", {\n            key: index,\n            role: \"group\",\n            \"aria-label\": series.title,\n            className: clsx(styles.series, styles[\"series--\".concat(series.type)], (_b = {}, _b[styles['series--highlighted']] = isHighlighted, _b[styles['series--dimmed']] = isDimmed, _b))\n          }, React.createElement(LineSeries, {\n            axis: axis,\n            series: series,\n            color: color,\n            xScale: xScale,\n            yScale: yScale,\n            chartAreaClipPath: chartAreaClipPath\n          }));\n        }\n\n      case 'bar':\n        return React.createElement(BarSeries, {\n          key: index,\n          axis: axis,\n          series: series,\n          color: color,\n          totalSeriesCount: visibleSeries.filter(function (s) {\n            return s.series.type === 'bar';\n          }).length,\n          seriesIndex: index,\n          xScale: xScale,\n          yScale: yScale,\n          plotSize: axis === 'y' ? plotWidth : plotHeight,\n          highlighted: isHighlighted,\n          dimmed: isDimmed,\n          chartAreaClipPath: chartAreaClipPath,\n          stackedBarOffsets: stackedBarOffsetMaps[index],\n          highlightedGroupIndex: highlightedGroupIndex\n        });\n    }\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","clsx","useUniqueId","LineSeries","BarSeries","styles","calculateOffsetMaps","DataSeries","_a","axis","plotHeight","plotWidth","highlightedGroupIndex","highlightedSeries","stackedBars","isGroupNavigation","visibleSeries","xScale","yScale","chartAreaClipPath","stackedBarOffsetMaps","barData","forEach","series","type","push","data","id","x","y","width","height","undefined","role","map","index","color","isHighlighted","isDimmed","key","title","className","_b","totalSeriesCount","filter","length","seriesIndex","plotSize","highlighted","dimmed","stackedBarOffsets"],"sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/data-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps, StackedOffsets } from './utils';\n\nexport interface DataSeriesProps<T> {\n  axis: 'x' | 'y';\n\n  plotHeight: number;\n  plotWidth: number;\n\n  highlightedSeries: MixedLineBarChartProps.ChartSeries<T> | null;\n  highlightedGroupIndex: number | null;\n\n  stackedBars: boolean;\n  isGroupNavigation: boolean;\n\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n}\n\nexport default function DataSeries<T extends ChartDataTypes>({\n  axis,\n  plotHeight,\n  plotWidth,\n  highlightedGroupIndex,\n  highlightedSeries,\n  stackedBars,\n  isGroupNavigation,\n  visibleSeries,\n  xScale,\n  yScale,\n}: DataSeriesProps<T>) {\n  const chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n\n  const stackedBarOffsetMaps: StackedOffsets[] = useMemo(() => {\n    if (!stackedBars) {\n      return [];\n    }\n\n    const barData: Array<readonly MixedLineBarChartProps.Datum<ChartDataTypes>[]> = [];\n    visibleSeries.forEach(({ series }) => {\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      }\n    });\n    return calculateOffsetMaps(barData);\n  }, [visibleSeries, stackedBars]);\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={plotWidth} height={plotHeight} />\n        </clipPath>\n      </defs>\n      <g aria-hidden={isGroupNavigation ? true : undefined} role=\"group\">\n        {visibleSeries.map(({ series, color }, index) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          switch (series.type) {\n            case 'line':\n            case 'threshold': {\n              return (\n                <g\n                  key={index}\n                  role=\"group\"\n                  aria-label={series.title}\n                  className={clsx(styles.series, styles[`series--${series.type}`], {\n                    [styles['series--highlighted']]: isHighlighted,\n                    [styles['series--dimmed']]: isDimmed,\n                  })}\n                >\n                  <LineSeries\n                    axis={axis}\n                    series={series}\n                    color={color}\n                    xScale={xScale}\n                    yScale={yScale}\n                    chartAreaClipPath={chartAreaClipPath}\n                  />\n                </g>\n              );\n            }\n\n            case 'bar':\n              return (\n                <BarSeries\n                  key={index}\n                  axis={axis}\n                  series={series}\n                  color={color}\n                  totalSeriesCount={visibleSeries.filter(s => s.series.type === 'bar').length}\n                  seriesIndex={index}\n                  xScale={xScale}\n                  yScale={yScale}\n                  plotSize={axis === 'y' ? plotWidth : plotHeight}\n                  highlighted={isHighlighted}\n                  dimmed={isDimmed}\n                  chartAreaClipPath={chartAreaClipPath}\n                  stackedBarOffsets={stackedBarOffsetMaps[index]}\n                  highlightedGroupIndex={highlightedGroupIndex}\n                />\n              );\n          }\n        })}\n      </g>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}