{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { containsOrEqual } from './utils/dom';\n\nvar FocusTracker =\n/** @class */\nfunction () {\n  function FocusTracker(node, _a, viewportId) {\n    var onFocusEnter = _a.onFocusEnter,\n        onFocusLeave = _a.onFocusLeave;\n\n    if (viewportId === void 0) {\n      viewportId = '';\n    }\n\n    var _this = this;\n\n    this.node = node;\n    this.currentlyFocused = false;\n\n    this.focusInListener = function (event) {\n      var focusIsInside = containsOrEqual(_this.node, event.target);\n\n      if (!_this.currentlyFocused && focusIsInside) {\n        _this.triggerFocus();\n      }\n    };\n\n    this.focusOutListener = function (event) {\n      var nextFocused = event.relatedTarget;\n      var isNextFocusedInParent = !containsOrEqual(_this.node, nextFocused);\n\n      if (_this.viewportId) {\n        var viewport = document.getElementById(_this.viewportId);\n        isNextFocusedInParent = isNextFocusedInParent && !containsOrEqual(viewport, nextFocused);\n      }\n\n      if (_this.currentlyFocused && (nextFocused === null || isNextFocusedInParent)) {\n        _this.triggerBlur();\n      }\n    };\n\n    this.onFocusEnter = onFocusEnter;\n    this.onFocusLeave = onFocusLeave;\n    this.viewportId = viewportId;\n  }\n\n  FocusTracker.prototype.initialize = function () {\n    this.currentlyFocused = containsOrEqual(this.node, document.activeElement);\n    document.addEventListener('focusin', this.focusInListener);\n    document.addEventListener('focusout', this.focusOutListener);\n  };\n\n  FocusTracker.prototype.destroy = function () {\n    document.removeEventListener('focusin', this.focusInListener);\n    document.removeEventListener('focusout', this.focusOutListener);\n  };\n\n  FocusTracker.prototype.triggerBlur = function () {\n    this.currentlyFocused = false;\n    this.onFocusLeave();\n  };\n\n  FocusTracker.prototype.triggerFocus = function () {\n    this.currentlyFocused = true;\n    this.onFocusEnter();\n  };\n\n  return FocusTracker;\n}();\n\nexport default FocusTracker;","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,eAAT,QAAgC,aAAhC;;AAOA;AAAA;AAAA;EAOE,sBAAoBC,IAApB,EAAuCC,EAAvC,EAA4FC,UAA5F,EAA2G;QAAlEC,YAAY;QAAEC,YAAY;;IAAyB;MAAAF;IAAe;;IAA3G;;IAAoB;IAFZ,wBAAmB,KAAnB;;IAmBA,uBAAkB,UAACG,KAAD,EAAkB;MAC1C,IAAMC,aAAa,GAAGP,eAAe,CAACQ,KAAI,CAACP,IAAN,EAAYK,KAAK,CAACG,MAAlB,CAArC;;MACA,IAAI,CAACD,KAAI,CAACE,gBAAN,IAA0BH,aAA9B,EAA6C;QAC3CC,KAAI,CAACG,YAAL;MACD;IACF,CALO;;IAOA,wBAAmB,UAACL,KAAD,EAAkB;MAC3C,IAAMM,WAAW,GAAGN,KAAK,CAACO,aAA1B;MACA,IAAIC,qBAAqB,GAAG,CAACd,eAAe,CAACQ,KAAI,CAACP,IAAN,EAAYW,WAAZ,CAA5C;;MAEA,IAAIJ,KAAI,CAACL,UAAT,EAAqB;QACnB,IAAMY,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwBT,KAAI,CAACL,UAA7B,CAAjB;QACAW,qBAAqB,GAAGA,qBAAqB,IAAI,CAACd,eAAe,CAACe,QAAD,EAAWH,WAAX,CAAjE;MACD;;MACD,IAAIJ,KAAI,CAACE,gBAAL,KAA0BE,WAAW,KAAK,IAAhB,IAAwBE,qBAAlD,CAAJ,EAA8E;QAC5EN,KAAI,CAACU,WAAL;MACD;IACF,CAXO;;IAvBN,KAAKd,YAAL,GAAoBA,YAApB;IACA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKF,UAAL,GAAkBA,UAAlB;EACD;;EAEDgB;IACE,KAAKT,gBAAL,GAAwBV,eAAe,CAAC,KAAKC,IAAN,EAAYe,QAAQ,CAACI,aAArB,CAAvC;IACAJ,QAAQ,CAACK,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,eAA1C;IACAN,QAAQ,CAACK,gBAAT,CAA0B,UAA1B,EAAsC,KAAKE,gBAA3C;EACD,CAJD;;EAMAJ;IACEH,QAAQ,CAACQ,mBAAT,CAA6B,SAA7B,EAAwC,KAAKF,eAA7C;IACAN,QAAQ,CAACQ,mBAAT,CAA6B,UAA7B,EAAyC,KAAKD,gBAA9C;EACD,CAHD;;EAyBQJ,qCAAR;IACE,KAAKT,gBAAL,GAAwB,KAAxB;IACA,KAAKL,YAAL;EACD,CAHO;;EAKAc,sCAAR;IACE,KAAKT,gBAAL,GAAwB,IAAxB;IACA,KAAKN,YAAL;EACD,CAHO;;EAIV;AAAC,CArDD","names":["containsOrEqual","node","_a","viewportId","onFocusEnter","onFocusLeave","event","focusIsInside","_this","target","currentlyFocused","triggerFocus","nextFocused","relatedTarget","isNextFocusedInParent","viewport","document","getElementById","triggerBlur","FocusTracker","activeElement","addEventListener","focusInListener","focusOutListener","removeEventListener"],"sourceRoot":"","sources":["../../../src/internal/focus-tracker.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { containsOrEqual } from './utils/dom';\n\ninterface FocusTrackerOptions {\n  onFocusEnter: () => void;\n  onFocusLeave: () => void;\n}\n\nexport default class FocusTracker {\n  private readonly onFocusLeave: () => void;\n  private readonly onFocusEnter: () => void;\n  private readonly viewportId: string;\n\n  private currentlyFocused = false;\n\n  constructor(private node: HTMLElement, { onFocusEnter, onFocusLeave }: FocusTrackerOptions, viewportId = '') {\n    this.onFocusEnter = onFocusEnter;\n    this.onFocusLeave = onFocusLeave;\n    this.viewportId = viewportId;\n  }\n\n  initialize() {\n    this.currentlyFocused = containsOrEqual(this.node, document.activeElement as any);\n    document.addEventListener('focusin', this.focusInListener);\n    document.addEventListener('focusout', this.focusOutListener);\n  }\n\n  destroy() {\n    document.removeEventListener('focusin', this.focusInListener);\n    document.removeEventListener('focusout', this.focusOutListener);\n  }\n\n  private focusInListener = (event: FocusEvent) => {\n    const focusIsInside = containsOrEqual(this.node, event.target as Node);\n    if (!this.currentlyFocused && focusIsInside) {\n      this.triggerFocus();\n    }\n  };\n\n  private focusOutListener = (event: FocusEvent) => {\n    const nextFocused = event.relatedTarget as Node;\n    let isNextFocusedInParent = !containsOrEqual(this.node, nextFocused);\n\n    if (this.viewportId) {\n      const viewport = document.getElementById(this.viewportId);\n      isNextFocusedInParent = isNextFocusedInParent && !containsOrEqual(viewport, nextFocused);\n    }\n    if (this.currentlyFocused && (nextFocused === null || isNextFocusedInParent)) {\n      this.triggerBlur();\n    }\n  };\n\n  private triggerBlur() {\n    this.currentlyFocused = false;\n    this.onFocusLeave();\n  }\n\n  private triggerFocus() {\n    this.currentlyFocused = true;\n    this.onFocusEnter();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}