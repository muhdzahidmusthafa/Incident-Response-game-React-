{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport InternalSegmentedControl from '../segmented-control/internal';\nimport segmentedControlStyles from '../segmented-control/styles.css.js';\nimport buttonTriggerStyles from '../internal/components/button-trigger/styles.css.js';\nimport styles from './styles.css.js';\nexport default forwardRef(ModeSwitcher);\n\nfunction ModeSwitcher(_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n      mode = _a.mode,\n      onChange = _a.onChange;\n  var elementRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        if (elementRef.current) {\n          elementRef.current.getElementsByClassName(segmentedControlStyles.selected)[0].focus();\n          var select = elementRef.current.getElementsByClassName(buttonTriggerStyles['button-trigger']);\n\n          for (var _i = 0, _a = Array.prototype.slice.call(select); _i < _a.length; _i++) {\n            var button = _a[_i];\n            button.focus();\n          }\n        }\n      }\n    };\n  });\n  return React.createElement(\"div\", {\n    ref: elementRef\n  }, React.createElement(InternalSegmentedControl, {\n    className: styles['mode-switch'],\n    selectedId: mode,\n    options: [{\n      id: 'relative',\n      text: i18nStrings.relativeModeTitle\n    }, {\n      id: 'absolute',\n      text: i18nStrings.absoluteModeTitle\n    }],\n    onChange: function (e) {\n      return onChange(e.detail.selectedId);\n    }\n  }));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,mBAA5B,EAAiDC,MAAjD,QAA+D,OAA/D;AAEA,OAAOC,wBAAP,MAAqC,+BAArC;AAEA,OAAOC,sBAAP,MAAmC,oCAAnC;AACA,OAAOC,mBAAP,MAAgC,qDAAhC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAOA,eAAeN,UAAU,CAACO,YAAD,CAAzB;;AAEA,SAASA,YAAT,CAAsBC,EAAtB,EAA0EC,GAA1E,EAAmG;MAA3EC,WAAW;MAAEC,IAAI;MAAEC,QAAQ;EACjD,IAAMC,UAAU,GAAGX,MAAM,CAAiB,IAAjB,CAAzB;EAEAD,mBAAmB,CAACQ,GAAD,EAAM;IAAM,OAAC;MAC9BK,KAAK,EAAL;QACE,IAAID,UAAU,CAACE,OAAf,EAAwB;UACrBF,UAAU,CAACE,OAAX,CAAmBC,sBAAnB,CAA0CZ,sBAAsB,CAACa,QAAjE,EAA2E,CAA3E,EAAoGH,KAApG;UAED,IAAMI,MAAM,GAAGL,UAAU,CAACE,OAAX,CAAmBC,sBAAnB,CAA0CX,mBAAmB,CAAC,gBAAD,CAA7D,CAAf;;UAEA,KAAqB,sBAAK,CAACc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BH,MAA3B,CAArB,EAAqBI,cAArB,EAAqBA,IAArB,EAAyD;YAApD,IAAMC,MAAM,SAAZ;YACHA,MAAM,CAACT,KAAP;UACD;QACF;MACF;IAX6B,CAAD;EAY7B,CAZiB,CAAnB;EAcA,OACEf;IAAKU,GAAG,EAAEI;EAAV,GACEd,oBAACI,wBAAD,EAAyB;IACvBqB,SAAS,EAAElB,MAAM,CAAC,aAAD,CADM;IAEvBmB,UAAU,EAAEd,IAFW;IAGvBe,OAAO,EAAE,CACP;MAAEC,EAAE,EAAE,UAAN;MAAkBC,IAAI,EAAElB,WAAW,CAACmB;IAApC,CADO,EAEP;MAAEF,EAAE,EAAE,UAAN;MAAkBC,IAAI,EAAElB,WAAW,CAACoB;IAApC,CAFO,CAHc;IAOvBlB,QAAQ,EAAE,aAAC;MAAI,eAAQ,CAACmB,CAAC,CAACC,MAAF,CAASP,UAAV,CAAR;IAAwD;EAPhD,CAAzB,CADF,CADF;AAaD","names":["React","forwardRef","useImperativeHandle","useRef","InternalSegmentedControl","segmentedControlStyles","buttonTriggerStyles","styles","ModeSwitcher","_a","ref","i18nStrings","mode","onChange","elementRef","focus","current","getElementsByClassName","selected","select","prototype","slice","call","_i","button","className","selectedId","options","id","text","relativeModeTitle","absoluteModeTitle","e","detail"],"sourceRoot":"","sources":["../../../src/date-range-picker/mode-switcher.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { DateRangePickerProps, Focusable } from './interfaces';\nimport InternalSegmentedControl from '../segmented-control/internal';\n\nimport segmentedControlStyles from '../segmented-control/styles.css.js';\nimport buttonTriggerStyles from '../internal/components/button-trigger/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface ModeSwitcherProps extends Pick<Required<DateRangePickerProps>, 'i18nStrings'> {\n  mode: 'absolute' | 'relative';\n  onChange: (mode: 'absolute' | 'relative') => void;\n}\n\nexport default forwardRef(ModeSwitcher);\n\nfunction ModeSwitcher({ i18nStrings, mode, onChange }: ModeSwitcherProps, ref: React.Ref<Focusable>) {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useImperativeHandle(ref, () => ({\n    focus() {\n      if (elementRef.current) {\n        (elementRef.current.getElementsByClassName(segmentedControlStyles.selected)[0] as HTMLButtonElement).focus();\n\n        const select = elementRef.current.getElementsByClassName(buttonTriggerStyles['button-trigger']);\n\n        for (const button of Array.prototype.slice.call(select)) {\n          button.focus();\n        }\n      }\n    },\n  }));\n\n  return (\n    <div ref={elementRef}>\n      <InternalSegmentedControl\n        className={styles['mode-switch']}\n        selectedId={mode}\n        options={[\n          { id: 'relative', text: i18nStrings.relativeModeTitle },\n          { id: 'absolute', text: i18nStrings.absoluteModeTitle },\n        ]}\n        onChange={e => onChange(e.detail.selectedId as 'absolute' | 'relative')}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}