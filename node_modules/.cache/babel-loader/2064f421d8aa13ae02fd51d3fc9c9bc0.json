{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The Navigation component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the show navigation form that contains the trigger for the drawer in large viewports;\n * the navigation, or drawer, that contains the hide navigation form and the children\n * passed through the API;\n */\n\nexport default function Navigation() {\n  var _a = useContext(AppLayoutContext),\n      ariaLabels = _a.ariaLabels,\n      handleNavigationClick = _a.handleNavigationClick,\n      isMobile = _a.isMobile,\n      isNavigationOpen = _a.isNavigationOpen,\n      navigation = _a.navigation,\n      navigationHide = _a.navigationHide,\n      navigationWidth = _a.navigationWidth,\n      isToolsOpen = _a.isToolsOpen,\n      isAnyPanelOpen = _a.isAnyPanelOpen,\n      toolsHide = _a.toolsHide;\n\n  var focusRefs = useFocusControl(isNavigationOpen);\n\n  if (navigationHide) {\n    return null;\n  } // Close the Navigation drawer on mobile when a user clicks a link inside.\n\n\n  var onNavigationClick = function (event) {\n    var hasLink = findUpUntil(event.target, function (node) {\n      return node.tagName === 'A' && !!node.href;\n    });\n\n    if (hasLink && isMobile) {\n      handleNavigationClick(false);\n    }\n  };\n\n  var isUnfocusable = isMobile && isAnyPanelOpen && isToolsOpen && !toolsHide;\n  return React.createElement(Transition, {\n    \"in\": isNavigationOpen\n  }, function (state, transitionEventsRef) {\n    var _a, _b, _c, _d;\n\n    var _e, _f, _g;\n\n    return React.createElement(\"div\", {\n      className: clsx(styles['navigation-container'], (_a = {}, _a[testutilStyles['drawer-closed']] = !isNavigationOpen, _a[styles.unfocusable] = isUnfocusable, _a)),\n      // Overwrite the default nav width (depends on breakpoints) only when the `navigationWidth` property is set.\n      style: __assign({}, navigationWidth && (_b = {}, _b[customCssProps.navigationWidth] = \"\".concat(navigationWidth, \"px\"), _b))\n    }, !isMobile && React.createElement(\"nav\", {\n      \"aria-hidden\": isMobile || isNavigationOpen ? true : false,\n      \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _e !== void 0 ? _e : undefined,\n      className: clsx(styles['show-navigation'], (_c = {}, _c[styles.animating] = state === 'exiting', _c[styles['is-navigation-open']] = isNavigationOpen, _c)),\n      ref: state === 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle,\n      iconName: \"menu\",\n      className: testutilStyles['navigation-toggle'],\n      onClick: function () {\n        return handleNavigationClick(true);\n      },\n      ref: focusRefs.toggle\n    })), React.createElement(\"nav\", {\n      \"aria-label\": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _f !== void 0 ? _f : undefined,\n      className: clsx(styles.navigation, (_d = {}, _d[styles.animating] = state === 'entering', _d[styles['is-navigation-open']] = isNavigationOpen, _d), testutilStyles.navigation),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined,\n      \"aria-hidden\": !isNavigationOpen,\n      onClick: function (event) {\n        onNavigationClick && onNavigationClick(event);\n      }\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['hide-navigation'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _g !== void 0 ? _g : undefined,\n      iconName: isMobile ? 'close' : 'angle-left',\n      onClick: function () {\n        return handleNavigationClick(false);\n      },\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['navigation-close'],\n      ref: focusRefs.close\n    })), navigation)));\n  });\n}","map":{"version":3,"mappings":"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","names":["React","useContext","clsx","AppLayoutContext","InternalButton","TriggerButton","styles","testutilStyles","useFocusControl","Transition","findUpUntil","customCssProps","Navigation","ariaLabels","handleNavigationClick","isMobile","isNavigationOpen","navigation","navigationHide","navigationWidth","isToolsOpen","isAnyPanelOpen","toolsHide","focusRefs","onNavigationClick","event","hasLink","target","tagName","node","href","isUnfocusable","state","transitionEventsRef","className","_a","unfocusable","style","_b","_e","undefined","_c","animating","ref","ariaLabel","navigationToggle","iconName","onClick","toggle","_f","_d","navigationClose","_g","variant","formAction","close"],"sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/navigation.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * The Navigation component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the show navigation form that contains the trigger for the drawer in large viewports;\n * the navigation, or drawer, that contains the hide navigation form and the children\n * passed through the API;\n */\nexport default function Navigation() {\n  const {\n    ariaLabels,\n    handleNavigationClick,\n    isMobile,\n    isNavigationOpen,\n    navigation,\n    navigationHide,\n    navigationWidth,\n    isToolsOpen,\n    isAnyPanelOpen,\n    toolsHide,\n  } = useContext(AppLayoutContext);\n\n  const focusRefs = useFocusControl(isNavigationOpen);\n\n  if (navigationHide) {\n    return null;\n  }\n\n  // Close the Navigation drawer on mobile when a user clicks a link inside.\n  const onNavigationClick = (event: React.MouseEvent) => {\n    const hasLink = findUpUntil(\n      event.target as HTMLElement,\n      node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n    );\n    if (hasLink && isMobile) {\n      handleNavigationClick(false);\n    }\n  };\n\n  const isUnfocusable = isMobile && isAnyPanelOpen && isToolsOpen && !toolsHide;\n\n  return (\n    <Transition in={isNavigationOpen}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['navigation-container'], {\n            [testutilStyles['drawer-closed']]: !isNavigationOpen,\n            [styles.unfocusable]: isUnfocusable,\n          })}\n          // Overwrite the default nav width (depends on breakpoints) only when the `navigationWidth` property is set.\n          style={{ ...(navigationWidth && { [customCssProps.navigationWidth]: `${navigationWidth}px` }) }}\n        >\n          {!isMobile && (\n            <nav\n              aria-hidden={isMobile || isNavigationOpen ? true : false}\n              aria-label={ariaLabels?.navigation ?? undefined}\n              className={clsx(styles['show-navigation'], {\n                [styles.animating]: state === 'exiting',\n                [styles['is-navigation-open']]: isNavigationOpen,\n              })}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n            >\n              <TriggerButton\n                ariaLabel={ariaLabels?.navigationToggle}\n                iconName=\"menu\"\n                className={testutilStyles['navigation-toggle']}\n                onClick={() => handleNavigationClick(true)}\n                ref={focusRefs.toggle}\n              />\n            </nav>\n          )}\n\n          <nav\n            aria-label={ariaLabels?.navigation ?? undefined}\n            className={clsx(\n              styles.navigation,\n              {\n                [styles.animating]: state === 'entering',\n                [styles['is-navigation-open']]: isNavigationOpen,\n              },\n              testutilStyles.navigation\n            )}\n            ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            aria-hidden={!isNavigationOpen}\n            onClick={event => {\n              onNavigationClick && onNavigationClick(event);\n            }}\n          >\n            <div className={clsx(styles['animated-content'])}>\n              <div className={clsx(styles['hide-navigation'])}>\n                <InternalButton\n                  ariaLabel={ariaLabels?.navigationClose ?? undefined}\n                  iconName={isMobile ? 'close' : 'angle-left'}\n                  onClick={() => handleNavigationClick(false)}\n                  variant=\"icon\"\n                  formAction=\"none\"\n                  className={testutilStyles['navigation-close']}\n                  ref={focusRefs.close}\n                />\n              </div>\n              {navigation}\n            </div>\n          </nav>\n        </div>\n      )}\n    </Transition>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}