{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport { line } from 'd3-shape';\nimport { isXThreshold, isYThreshold } from './utils';\nexport default function LineSeries(_a) {\n  var _b;\n\n  var axis = _a.axis,\n      series = _a.series,\n      color = _a.color,\n      xScale = _a.xScale,\n      yScale = _a.yScale,\n      chartAreaClipPath = _a.chartAreaClipPath;\n  var commonProps = {\n    'aria-hidden': true,\n    stroke: color,\n    clipPath: \"url(#\".concat(chartAreaClipPath, \")\")\n  }; // Render data path. The chart orientation is ignored as only horizontally-oriented lines are supported.\n\n  if (series.type === 'line') {\n    var lineGenerator = line().x(function (d) {\n      var x = xScale.d3Scale(d.x) || 0;\n\n      if (xScale.isCategorical()) {\n        var offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;\n        x += offset;\n      }\n\n      return x;\n    }).y(function (d) {\n      return yScale.d3Scale(d.y) || 0;\n    }); // Filter out any data that is not part of the xScale\n\n    var visibleData = series.data.filter(function (_a) {\n      var x = _a.x;\n      return xScale.d3Scale(x) !== undefined;\n    });\n    return React.createElement(\"path\", __assign({}, commonProps, {\n      d: lineGenerator(visibleData) || ''\n    }));\n  } // Render a horizontal line (vertical if chart orientation is inverted).\n  else if (isYThreshold(series)) {\n    var _c = xScale.d3Scale.range(),\n        x1 = _c[0],\n        x2 = _c[1];\n\n    var y = yScale.d3Scale(series.y);\n    var coordinates = axis === 'x' ? {\n      x1: x1,\n      x2: x2,\n      y1: y,\n      y2: y\n    } : {\n      x1: y,\n      x2: y,\n      y1: x1,\n      y2: x2\n    };\n    return React.createElement(\"line\", __assign({}, commonProps, coordinates));\n  } // Render a vertical line (horizontal if chart orientation is inverted).\n  // The offset is necessary for categorical scale to render the line in the middle of the category bar.\n  else if (isXThreshold(series)) {\n    var _d = yScale.d3Scale.range(),\n        y1 = _d[0],\n        y2 = _d[1];\n\n    var xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n    var x = ((_b = xScale.d3Scale(series.x)) !== null && _b !== void 0 ? _b : NaN) + xOffset;\n    var coordinates = axis === 'x' ? {\n      x1: x,\n      x2: x,\n      y1: y1,\n      y2: y2\n    } : {\n      x1: y1,\n      x2: y2,\n      y1: x,\n      y2: x\n    };\n    return React.createElement(\"line\", __assign({}, commonProps, coordinates));\n  } // Bar series are handled separately.\n  else {\n    return null;\n  }\n}","map":{"version":3,"mappings":"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","names":["React","line","isXThreshold","isYThreshold","LineSeries","_a","axis","series","color","xScale","yScale","chartAreaClipPath","commonProps","stroke","clipPath","type","lineGenerator","x","d","d3Scale","isCategorical","offset","Math","max","bandwidth","y","visibleData","data","filter","undefined","range","x1","x2","coordinates","y1","y2","xOffset","_b","NaN"],"sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/line-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { line } from 'd3-shape';\n\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { MixedLineBarChartProps } from './interfaces';\nimport { isXThreshold, isYThreshold } from './utils';\n\nexport interface LineSeriesProps<T> {\n  axis: 'x' | 'y';\n  series: MixedLineBarChartProps.LineDataSeries<T> | MixedLineBarChartProps.ThresholdSeries<T>;\n\n  color: string;\n  chartAreaClipPath: string;\n\n  xScale: ChartScale;\n  yScale: NumericChartScale;\n}\n\nexport default function LineSeries<T>({ axis, series, color, xScale, yScale, chartAreaClipPath }: LineSeriesProps<T>) {\n  const commonProps = { 'aria-hidden': true, stroke: color, clipPath: `url(#${chartAreaClipPath})` };\n\n  // Render data path. The chart orientation is ignored as only horizontally-oriented lines are supported.\n  if (series.type === 'line') {\n    const lineGenerator = line<MixedLineBarChartProps.Datum<T>>()\n      .x((d: MixedLineBarChartProps.Datum<T>) => {\n        let x = xScale.d3Scale(d.x as any) || 0;\n        if (xScale.isCategorical()) {\n          const offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;\n          x += offset;\n        }\n        return x;\n      })\n      .y((d: MixedLineBarChartProps.Datum<T>) => yScale.d3Scale(d.y) || 0);\n\n    // Filter out any data that is not part of the xScale\n    const visibleData = series.data.filter(({ x }) => xScale.d3Scale(x as any) !== undefined);\n\n    return (\n      <path\n        {...commonProps}\n        d={lineGenerator(visibleData as unknown as Array<MixedLineBarChartProps.Datum<T>>) || ''}\n      />\n    );\n  }\n  // Render a horizontal line (vertical if chart orientation is inverted).\n  else if (isYThreshold(series)) {\n    const [x1, x2] = xScale.d3Scale.range();\n    const y = yScale.d3Scale(series.y);\n    const coordinates = axis === 'x' ? { x1, x2, y1: y, y2: y } : { x1: y, x2: y, y1: x1, y2: x2 };\n    return <line {...commonProps} {...coordinates} />;\n  }\n  // Render a vertical line (horizontal if chart orientation is inverted).\n  // The offset is necessary for categorical scale to render the line in the middle of the category bar.\n  else if (isXThreshold(series)) {\n    const [y1, y2] = yScale.d3Scale.range();\n    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n    const x = (xScale.d3Scale(series.x as any) ?? NaN) + xOffset;\n    const coordinates = axis === 'x' ? { x1: x, x2: x, y1, y2 } : { x1: y1, x2: y2, y1: x, y2: x };\n    return <line {...commonProps} {...coordinates} />;\n  }\n  // Bar series are handled separately.\n  else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}