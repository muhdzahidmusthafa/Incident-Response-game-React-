{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { TokenEditor } from './token-editor';\nimport { getPropertyByKey } from './controller';\nimport FilteringToken from '../internal/components/filtering-token';\nexport var Token = function (_a) {\n  var token = _a.token,\n      _b = _a.operation,\n      operation = _b === void 0 ? 'and' : _b,\n      first = _a.first,\n      removeToken = _a.removeToken,\n      setToken = _a.setToken,\n      setOperation = _a.setOperation,\n      filteringOptions = _a.filteringOptions,\n      filteringProperties = _a.filteringProperties,\n      asyncProps = _a.asyncProps,\n      onLoadItems = _a.onLoadItems,\n      i18nStrings = _a.i18nStrings,\n      asyncProperties = _a.asyncProperties,\n      hideOperations = _a.hideOperations,\n      customGroupsText = _a.customGroupsText,\n      disabled = _a.disabled,\n      disableFreeTextFiltering = _a.disableFreeTextFiltering,\n      expandToViewport = _a.expandToViewport;\n  var property = token.propertyKey && getPropertyByKey(filteringProperties, token.propertyKey);\n  var propertyLabel = property && property.propertyLabel;\n  return React.createElement(FilteringToken, {\n    showOperation: !first && !hideOperations,\n    operation: operation,\n    andText: i18nStrings.operationAndText,\n    orText: i18nStrings.operationOrText,\n    dismissAriaLabel: i18nStrings.removeTokenButtonAriaLabel(token),\n    onChange: setOperation,\n    onDismiss: removeToken,\n    disabled: disabled\n  }, React.createElement(TokenEditor, {\n    setToken: setToken,\n    triggerComponent: React.createElement(\"span\", {\n      className: styles['token-trigger']\n    }, React.createElement(TokenTrigger, {\n      property: propertyLabel,\n      operator: token.operator,\n      value: token.value\n    })),\n    filteringOptions: filteringOptions,\n    filteringProperties: filteringProperties,\n    token: token,\n    asyncProps: asyncProps,\n    onLoadItems: onLoadItems,\n    i18nStrings: i18nStrings,\n    asyncProperties: asyncProperties,\n    customGroupsText: customGroupsText,\n    disableFreeTextFiltering: disableFreeTextFiltering,\n    expandToViewport: expandToViewport\n  }));\n};\n\nvar TokenTrigger = function (_a) {\n  var property = _a.property,\n      operator = _a.operator,\n      value = _a.value;\n\n  if (property) {\n    property += ' ';\n  }\n\n  var freeTextContainsToken = operator === ':' && !property;\n  var operatorText = freeTextContainsToken ? '' : operator + ' ';\n  return React.createElement(React.Fragment, null, property, React.createElement(\"span\", {\n    className: styles['token-operator']\n  }, operatorText), value);\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAGA,OAAOC,cAAP,MAA2B,wCAA3B;AA4BA,OAAO,IAAMC,KAAK,GAAG,UAACC,EAAD,EAkBR;MAjBXC,KAAK;MACLC;MAAAC,SAAS,mBAAG,KAAH,GAAQD;MACjBE,KAAK;MACLC,WAAW;MACXC,QAAQ;MACRC,YAAY;MACZC,gBAAgB;MAChBC,mBAAmB;MACnBC,UAAU;MACVC,WAAW;MACXC,WAAW;MACXC,eAAe;MACfC,cAAc;MACdC,gBAAgB;MAChBC,QAAQ;MACRC,wBAAwB;MACxBC,gBAAgB;EAEhB,IAAMC,QAAQ,GAAGlB,KAAK,CAACmB,WAAN,IAAqBvB,gBAAgB,CAACY,mBAAD,EAAsBR,KAAK,CAACmB,WAA5B,CAAtD;EACA,IAAMC,aAAa,GAAGF,QAAQ,IAAIA,QAAQ,CAACE,aAA3C;EACA,OACE3B,oBAACI,cAAD,EAAe;IACbwB,aAAa,EAAE,CAAClB,KAAD,IAAU,CAACU,cADb;IAEbX,SAAS,EAAEA,SAFE;IAGboB,OAAO,EAAEX,WAAW,CAACY,gBAHR;IAIbC,MAAM,EAAEb,WAAW,CAACc,eAJP;IAKbC,gBAAgB,EAAEf,WAAW,CAACgB,0BAAZ,CAAuC3B,KAAvC,CALL;IAMb4B,QAAQ,EAAEtB,YANG;IAObuB,SAAS,EAAEzB,WAPE;IAQbW,QAAQ,EAAEA;EARG,CAAf,EAUEtB,oBAACE,WAAD,EAAY;IACVU,QAAQ,EAAEA,QADA;IAEVyB,gBAAgB,EACdrC;MAAMsC,SAAS,EAAErC,MAAM,CAAC,eAAD;IAAvB,GACED,oBAACuC,YAAD,EAAa;MAACd,QAAQ,EAAEE,aAAX;MAA0Ba,QAAQ,EAAEjC,KAAK,CAACiC,QAA1C;MAAoDC,KAAK,EAAElC,KAAK,CAACkC;IAAjE,CAAb,CADF,CAHQ;IAOV3B,gBAAgB,EAAEA,gBAPR;IAQVC,mBAAmB,EAAEA,mBARX;IASVR,KAAK,EAAEA,KATG;IAUVS,UAAU,EAAEA,UAVF;IAWVC,WAAW,EAAEA,WAXH;IAYVC,WAAW,EAAEA,WAZH;IAaVC,eAAe,EAAEA,eAbP;IAcVE,gBAAgB,EAAEA,gBAdR;IAeVE,wBAAwB,EAAEA,wBAfhB;IAgBVC,gBAAgB,EAAEA;EAhBR,CAAZ,CAVF,CADF;AA+BD,CApDM;;AAsDP,IAAMe,YAAY,GAAG,UAACjC,EAAD,EAAuF;MAApFmB,QAAQ;MAAEe,QAAQ;MAAEC,KAAK;;EAC/C,IAAIhB,QAAJ,EAAc;IACZA,QAAQ,IAAI,GAAZ;EACD;;EACD,IAAMiB,qBAAqB,GAAGF,QAAQ,KAAK,GAAb,IAAoB,CAACf,QAAnD;EACA,IAAMkB,YAAY,GAAGD,qBAAqB,GAAG,EAAH,GAAQF,QAAQ,GAAG,GAA7D;EACA,OACExC,0CACGyB,QADH,EAEEzB;IAAMsC,SAAS,EAAErC,MAAM,CAAC,gBAAD;EAAvB,GAA4C0C,YAA5C,CAFF,EAGGF,KAHH,CADF;AAOD,CAbD","names":["React","styles","TokenEditor","getPropertyByKey","FilteringToken","Token","_a","token","_b","operation","first","removeToken","setToken","setOperation","filteringOptions","filteringProperties","asyncProps","onLoadItems","i18nStrings","asyncProperties","hideOperations","customGroupsText","disabled","disableFreeTextFiltering","expandToViewport","property","propertyKey","propertyLabel","showOperation","andText","operationAndText","orText","operationOrText","dismissAriaLabel","removeTokenButtonAriaLabel","onChange","onDismiss","triggerComponent","className","TokenTrigger","operator","value","freeTextContainsToken","operatorText"],"sourceRoot":"","sources":["../../../src/property-filter/token.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { PropertyFilterProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { TokenEditor } from './token-editor';\nimport { getPropertyByKey } from './controller';\n\nimport { AutosuggestProps } from '../autosuggest/interfaces';\nimport FilteringToken from '../internal/components/filtering-token';\n\ninterface TokenProps\n  extends Pick<\n    PropertyFilterProps,\n    | 'filteringOptions'\n    | 'filteringProperties'\n    | 'onLoadItems'\n    | 'i18nStrings'\n    | 'asyncProperties'\n    | 'hideOperations'\n    | 'customGroupsText'\n    | 'disabled'\n    | 'disableFreeTextFiltering'\n    | 'expandToViewport'\n  > {\n  operation: PropertyFilterProps.JoinOperation;\n  token: PropertyFilterProps.Token;\n  first?: boolean;\n  removeToken: () => void;\n  setToken: (newToken: PropertyFilterProps.Token) => void;\n  setOperation: (newOperation: PropertyFilterProps.JoinOperation) => void;\n  asyncProps: Pick<\n    AutosuggestProps,\n    'empty' | 'loadingText' | 'finishedText' | 'errorText' | 'recoveryText' | 'statusType'\n  >;\n}\n\nexport const Token = ({\n  token,\n  operation = 'and',\n  first,\n  removeToken,\n  setToken,\n  setOperation,\n  filteringOptions,\n  filteringProperties,\n  asyncProps,\n  onLoadItems,\n  i18nStrings,\n  asyncProperties,\n  hideOperations,\n  customGroupsText,\n  disabled,\n  disableFreeTextFiltering,\n  expandToViewport,\n}: TokenProps) => {\n  const property = token.propertyKey && getPropertyByKey(filteringProperties, token.propertyKey);\n  const propertyLabel = property && property.propertyLabel;\n  return (\n    <FilteringToken\n      showOperation={!first && !hideOperations}\n      operation={operation}\n      andText={i18nStrings.operationAndText}\n      orText={i18nStrings.operationOrText}\n      dismissAriaLabel={i18nStrings.removeTokenButtonAriaLabel(token)}\n      onChange={setOperation}\n      onDismiss={removeToken}\n      disabled={disabled}\n    >\n      <TokenEditor\n        setToken={setToken}\n        triggerComponent={\n          <span className={styles['token-trigger']}>\n            <TokenTrigger property={propertyLabel} operator={token.operator} value={token.value} />\n          </span>\n        }\n        filteringOptions={filteringOptions}\n        filteringProperties={filteringProperties}\n        token={token}\n        asyncProps={asyncProps}\n        onLoadItems={onLoadItems}\n        i18nStrings={i18nStrings}\n        asyncProperties={asyncProperties}\n        customGroupsText={customGroupsText}\n        disableFreeTextFiltering={disableFreeTextFiltering}\n        expandToViewport={expandToViewport}\n      />\n    </FilteringToken>\n  );\n};\n\nconst TokenTrigger = ({ property, operator, value }: { property?: string; operator?: string; value: string }) => {\n  if (property) {\n    property += ' ';\n  }\n  const freeTextContainsToken = operator === ':' && !property;\n  const operatorText = freeTextContainsToken ? '' : operator + ' ';\n  return (\n    <>\n      {property}\n      <span className={styles['token-operator']}>{operatorText}</span>\n      {value}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}