{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\n/**\n * useScrollSync returns scroll event handler to be attached to synchronised scroll elements.\n *\n * For example\n *    const handleScroll = useScrollSync([ref1, ref2]);\n *    <div ref={ref1} onScroll={handleScroll}/>\n *    <div ref={ref2} onScroll={handleScroll}/>\n */\n\nexport function useScrollSync(refs, disabled) {\n  if (disabled === void 0) {\n    disabled = false;\n  }\n\n  var activeElement = useRef(null);\n\n  var onScroll = function (event) {\n    var targetElement = event.target; // remembers the first element that fires onscroll to align with other elements against it\n\n    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {\n      requestAnimationFrame(function () {\n        activeElement.current = targetElement;\n        refs.forEach(function (ref) {\n          var element = ref.current;\n\n          if (element && element !== targetElement) {\n            element.scrollLeft = targetElement.scrollLeft;\n          }\n        }); // unblock the ability to scroll the synced elements\n\n        requestAnimationFrame(function () {\n          activeElement.current = null;\n        });\n      });\n    }\n  };\n\n  return !disabled ? onScroll : undefined;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAA2BA,MAA3B,QAAyC,OAAzC;AAEA;;;;;;;;;AAQA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAAqDC,QAArD,EAAqE;EAAhB;IAAAA;EAAgB;;EACzE,IAAMC,aAAa,GAAGJ,MAAM,CAAqB,IAArB,CAA5B;;EACA,IAAMK,QAAQ,GAAG,UAACC,KAAD,EAAqB;IACpC,IAAMC,aAAa,GAAGD,KAAK,CAACE,MAA5B,CADoC,CAEpC;;IACA,IAAID,aAAa,KAAKH,aAAa,CAACK,OAAd,KAA0B,IAA1B,IAAkCL,aAAa,CAACK,OAAd,KAA0BF,aAAjE,CAAjB,EAAkG;MAChGG,qBAAqB,CAAC;QACpBN,aAAa,CAACK,OAAd,GAAwBF,aAAxB;QACAL,IAAI,CAACS,OAAL,CAAa,eAAG;UACd,IAAMC,OAAO,GAAGC,GAAG,CAACJ,OAApB;;UACA,IAAIG,OAAO,IAAIA,OAAO,KAAKL,aAA3B,EAA0C;YACxCK,OAAO,CAACE,UAAR,GAAqBP,aAAa,CAACO,UAAnC;UACD;QACF,CALD,EAFoB,CAQpB;;QACAJ,qBAAqB,CAAC;UACpBN,aAAa,CAACK,OAAd,GAAwB,IAAxB;QACD,CAFoB,CAArB;MAGD,CAZoB,CAArB;IAaD;EACF,CAlBD;;EAoBA,OAAO,CAACN,QAAD,GAAYE,QAAZ,GAAuBU,SAA9B;AACD","names":["useRef","useScrollSync","refs","disabled","activeElement","onScroll","event","targetElement","target","current","requestAnimationFrame","forEach","element","ref","scrollLeft","undefined"],"sourceRoot":"","sources":["../../../../../src/internal/hooks/use-scroll-sync/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject, useRef } from 'react';\n\n/**\n * useScrollSync returns scroll event handler to be attached to synchronised scroll elements.\n *\n * For example\n *    const handleScroll = useScrollSync([ref1, ref2]);\n *    <div ref={ref1} onScroll={handleScroll}/>\n *    <div ref={ref2} onScroll={handleScroll}/>\n */\nexport function useScrollSync(refs: Array<RefObject<any>>, disabled = false) {\n  const activeElement = useRef<HTMLElement | null>(null);\n  const onScroll = (event: React.UIEvent) => {\n    const targetElement = event.target as HTMLElement;\n    // remembers the first element that fires onscroll to align with other elements against it\n    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {\n      requestAnimationFrame(() => {\n        activeElement.current = targetElement;\n        refs.forEach(ref => {\n          const element = ref.current;\n          if (element && element !== targetElement) {\n            element.scrollLeft = targetElement.scrollLeft;\n          }\n        });\n        // unblock the ability to scroll the synced elements\n        requestAnimationFrame(() => {\n          activeElement.current = null;\n        });\n      });\n    }\n  };\n\n  return !disabled ? onScroll : undefined;\n}\n"]},"metadata":{},"sourceType":"module"}