{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar BYTES_BASE = 1024;\nvar BYTES_DECIMALS = 2;\nvar BYTES_SIZES = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nexport function formatDefault(value) {\n  return value ? value : '-';\n}\nexport function formatSize(bytes) {\n  if (bytes === undefined) {\n    return '-';\n  }\n\n  if (bytes === 0) {\n    return \"0 \".concat(BYTES_SIZES[0]);\n  }\n\n  var i = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));\n  return parseFloat((bytes / Math.pow(BYTES_BASE, i)).toFixed(BYTES_DECIMALS)) + ' ' + BYTES_SIZES[i];\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,IAAMA,UAAU,GAAG,IAAnB;AACA,IAAMC,cAAc,GAAG,CAAvB;AACA,IAAMC,WAAW,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAApB;AAEA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAAiD;EACrD,OAAOA,KAAK,GAAGA,KAAH,GAAW,GAAvB;AACD;AAED,OAAM,SAAUC,UAAV,CAAqBC,KAArB,EAA8C;EAClD,IAAIA,KAAK,KAAKC,SAAd,EAAyB;IACvB,OAAO,GAAP;EACD;;EACD,IAAID,KAAK,KAAK,CAAd,EAAiB;IACf,OAAO,YAAKJ,WAAW,CAAC,CAAD,CAAhB,CAAP;EACD;;EACD,IAAMM,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASL,KAAT,IAAkBG,IAAI,CAACE,GAAL,CAASX,UAAT,CAA7B,CAAV;EACA,OAAOY,UAAU,CAAC,CAACN,KAAK,GAAGG,IAAI,CAACI,GAAL,CAASb,UAAT,EAAqBQ,CAArB,CAAT,EAAkCM,OAAlC,CAA0Cb,cAA1C,CAAD,CAAV,GAAwE,GAAxE,GAA8EC,WAAW,CAACM,CAAD,CAAhG;AACD","names":["BYTES_BASE","BYTES_DECIMALS","BYTES_SIZES","formatDefault","value","formatSize","bytes","undefined","i","Math","floor","log","parseFloat","pow","toFixed"],"sourceRoot":"","sources":["../../../../src/s3-resource-selector/s3-modal/column-formats.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst BYTES_BASE = 1024;\nconst BYTES_DECIMALS = 2;\nconst BYTES_SIZES = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\nexport function formatDefault(value: string | undefined) {\n  return value ? value : '-';\n}\n\nexport function formatSize(bytes: number | undefined) {\n  if (bytes === undefined) {\n    return '-';\n  }\n  if (bytes === 0) {\n    return `0 ${BYTES_SIZES[0]}`;\n  }\n  const i = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));\n  return parseFloat((bytes / Math.pow(BYTES_BASE, i)).toFixed(BYTES_DECIMALS)) + ' ' + BYTES_SIZES[i];\n}\n"]},"metadata":{},"sourceType":"module"}