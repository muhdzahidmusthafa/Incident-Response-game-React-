{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { AppLayoutButton, togglesConfig } from '../toggles';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nvar MobileToggle = React.forwardRef(function (_a, ref) {\n  var className = _a.className,\n      ariaLabels = _a.ariaLabels,\n      type = _a.type,\n      disabled = _a.disabled,\n      onClick = _a.onClick;\n  var _b = togglesConfig[type],\n      TagName = _b.TagName,\n      iconName = _b.iconName,\n      getLabels = _b.getLabels;\n\n  var _c = getLabels(ariaLabels),\n      mainLabel = _c.mainLabel,\n      openLabel = _c.openLabel;\n\n  return React.createElement(TagName, {\n    className: clsx(styles['mobile-toggle']),\n    \"aria-hidden\": disabled,\n    \"aria-label\": mainLabel,\n    onClick: onClick\n  }, React.createElement(AppLayoutButton, {\n    ref: ref,\n    className: className,\n    iconName: iconName,\n    onClick: onClick,\n    ariaLabel: openLabel,\n    disabled: disabled,\n    ariaExpanded: disabled\n  }));\n});\nexport function MobileToolbar(_a) {\n  var _b = _a.ariaLabels,\n      ariaLabels = _b === void 0 ? {} : _b,\n      toggleRefs = _a.toggleRefs,\n      topOffset = _a.topOffset,\n      navigationHide = _a.navigationHide,\n      toolsHide = _a.toolsHide,\n      _c = _a.anyPanelOpen,\n      anyPanelOpen = _c === void 0 ? false : _c,\n      unfocusable = _a.unfocusable,\n      children = _a.children,\n      onNavigationOpen = _a.onNavigationOpen,\n      onToolsOpen = _a.onToolsOpen;\n  useEffect(function () {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return function () {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n  return React.createElement(\"div\", {\n    className: clsx(styles['mobile-bar'], unfocusable && sharedStyles.unfocusable),\n    style: {\n      top: topOffset\n    }\n  }, !navigationHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.navigation,\n    type: \"navigation\",\n    className: clsx(sharedStyles['navigation-toggle'], testutilStyles['navigation-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onNavigationOpen\n  }), React.createElement(\"div\", {\n    className: styles['mobile-bar-breadcrumbs']\n  }, children && React.createElement(\"div\", {\n    className: clsx(sharedStyles.breadcrumbs, testutilStyles.breadcrumbs)\n  }, children)), !toolsHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.tools,\n    type: \"tools\",\n    className: clsx(sharedStyles['tools-toggle'], testutilStyles['tools-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onToolsOpen\n  }));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","useEffect","AppLayoutButton","togglesConfig","styles","sharedStyles","testutilStyles","MobileToggle","forwardRef","_a","ref","className","ariaLabels","type","disabled","onClick","TagName","iconName","getLabels","mainLabel","openLabel","ariaLabel","ariaExpanded","MobileToolbar","_b","toggleRefs","topOffset","navigationHide","toolsHide","_c","anyPanelOpen","unfocusable","children","onNavigationOpen","onToolsOpen","document","body","classList","add","remove","style","top","navigation","breadcrumbs","tools"],"sourceRoot":"","sources":["../../../../src/app-layout/mobile-toolbar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\nimport { AppLayoutProps } from '../interfaces';\nimport { AppLayoutButton, togglesConfig } from '../toggles';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\ninterface MobileToggleProps {\n  className?: string;\n  ariaLabels?: AppLayoutProps.Labels;\n  type: keyof typeof togglesConfig;\n  disabled?: boolean;\n  onClick: () => void;\n}\n\nconst MobileToggle = React.forwardRef(\n  ({ className, ariaLabels, type, disabled, onClick }: MobileToggleProps, ref: React.Ref<ButtonProps.Ref>) => {\n    const { TagName, iconName, getLabels } = togglesConfig[type];\n    const { mainLabel, openLabel } = getLabels(ariaLabels);\n    return (\n      <TagName\n        className={clsx(styles['mobile-toggle'])}\n        aria-hidden={disabled}\n        aria-label={mainLabel}\n        onClick={onClick}\n      >\n        <AppLayoutButton\n          ref={ref}\n          className={className}\n          iconName={iconName}\n          onClick={onClick}\n          ariaLabel={openLabel}\n          disabled={disabled}\n          ariaExpanded={disabled}\n        />\n      </TagName>\n    );\n  }\n);\n\ninterface MobileToolbarProps {\n  anyPanelOpen: boolean | undefined;\n  unfocusable: boolean | undefined;\n  toggleRefs: {\n    navigation: React.Ref<ButtonProps.Ref>;\n    tools: React.Ref<ButtonProps.Ref>;\n  };\n  navigationHide: boolean | undefined;\n  toolsHide: boolean | undefined;\n  topOffset?: number;\n  ariaLabels?: AppLayoutProps.Labels;\n  children: React.ReactNode;\n  onNavigationOpen: () => void;\n  onToolsOpen: () => void;\n}\n\nexport function MobileToolbar({\n  ariaLabels = {},\n  toggleRefs,\n  topOffset,\n  navigationHide,\n  toolsHide,\n  anyPanelOpen = false,\n  unfocusable,\n  children,\n  onNavigationOpen,\n  onToolsOpen,\n}: MobileToolbarProps) {\n  useEffect(() => {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return () => {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n\n  return (\n    <div className={clsx(styles['mobile-bar'], unfocusable && sharedStyles.unfocusable)} style={{ top: topOffset }}>\n      {!navigationHide && (\n        <MobileToggle\n          ref={toggleRefs.navigation}\n          type=\"navigation\"\n          className={clsx(sharedStyles['navigation-toggle'], testutilStyles['navigation-toggle'])}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onNavigationOpen}\n        />\n      )}\n      <div className={styles['mobile-bar-breadcrumbs']}>\n        {children && <div className={clsx(sharedStyles.breadcrumbs, testutilStyles.breadcrumbs)}>{children}</div>}\n      </div>\n      {!toolsHide && (\n        <MobileToggle\n          ref={toggleRefs.tools}\n          type=\"tools\"\n          className={clsx(sharedStyles['tools-toggle'], testutilStyles['tools-toggle'])}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onToolsOpen}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}