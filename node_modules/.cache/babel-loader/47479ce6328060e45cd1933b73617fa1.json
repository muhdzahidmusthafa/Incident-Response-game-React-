{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState, useLayoutEffect } from 'react';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\nimport { getBaseProps } from '../../base-component';\nimport { fireCancelableEvent, fireNonCancelableEvent } from '../../events';\nimport { useFormFieldContext } from '../../context/form-field-context';\nimport InternalInput from '../../../input/internal';\nimport useMask from './use-mask';\nimport MaskFormat from './utils/mask-format';\nvar MaskedInput = React.forwardRef(function (_a, ref) {\n  var value = _a.value,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onKeyDown = _a.onKeyDown,\n      mask = _a.mask,\n      _b = _a.autofix,\n      autofix = _b === void 0 ? false : _b,\n      _c = _a.disableAutocompleteOnBlur,\n      disableAutocompleteOnBlur = _c === void 0 ? false : _c,\n      rest = __rest(_a, [\"value\", \"onBlur\", \"onChange\", \"onKeyDown\", \"mask\", \"autofix\", \"disableAutocompleteOnBlur\"]);\n\n  var baseProps = getBaseProps(rest);\n  var formFieldContext = useFormFieldContext(rest);\n  var inputRef = React.useRef(null);\n\n  var _d = useState(null),\n      cursorPosition = _d[0],\n      setCursorPosition = _d[1];\n\n  useLayoutEffect(function () {\n    var _a;\n\n    if (cursorPosition !== null) {\n      (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.setSelectionRange(cursorPosition, cursorPosition);\n    }\n  }, [cursorPosition, inputRef]);\n\n  var _e = useMask({\n    format: new MaskFormat(mask),\n    value: value,\n    inputRef: inputRef,\n    autofix: autofix,\n    disableAutocompleteOnBlur: disableAutocompleteOnBlur,\n    onChange: function (value) {\n      return !rest.readOnly && fireNonCancelableEvent(onChange, {\n        value: value\n      });\n    },\n    onKeyDown: function (event) {\n      return !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event);\n    },\n    onBlur: function () {\n      return fireNonCancelableEvent(onBlur);\n    },\n    setPosition: setCursorPosition\n  }),\n      onPaste = _e.onPaste,\n      maskProps = __rest(_e, [\"onPaste\"]);\n\n  var inputProps = __assign(__assign(__assign(__assign({}, rest), baseProps), formFieldContext), maskProps);\n\n  var mergedRef = useMergeRefs(ref, inputRef);\n  return React.createElement(InternalInput, __assign({}, inputProps, {\n    ref: mergedRef,\n    __nativeAttributes: {\n      onPaste: onPaste\n    }\n  }));\n});\nexport { useMask };\nexport default MaskedInput;","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,KAAP,IAAqBC,QAArB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,cAA5D;AAEA,SAASC,mBAAT,QAAoC,kCAApC;AAEA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAIA,IAAMC,WAAW,GAAGX,KAAK,CAACY,UAAN,CAClB,UACEC,EADF,EAWEC,GAXF,EAWgC;EAT5B,SAAK,WAAL;EAAA,IACAC,MAAM,YADN;EAAA,IAEAC,QAAQ,cAFR;EAAA,IAGAC,SAAS,eAHT;EAAA,IAIAC,IAAI,UAJJ;EAAA,IAKAC,eALA;EAAA,IAKAC,OAAO,mBAAG,KAAH,GAAQD,EALf;EAAA,IAMAE,iCANA;EAAA,IAMAC,yBAAyB,mBAAG,KAAH,GAAQD,EANjC;EAAA,IAOGE,IAAI,cART,4FAQS,CAPP;;EAWF,IAAMC,SAAS,GAAGpB,YAAY,CAACmB,IAAD,CAA9B;EACA,IAAME,gBAAgB,GAAGlB,mBAAmB,CAACgB,IAAD,CAA5C;EACA,IAAMG,QAAQ,GAAG1B,KAAK,CAAC2B,MAAN,CAA+B,IAA/B,CAAjB;;EACM,SAAsC1B,QAAQ,CAAgB,IAAhB,CAA9C;EAAA,IAAC2B,cAAc,QAAf;EAAA,IAAiBC,iBAAiB,QAAlC;;EAEN3B,eAAe,CAAC;;;IACd,IAAI0B,cAAc,KAAK,IAAvB,EAA6B;MAC3B,cAAQ,CAACE,OAAT,MAAgB,IAAhB,IAAgBjB,aAAhB,GAAgB,MAAhB,GAAgBA,GAAEkB,iBAAF,CAAoBH,cAApB,EAAoCA,cAApC,CAAhB;IACD;EACF,CAJc,EAIZ,CAACA,cAAD,EAAiBF,QAAjB,CAJY,CAAf;;EAMA,IAAMM,KAA4BvB,OAAO,CAAC;IACxCwB,MAAM,EAAE,IAAIvB,UAAJ,CAAeQ,IAAf,CADgC;IAExCgB,KAAK,OAFmC;IAGxCR,QAAQ,UAHgC;IAIxCN,OAAO,SAJiC;IAKxCE,yBAAyB,2BALe;IAMxCN,QAAQ,EAAE,UAACkB,KAAD,EAAc;MAAK,QAACX,IAAI,CAACY,QAAN,IAAkB7B,sBAAsB,CAACU,QAAD,EAAW;QAAEkB,KAAK;MAAP,CAAX,CAAxC;IAA6D,CANlD;IAOxCjB,SAAS,EAAE,UAACmB,KAAD,EAAmB;MAC5B,QAACb,IAAI,CAACY,QAAN,IAAkBlB,SAAlB,IAA+BZ,mBAAmB,CAACY,SAAD,EAAYmB,KAAK,CAACC,MAAlB,EAA0BD,KAA1B,CAAlD;IAAkF,CAR5C;IASxCrB,MAAM,EAAE;MAAM,6BAAsB,CAACA,MAAD,CAAtB;IAA8B,CATJ;IAUxCuB,WAAW,EAAET;EAV2B,CAAD,CAAzC;EAAA,IAAQU,OAAO,aAAf;EAAA,IAAoBC,SAAS,cAAvB,WAAuB,CAA7B;;EAaA,IAAMC,UAAU,2CAAQlB,IAAR,GAAiBC,SAAjB,GAA+BC,gBAA/B,GAAoDe,SAApD,CAAhB;;EACA,IAAME,SAAS,GAAGvC,YAAY,CAACW,GAAD,EAAMY,QAAN,CAA9B;EACA,OACE1B,oBAACQ,aAAD,EAAcmC,aACRF,UADQ,EACE;IACd3B,GAAG,EAAE4B,SADS;IAEdE,kBAAkB,EAAE;MAClBL,OAAO;IADW;EAFN,CADF,CAAd,CADF;AASD,CAjDiB,CAApB;AAoDA,SAA2B9B,OAA3B;AACA,eAAeE,WAAf","names":["React","useState","useLayoutEffect","useMergeRefs","getBaseProps","fireCancelableEvent","fireNonCancelableEvent","useFormFieldContext","InternalInput","useMask","MaskFormat","MaskedInput","forwardRef","_a","ref","onBlur","onChange","onKeyDown","mask","_b","autofix","_c","disableAutocompleteOnBlur","rest","baseProps","formFieldContext","inputRef","useRef","cursorPosition","setCursorPosition","current","setSelectionRange","_e","format","value","readOnly","event","detail","setPosition","onPaste","maskProps","inputProps","mergedRef","__assign","__nativeAttributes"],"sourceRoot":"","sources":["../../../../../src/internal/components/masked-input/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useState, useLayoutEffect } from 'react';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\n\nimport { getBaseProps } from '../../base-component';\nimport { fireCancelableEvent, fireNonCancelableEvent } from '../../events';\n\nimport { useFormFieldContext } from '../../context/form-field-context';\n\nimport InternalInput from '../../../input/internal';\n\nimport useMask from './use-mask';\nimport MaskFormat from './utils/mask-format';\n\nimport { MaskedInputProps } from './interfaces';\n\nconst MaskedInput = React.forwardRef(\n  (\n    {\n      value,\n      onBlur,\n      onChange,\n      onKeyDown,\n      mask,\n      autofix = false,\n      disableAutocompleteOnBlur = false,\n      ...rest\n    }: MaskedInputProps,\n    ref: Ref<MaskedInputProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(rest);\n    const formFieldContext = useFormFieldContext(rest);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [cursorPosition, setCursorPosition] = useState<number | null>(null);\n\n    useLayoutEffect(() => {\n      if (cursorPosition !== null) {\n        inputRef.current?.setSelectionRange(cursorPosition, cursorPosition);\n      }\n    }, [cursorPosition, inputRef]);\n\n    const { onPaste, ...maskProps } = useMask({\n      format: new MaskFormat(mask),\n      value,\n      inputRef,\n      autofix,\n      disableAutocompleteOnBlur,\n      onChange: (value: string) => !rest.readOnly && fireNonCancelableEvent(onChange, { value }),\n      onKeyDown: (event: CustomEvent) =>\n        !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),\n      onBlur: () => fireNonCancelableEvent(onBlur),\n      setPosition: setCursorPosition,\n    });\n\n    const inputProps = { ...rest, ...baseProps, ...formFieldContext, ...maskProps };\n    const mergedRef = useMergeRefs(ref, inputRef);\n    return (\n      <InternalInput\n        {...inputProps}\n        ref={mergedRef}\n        __nativeAttributes={{\n          onPaste,\n        }}\n      />\n    );\n  }\n);\n\nexport { MaskedInputProps, useMask };\nexport default MaskedInput;\n"]},"metadata":{},"sourceType":"module"}