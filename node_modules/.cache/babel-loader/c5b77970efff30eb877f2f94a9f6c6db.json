{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport SelectionControl from './selection-control';\nimport { focusMarkers } from './use-selection';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { getColumnKey } from './utils';\nimport { TableHeaderCell } from './header-cell';\nimport { Resizer } from './resizer';\nimport { useColumnWidths } from './use-column-widths';\nimport styles from './styles.css.js';\nimport headerCellStyles from './header-cell/styles.css.js';\nvar Thead = React.forwardRef(function (_a, outerRef) {\n  var containerWidth = _a.containerWidth,\n      selectionType = _a.selectionType,\n      selectAllProps = _a.selectAllProps,\n      columnDefinitions = _a.columnDefinitions,\n      sortingColumn = _a.sortingColumn,\n      sortingDisabled = _a.sortingDisabled,\n      sortingDescending = _a.sortingDescending,\n      resizableColumns = _a.resizableColumns,\n      variant = _a.variant,\n      wrapLines = _a.wrapLines,\n      onFocusMove = _a.onFocusMove,\n      onCellFocus = _a.onCellFocus,\n      onCellBlur = _a.onCellBlur,\n      onSortingChange = _a.onSortingChange,\n      onResizeFinish = _a.onResizeFinish,\n      _b = _a.showFocusRing,\n      showFocusRing = _b === void 0 ? null : _b,\n      _c = _a.sticky,\n      sticky = _c === void 0 ? false : _c,\n      _d = _a.hidden,\n      hidden = _d === void 0 ? false : _d,\n      _e = _a.stuck,\n      stuck = _e === void 0 ? false : _e;\n  var headerCellClass = clsx(headerCellStyles['header-cell'], headerCellStyles[\"header-cell-variant-\".concat(variant)], sticky && headerCellStyles['header-cell-sticky'], stuck && headerCellStyles['header-cell-stuck']);\n  var selectionCellClass = clsx(styles['selection-control'], styles['selection-control-header']);\n\n  var _f = useColumnWidths(),\n      columnWidths = _f.columnWidths,\n      totalWidth = _f.totalWidth,\n      updateColumn = _f.updateColumn;\n\n  return React.createElement(\"thead\", {\n    className: clsx(!hidden && styles['thead-active'])\n  }, React.createElement(\"tr\", __assign({}, focusMarkers.all, {\n    ref: outerRef\n  }), selectionType === 'multi' && React.createElement(\"th\", {\n    className: clsx(headerCellClass, selectionCellClass),\n    scope: \"col\"\n  }, React.createElement(SelectionControl, __assign({\n    onFocusDown: function (event) {\n      return onFocusMove(event.target, -1, +1);\n    }\n  }, selectAllProps, hidden ? {\n    tabIndex: -1\n  } : {}))), selectionType === 'single' && React.createElement(\"th\", {\n    className: clsx(headerCellClass, selectionCellClass),\n    scope: \"col\"\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": true\n  }, \"\\u00A0\")), columnDefinitions.map(function (column, colIndex) {\n    var widthOverride;\n\n    if (resizableColumns) {\n      if (columnWidths) {\n        // use stateful value if available\n        widthOverride = columnWidths[getColumnKey(column, colIndex)];\n      }\n\n      if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {\n        // let the last column grow and fill the container width\n        widthOverride = 'auto';\n      }\n    }\n\n    return React.createElement(TableHeaderCell, {\n      key: getColumnKey(column, colIndex),\n      className: headerCellClass,\n      style: {\n        width: widthOverride || column.width,\n        minWidth: sticky ? undefined : column.minWidth,\n        maxWidth: resizableColumns || sticky ? undefined : column.maxWidth\n      },\n      tabIndex: sticky ? -1 : 0,\n      showFocusRing: colIndex === showFocusRing,\n      column: column,\n      activeSortingColumn: sortingColumn,\n      sortingDescending: sortingDescending,\n      sortingDisabled: sortingDisabled,\n      wrapLines: wrapLines,\n      resizer: resizableColumns && React.createElement(Resizer, {\n        onDragMove: function (newWidth) {\n          return updateColumn(colIndex, newWidth);\n        },\n        onFinish: function () {\n          return onResizeFinish(columnWidths);\n        }\n      }),\n      onClick: function (detail) {\n        return fireNonCancelableEvent(onSortingChange, detail);\n      },\n      onFocus: function () {\n        return onCellFocus === null || onCellFocus === void 0 ? void 0 : onCellFocus(colIndex);\n      },\n      onBlur: onCellBlur\n    });\n  })));\n});\nexport default Thead;","map":{"version":3,"mappings":"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","names":["clsx","React","SelectionControl","focusMarkers","fireNonCancelableEvent","getColumnKey","TableHeaderCell","Resizer","useColumnWidths","styles","headerCellStyles","Thead","forwardRef","_a","outerRef","containerWidth","selectionType","selectAllProps","columnDefinitions","sortingColumn","sortingDisabled","sortingDescending","resizableColumns","variant","wrapLines","onFocusMove","onCellFocus","onCellBlur","onSortingChange","onResizeFinish","_b","showFocusRing","_c","sticky","_d","hidden","_e","stuck","headerCellClass","selectionCellClass","columnWidths","totalWidth","updateColumn","className","all","ref","scope","__assign","onFocusDown","event","target","tabIndex","map","column","colIndex","widthOverride","length","key","style","width","minWidth","undefined","maxWidth","activeSortingColumn","resizer","onDragMove","newWidth","onFinish","onClick","detail","onFocus","onBlur"],"sourceRoot":"","sources":["../../../src/table/thead.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { TableProps } from './interfaces';\nimport SelectionControl, { SelectionControlProps } from './selection-control';\nimport { focusMarkers } from './use-selection';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events';\nimport { getColumnKey } from './utils';\nimport { TableHeaderCell } from './header-cell';\nimport { Resizer } from './resizer';\nimport { useColumnWidths } from './use-column-widths';\nimport styles from './styles.css.js';\nimport headerCellStyles from './header-cell/styles.css.js';\n\nexport interface TheadProps {\n  containerWidth: number | null;\n  selectionType: TableProps.SelectionType | undefined;\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>;\n  sortingColumn: TableProps.SortingColumn<any> | undefined;\n  sortingDescending: boolean | undefined;\n  sortingDisabled: boolean | undefined;\n  variant: TableProps.Variant;\n  wrapLines: boolean | undefined;\n  resizableColumns: boolean | undefined;\n  selectAllProps: SelectionControlProps;\n  onFocusMove: ((sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) => void) | undefined;\n  onCellFocus?: (colIndex: number) => void;\n  onCellBlur?: () => void;\n  onResizeFinish: (newWidths: Record<string, number>) => void;\n  showFocusRing?: number | null;\n  onSortingChange: NonCancelableEventHandler<TableProps.SortingState<any>> | undefined;\n  sticky?: boolean;\n  hidden?: boolean;\n  stuck?: boolean;\n}\n\nconst Thead = React.forwardRef(\n  (\n    {\n      containerWidth,\n      selectionType,\n      selectAllProps,\n      columnDefinitions,\n      sortingColumn,\n      sortingDisabled,\n      sortingDescending,\n      resizableColumns,\n      variant,\n      wrapLines,\n      onFocusMove,\n      onCellFocus,\n      onCellBlur,\n      onSortingChange,\n      onResizeFinish,\n      showFocusRing = null,\n      sticky = false,\n      hidden = false,\n      stuck = false,\n    }: TheadProps,\n    outerRef: React.Ref<HTMLTableRowElement>\n  ) => {\n    const headerCellClass = clsx(\n      headerCellStyles['header-cell'],\n      headerCellStyles[`header-cell-variant-${variant}`],\n      sticky && headerCellStyles['header-cell-sticky'],\n      stuck && headerCellStyles['header-cell-stuck']\n    );\n    const selectionCellClass = clsx(styles['selection-control'], styles['selection-control-header']);\n    const { columnWidths, totalWidth, updateColumn } = useColumnWidths();\n\n    return (\n      <thead className={clsx(!hidden && styles['thead-active'])}>\n        <tr {...focusMarkers.all} ref={outerRef}>\n          {selectionType === 'multi' && (\n            <th className={clsx(headerCellClass, selectionCellClass)} scope=\"col\">\n              <SelectionControl\n                onFocusDown={event => onFocusMove!(event.target as HTMLElement, -1, +1)}\n                {...selectAllProps}\n                {...(hidden ? { tabIndex: -1 } : {})}\n              />\n            </th>\n          )}\n          {selectionType === 'single' && (\n            <th className={clsx(headerCellClass, selectionCellClass)} scope=\"col\">\n              <span aria-hidden={true}>\n                {/*non-empty element to prevent table cell from collapsing in IE */}\n                &nbsp;\n              </span>\n            </th>\n          )}\n          {columnDefinitions.map((column, colIndex) => {\n            let widthOverride;\n            if (resizableColumns) {\n              if (columnWidths) {\n                // use stateful value if available\n                widthOverride = columnWidths[getColumnKey(column, colIndex)];\n              }\n              if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {\n                // let the last column grow and fill the container width\n                widthOverride = 'auto';\n              }\n            }\n            return (\n              <TableHeaderCell\n                key={getColumnKey(column, colIndex)}\n                className={headerCellClass}\n                style={{\n                  width: widthOverride || column.width,\n                  minWidth: sticky ? undefined : column.minWidth,\n                  maxWidth: resizableColumns || sticky ? undefined : column.maxWidth,\n                }}\n                tabIndex={sticky ? -1 : 0}\n                showFocusRing={colIndex === showFocusRing}\n                column={column}\n                activeSortingColumn={sortingColumn}\n                sortingDescending={sortingDescending}\n                sortingDisabled={sortingDisabled}\n                wrapLines={wrapLines}\n                resizer={\n                  resizableColumns && (\n                    <Resizer\n                      onDragMove={newWidth => updateColumn(colIndex, newWidth)}\n                      onFinish={() => onResizeFinish(columnWidths)}\n                    />\n                  )\n                }\n                onClick={detail => fireNonCancelableEvent(onSortingChange, detail)}\n                onFocus={() => onCellFocus?.(colIndex)}\n                onBlur={onCellBlur}\n              />\n            );\n          })}\n        </tr>\n      </thead>\n    );\n  }\n);\n\nexport default Thead;\n"]},"metadata":{},"sourceType":"module"}