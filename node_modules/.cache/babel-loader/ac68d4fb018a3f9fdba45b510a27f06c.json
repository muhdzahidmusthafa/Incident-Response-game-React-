{"ast":null,"code":"import { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n/** Formats provided x-position and its corresponding series values. */\n\nexport default function formatHighlighted(position, series, xTickFormatter) {\n  var formattedPosition = xTickFormatter ? xTickFormatter(position) : position.toString();\n  var details = [];\n  series.forEach(function (s) {\n    var detail = getSeriesDetail(s, position);\n\n    if (detail) {\n      details.push(detail);\n    }\n  });\n  return {\n    position: formattedPosition,\n    details: details\n  };\n}\n\nfunction getSeriesDetail(internalSeries, targetX) {\n  var series = internalSeries.series,\n      color = internalSeries.color; // X-thresholds are only shown when X matches.\n\n  if (isXThreshold(series)) {\n    return series.x === targetX ? {\n      key: series.title,\n      value: '',\n      color: color,\n      markerType: 'dashed'\n    } : null;\n  }\n\n  if (isYThreshold(series)) {\n    return {\n      key: series.title,\n      value: series.valueFormatter ? series.valueFormatter(series.y) : series.y,\n      color: color,\n      markerType: 'dashed'\n    };\n  }\n\n  if (isDataSeries(series)) {\n    for (var _i = 0, _a = series.data; _i < _a.length; _i++) {\n      var datum = _a[_i];\n\n      if (matchesX(targetX, datum.x)) {\n        return {\n          key: series.title,\n          value: series.valueFormatter ? series.valueFormatter(datum.y, targetX) : datum.y,\n          color: color,\n          markerType: series.type === 'line' ? 'line' : 'rectangle'\n        };\n      }\n    }\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"AAKA,SAASA,YAAT,EAAuBC,YAAvB,EAAqCC,YAArC,EAAmDC,QAAnD,QAAmE,SAAnE;AAOA;;AACA,eAAc,SAAUC,iBAAV,CACZC,QADY,EAEZC,MAFY,EAGZC,cAHY,EAGyC;EAErD,IAAMC,iBAAiB,GAAGD,cAAc,GAAGA,cAAc,CAACF,QAAD,CAAjB,GAA8BA,QAAQ,CAACI,QAAT,EAAtE;EAEA,IAAMC,OAAO,GAA4B,EAAzC;EACAJ,MAAM,CAACK,OAAP,CAAe,aAAC;IACd,IAAMC,MAAM,GAAGC,eAAe,CAACC,CAAD,EAAIT,QAAJ,CAA9B;;IACA,IAAIO,MAAJ,EAAY;MACVF,OAAO,CAACK,IAAR,CAAaH,MAAb;IACD;EACF,CALD;EAOA,OAAO;IAAEP,QAAQ,EAAEG,iBAAZ;IAA+BE,OAAO;EAAtC,CAAP;AACD;;AAED,SAASG,eAAT,CAA4BG,cAA5B,EAAoEC,OAApE,EAA8E;EACpE,UAAM,GAAYD,cAAc,OAAhC;EAAA,IAAQE,KAAK,GAAKF,cAAc,MAAhC,CADoE,CAG5E;;EACA,IAAIf,YAAY,CAACK,MAAD,CAAhB,EAA0B;IACxB,OAAOA,MAAM,CAACa,CAAP,KAAaF,OAAb,GACH;MACEG,GAAG,EAAEd,MAAM,CAACe,KADd;MAEEC,KAAK,EAAE,EAFT;MAGEJ,KAAK,OAHP;MAIEK,UAAU,EAAE;IAJd,CADG,GAOH,IAPJ;EAQD;;EAED,IAAIrB,YAAY,CAACI,MAAD,CAAhB,EAA0B;IACxB,OAAO;MACLc,GAAG,EAAEd,MAAM,CAACe,KADP;MAELC,KAAK,EAAEhB,MAAM,CAACkB,cAAP,GAAwBlB,MAAM,CAACkB,cAAP,CAAsBlB,MAAM,CAACmB,CAA7B,CAAxB,GAA0DnB,MAAM,CAACmB,CAFnE;MAGLP,KAAK,OAHA;MAILK,UAAU,EAAE;IAJP,CAAP;EAMD;;EAED,IAAIvB,YAAY,CAACM,MAAD,CAAhB,EAA0B;IACxB,KAAoB,uBAAM,CAACoB,IAA3B,EAAoBC,cAApB,EAAoBA,IAApB,EAAiC;MAA5B,IAAMC,KAAK,SAAX;;MACH,IAAIzB,QAAQ,CAACc,OAAD,EAAUW,KAAK,CAACT,CAAhB,CAAZ,EAAgC;QAC9B,OAAO;UACLC,GAAG,EAAEd,MAAM,CAACe,KADP;UAELC,KAAK,EAAEhB,MAAM,CAACkB,cAAP,GAAwBlB,MAAM,CAACkB,cAAP,CAAsBI,KAAK,CAACH,CAA5B,EAA+BR,OAA/B,CAAxB,GAAkEW,KAAK,CAACH,CAF1E;UAGLP,KAAK,OAHA;UAILK,UAAU,EAAEjB,MAAM,CAACuB,IAAP,KAAgB,MAAhB,GAAyB,MAAzB,GAAkC;QAJzC,CAAP;MAMD;IACF;EACF;;EAED,OAAO,IAAP;AACD","names":["isDataSeries","isXThreshold","isYThreshold","matchesX","formatHighlighted","position","series","xTickFormatter","formattedPosition","toString","details","forEach","detail","getSeriesDetail","s","push","internalSeries","targetX","color","x","key","title","value","markerType","valueFormatter","y","data","_i","datum","type"],"sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/format-highlighted.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartDataTypes, InternalChartSeries } from './interfaces';\nimport { ChartSeriesDetailItem } from '../internal/components/chart-series-details';\nimport { CartesianChartProps } from '../internal/components/cartesian-chart/interfaces';\nimport { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n\nexport interface HighlightDetails {\n  position: string;\n  details: ChartSeriesDetailItem[];\n}\n\n/** Formats provided x-position and its corresponding series values. */\nexport default function formatHighlighted<T extends ChartDataTypes>(\n  position: T,\n  series: readonly InternalChartSeries<T>[],\n  xTickFormatter?: CartesianChartProps.TickFormatter<T>\n): HighlightDetails {\n  const formattedPosition = xTickFormatter ? xTickFormatter(position) : position.toString();\n\n  const details: ChartSeriesDetailItem[] = [];\n  series.forEach(s => {\n    const detail = getSeriesDetail(s, position);\n    if (detail) {\n      details.push(detail);\n    }\n  });\n\n  return { position: formattedPosition, details };\n}\n\nfunction getSeriesDetail<T>(internalSeries: InternalChartSeries<T>, targetX: T): ChartSeriesDetailItem | null {\n  const { series, color } = internalSeries;\n\n  // X-thresholds are only shown when X matches.\n  if (isXThreshold(series)) {\n    return series.x === targetX\n      ? {\n          key: series.title,\n          value: '',\n          color,\n          markerType: 'dashed',\n        }\n      : null;\n  }\n\n  if (isYThreshold(series)) {\n    return {\n      key: series.title,\n      value: series.valueFormatter ? series.valueFormatter(series.y) : series.y,\n      color,\n      markerType: 'dashed',\n    };\n  }\n\n  if (isDataSeries(series)) {\n    for (const datum of series.data) {\n      if (matchesX(targetX, datum.x)) {\n        return {\n          key: series.title,\n          value: series.valueFormatter ? series.valueFormatter(datum.y, targetX) : datum.y,\n          color,\n          markerType: series.type === 'line' ? 'line' : 'rectangle',\n        };\n      }\n    }\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}