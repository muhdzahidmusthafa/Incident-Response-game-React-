{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Finds the longest property the filtering text starts from.\nexport function matchFilteringProperty(filteringProperties, filteringText) {\n  filteringText = filteringText.toLowerCase();\n  var maxLength = 0;\n  var matchedProperty = null;\n\n  for (var _i = 0, filteringProperties_1 = filteringProperties; _i < filteringProperties_1.length; _i++) {\n    var property = filteringProperties_1[_i];\n\n    if (property.propertyLabel.length > maxLength && startsWith(filteringText, property.propertyLabel.toLowerCase())) {\n      maxLength = property.propertyLabel.length;\n      matchedProperty = property;\n    }\n  }\n\n  return matchedProperty;\n} // Finds the longest operator the filtering text starts from.\n\nexport function matchOperator(allowedOperators, filteringText) {\n  filteringText = filteringText.toLowerCase();\n  var maxLength = 0;\n  var matchedOperator = null;\n\n  for (var _i = 0, allowedOperators_1 = allowedOperators; _i < allowedOperators_1.length; _i++) {\n    var operator = allowedOperators_1[_i];\n\n    if (operator.length > maxLength && startsWith(filteringText, operator.toLowerCase())) {\n      maxLength = operator.length;\n      matchedOperator = operator;\n    }\n  }\n\n  return matchedOperator;\n} // Finds if the filtering text matches any operator prefix.\n\nexport function matchOperatorPrefix(allowedOperators, filteringText) {\n  if (filteringText.trim().length === 0) {\n    return '';\n  }\n\n  for (var _i = 0, allowedOperators_2 = allowedOperators; _i < allowedOperators_2.length; _i++) {\n    var operator = allowedOperators_2[_i];\n\n    if (startsWith(operator.toLowerCase(), filteringText.toLowerCase())) {\n      return filteringText;\n    }\n  }\n\n  return null;\n}\nexport function trimStart(source) {\n  var spacesLength = 0;\n\n  for (var i = 0; i < source.length; i++) {\n    if (source[i] === ' ') {\n      spacesLength++;\n    } else {\n      break;\n    }\n  }\n\n  return source.slice(spacesLength);\n}\nexport function trimFirstSpace(source) {\n  return source[0] === ' ' ? source.slice(1) : source;\n}\n\nfunction startsWith(source, target) {\n  return source.indexOf(target) === 0;\n}","map":{"version":3,"mappings":"AAAA;AACA;AAIA;AACA,OAAM,SAAUA,sBAAV,CACJC,mBADI,EAEJC,aAFI,EAEiB;EAErBA,aAAa,GAAGA,aAAa,CAACC,WAAd,EAAhB;EAEA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,eAAe,GAAiD,IAApE;;EAEA,KAAuB,uDAAvB,EAAuBC,iCAAvB,EAAuBA,IAAvB,EAA4C;IAAvC,IAAMC,QAAQ,4BAAd;;IACH,IAAIA,QAAQ,CAACC,aAAT,CAAuBC,MAAvB,GAAgCL,SAAhC,IAA6CM,UAAU,CAACR,aAAD,EAAgBK,QAAQ,CAACC,aAAT,CAAuBL,WAAvB,EAAhB,CAA3D,EAAkH;MAChHC,SAAS,GAAGG,QAAQ,CAACC,aAAT,CAAuBC,MAAnC;MACAJ,eAAe,GAAGE,QAAlB;IACD;EACF;;EAED,OAAOF,eAAP;AACD,C,CAED;;AACA,OAAM,SAAUM,aAAV,CACJC,gBADI,EAEJV,aAFI,EAEiB;EAErBA,aAAa,GAAGA,aAAa,CAACC,WAAd,EAAhB;EAEA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIS,eAAe,GAAkD,IAArE;;EAEA,KAAuB,iDAAvB,EAAuBP,8BAAvB,EAAuBA,IAAvB,EAAyC;IAApC,IAAMQ,QAAQ,yBAAd;;IACH,IAAIA,QAAQ,CAACL,MAAT,GAAkBL,SAAlB,IAA+BM,UAAU,CAACR,aAAD,EAAgBY,QAAQ,CAACX,WAAT,EAAhB,CAA7C,EAAsF;MACpFC,SAAS,GAAGU,QAAQ,CAACL,MAArB;MACAI,eAAe,GAAGC,QAAlB;IACD;EACF;;EAED,OAAOD,eAAP;AACD,C,CAED;;AACA,OAAM,SAAUE,mBAAV,CACJH,gBADI,EAEJV,aAFI,EAEiB;EAErB,IAAIA,aAAa,CAACc,IAAd,GAAqBP,MAArB,KAAgC,CAApC,EAAuC;IACrC,OAAO,EAAP;EACD;;EACD,KAAuB,iDAAvB,EAAuBH,8BAAvB,EAAuBA,IAAvB,EAAyC;IAApC,IAAMQ,QAAQ,yBAAd;;IACH,IAAIJ,UAAU,CAACI,QAAQ,CAACX,WAAT,EAAD,EAAyBD,aAAa,CAACC,WAAd,EAAzB,CAAd,EAAqE;MACnE,OAAOD,aAAP;IACD;EACF;;EACD,OAAO,IAAP;AACD;AAED,OAAM,SAAUe,SAAV,CAAoBC,MAApB,EAAkC;EACtC,IAAIC,YAAY,GAAG,CAAnB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACT,MAA3B,EAAmCW,CAAC,EAApC,EAAwC;IACtC,IAAIF,MAAM,CAACE,CAAD,CAAN,KAAc,GAAlB,EAAuB;MACrBD,YAAY;IACb,CAFD,MAEO;MACL;IACD;EACF;;EACD,OAAOD,MAAM,CAACG,KAAP,CAAaF,YAAb,CAAP;AACD;AAED,OAAM,SAAUG,cAAV,CAAyBJ,MAAzB,EAAuC;EAC3C,OAAOA,MAAM,CAAC,CAAD,CAAN,KAAc,GAAd,GAAoBA,MAAM,CAACG,KAAP,CAAa,CAAb,CAApB,GAAsCH,MAA7C;AACD;;AAED,SAASR,UAAT,CAAoBQ,MAApB,EAAoCK,MAApC,EAAkD;EAChD,OAAOL,MAAM,CAACM,OAAP,CAAeD,MAAf,MAA2B,CAAlC;AACD","names":["matchFilteringProperty","filteringProperties","filteringText","toLowerCase","maxLength","matchedProperty","_i","property","propertyLabel","length","startsWith","matchOperator","allowedOperators","matchedOperator","operator","matchOperatorPrefix","trim","trimStart","source","spacesLength","i","slice","trimFirstSpace","target","indexOf"],"sourceRoot":"","sources":["../../../src/property-filter/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PropertyFilterProps } from './interfaces';\n\n// Finds the longest property the filtering text starts from.\nexport function matchFilteringProperty(\n  filteringProperties: readonly PropertyFilterProps.FilteringProperty[],\n  filteringText: string\n): null | PropertyFilterProps.FilteringProperty {\n  filteringText = filteringText.toLowerCase();\n\n  let maxLength = 0;\n  let matchedProperty: null | PropertyFilterProps.FilteringProperty = null;\n\n  for (const property of filteringProperties) {\n    if (property.propertyLabel.length > maxLength && startsWith(filteringText, property.propertyLabel.toLowerCase())) {\n      maxLength = property.propertyLabel.length;\n      matchedProperty = property;\n    }\n  }\n\n  return matchedProperty;\n}\n\n// Finds the longest operator the filtering text starts from.\nexport function matchOperator(\n  allowedOperators: readonly PropertyFilterProps.ComparisonOperator[],\n  filteringText: string\n): null | PropertyFilterProps.ComparisonOperator {\n  filteringText = filteringText.toLowerCase();\n\n  let maxLength = 0;\n  let matchedOperator: null | PropertyFilterProps.ComparisonOperator = null;\n\n  for (const operator of allowedOperators) {\n    if (operator.length > maxLength && startsWith(filteringText, operator.toLowerCase())) {\n      maxLength = operator.length;\n      matchedOperator = operator;\n    }\n  }\n\n  return matchedOperator;\n}\n\n// Finds if the filtering text matches any operator prefix.\nexport function matchOperatorPrefix(\n  allowedOperators: readonly PropertyFilterProps.ComparisonOperator[],\n  filteringText: string\n): null | string {\n  if (filteringText.trim().length === 0) {\n    return '';\n  }\n  for (const operator of allowedOperators) {\n    if (startsWith(operator.toLowerCase(), filteringText.toLowerCase())) {\n      return filteringText;\n    }\n  }\n  return null;\n}\n\nexport function trimStart(source: string): string {\n  let spacesLength = 0;\n  for (let i = 0; i < source.length; i++) {\n    if (source[i] === ' ') {\n      spacesLength++;\n    } else {\n      break;\n    }\n  }\n  return source.slice(spacesLength);\n}\n\nexport function trimFirstSpace(source: string): string {\n  return source[0] === ' ' ? source.slice(1) : source;\n}\n\nfunction startsWith(source: string, target: string): boolean {\n  return source.indexOf(target) === 0;\n}\n"]},"metadata":{},"sourceType":"module"}