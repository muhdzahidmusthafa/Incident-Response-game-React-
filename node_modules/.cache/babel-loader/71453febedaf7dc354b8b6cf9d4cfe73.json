{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext } from './s3-in-context';\nimport { S3Modal } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nvar S3ResourceSelector = React.forwardRef(function (_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n      alert = _a.alert,\n      resource = _a.resource,\n      viewHref = _a.viewHref,\n      invalid = _a.invalid,\n      _b = _a.selectableItemsTypes,\n      selectableItemsTypes = _b === void 0 ? [] : _b,\n      inputAriaDescribedby = _a.inputAriaDescribedby,\n      _c = _a.bucketsVisibleColumns,\n      bucketsVisibleColumns = _c === void 0 ? ['Name', 'CreationDate'] : _c,\n      bucketsIsItemDisabled = _a.bucketsIsItemDisabled,\n      fetchBuckets = _a.fetchBuckets,\n      fetchObjects = _a.fetchObjects,\n      _d = _a.objectsVisibleColumns,\n      objectsVisibleColumns = _d === void 0 ? ['Key', 'LastModified', 'Size'] : _d,\n      objectsIsItemDisabled = _a.objectsIsItemDisabled,\n      fetchVersions = _a.fetchVersions,\n      _e = _a.versionsVisibleColumns,\n      versionsVisibleColumns = _e === void 0 ? ['ID', 'LastModified', 'Size'] : _e,\n      versionsIsItemDisabled = _a.versionsIsItemDisabled,\n      onChange = _a.onChange,\n      rest = __rest(_a, [\"i18nStrings\", \"alert\", \"resource\", \"viewHref\", \"invalid\", \"selectableItemsTypes\", \"inputAriaDescribedby\", \"bucketsVisibleColumns\", \"bucketsIsItemDisabled\", \"fetchBuckets\", \"fetchObjects\", \"objectsVisibleColumns\", \"objectsIsItemDisabled\", \"fetchVersions\", \"versionsVisibleColumns\", \"versionsIsItemDisabled\", \"onChange\"]);\n\n  checkSafeUrl('S3ResourceSelector', viewHref);\n\n  var __internalRootRef = useBaseComponent('S3ResourceSelector').__internalRootRef;\n\n  var _f = useState(false),\n      modalOpen = _f[0],\n      setModalOpen = _f[1];\n\n  var inContextRef = useRef(null);\n  var modalWasSubmitted = useRef(false);\n  useForwardFocus(ref, inContextRef);\n  useEffect(function () {\n    var _a; // Focus uriInput only when modal was submitted.\n    // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n\n\n    if (!modalOpen && modalWasSubmitted.current) {\n      modalWasSubmitted.current = false;\n      (_a = inContextRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [modalOpen]);\n  var baseProps = getBaseProps(rest);\n  var modalProps = {\n    alert: alert,\n    i18nStrings: i18nStrings,\n    fetchBuckets: fetchBuckets,\n    selectableItemsTypes: selectableItemsTypes,\n    bucketsVisibleColumns: bucketsVisibleColumns,\n    bucketsIsItemDisabled: bucketsIsItemDisabled,\n    fetchObjects: fetchObjects,\n    objectsVisibleColumns: objectsVisibleColumns,\n    objectsIsItemDisabled: objectsIsItemDisabled,\n    fetchVersions: fetchVersions,\n    versionsVisibleColumns: versionsVisibleColumns,\n    versionsIsItemDisabled: versionsIsItemDisabled,\n    onSubmit: function (resource) {\n      fireNonCancelableEvent(onChange, {\n        resource: resource\n      });\n      setModalOpen(false);\n      modalWasSubmitted.current = true;\n    },\n    onDismiss: function () {\n      return setModalOpen(false);\n    }\n  };\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(S3InContext, {\n    ref: inContextRef,\n    selectableItemsTypes: selectableItemsTypes,\n    i18nStrings: i18nStrings,\n    resource: resource,\n    viewHref: viewHref,\n    invalid: invalid,\n    inputAriaDescribedby: inputAriaDescribedby,\n    fetchVersions: fetchVersions,\n    onBrowse: function () {\n      return setModalOpen(true);\n    },\n    onChange: function (resource, errorText) {\n      return fireNonCancelableEvent(onChange, {\n        resource: resource,\n        errorText: errorText\n      });\n    }\n  }), !modalOpen && alert && React.createElement(InternalBox, {\n    className: styles.alert,\n    margin: {\n      top: 's'\n    }\n  }, alert), modalOpen && React.createElement(S3Modal, __assign({}, modalProps)));\n});\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;","map":{"version":3,"mappings":"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","names":["clsx","React","useState","useRef","useEffect","InternalBox","getBaseProps","fireNonCancelableEvent","useForwardFocus","applyDisplayName","S3InContext","S3Modal","styles","useBaseComponent","checkSafeUrl","S3ResourceSelector","forwardRef","_a","ref","alert","resource","viewHref","invalid","_b","selectableItemsTypes","inputAriaDescribedby","_c","bucketsVisibleColumns","bucketsIsItemDisabled","fetchBuckets","fetchObjects","_d","objectsVisibleColumns","objectsIsItemDisabled","fetchVersions","_e","versionsVisibleColumns","versionsIsItemDisabled","onChange","rest","__internalRootRef","modalOpen","setModalOpen","inContextRef","modalWasSubmitted","current","focus","baseProps","modalProps","i18nStrings","onSubmit","onDismiss","className","root","onBrowse","errorText","margin","top","__assign"],"sourceRoot":"","sources":["../../../src/s3-resource-selector/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext, S3InContextRef } from './s3-in-context';\nimport { S3ResourceSelectorProps } from './interfaces';\nimport { S3Modal, S3ModalProps } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\n\nexport { S3ResourceSelectorProps };\n\nconst S3ResourceSelector = React.forwardRef(\n  (\n    {\n      i18nStrings,\n      alert,\n      resource,\n      viewHref,\n      invalid,\n      selectableItemsTypes = [],\n      inputAriaDescribedby,\n      bucketsVisibleColumns = ['Name', 'CreationDate'],\n      bucketsIsItemDisabled,\n      fetchBuckets,\n      fetchObjects,\n      objectsVisibleColumns = ['Key', 'LastModified', 'Size'],\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns = ['ID', 'LastModified', 'Size'],\n      versionsIsItemDisabled,\n      onChange,\n      ...rest\n    }: S3ResourceSelectorProps,\n    ref: React.Ref<S3ResourceSelectorProps.Ref>\n  ) => {\n    checkSafeUrl('S3ResourceSelector', viewHref);\n    const { __internalRootRef } = useBaseComponent('S3ResourceSelector');\n    const [modalOpen, setModalOpen] = useState(false);\n    const inContextRef = useRef<S3InContextRef>(null);\n    const modalWasSubmitted = useRef<boolean>(false);\n    useForwardFocus(ref, inContextRef);\n\n    useEffect(() => {\n      // Focus uriInput only when modal was submitted.\n      // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n      if (!modalOpen && modalWasSubmitted.current) {\n        modalWasSubmitted.current = false;\n        inContextRef.current?.focus();\n      }\n    }, [modalOpen]);\n\n    const baseProps = getBaseProps(rest);\n    const modalProps: S3ModalProps = {\n      alert,\n      i18nStrings,\n      fetchBuckets,\n      selectableItemsTypes,\n      bucketsVisibleColumns,\n      bucketsIsItemDisabled,\n      fetchObjects,\n      objectsVisibleColumns,\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns,\n      versionsIsItemDisabled,\n      onSubmit: resource => {\n        fireNonCancelableEvent(onChange, { resource });\n        setModalOpen(false);\n        modalWasSubmitted.current = true;\n      },\n      onDismiss: () => setModalOpen(false),\n    };\n    return (\n      <div {...baseProps} className={clsx(styles.root, baseProps.className)} ref={__internalRootRef}>\n        <S3InContext\n          ref={inContextRef}\n          selectableItemsTypes={selectableItemsTypes}\n          i18nStrings={i18nStrings}\n          resource={resource}\n          viewHref={viewHref}\n          invalid={invalid}\n          inputAriaDescribedby={inputAriaDescribedby}\n          fetchVersions={fetchVersions}\n          onBrowse={() => setModalOpen(true)}\n          onChange={(resource, errorText) => fireNonCancelableEvent(onChange, { resource, errorText })}\n        />\n        {!modalOpen && alert && (\n          <InternalBox className={styles.alert} margin={{ top: 's' }}>\n            {alert}\n          </InternalBox>\n        )}\n        {modalOpen && <S3Modal {...modalProps} />}\n      </div>\n    );\n  }\n);\n\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;\n"]},"metadata":{},"sourceType":"module"}