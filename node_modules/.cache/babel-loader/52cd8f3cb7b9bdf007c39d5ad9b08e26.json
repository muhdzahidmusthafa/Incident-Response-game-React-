{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { AppLayoutButton, CloseButton, togglesConfig } from './toggles';\nimport styles from './styles.css.js'; // This matches the design token awsui.$border-divider-section-width in Visual Refresh\n\nvar BORDER_WIDTH = 2; // We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\n\nexport function Drawer(_a) {\n  var _b;\n\n  var contentClassName = _a.contentClassName,\n      toggleClassName = _a.toggleClassName,\n      closeClassName = _a.closeClassName,\n      width = _a.width,\n      type = _a.type,\n      toggleRefs = _a.toggleRefs,\n      topOffset = _a.topOffset,\n      bottomOffset = _a.bottomOffset,\n      ariaLabels = _a.ariaLabels,\n      children = _a.children,\n      isOpen = _a.isOpen,\n      isHidden = _a.isHidden,\n      isMobile = _a.isMobile,\n      hasDividerWithSplitPanel = _a.hasDividerWithSplitPanel,\n      onToggle = _a.onToggle,\n      onClick = _a.onClick,\n      _c = _a.extendRight,\n      extendRight = _c === void 0 ? 0 : _c;\n  var _d = togglesConfig[type],\n      TagName = _d.TagName,\n      iconName = _d.iconName,\n      getLabels = _d.getLabels;\n\n  var _e = getLabels(ariaLabels),\n      mainLabel = _e.mainLabel,\n      closeLabel = _e.closeLabel,\n      openLabel = _e.openLabel;\n\n  var hasDividerWithButtonBar = isOpen && extendRight !== 0;\n  var drawerContentWidthOpen = isMobile ? undefined : width;\n  var drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n  var drawerWidth = hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;\n  var closeIconName = 'close';\n  var regularOpenButton = React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    className: styles.toggle,\n    \"aria-hidden\": isOpen\n  }, React.createElement(AppLayoutButton, {\n    ref: toggleRefs.toggle,\n    className: toggleClassName,\n    iconName: iconName,\n    ariaLabel: openLabel,\n    onClick: function () {\n      return onToggle(true);\n    },\n    ariaExpanded: false\n  }));\n  return React.createElement(\"div\", {\n    className: clsx(styles.drawer, (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b[styles['drawer-hidden']] = isHidden, _b[styles['drawer-mobile']] = isMobile, _b[styles['has-divider-with-splitpanel']] = hasDividerWithSplitPanel, _b[styles['opaque-background']] = hasDividerWithButtonBar, _b)),\n    style: {\n      width: drawerWidth,\n      marginRight: isOpen ? -1 * extendRight : 0,\n      paddingRight: isOpen ? extendRight : 0\n    },\n    onClick: function (event) {\n      if (onClick) {\n        onClick(event);\n      }\n\n      if (!isOpen) {\n        // to prevent calling onToggle from the drawer when it's called from the toggle button\n        if (event.target.tagName !== 'BUTTON') {\n          onToggle(true);\n        }\n      }\n    }\n  }, React.createElement(\"div\", {\n    style: {\n      width: drawerContentWidth,\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], contentClassName)\n  }, !isMobile && regularOpenButton, React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    \"aria-hidden\": !isOpen\n  }, React.createElement(CloseButton, {\n    ref: toggleRefs.close,\n    className: closeClassName,\n    ariaLabel: closeLabel,\n    onClick: function () {\n      return onToggle(false);\n    },\n    iconName: closeIconName\n  }), children)));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","AppLayoutButton","CloseButton","togglesConfig","styles","BORDER_WIDTH","Drawer","_a","contentClassName","toggleClassName","closeClassName","width","type","toggleRefs","topOffset","bottomOffset","ariaLabels","children","isOpen","isHidden","isMobile","hasDividerWithSplitPanel","onToggle","onClick","_c","extendRight","TagName","iconName","getLabels","mainLabel","closeLabel","openLabel","hasDividerWithButtonBar","drawerContentWidthOpen","undefined","drawerContentWidth","drawerWidth","closeIconName","regularOpenButton","className","toggle","ref","ariaLabel","ariaExpanded","drawer","_b","style","marginRight","paddingRight","event","target","tagName","top","bottom","close"],"sourceRoot":"","sources":["../../../src/app-layout/drawer.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { ButtonProps } from '../button/interfaces';\nimport { AppLayoutButton, CloseButton, togglesConfig } from './toggles';\nimport { AppLayoutProps } from './interfaces';\nimport styles from './styles.css.js';\n\n// This matches the design token awsui.$border-divider-section-width in Visual Refresh\nconst BORDER_WIDTH = 2;\n\nexport interface DesktopDrawerProps {\n  contentClassName?: string;\n  toggleClassName?: string;\n  closeClassName?: string;\n  toggleRefs: {\n    toggle: React.Ref<ButtonProps.Ref>;\n    close: React.Ref<ButtonProps.Ref>;\n  };\n  externalizedToggle?: boolean;\n  width: number;\n  topOffset?: number;\n  bottomOffset?: number;\n  ariaLabels?: AppLayoutProps.Labels;\n  children: React.ReactNode;\n  type: keyof typeof togglesConfig;\n  isMobile?: boolean;\n  isOpen?: boolean;\n  isHidden?: boolean;\n  hasDividerWithSplitPanel?: boolean;\n  onToggle: (isOpen: boolean) => void;\n  onClick?: (event: React.MouseEvent) => void;\n  extendRight?: number;\n}\n\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\n\nexport function Drawer({\n  contentClassName,\n  toggleClassName,\n  closeClassName,\n  width,\n  type,\n  toggleRefs,\n  topOffset,\n  bottomOffset,\n  ariaLabels,\n  children,\n  isOpen,\n  isHidden,\n  isMobile,\n  hasDividerWithSplitPanel,\n  onToggle,\n  onClick,\n  extendRight = 0,\n}: DesktopDrawerProps) {\n  const { TagName, iconName, getLabels } = togglesConfig[type];\n  const { mainLabel, closeLabel, openLabel } = getLabels(ariaLabels);\n  const hasDividerWithButtonBar = isOpen && extendRight !== 0;\n\n  const drawerContentWidthOpen = isMobile ? undefined : width;\n  const drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n\n  const drawerWidth =\n    hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;\n\n  const closeIconName = 'close';\n\n  const regularOpenButton = (\n    <TagName aria-label={mainLabel} className={styles.toggle} aria-hidden={isOpen}>\n      <AppLayoutButton\n        ref={toggleRefs.toggle}\n        className={toggleClassName}\n        iconName={iconName}\n        ariaLabel={openLabel}\n        onClick={() => onToggle(true)}\n        ariaExpanded={false}\n      />\n    </TagName>\n  );\n\n  return (\n    <div\n      className={clsx(styles.drawer, {\n        [styles['drawer-closed']]: !isOpen,\n        [styles['drawer-hidden']]: isHidden,\n        [styles['drawer-mobile']]: isMobile,\n        [styles['has-divider-with-splitpanel']]: hasDividerWithSplitPanel,\n        [styles['opaque-background']]: hasDividerWithButtonBar,\n      })}\n      style={{\n        width: drawerWidth,\n        marginRight: isOpen ? -1 * extendRight : 0,\n        paddingRight: isOpen ? extendRight : 0,\n      }}\n      onClick={event => {\n        if (onClick) {\n          onClick(event);\n        }\n\n        if (!isOpen) {\n          // to prevent calling onToggle from the drawer when it's called from the toggle button\n          if ((event.target as Element).tagName !== 'BUTTON') {\n            onToggle(true);\n          }\n        }\n      }}\n    >\n      <div\n        style={{ width: drawerContentWidth, top: topOffset, bottom: bottomOffset }}\n        className={clsx(styles['drawer-content'], contentClassName)}\n      >\n        {!isMobile && regularOpenButton}\n        <TagName aria-label={mainLabel} aria-hidden={!isOpen}>\n          <CloseButton\n            ref={toggleRefs.close}\n            className={closeClassName}\n            ariaLabel={closeLabel}\n            onClick={() => onToggle(false)}\n            iconName={closeIconName}\n          />\n          {children}\n        </TagName>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}