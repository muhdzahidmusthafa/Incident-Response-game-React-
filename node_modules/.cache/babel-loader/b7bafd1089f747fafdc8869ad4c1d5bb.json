{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, createContext } from 'react';\nexport var FormFieldContext = createContext({});\n\nfunction applyDefault(fields, defaults, keys) {\n  var result = {};\n  keys.forEach(function (key) {\n    result[key] = fields[key] === undefined ? defaults[key] : fields[key];\n  });\n  return result;\n}\n\nexport function useFormFieldContext(props) {\n  var context = useContext(FormFieldContext);\n  return applyDefault(props, context, ['invalid', 'controlId', 'ariaLabelledby', 'ariaDescribedby']);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,aAArB,QAA0C,OAA1C;AA+CA,OAAO,IAAMC,gBAAgB,GAAGD,aAAa,CAAkC,EAAlC,CAAtC;;AAEP,SAASE,YAAT,CAAyBC,MAAzB,EAAoCC,QAApC,EAAiDC,IAAjD,EAAkE;EAChE,IAAMC,MAAM,GAAM,EAAlB;EACAD,IAAI,CAACE,OAAL,CAAa,eAAG;IACdD,MAAM,CAACE,GAAD,CAAN,GAAcL,MAAM,CAACK,GAAD,CAAN,KAAgBC,SAAhB,GAA4BL,QAAQ,CAACI,GAAD,CAApC,GAA4CL,MAAM,CAACK,GAAD,CAAhE;EACD,CAFD;EAGA,OAAOF,MAAP;AACD;;AAED,OAAM,SAAUI,mBAAV,CAA8BC,KAA9B,EAAoE;EACxE,IAAMC,OAAO,GAAGb,UAAU,CAACE,gBAAD,CAA1B;EACA,OAAOC,YAAY,CAACS,KAAD,EAAQC,OAAR,EAAiB,CAAC,SAAD,EAAY,WAAZ,EAAyB,gBAAzB,EAA2C,iBAA3C,CAAjB,CAAnB;AACD","names":["useContext","createContext","FormFieldContext","applyDefault","fields","defaults","keys","result","forEach","key","undefined","useFormFieldContext","props","context"],"sourceRoot":"","sources":["../../../../src/internal/context/form-field-context.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, createContext } from 'react';\n\nexport interface FormFieldControlProps {\n  /**\n   * Specifies the ID of the native form element. You can use it to relate\n   * a label element's `for` attribute to this control.\n   *\n   * It defaults to an automatically generated ID that\n   * is provided by its parent form field component.\n   */\n  controlId?: string;\n\n  /**\n   * Adds `aria-labelledby` to the component. If you're using this component within a form field,\n   * don't set this property because the form field component automatically sets it.\n   *\n   * Use this property if the component isn't surrounded by a form field, or you want to override the value\n   * automatically set by the form field (for example, if you have two components within a single form field).\n   *\n   * To use it correctly, define an ID for the element you want to use as label and set the property to that ID.\n   */\n  ariaLabelledby?: string;\n\n  /**\n   * Adds `aria-describedby` to the component. If you're using this component within a form field,\n   * don't set this property because the form field component automatically sets it.\n   *\n   * Use this property if the component isn't surrounded by a form field, or you want to override the value\n   * automatically set by the form field (for example, if you have two components within a single form field).\n   *\n   * To use it correctly, define an ID for each element that you want to use as a description\n   * and set the property to a string of each ID separated by spaces (for example, `\"id1 id2 id3\"`).\n   */\n  ariaDescribedby?: string;\n}\n\nexport interface FormFieldValidationControlProps extends FormFieldControlProps {\n  /**\n   * Overrides the invalidation state. Usually the invalid state\n   * comes from the parent `FormField`component,\n   * however sometimes you need to override its\n   * state when you have more than one input within a\n   * single form field.\n   */\n  invalid?: boolean;\n}\n\nexport const FormFieldContext = createContext<FormFieldValidationControlProps>({});\n\nfunction applyDefault<T>(fields: T, defaults: T, keys: (keyof T)[]) {\n  const result = <T>{};\n  keys.forEach(key => {\n    result[key] = fields[key] === undefined ? defaults[key] : fields[key];\n  });\n  return result;\n}\n\nexport function useFormFieldContext(props: FormFieldValidationControlProps) {\n  const context = useContext(FormFieldContext);\n  return applyDefault(props, context, ['invalid', 'controlId', 'ariaLabelledby', 'ariaDescribedby']);\n}\n"]},"metadata":{},"sourceType":"module"}