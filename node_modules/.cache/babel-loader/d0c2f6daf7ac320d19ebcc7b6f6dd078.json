{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport OptionsList from '../../internal/components/options-list';\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { renderOptions } from '../utils/render-options';\nimport { scrollUntilVisible } from '../../internal/utils/scrollable-containers';\nimport styles from './styles.css.js';\n\nvar PlainList = function (_a, ref) {\n  var menuProps = _a.menuProps,\n      getOptionProps = _a.getOptionProps,\n      filteredOptions = _a.filteredOptions,\n      filteringValue = _a.filteringValue,\n      isKeyboard = _a.isKeyboard,\n      checkboxes = _a.checkboxes,\n      hasDropdownStatus = _a.hasDropdownStatus,\n      listBottom = _a.listBottom,\n      useInteractiveGroups = _a.useInteractiveGroups,\n      screenReaderContent = _a.screenReaderContent;\n  var menuRef = menuProps.ref;\n  useImperativeHandle(ref, function () {\n    return function (index) {\n      var _a;\n\n      var item = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(\"[data-mouse-target=\\\"\".concat(index, \"\\\"]\"));\n\n      if (isKeyboard && item) {\n        scrollUntilVisible(item);\n      }\n    };\n  }, [isKeyboard, menuRef]);\n  return React.createElement(OptionsList, __assign({}, menuProps), renderOptions({\n    options: filteredOptions,\n    getOptionProps: getOptionProps,\n    filteringValue: filteringValue,\n    isKeyboard: isKeyboard,\n    checkboxes: checkboxes,\n    hasDropdownStatus: hasDropdownStatus,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: screenReaderContent\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n};\n\nexport default forwardRef(PlainList);","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,WAAP,MAAwB,wCAAxB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,mBAA5B,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,yBAA9B;AAGA,SAASC,kBAAT,QAAmC,4CAAnC;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;;AAmBA,IAAMC,SAAS,GAAG,UAChBC,EADgB,EAahBC,GAbgB,EAa6B;MAX3CC,SAAS;MACTC,cAAc;MACdC,eAAe;MACfC,cAAc;MACdC,UAAU;MACVC,UAAU;MACVC,iBAAiB;MACjBC,UAAU;MACVC,oBAAoB;MACpBC,mBAAmB;EAIrB,IAAMC,OAAO,GAAGV,SAAS,CAACD,GAA1B;EACAN,mBAAmB,CACjBM,GADiB,EAEjB;IAAM,iBAACY,KAAD,EAAc;;;MAClB,IAAMC,IAAI,GAAG,aAAO,CAACC,OAAR,MAAe,IAAf,IAAef,aAAf,GAAe,MAAf,GAAeA,GAAEgB,aAAF,CAAgB,+BAAuBH,KAAvB,EAA4B,KAA5B,CAAhB,CAA5B;;MACA,IAAIP,UAAU,IAAIQ,IAAlB,EAAwB;QACtBjB,kBAAkB,CAACiB,IAAD,CAAlB;MACD;IACF,CALK;EAKL,CAPgB,EAQjB,CAACR,UAAD,EAAaM,OAAb,CARiB,CAAnB;EAWA,OACEnB,oBAACD,WAAD,EAAYyB,aAAKf,SAAL,CAAZ,EACGN,aAAa,CAAC;IACbsB,OAAO,EAAEd,eADI;IAEbD,cAAc,gBAFD;IAGbE,cAAc,gBAHD;IAIbC,UAAU,YAJG;IAKbC,UAAU,YALG;IAMbC,iBAAiB,mBANJ;IAObE,oBAAoB,sBAPP;IAQbC,mBAAmB;EARN,CAAD,CADhB,EAWGF,UAAU,GACThB;IAAI0B,IAAI,EAAC,QAAT;IAAkBC,SAAS,EAAEtB,MAAM,CAAC,aAAD;EAAnC,GACGW,UADH,CADS,GAIP,IAfN,CADF;AAmBD,CA9CD;;AAgDA,eAAef,UAAU,CAACK,SAAD,CAAzB","names":["OptionsList","React","forwardRef","useImperativeHandle","renderOptions","scrollUntilVisible","styles","PlainList","_a","ref","menuProps","getOptionProps","filteredOptions","filteringValue","isKeyboard","checkboxes","hasDropdownStatus","listBottom","useInteractiveGroups","screenReaderContent","menuRef","index","item","current","querySelector","__assign","options","role","className"],"sourceRoot":"","sources":["../../../../src/select/parts/plain-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport OptionsList from '../../internal/components/options-list';\nimport React, { forwardRef, useImperativeHandle } from 'react';\nimport { renderOptions } from '../utils/render-options';\nimport { MenuProps, GetOptionProps } from '../utils/use-select';\nimport { DropdownOption } from '../../internal/components/option/interfaces';\nimport { scrollUntilVisible } from '../../internal/utils/scrollable-containers';\n\nimport styles from './styles.css.js';\n\nexport interface SelectListProps {\n  menuProps: MenuProps;\n  getOptionProps: GetOptionProps;\n  filteredOptions: ReadonlyArray<DropdownOption>;\n  filteringValue: string;\n  isKeyboard: boolean;\n  checkboxes?: boolean;\n  hasDropdownStatus?: boolean;\n  listBottom?: React.ReactNode;\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n}\n\nexport namespace SelectListProps {\n  export type SelectListRef = (index: number) => void;\n}\n\nconst PlainList = (\n  {\n    menuProps,\n    getOptionProps,\n    filteredOptions,\n    filteringValue,\n    isKeyboard,\n    checkboxes,\n    hasDropdownStatus,\n    listBottom,\n    useInteractiveGroups,\n    screenReaderContent,\n  }: SelectListProps,\n  ref: React.Ref<SelectListProps.SelectListRef>\n) => {\n  const menuRef = menuProps.ref;\n  useImperativeHandle(\n    ref,\n    () => (index: number) => {\n      const item = menuRef.current?.querySelector(`[data-mouse-target=\"${index}\"]`);\n      if (isKeyboard && item) {\n        scrollUntilVisible(item as HTMLElement);\n      }\n    },\n    [isKeyboard, menuRef]\n  );\n\n  return (\n    <OptionsList {...menuProps}>\n      {renderOptions({\n        options: filteredOptions,\n        getOptionProps,\n        filteringValue,\n        isKeyboard,\n        checkboxes,\n        hasDropdownStatus,\n        useInteractiveGroups,\n        screenReaderContent,\n      })}\n      {listBottom ? (\n        <li role=\"option\" className={styles['list-bottom']}>\n          {listBottom}\n        </li>\n      ) : null}\n    </OptionsList>\n  );\n};\n\nexport default forwardRef(PlainList);\n"]},"metadata":{},"sourceType":"module"}