{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../../base-component';\nimport { applyDisplayName } from '../../utils/apply-display-name';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport InternalButtonDropdown from '../../../button-dropdown/internal';\nimport InternalIcon from '../../../icon/internal';\nimport buttonDropdownStyles from '../../../button-dropdown/styles.css.js';\nimport styles from './styles.css.js';\nexport var ButtonTrigger = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var iconName = _a.iconName,\n      iconUrl = _a.iconUrl,\n      iconAlt = _a.iconAlt,\n      iconSvg = _a.iconSvg,\n      badge = _a.badge,\n      ariaLabel = _a.ariaLabel,\n      offsetRight = _a.offsetRight,\n      disabled = _a.disabled,\n      expanded = _a.expanded,\n      children = _a.children,\n      onClick = _a.onClick;\n  var focusVisible = useFocusVisible();\n  var hasIcon = iconName || iconUrl || iconSvg;\n  return React.createElement(\"button\", __assign({}, focusVisible, {\n    ref: ref,\n    type: \"button\",\n    className: clsx(styles.button, styles[\"offset-right-\".concat(offsetRight)], (_b = {}, _b[styles.expanded] = expanded, _b)),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": !!expanded,\n    \"aria-haspopup\": true,\n    disabled: disabled,\n    onClick: function (event) {\n      event.preventDefault();\n      onClick && onClick();\n    }\n  }), hasIcon && React.createElement(InternalIcon, {\n    className: styles.icon,\n    name: iconName,\n    url: iconUrl,\n    alt: iconAlt,\n    svg: iconSvg,\n    badge: badge\n  }), children && React.createElement(\"span\", {\n    className: styles.text\n  }, children), children && React.createElement(InternalIcon, {\n    name: \"caret-down-filled\",\n    className: expanded ? buttonDropdownStyles['rotate-up'] : buttonDropdownStyles['rotate-down']\n  }));\n});\n\nvar MenuDropdown = function (_a) {\n  var iconName = _a.iconName,\n      iconUrl = _a.iconUrl,\n      iconAlt = _a.iconAlt,\n      iconSvg = _a.iconSvg,\n      badge = _a.badge,\n      ariaLabel = _a.ariaLabel,\n      offsetRight = _a.offsetRight,\n      children = _a.children,\n      props = __rest(_a, [\"iconName\", \"iconUrl\", \"iconAlt\", \"iconSvg\", \"badge\", \"ariaLabel\", \"offsetRight\", \"children\"]);\n\n  var baseProps = getBaseProps(props);\n\n  var dropdownTrigger = function (clickHandler, ref, isDisabled, isExpanded) {\n    return React.createElement(ButtonTrigger, {\n      ref: ref,\n      disabled: isDisabled,\n      expanded: isExpanded,\n      iconName: iconName,\n      iconUrl: iconUrl,\n      iconAlt: iconAlt,\n      iconSvg: iconSvg,\n      badge: badge,\n      ariaLabel: ariaLabel,\n      offsetRight: offsetRight,\n      onClick: clickHandler\n    }, children);\n  };\n\n  return React.createElement(InternalButtonDropdown, __assign({}, baseProps, props, {\n    variant: \"navigation\",\n    customTriggerBuilder: dropdownTrigger,\n    preferCenter: true\n  }));\n};\n\napplyDisplayName(MenuDropdown, 'MenuDropdown');\nexport default MenuDropdown;","map":{"version":3,"mappings":"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","names":["clsx","React","getBaseProps","applyDisplayName","useFocusVisible","InternalButtonDropdown","InternalIcon","buttonDropdownStyles","styles","ButtonTrigger","forwardRef","_a","ref","iconName","iconUrl","iconAlt","iconSvg","badge","ariaLabel","offsetRight","disabled","expanded","children","onClick","focusVisible","hasIcon","type","className","button","_b","event","preventDefault","icon","name","url","alt","svg","text","MenuDropdown","props","baseProps","dropdownTrigger","clickHandler","isDisabled","isExpanded","__assign","variant","customTriggerBuilder","preferCenter"],"sourceRoot":"","sources":["../../../../../src/internal/components/menu-dropdown/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { MenuDropdownProps, ButtonTriggerProps } from './interfaces';\nimport { getBaseProps } from '../../base-component';\nimport { applyDisplayName } from '../../utils/apply-display-name';\nimport useFocusVisible from '../../hooks/focus-visible';\nimport InternalButtonDropdown from '../../../button-dropdown/internal';\nimport InternalIcon from '../../../icon/internal';\nimport buttonDropdownStyles from '../../../button-dropdown/styles.css.js';\nimport styles from './styles.css.js';\n\nexport { MenuDropdownProps };\n\nexport const ButtonTrigger = React.forwardRef(\n  (\n    {\n      iconName,\n      iconUrl,\n      iconAlt,\n      iconSvg,\n      badge,\n      ariaLabel,\n      offsetRight,\n      disabled,\n      expanded,\n      children,\n      onClick,\n    }: ButtonTriggerProps,\n    ref: React.Ref<any>\n  ) => {\n    const focusVisible = useFocusVisible();\n    const hasIcon = iconName || iconUrl || iconSvg;\n\n    return (\n      <button\n        {...focusVisible}\n        ref={ref}\n        type=\"button\"\n        className={clsx(styles.button, styles[`offset-right-${offsetRight}`], { [styles.expanded]: expanded })}\n        aria-label={ariaLabel}\n        aria-expanded={!!expanded}\n        aria-haspopup={true}\n        disabled={disabled}\n        onClick={event => {\n          event.preventDefault();\n          onClick && onClick();\n        }}\n      >\n        {hasIcon && (\n          <InternalIcon\n            className={styles.icon}\n            name={iconName}\n            url={iconUrl}\n            alt={iconAlt}\n            svg={iconSvg}\n            badge={badge}\n          />\n        )}\n        {children && <span className={styles.text}>{children}</span>}\n        {children && (\n          <InternalIcon\n            name=\"caret-down-filled\"\n            className={expanded ? buttonDropdownStyles['rotate-up'] : buttonDropdownStyles['rotate-down']}\n          />\n        )}\n      </button>\n    );\n  }\n);\n\nconst MenuDropdown = ({\n  iconName,\n  iconUrl,\n  iconAlt,\n  iconSvg,\n  badge,\n  ariaLabel,\n  offsetRight,\n  children,\n  ...props\n}: MenuDropdownProps) => {\n  const baseProps = getBaseProps(props);\n\n  const dropdownTrigger = (clickHandler: () => void, ref: React.Ref<any>, isDisabled: boolean, isExpanded: boolean) => {\n    return (\n      <ButtonTrigger\n        ref={ref}\n        disabled={isDisabled}\n        expanded={isExpanded}\n        iconName={iconName}\n        iconUrl={iconUrl}\n        iconAlt={iconAlt}\n        iconSvg={iconSvg}\n        badge={badge}\n        ariaLabel={ariaLabel}\n        offsetRight={offsetRight}\n        onClick={clickHandler}\n      >\n        {children}\n      </ButtonTrigger>\n    );\n  };\n\n  return (\n    <InternalButtonDropdown\n      {...baseProps}\n      {...props}\n      variant=\"navigation\"\n      customTriggerBuilder={dropdownTrigger}\n      preferCenter={true}\n    />\n  );\n};\n\napplyDisplayName(MenuDropdown, 'MenuDropdown');\nexport default MenuDropdown;\n"]},"metadata":{},"sourceType":"module"}