{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport styles from './styles.css.js';\nimport { ExpandableSectionContainer } from './expandable-section-container';\nimport { ExpandableSectionHeader } from './expandable-section-header';\nexport default function InternalExpandableSection(_a) {\n  var controlledExpanded = _a.expanded,\n      defaultExpanded = _a.defaultExpanded,\n      onChange = _a.onChange,\n      _b = _a.variant,\n      variant = _b === void 0 ? 'default' : _b,\n      children = _a.children,\n      header = _a.header,\n      disableContentPaddings = _a.disableContentPaddings,\n      __internalRootRef = _a.__internalRootRef,\n      props = __rest(_a, [\"expanded\", \"defaultExpanded\", \"onChange\", \"variant\", \"children\", \"header\", \"disableContentPaddings\", \"__internalRootRef\"]);\n\n  var ref = useRef(null);\n  var controlId = useUniqueId();\n  var triggerControlId = \"\".concat(controlId, \"-trigger\");\n  var baseProps = getBaseProps(props);\n\n  var _c = useControllable(controlledExpanded, onChange, defaultExpanded, {\n    componentName: 'ExpandableSection',\n    controlledProp: 'expanded',\n    changeHandler: 'onChange'\n  }),\n      expanded = _c[0],\n      setExpanded = _c[1];\n\n  var onExpandChange = useCallback(function (expanded) {\n    setExpanded(expanded);\n    fireNonCancelableEvent(onChange, {\n      expanded: expanded\n    });\n  }, [onChange, setExpanded]);\n  var onClick = useCallback(function () {\n    onExpandChange(!expanded);\n  }, [onExpandChange, expanded]);\n  var onKeyUp = useCallback(function (event) {\n    var interactionKeys = [KeyCode.enter, KeyCode.space];\n\n    if (interactionKeys.indexOf(event.keyCode) !== -1) {\n      onExpandChange(!expanded);\n    }\n  }, [onExpandChange, expanded]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.keyCode === KeyCode.space) {\n      // Prevent the page from scrolling when toggling the component with the space bar.\n      event.preventDefault();\n    }\n  }, []);\n  var triggerProps = {\n    ariaControls: controlId,\n    ariaLabelledBy: triggerControlId,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onClick: onClick\n  };\n  return React.createElement(ExpandableSectionContainer, __assign({}, baseProps, {\n    expanded: expanded,\n    className: clsx(baseProps.className, styles.root),\n    variant: variant,\n    disableContentPaddings: disableContentPaddings,\n    header: React.createElement(ExpandableSectionHeader, __assign({\n      id: triggerControlId,\n      className: clsx(styles.header, styles[\"header-\".concat(variant)]),\n      variant: variant,\n      expanded: !!expanded\n    }, triggerProps), header),\n    __internalRootRef: __internalRootRef\n  }), React.createElement(CSSTransition, {\n    \"in\": expanded,\n    timeout: 30,\n    classNames: {\n      enter: styles['content-enter']\n    },\n    nodeRef: ref\n  }, React.createElement(\"div\", {\n    id: controlId,\n    ref: ref,\n    className: clsx(styles.content, styles[\"content-\".concat(variant)], expanded && styles['content-expanded']),\n    role: \"group\",\n    \"aria-labelledby\": triggerControlId\n  }, children)));\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useRef","CSSTransition","clsx","getBaseProps","useControllable","useUniqueId","KeyCode","fireNonCancelableEvent","styles","ExpandableSectionContainer","ExpandableSectionHeader","InternalExpandableSection","_a","controlledExpanded","defaultExpanded","onChange","_b","variant","children","header","disableContentPaddings","__internalRootRef","props","ref","controlId","triggerControlId","baseProps","componentName","controlledProp","changeHandler","expanded","setExpanded","onExpandChange","onClick","onKeyUp","event","interactionKeys","enter","space","indexOf","keyCode","onKeyDown","preventDefault","triggerProps","ariaControls","ariaLabelledBy","__assign","className","root","id","timeout","classNames","nodeRef","content","role"],"sourceRoot":"","sources":["../../../src/expandable-section/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { KeyboardEvent, useCallback, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\n\nimport { ExpandableSectionProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport { ExpandableSectionContainer } from './expandable-section-container';\nimport { ExpandableSectionHeader } from './expandable-section-header';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ntype InternalExpandableSectionProps = ExpandableSectionProps & InternalBaseComponentProps;\n\nexport default function InternalExpandableSection({\n  expanded: controlledExpanded,\n  defaultExpanded,\n  onChange,\n  variant = 'default',\n  children,\n  header,\n  disableContentPaddings,\n  __internalRootRef,\n  ...props\n}: InternalExpandableSectionProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const controlId = useUniqueId();\n  const triggerControlId = `${controlId}-trigger`;\n\n  const baseProps = getBaseProps(props);\n  const [expanded, setExpanded] = useControllable(controlledExpanded, onChange, defaultExpanded, {\n    componentName: 'ExpandableSection',\n    controlledProp: 'expanded',\n    changeHandler: 'onChange',\n  });\n\n  const onExpandChange = useCallback(\n    (expanded: boolean) => {\n      setExpanded(expanded);\n      fireNonCancelableEvent(onChange, { expanded });\n    },\n    [onChange, setExpanded]\n  );\n\n  const onClick = useCallback(() => {\n    onExpandChange(!expanded);\n  }, [onExpandChange, expanded]);\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent<Element>) => {\n      const interactionKeys = [KeyCode.enter, KeyCode.space];\n\n      if (interactionKeys.indexOf(event.keyCode) !== -1) {\n        onExpandChange(!expanded);\n      }\n    },\n    [onExpandChange, expanded]\n  );\n\n  const onKeyDown = useCallback((event: KeyboardEvent<Element>) => {\n    if (event.keyCode === KeyCode.space) {\n      // Prevent the page from scrolling when toggling the component with the space bar.\n      event.preventDefault();\n    }\n  }, []);\n\n  const triggerProps = {\n    ariaControls: controlId,\n    ariaLabelledBy: triggerControlId,\n    onKeyUp,\n    onKeyDown,\n    onClick,\n  };\n\n  return (\n    <ExpandableSectionContainer\n      {...baseProps}\n      expanded={expanded}\n      className={clsx(baseProps.className, styles.root)}\n      variant={variant}\n      disableContentPaddings={disableContentPaddings}\n      header={\n        <ExpandableSectionHeader\n          id={triggerControlId}\n          className={clsx(styles.header, styles[`header-${variant}`])}\n          variant={variant}\n          expanded={!!expanded}\n          {...triggerProps}\n        >\n          {header}\n        </ExpandableSectionHeader>\n      }\n      __internalRootRef={__internalRootRef}\n    >\n      <CSSTransition in={expanded} timeout={30} classNames={{ enter: styles['content-enter'] }} nodeRef={ref}>\n        <div\n          id={controlId}\n          ref={ref}\n          className={clsx(styles.content, styles[`content-${variant}`], expanded && styles['content-expanded'])}\n          role=\"group\"\n          aria-labelledby={triggerControlId}\n        >\n          {children}\n        </div>\n      </CSSTransition>\n    </ExpandableSectionContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}