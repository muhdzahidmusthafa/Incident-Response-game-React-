{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useImperativeHandle, useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalInput from './internal';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nvar Input = React.forwardRef(function (_a, ref) {\n  var value = _a.value,\n      _b = _a.type,\n      type = _b === void 0 ? 'text' : _b,\n      step = _a.step,\n      inputMode = _a.inputMode,\n      _c = _a.autoComplete,\n      autoComplete = _c === void 0 ? true : _c,\n      disabled = _a.disabled,\n      readOnly = _a.readOnly,\n      disableBrowserAutocorrect = _a.disableBrowserAutocorrect,\n      onKeyDown = _a.onKeyDown,\n      onKeyUp = _a.onKeyUp,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      ariaRequired = _a.ariaRequired,\n      name = _a.name,\n      placeholder = _a.placeholder,\n      autoFocus = _a.autoFocus,\n      ariaLabel = _a.ariaLabel,\n      rest = __rest(_a, [\"value\", \"type\", \"step\", \"inputMode\", \"autoComplete\", \"disabled\", \"readOnly\", \"disableBrowserAutocorrect\", \"onKeyDown\", \"onKeyUp\", \"onChange\", \"onBlur\", \"onFocus\", \"ariaRequired\", \"name\", \"placeholder\", \"autoFocus\", \"ariaLabel\"]);\n\n  var baseComponentProps = useBaseComponent('Input');\n  var baseProps = getBaseProps(rest);\n\n  var _d = useFormFieldContext(rest),\n      ariaLabelledby = _d.ariaLabelledby,\n      ariaDescribedby = _d.ariaDescribedby,\n      controlId = _d.controlId,\n      invalid = _d.invalid;\n\n  var inputRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        var _a;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus.apply(_a, args);\n      },\n      select: function () {\n        var _a;\n\n        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.select();\n      }\n    };\n  }, [inputRef]);\n  return React.createElement(InternalInput, __assign({\n    ref: inputRef\n  }, __assign(__assign(__assign({}, baseProps), baseComponentProps), {\n    autoComplete: autoComplete,\n    ariaLabel: ariaLabel,\n    ariaDescribedby: ariaDescribedby,\n    ariaLabelledby: ariaLabelledby,\n    ariaRequired: ariaRequired,\n    autoFocus: autoFocus,\n    controlId: controlId,\n    disabled: disabled,\n    disableBrowserAutocorrect: disableBrowserAutocorrect,\n    invalid: invalid,\n    name: name,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onChange: onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    readOnly: readOnly,\n    type: type,\n    step: step,\n    inputMode: inputMode,\n    value: value\n  }), {\n    className: clsx(styles.root, baseProps.className)\n  }));\n});\napplyDisplayName(Input, 'Input');\nexport default Input;","map":{"version":3,"mappings":"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","names":["clsx","React","useImperativeHandle","useRef","getBaseProps","InternalInput","useFormFieldContext","styles","applyDisplayName","useBaseComponent","Input","forwardRef","_a","ref","_b","type","step","inputMode","_c","autoComplete","disabled","readOnly","disableBrowserAutocorrect","onKeyDown","onKeyUp","onChange","onBlur","onFocus","ariaRequired","name","placeholder","autoFocus","ariaLabel","rest","baseComponentProps","baseProps","ariaLabelledby","ariaDescribedby","controlId","invalid","inputRef","focus","args","current","apply","select","__assign","value","className","root"],"sourceRoot":"","sources":["../../../src/input/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { Ref, useImperativeHandle, useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalInput from './internal';\nimport { InputProps } from './interfaces';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nexport { InputProps };\n\nconst Input = React.forwardRef(\n  (\n    {\n      value,\n      type = 'text',\n      step,\n      inputMode,\n      autoComplete = true,\n      disabled,\n      readOnly,\n      disableBrowserAutocorrect,\n      onKeyDown,\n      onKeyUp,\n      onChange,\n      onBlur,\n      onFocus,\n      ariaRequired,\n      name,\n      placeholder,\n      autoFocus,\n      ariaLabel,\n      ...rest\n    }: InputProps,\n    ref: Ref<InputProps.Ref>\n  ) => {\n    const baseComponentProps = useBaseComponent('Input');\n    const baseProps = getBaseProps(rest);\n    const { ariaLabelledby, ariaDescribedby, controlId, invalid } = useFormFieldContext(rest);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        focus(...args: Parameters<HTMLElement['focus']>) {\n          inputRef.current?.focus(...args);\n        },\n        select() {\n          inputRef.current?.select();\n        },\n      }),\n      [inputRef]\n    );\n\n    return (\n      <InternalInput\n        ref={inputRef}\n        {...{\n          ...baseProps,\n          ...baseComponentProps,\n          autoComplete,\n          ariaLabel,\n          ariaDescribedby,\n          ariaLabelledby,\n          ariaRequired,\n          autoFocus,\n          controlId,\n          disabled,\n          disableBrowserAutocorrect,\n          invalid,\n          name,\n          onKeyDown,\n          onKeyUp,\n          onChange,\n          onBlur,\n          onFocus,\n          placeholder,\n          readOnly,\n          type,\n          step,\n          inputMode,\n          value,\n        }}\n        className={clsx(styles.root, baseProps.className)}\n      />\n    );\n  }\n);\n\napplyDisplayName(Input, 'Input');\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}