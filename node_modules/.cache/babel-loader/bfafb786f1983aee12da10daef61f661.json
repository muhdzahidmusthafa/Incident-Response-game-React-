{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport InternalIcon from '../icon/internal';\nimport InternalSpinner from '../spinner/internal';\nimport styles from './styles.css.js';\n\nfunction getIconAlign(props) {\n  var standalone = props.variant === 'icon' || props.variant === 'inline-icon';\n  return standalone ? 'left' : props.iconAlign;\n}\n\nfunction IconWrapper(_a) {\n  var iconName = _a.iconName,\n      iconUrl = _a.iconUrl,\n      iconAlt = _a.iconAlt,\n      iconSvg = _a.iconSvg,\n      iconSize = _a.iconSize,\n      props = __rest(_a, [\"iconName\", \"iconUrl\", \"iconAlt\", \"iconSvg\", \"iconSize\"]);\n\n  if (!iconName && !iconUrl && !iconSvg) {\n    return null;\n  }\n\n  return React.createElement(InternalIcon, {\n    className: clsx(styles.icon, styles[\"icon-\".concat(getIconAlign(props))], props.iconClass),\n    name: iconName,\n    url: iconUrl,\n    svg: iconSvg,\n    alt: iconAlt,\n    size: iconSize\n  });\n}\n\nexport function LeftIcon(props) {\n  if (props.loading) {\n    return React.createElement(InternalSpinner, {\n      className: clsx(styles.icon, styles['icon-left'])\n    });\n  } else if (getIconAlign(props) === 'left') {\n    return React.createElement(IconWrapper, __assign({}, props));\n  }\n\n  return null;\n}\nexport function RightIcon(props) {\n  if (getIconAlign(props) === 'right') {\n    return React.createElement(IconWrapper, __assign({}, props));\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;;AAcA,SAASC,YAAT,CAAsBC,KAAtB,EAA4C;EAC1C,IAAMC,UAAU,GAAGD,KAAK,CAACE,OAAN,KAAkB,MAAlB,IAA4BF,KAAK,CAACE,OAAN,KAAkB,aAAjE;EAEA,OAAOD,UAAU,GAAG,MAAH,GAAYD,KAAK,CAACG,SAAnC;AACD;;AAED,SAASC,WAAT,CAAqBC,EAArB,EAAiG;EAA1E,YAAQ,cAAR;EAAA,IAAUC,OAAO,aAAjB;EAAA,IAAmBC,OAAO,aAA1B;EAAA,IAA4BC,OAAO,aAAnC;EAAA,IAAqCC,QAAQ,cAA7C;EAAA,IAAkDT,KAAK,cAAzD,yDAAyD,CAAvD;;EACrB,IAAI,CAACU,QAAD,IAAa,CAACJ,OAAd,IAAyB,CAACE,OAA9B,EAAuC;IACrC,OAAO,IAAP;EACD;;EAED,OACEb,oBAACC,YAAD,EAAa;IACXe,SAAS,EAAEjB,IAAI,CAACI,MAAM,CAACc,IAAR,EAAcd,MAAM,CAAC,eAAQC,YAAY,CAACC,KAAD,CAApB,CAAD,CAApB,EAAqDA,KAAK,CAACa,SAA3D,CADJ;IAEXC,IAAI,EAAEJ,QAFK;IAGXK,GAAG,EAAET,OAHM;IAIXU,GAAG,EAAER,OAJM;IAKXS,GAAG,EAAEV,OALM;IAMXW,IAAI,EAAET;EANK,CAAb,CADF;AAUD;;AAED,OAAM,SAAUU,QAAV,CAAmBnB,KAAnB,EAAyC;EAC7C,IAAIA,KAAK,CAACoB,OAAV,EAAmB;IACjB,OAAOzB,oBAACE,eAAD,EAAgB;MAACc,SAAS,EAAEjB,IAAI,CAACI,MAAM,CAACc,IAAR,EAAcd,MAAM,CAAC,WAAD,CAApB;IAAhB,CAAhB,CAAP;EACD,CAFD,MAEO,IAAIC,YAAY,CAACC,KAAD,CAAZ,KAAwB,MAA5B,EAAoC;IACzC,OAAOL,oBAACS,WAAD,EAAYiB,aAAKrB,KAAL,CAAZ,CAAP;EACD;;EACD,OAAO,IAAP;AACD;AAED,OAAM,SAAUsB,SAAV,CAAoBtB,KAApB,EAA0C;EAC9C,IAAID,YAAY,CAACC,KAAD,CAAZ,KAAwB,OAA5B,EAAqC;IACnC,OAAOL,oBAACS,WAAD,EAAYiB,aAAKrB,KAAL,CAAZ,CAAP;EACD;;EACD,OAAO,IAAP;AACD","names":["clsx","React","InternalIcon","InternalSpinner","styles","getIconAlign","props","standalone","variant","iconAlign","IconWrapper","_a","iconUrl","iconAlt","iconSvg","iconSize","iconName","className","icon","iconClass","name","url","svg","alt","size","LeftIcon","loading","__assign","RightIcon"],"sourceRoot":"","sources":["../../../src/button/icon-helper.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { IconProps } from '../icon/interfaces';\nimport InternalIcon from '../icon/internal';\nimport InternalSpinner from '../spinner/internal';\nimport { ButtonProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport interface ButtonIconProps {\n  loading?: boolean;\n  iconName?: ButtonProps['iconName'];\n  iconAlign?: ButtonProps['iconAlign'];\n  iconUrl?: string;\n  iconSvg?: React.ReactNode;\n  iconAlt?: string;\n  iconSize?: IconProps.Size;\n  variant?: string;\n  iconClass?: string;\n}\n\nfunction getIconAlign(props: ButtonIconProps) {\n  const standalone = props.variant === 'icon' || props.variant === 'inline-icon';\n\n  return standalone ? 'left' : props.iconAlign;\n}\n\nfunction IconWrapper({ iconName, iconUrl, iconAlt, iconSvg, iconSize, ...props }: ButtonIconProps) {\n  if (!iconName && !iconUrl && !iconSvg) {\n    return null;\n  }\n\n  return (\n    <InternalIcon\n      className={clsx(styles.icon, styles[`icon-${getIconAlign(props)}`], props.iconClass)}\n      name={iconName}\n      url={iconUrl}\n      svg={iconSvg}\n      alt={iconAlt}\n      size={iconSize}\n    />\n  );\n}\n\nexport function LeftIcon(props: ButtonIconProps) {\n  if (props.loading) {\n    return <InternalSpinner className={clsx(styles.icon, styles['icon-left'])} />;\n  } else if (getIconAlign(props) === 'left') {\n    return <IconWrapper {...props} />;\n  }\n  return null;\n}\n\nexport function RightIcon(props: ButtonIconProps) {\n  if (getIconAlign(props) === 'right') {\n    return <IconWrapper {...props} />;\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}