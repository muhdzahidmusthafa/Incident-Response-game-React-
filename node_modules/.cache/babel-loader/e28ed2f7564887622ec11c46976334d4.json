{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport createCategoryColorScale from '../../internal/utils/create-category-color-scale';\nexport default function createSeriesDecorator(externalSeries) {\n  var colorScale = createCategoryColorScale(externalSeries, function (s) {\n    return s.type === 'threshold';\n  }, function (s) {\n    return s.color || null;\n  });\n\n  var decorateSeries = function (s, index) {\n    var title = s.title;\n    var color = colorScale[index];\n    var markerType = s.type === 'area' ? 'hollow-rectangle' : 'dashed';\n    var formatValue = s.type === 'threshold' ? function () {\n      return s.valueFormatter ? s.valueFormatter(s.y) : s.y;\n    } : function (y, x) {\n      return s.valueFormatter ? s.valueFormatter(y, x) : y;\n    };\n    return {\n      series: s,\n      title: title,\n      color: color,\n      markerType: markerType,\n      formatValue: formatValue\n    };\n  }; // Map external series to internal ones.\n\n\n  var mapping = externalSeries.reduce(function (map, series, index) {\n    map.set(series, decorateSeries(series, index));\n    return map;\n  }, new Map()); // It is inconvenient to use internal series everywhere, that's\n  // why we also provide a decorator function to get the internal series on demand.\n\n  var seriesDecorator = function (series) {\n    return mapping.get(series) || decorateSeries(series, externalSeries.length);\n  };\n\n  return seriesDecorator;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,wBAAP,MAAqC,kDAArC;AAIA,eAAc,SAAUC,qBAAV,CACZC,cADY,EACuC;EAEnD,IAAMC,UAAU,GAAGH,wBAAwB,CACzCE,cADyC,EAEzC,aAAC;IAAI,QAAC,CAACE,IAAF,KAAW,WAAX;EAAsB,CAFc,EAGzC,aAAC;IAAI,QAAC,CAACC,KAAF,IAAW,IAAX;EAAe,CAHqB,CAA3C;;EAMA,IAAMC,cAAc,GAAG,UAACC,CAAD,EAA8BC,KAA9B,EAA2C;IAChE,IAAMC,KAAK,GAAGF,CAAC,CAACE,KAAhB;IACA,IAAMJ,KAAK,GAAGF,UAAU,CAACK,KAAD,CAAxB;IACA,IAAME,UAAU,GAAGH,CAAC,CAACH,IAAF,KAAW,MAAX,GAAoB,kBAApB,GAAyC,QAA5D;IACA,IAAMO,WAAW,GACfJ,CAAC,CAACH,IAAF,KAAW,WAAX,GACI;MAAM,OAACG,CAAC,CAACK,cAAF,GAAmBL,CAAC,CAACK,cAAF,CAAiBL,CAAC,CAACM,CAAnB,CAAnB,GAA2CN,CAAC,CAACM,CAA9C;IAAgD,CAD1D,GAEI,UAACA,CAAD,EAAYC,CAAZ,EAAgB;MAAK,OAACP,CAAC,CAACK,cAAF,GAAmBL,CAAC,CAACK,cAAF,CAAiBC,CAAjB,EAAoBC,CAApB,CAAnB,GAA4CD,CAA7C;IAA+C,CAH1E;IAKA,OAAO;MAAEE,MAAM,EAAER,CAAV;MAAaE,KAAK,OAAlB;MAAoBJ,KAAK,OAAzB;MAA2BK,UAAU,YAArC;MAAuCC,WAAW;IAAlD,CAAP;EACD,CAVD,CARmD,CAoBnD;;;EACA,IAAMK,OAAO,GAAGd,cAAc,CAACe,MAAf,CAAsB,UAACC,GAAD,EAAMH,MAAN,EAAcP,KAAd,EAAmB;IACvDU,GAAG,CAACC,GAAJ,CAAQJ,MAAR,EAAgBT,cAAc,CAACS,MAAD,EAASP,KAAT,CAA9B;IACA,OAAOU,GAAP;EACD,CAHe,EAGb,IAAIE,GAAJ,EAHa,CAAhB,CArBmD,CA0BnD;EACA;;EACA,IAAMC,eAAe,GAAG,UAACN,MAAD,EAAiC;IACvD,cAAO,CAACO,GAAR,CAAYP,MAAZ,KAAuBT,cAAc,CAACS,MAAD,EAASb,cAAc,CAACqB,MAAxB,CAArC;EAAoE,CADtE;;EAGA,OAAOF,eAAP;AACD","names":["createCategoryColorScale","createSeriesDecorator","externalSeries","colorScale","type","color","decorateSeries","s","index","title","markerType","formatValue","valueFormatter","y","x","series","mapping","reduce","map","set","Map","seriesDecorator","get","length"],"sourceRoot":"","sources":["../../../../src/area-chart/model/create-series-decorator.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport createCategoryColorScale from '../../internal/utils/create-category-color-scale';\nimport { AreaChartProps } from '../interfaces';\nimport { ChartModel } from './index';\n\nexport default function createSeriesDecorator<T extends AreaChartProps.DataTypes>(\n  externalSeries: readonly AreaChartProps.Series<T>[]\n) {\n  const colorScale = createCategoryColorScale(\n    externalSeries,\n    s => s.type === 'threshold',\n    s => s.color || null\n  );\n\n  const decorateSeries = (s: AreaChartProps.Series<T>, index: number): ChartModel.InternalSeries<T> => {\n    const title = s.title;\n    const color = colorScale[index];\n    const markerType = s.type === 'area' ? 'hollow-rectangle' : 'dashed';\n    const formatValue =\n      s.type === 'threshold'\n        ? () => (s.valueFormatter ? s.valueFormatter(s.y) : s.y)\n        : (y: number, x: T) => (s.valueFormatter ? s.valueFormatter(y, x) : y);\n\n    return { series: s, title, color, markerType, formatValue };\n  };\n\n  // Map external series to internal ones.\n  const mapping = externalSeries.reduce((map, series, index) => {\n    map.set(series, decorateSeries(series, index));\n    return map;\n  }, new Map<AreaChartProps.Series<T>, ChartModel.InternalSeries<T>>());\n\n  // It is inconvenient to use internal series everywhere, that's\n  // why we also provide a decorator function to get the internal series on demand.\n  const seriesDecorator = (series: AreaChartProps.Series<T>): ChartModel.InternalSeries<T> =>\n    mapping.get(series) || decorateSeries(series, externalSeries.length);\n\n  return seriesDecorator;\n}\n"]},"metadata":{},"sourceType":"module"}