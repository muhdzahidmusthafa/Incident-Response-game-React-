{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport { useVirtual } from 'react-virtual';\nimport { useContainerQuery } from '../../internal/hooks/container-queries';\nimport styles from './styles.css.js';\n\nvar VirtualList = function (props, ref) {\n  return props.menuProps.open ? React.createElement(VirtualListOpen, __assign({}, props, {\n    ref: ref\n  })) : React.createElement(VirtualListClosed, __assign({}, props, {\n    ref: ref\n  }));\n};\n\nvar VirtualListOpen = forwardRef(function (_a, ref) {\n  var menuProps = _a.menuProps,\n      getOptionProps = _a.getOptionProps,\n      filteredOptions = _a.filteredOptions,\n      filteringValue = _a.filteringValue,\n      isKeyboard = _a.isKeyboard,\n      checkboxes = _a.checkboxes,\n      hasDropdownStatus = _a.hasDropdownStatus,\n      listBottom = _a.listBottom,\n      useInteractiveGroups = _a.useInteractiveGroups,\n      screenReaderContent = _a.screenReaderContent; // update component, when it gets wider or narrower to reposition items\n\n  var _b = useContainerQuery(function (rect) {\n    return rect.width;\n  }, []),\n      width = _b[0],\n      menuMeasureRef = _b[1];\n\n  var menuRefObject = useRef(null);\n  var menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n\n  var _c = useVirtual({\n    size: filteredOptions.length,\n    parentRef: menuRefObject,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(function () {\n      return 31;\n    }, [width, filteringValue]),\n    overscan: 5\n  }),\n      virtualItems = _c.virtualItems,\n      totalSize = _c.totalSize,\n      scrollToIndex = _c.scrollToIndex;\n\n  useImperativeHandle(ref, function () {\n    return function (index) {\n      if (isKeyboard) {\n        scrollToIndex(index);\n      }\n    };\n  }, [isKeyboard, scrollToIndex]);\n  var finalOptions = renderOptions({\n    options: virtualItems.map(function (_a) {\n      var index = _a.index;\n      return filteredOptions[index];\n    }),\n    getOptionProps: getOptionProps,\n    filteringValue: filteringValue,\n    isKeyboard: isKeyboard,\n    checkboxes: checkboxes,\n    hasDropdownStatus: hasDropdownStatus,\n    virtualItems: virtualItems,\n    useInteractiveGroups: useInteractiveGroups,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: filteredOptions.length\n  });\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    ref: menuRef\n  }), React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: totalSize\n    }\n  }), finalOptions, listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nvar VirtualListClosed = forwardRef(function (_a, ref) {\n  var menuProps = _a.menuProps,\n      listBottom = _a.listBottom;\n  useImperativeHandle(ref, function () {\n    return function () {};\n  }, []);\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    ref: menuProps.ref\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nexport default forwardRef(VirtualList);","map":{"version":3,"mappings":"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","names":["useMergeRefs","React","forwardRef","useCallback","useImperativeHandle","useRef","OptionsList","renderOptions","useVirtual","useContainerQuery","styles","VirtualList","props","ref","menuProps","open","VirtualListOpen","__assign","VirtualListClosed","_a","getOptionProps","filteredOptions","filteringValue","isKeyboard","checkboxes","hasDropdownStatus","listBottom","useInteractiveGroups","screenReaderContent","width","menuMeasureRef","menuRefObject","menuRef","size","length","parentRef","estimateSize","overscan","virtualItems","totalSize","scrollToIndex","index","finalOptions","options","map","ariaSetsize","key","className","style","height","role"],"sourceRoot":"","sources":["../../../../src/select/parts/virtual-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport { useVirtual } from 'react-virtual';\nimport { SelectListProps } from './plain-list';\nimport { useContainerQuery } from '../../internal/hooks/container-queries';\n\nimport styles from './styles.css.js';\n\nconst VirtualList = (props: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n  return props.menuProps.open ? <VirtualListOpen {...props} ref={ref} /> : <VirtualListClosed {...props} ref={ref} />;\n};\n\nconst VirtualListOpen = forwardRef(\n  (\n    {\n      menuProps,\n      getOptionProps,\n      filteredOptions,\n      filteringValue,\n      isKeyboard,\n      checkboxes,\n      hasDropdownStatus,\n      listBottom,\n      useInteractiveGroups,\n      screenReaderContent,\n    }: SelectListProps,\n    ref: React.Ref<SelectListProps.SelectListRef>\n  ) => {\n    // update component, when it gets wider or narrower to reposition items\n    const [width, menuMeasureRef] = useContainerQuery(rect => rect.width, []);\n    const menuRefObject = useRef(null);\n    const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n\n    const { virtualItems, totalSize, scrollToIndex } = useVirtual({\n      size: filteredOptions.length,\n      parentRef: menuRefObject,\n      // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n      // when the height of any option could have changed:\n      // 1: because the component got resized (width property got updated)\n      // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      estimateSize: useCallback(() => 31, [width, filteringValue]),\n      overscan: 5,\n    });\n    useImperativeHandle(\n      ref,\n      () => (index: number) => {\n        if (isKeyboard) {\n          scrollToIndex(index);\n        }\n      },\n      [isKeyboard, scrollToIndex]\n    );\n    const finalOptions = renderOptions({\n      options: virtualItems.map(({ index }) => filteredOptions[index]),\n      getOptionProps,\n      filteringValue,\n      isKeyboard,\n      checkboxes,\n      hasDropdownStatus,\n      virtualItems,\n      useInteractiveGroups,\n      screenReaderContent,\n      ariaSetsize: filteredOptions.length,\n    });\n    return (\n      <OptionsList {...menuProps} ref={menuRef}>\n        <div aria-hidden=\"true\" key=\"total-size\" className={styles['layout-strut']} style={{ height: totalSize }} />\n        {finalOptions}\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nconst VirtualListClosed = forwardRef(\n  ({ menuProps, listBottom }: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n    useImperativeHandle(ref, () => () => {}, []);\n    return (\n      <OptionsList {...menuProps} ref={menuProps.ref}>\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nexport default forwardRef(VirtualList);\n"]},"metadata":{},"sourceType":"module"}