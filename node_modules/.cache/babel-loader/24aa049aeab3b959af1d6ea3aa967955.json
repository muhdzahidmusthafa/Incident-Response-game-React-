{"ast":null,"code":"import { __spreadArray } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isItemGroup } from './utils';\nexport default function createItemsTree(items) {\n  var itemToIndex = new Map();\n  var indexToItem = new Map();\n  var flatIndices = [];\n  traverseItems(items, function (item, index) {\n    var indexKey = stringifyIndex(index);\n    itemToIndex.set(item, indexKey);\n    indexToItem.set(indexKey, item);\n    flatIndices.push(indexKey);\n  });\n  return {\n    getItem: function (index) {\n      var indexKey = stringifyIndex(index);\n      return indexToItem.get(indexKey) || null;\n    },\n    getItemIndex: function (item) {\n      var indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      return parseIndex(indexKey);\n    },\n    getSequentialIndex: function (index, direction) {\n      var indexKey = stringifyIndex(index);\n      var position = flatIndices.indexOf(indexKey);\n      var nextIndexKey = flatIndices[position + direction];\n\n      if (!nextIndexKey) {\n        return null;\n      }\n\n      return parseIndex(nextIndexKey);\n    },\n    getParentIndex: function (item) {\n      var indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      var index = parseIndex(indexKey); // No parent\n\n      if (index.length === 1) {\n        return null;\n      }\n\n      return index.slice(0, index.length - 1);\n    }\n  };\n}\n\nfunction traverseItems(items, act, parentIndex) {\n  if (parentIndex === void 0) {\n    parentIndex = [];\n  }\n\n  items.forEach(function (item, index) {\n    var itemIndex = __spreadArray(__spreadArray([], parentIndex, true), [index], false);\n\n    act(item, itemIndex);\n\n    if (isItemGroup(item)) {\n      traverseItems(item.items, act, itemIndex);\n    }\n  });\n}\n\nfunction stringifyIndex(index) {\n  return index.join('-');\n}\n\nfunction parseIndex(index) {\n  return index.split('-').map(function (it) {\n    return parseInt(it);\n  });\n}","map":{"version":3,"mappings":"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","names":["isItemGroup","createItemsTree","items","itemToIndex","Map","indexToItem","flatIndices","traverseItems","item","index","indexKey","stringifyIndex","set","push","getItem","get","getItemIndex","Error","parseIndex","getSequentialIndex","direction","position","indexOf","nextIndexKey","getParentIndex","length","slice","act","parentIndex","forEach","itemIndex","join","split","map","it"],"sourceRoot":"","sources":["../../../../src/button-dropdown/utils/create-items-tree.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isItemGroup } from './utils';\nimport { ButtonDropdownProps } from '../interfaces';\n\n// The function turns a tree of items into a structure optimized for lookup of\n// items and corresponding indices as well as iteration on indices in the given order.\n\n// As trees are multidimensional, the index is represented as an array\nexport type TreeIndex = number[];\n\ninterface ItemsTreeApi {\n  // Returns an item for the given tree index or null if not found\n  getItem: (index: TreeIndex) => ButtonDropdownProps.ItemOrGroup | null;\n  // Returns the tree index of the given item. The item must be present\n  // in the tree (referential comparison), or an error will be thrown\n  getItemIndex: (item: ButtonDropdownProps.ItemOrGroup) => TreeIndex;\n  // Returns the index of next or previous sequential node or null if out of bounds\n  getSequentialIndex: (index: TreeIndex, direction: -1 | 1) => TreeIndex | null;\n  // Returns parent tree index of a given item or null if no parent is present\n  getParentIndex: (item: ButtonDropdownProps.ItemOrGroup) => TreeIndex | null;\n}\n\nexport default function createItemsTree(items: ButtonDropdownProps.Items): ItemsTreeApi {\n  const itemToIndex = new Map<ButtonDropdownProps.ItemOrGroup, string>();\n  const indexToItem = new Map<string, ButtonDropdownProps.ItemOrGroup>();\n  const flatIndices: string[] = [];\n\n  traverseItems(items, (item, index) => {\n    const indexKey = stringifyIndex(index);\n    itemToIndex.set(item, indexKey);\n    indexToItem.set(indexKey, item);\n    flatIndices.push(indexKey);\n  });\n\n  return {\n    getItem: (index: TreeIndex): ButtonDropdownProps.ItemOrGroup | null => {\n      const indexKey = stringifyIndex(index);\n\n      return indexToItem.get(indexKey) || null;\n    },\n    getItemIndex: (item: ButtonDropdownProps.ItemOrGroup): TreeIndex => {\n      const indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      return parseIndex(indexKey);\n    },\n    getSequentialIndex: (index: TreeIndex, direction: -1 | 1): TreeIndex | null => {\n      const indexKey = stringifyIndex(index);\n      const position = flatIndices.indexOf(indexKey);\n\n      const nextIndexKey = flatIndices[position + direction];\n\n      if (!nextIndexKey) {\n        return null;\n      }\n\n      return parseIndex(nextIndexKey);\n    },\n    getParentIndex: (item: ButtonDropdownProps.ItemOrGroup): TreeIndex | null => {\n      const indexKey = itemToIndex.get(item);\n\n      if (!indexKey) {\n        throw new Error('Invariant violation: item is not found.');\n      }\n\n      const index = parseIndex(indexKey);\n\n      // No parent\n      if (index.length === 1) {\n        return null;\n      }\n\n      return index.slice(0, index.length - 1);\n    },\n  };\n}\n\nfunction traverseItems(\n  items: ButtonDropdownProps.Items,\n  act: (item: ButtonDropdownProps.ItemOrGroup, index: TreeIndex) => void,\n  parentIndex: TreeIndex = []\n) {\n  items.forEach((item, index) => {\n    const itemIndex = [...parentIndex, index];\n    act(item, itemIndex);\n\n    if (isItemGroup(item)) {\n      traverseItems(item.items, act, itemIndex);\n    }\n  });\n}\n\nfunction stringifyIndex(index: TreeIndex): string {\n  return index.join('-');\n}\n\nfunction parseIndex(index: string): TreeIndex {\n  return index.split('-').map(it => parseInt(it));\n}\n"]},"metadata":{},"sourceType":"module"}