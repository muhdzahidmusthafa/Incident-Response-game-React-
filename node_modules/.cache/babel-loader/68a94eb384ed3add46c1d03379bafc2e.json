{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport InternalLink from '../../link/internal';\nimport { compareDates, getColumnAriaLabel, includes } from './table-utils';\nimport { formatDefault } from './column-formats';\nimport { BasicS3Table, getSharedI18Strings } from './basic-table';\nexport function BucketsTable(_a) {\n  var forwardFocusRef = _a.forwardFocusRef,\n      i18nStrings = _a.i18nStrings,\n      isVisualRefresh = _a.isVisualRefresh,\n      isItemDisabled = _a.isItemDisabled,\n      selectableItemsTypes = _a.selectableItemsTypes,\n      fetchData = _a.fetchData,\n      visibleColumns = _a.visibleColumns,\n      onDrilldown = _a.onDrilldown,\n      onSelect = _a.onSelect;\n  return React.createElement(BasicS3Table, {\n    forwardFocusRef: forwardFocusRef,\n    trackBy: \"Name\",\n    fetchData: fetchData,\n    visibleColumns: visibleColumns,\n    isItemDisabled: isItemDisabled || function () {\n      return !includes(selectableItemsTypes, 'buckets');\n    },\n    i18nStrings: __assign(__assign({}, getSharedI18Strings(i18nStrings)), {\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets,\n      loadingText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsLoading,\n      filteringAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering(i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets),\n      filteringPlaceholder: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsSearchPlaceholder,\n      emptyText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsNoItems,\n      selectionLabels: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection\n    }),\n    isVisualRefresh: isVisualRefresh,\n    columnDefinitions: [{\n      id: 'Name',\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName,\n      ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName),\n      sortingField: 'Name',\n      cell: function (item) {\n        var isClickable = includes(selectableItemsTypes, 'objects') || includes(selectableItemsTypes, 'versions');\n        return isClickable ? React.createElement(InternalLink, {\n          onFollow: function () {\n            return item.Name && onDrilldown(item.Name);\n          },\n          variant: \"link\"\n        }, item.Name) : item.Name;\n      },\n      minWidth: '250px'\n    }, {\n      id: 'CreationDate',\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate,\n      ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate),\n      sortingComparator: function (a, b) {\n        return compareDates(a.CreationDate, b.CreationDate);\n      },\n      cell: function (item) {\n        return formatDefault(item.CreationDate);\n      }\n    }, {\n      id: 'Region',\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion,\n      ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion),\n      sortingField: 'Region',\n      cell: function (item) {\n        return formatDefault(item.Region);\n      },\n      minWidth: '150px'\n    }],\n    onSelect: function (item) {\n      var _a;\n\n      return onSelect((_a = item === null || item === void 0 ? void 0 : item.Name) !== null && _a !== void 0 ? _a : '');\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["React","InternalLink","compareDates","getColumnAriaLabel","includes","formatDefault","BasicS3Table","getSharedI18Strings","BucketsTable","_a","forwardFocusRef","i18nStrings","isVisualRefresh","isItemDisabled","selectableItemsTypes","fetchData","visibleColumns","onDrilldown","onSelect","trackBy","header","selectionBuckets","loadingText","selectionBucketsLoading","filteringAriaLabel","labelFiltering","filteringPlaceholder","selectionBucketsSearchPlaceholder","emptyText","selectionBucketsNoItems","selectionLabels","labelsBucketsSelection","columnDefinitions","id","columnBucketName","ariaLabel","sortingField","cell","isClickable","onFollow","Name","item","variant","minWidth","columnBucketCreationDate","sortingComparator","a","b","CreationDate","columnBucketRegion","Region"],"sourceRoot":"","sources":["../../../../src/s3-resource-selector/s3-modal/buckets-table.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalLink from '../../link/internal';\nimport { TableProps } from '../../table/interfaces';\nimport { ForwardFocusRef } from '../../internal/hooks/forward-focus';\nimport { S3ResourceSelectorProps } from '../interfaces';\nimport { compareDates, getColumnAriaLabel, includes } from './table-utils';\nimport { formatDefault } from './column-formats';\nimport { BasicS3Table, getSharedI18Strings } from './basic-table';\n\ninterface BucketsTableProps {\n  forwardFocusRef: React.Ref<ForwardFocusRef>;\n  visibleColumns: ReadonlyArray<string>;\n  isItemDisabled: TableProps.IsItemDisabled<S3ResourceSelectorProps.Bucket> | undefined;\n  selectableItemsTypes: S3ResourceSelectorProps['selectableItemsTypes'];\n  fetchData: S3ResourceSelectorProps['fetchBuckets'];\n  i18nStrings: S3ResourceSelectorProps.I18nStrings | undefined;\n  isVisualRefresh?: boolean;\n  onDrilldown: (path: string) => void;\n  onSelect: (uri: string) => void;\n}\n\nexport function BucketsTable({\n  forwardFocusRef,\n  i18nStrings,\n  isVisualRefresh,\n  isItemDisabled,\n  selectableItemsTypes,\n  fetchData,\n  visibleColumns,\n  onDrilldown,\n  onSelect,\n}: BucketsTableProps) {\n  return (\n    <BasicS3Table<S3ResourceSelectorProps.Bucket>\n      forwardFocusRef={forwardFocusRef}\n      trackBy=\"Name\"\n      fetchData={fetchData}\n      visibleColumns={visibleColumns}\n      isItemDisabled={isItemDisabled || (() => !includes(selectableItemsTypes, 'buckets'))}\n      i18nStrings={{\n        ...getSharedI18Strings(i18nStrings),\n        header: i18nStrings?.selectionBuckets,\n        loadingText: i18nStrings?.selectionBucketsLoading,\n        filteringAriaLabel: i18nStrings?.labelFiltering(i18nStrings?.selectionBuckets),\n        filteringPlaceholder: i18nStrings?.selectionBucketsSearchPlaceholder,\n        emptyText: i18nStrings?.selectionBucketsNoItems,\n        selectionLabels: i18nStrings?.labelsBucketsSelection,\n      }}\n      isVisualRefresh={isVisualRefresh}\n      columnDefinitions={[\n        {\n          id: 'Name',\n          header: i18nStrings?.columnBucketName,\n          ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings?.columnBucketName),\n          sortingField: 'Name',\n          cell: item => {\n            const isClickable = includes(selectableItemsTypes, 'objects') || includes(selectableItemsTypes, 'versions');\n            return isClickable ? (\n              <InternalLink onFollow={() => item.Name && onDrilldown(item.Name)} variant=\"link\">\n                {item.Name}\n              </InternalLink>\n            ) : (\n              item.Name\n            );\n          },\n          minWidth: '250px',\n        },\n        {\n          id: 'CreationDate',\n          header: i18nStrings?.columnBucketCreationDate,\n          ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings?.columnBucketCreationDate),\n          sortingComparator: (a, b) => compareDates(a.CreationDate, b.CreationDate),\n          cell: item => formatDefault(item.CreationDate),\n        },\n        {\n          id: 'Region',\n          header: i18nStrings?.columnBucketRegion,\n          ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings?.columnBucketRegion),\n          sortingField: 'Region',\n          cell: item => formatDefault(item.Region),\n          minWidth: '150px',\n        },\n      ]}\n      onSelect={item => onSelect(item?.Name ?? '')}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}