{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { Segment } from './segment';\nimport styles from './styles.css.js';\nexport default function InternalSegmentedControl(_a) {\n  var selectedId = _a.selectedId,\n      options = _a.options,\n      label = _a.label,\n      ariaLabelledby = _a.ariaLabelledby,\n      onChange = _a.onChange;\n  var segmentByIdRef = useRef({});\n  var selectedOptions = (options || []).filter(function (option) {\n    return option.id === selectedId;\n  });\n  var currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;\n  var enabledSegments = (options || []).filter(function (option) {\n    return !option.disabled;\n  });\n\n  var moveHighlight = function (event, activeIndex) {\n    var _a;\n\n    if (event.keyCode !== KeyCode.right && event.keyCode !== KeyCode.left) {\n      return;\n    }\n\n    var nextIndex = activeIndex;\n\n    if (event.keyCode === KeyCode.right) {\n      nextIndex = activeIndex + 1 === enabledSegments.length ? 0 : activeIndex + 1;\n    } else if (event.keyCode === KeyCode.left) {\n      nextIndex = activeIndex === 0 ? enabledSegments.length - 1 : activeIndex - 1;\n    }\n\n    var nextSegmentId = enabledSegments[nextIndex].id;\n    (_a = segmentByIdRef.current[nextSegmentId]) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n\n  return React.createElement(\"div\", {\n    className: clsx(styles['segment-part'], styles[\"segment-count-\".concat(options === null || options === void 0 ? void 0 : options.length)]),\n    \"aria-label\": label,\n    \"aria-labelledby\": ariaLabelledby,\n    role: \"toolbar\"\n  }, options && options.map(function (option, index) {\n    var isActive = selectedId === option.id;\n    var enabledSegmentIndex = enabledSegments.indexOf(option);\n    var tabIndex = isActive ? 0 : -1;\n\n    if (currentSelectedOption === null && enabledSegmentIndex === 0) {\n      tabIndex = 0;\n    }\n\n    return React.createElement(Segment, {\n      key: index,\n      id: option.id,\n      disabled: !!option.disabled,\n      iconName: option.iconName,\n      iconAlt: option.iconAlt,\n      iconUrl: option.iconUrl,\n      iconSvg: option.iconSvg,\n      text: option.text,\n      isActive: isActive,\n      tabIndex: tabIndex,\n      ref: function (node) {\n        if (node) {\n          segmentByIdRef.current[option.id] = node;\n        } else {\n          delete segmentByIdRef.current[option.id];\n        }\n      },\n      onClick: function () {\n        if (selectedId !== option.id) {\n          fireNonCancelableEvent(onChange, {\n            selectedId: option.id\n          });\n        }\n      },\n      onKeyDown: function (event) {\n        return moveHighlight(event, enabledSegmentIndex);\n      }\n    });\n  }));\n}","map":{"version":3,"mappings":"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","names":["React","useRef","clsx","KeyCode","fireNonCancelableEvent","Segment","styles","InternalSegmentedControl","_a","selectedId","options","label","ariaLabelledby","onChange","segmentByIdRef","selectedOptions","filter","option","id","currentSelectedOption","length","enabledSegments","disabled","moveHighlight","event","activeIndex","keyCode","right","left","nextIndex","nextSegmentId","current","focus","className","role","map","index","isActive","enabledSegmentIndex","indexOf","tabIndex","key","iconName","iconAlt","iconUrl","iconSvg","text","ref","node","onClick","onKeyDown"],"sourceRoot":"","sources":["../../../src/segmented-control/internal-segmented-control.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { SegmentedControlProps } from './interfaces';\nimport { Segment } from './segment';\nimport styles from './styles.css.js';\n\nexport default function InternalSegmentedControl({\n  selectedId,\n  options,\n  label,\n  ariaLabelledby,\n  onChange,\n}: SegmentedControlProps) {\n  const segmentByIdRef = useRef<{ [id: string]: HTMLButtonElement }>({});\n  const selectedOptions = (options || []).filter(option => {\n    return option.id === selectedId;\n  });\n  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;\n  const enabledSegments = (options || []).filter(option => !option.disabled);\n\n  const moveHighlight = (event: React.KeyboardEvent<HTMLButtonElement>, activeIndex: number) => {\n    if (event.keyCode !== KeyCode.right && event.keyCode !== KeyCode.left) {\n      return;\n    }\n    let nextIndex = activeIndex;\n    if (event.keyCode === KeyCode.right) {\n      nextIndex = activeIndex + 1 === enabledSegments.length ? 0 : activeIndex + 1;\n    } else if (event.keyCode === KeyCode.left) {\n      nextIndex = activeIndex === 0 ? enabledSegments.length - 1 : activeIndex - 1;\n    }\n    const nextSegmentId = enabledSegments[nextIndex].id;\n    segmentByIdRef.current[nextSegmentId]?.focus();\n  };\n\n  return (\n    <div\n      className={clsx(styles['segment-part'], styles[`segment-count-${options?.length}`])}\n      aria-label={label}\n      aria-labelledby={ariaLabelledby}\n      role=\"toolbar\"\n    >\n      {options &&\n        options.map((option: SegmentedControlProps.Option, index) => {\n          const isActive = selectedId === option.id;\n          const enabledSegmentIndex = enabledSegments.indexOf(option);\n          let tabIndex = isActive ? 0 : -1;\n          if (currentSelectedOption === null && enabledSegmentIndex === 0) {\n            tabIndex = 0;\n          }\n          return (\n            <Segment\n              key={index}\n              id={option.id}\n              disabled={!!option.disabled}\n              iconName={option.iconName}\n              iconAlt={option.iconAlt}\n              iconUrl={option.iconUrl}\n              iconSvg={option.iconSvg}\n              text={option.text}\n              isActive={isActive}\n              tabIndex={tabIndex}\n              ref={node => {\n                if (node) {\n                  segmentByIdRef.current[option.id] = node;\n                } else {\n                  delete segmentByIdRef.current[option.id];\n                }\n              }}\n              onClick={() => {\n                if (selectedId !== option.id) {\n                  fireNonCancelableEvent(onChange, { selectedId: option.id });\n                }\n              }}\n              onKeyDown={event => moveHighlight(event, enabledSegmentIndex)}\n            />\n          );\n        })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}