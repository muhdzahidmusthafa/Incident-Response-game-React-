{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible/index';\nexport default function FocusOutline(_a) {\n  var elementKey = _a.elementKey,\n      elementRef = _a.elementRef,\n      _b = _a.offset,\n      offset = _b === void 0 ? 0 : _b;\n  var ref = useRef(null);\n  var focusVisible = useFocusVisible()[\"data-awsui-focus-visible\"];\n  useEffect(function () {\n    if (!ref.current) {\n      return;\n    }\n\n    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {\n      var element = elementRef.current.getBBox();\n      showOutline(ref.current, element, offset);\n    } else {\n      hideOutline(ref.current);\n    }\n  }, [focusVisible, elementKey, elementRef, offset]);\n  return React.createElement(\"rect\", {\n    ref: ref,\n    \"aria-hidden\": \"true\",\n    className: styles['focus-outline'],\n    rx: \"2\"\n  });\n}\n\nfunction showOutline(el, position, offset) {\n  el.setAttribute('x', (position.x - offset).toString());\n  el.setAttribute('y', (position.y - offset).toString());\n  el.setAttribute('width', (position.width + 2 * offset).toString());\n  el.setAttribute('height', (position.height + 2 * offset).toString());\n  el.style.visibility = 'visible';\n}\n\nfunction hideOutline(el) {\n  el.style.visibility = 'hidden';\n  el.removeAttribute('x');\n  el.removeAttribute('y');\n  el.removeAttribute('width');\n  el.removeAttribute('height');\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AAQA,eAAc,SAAUC,YAAV,CAAuBC,EAAvB,EAAgF;MAAvDC,UAAU;MAAEC,UAAU;MAAEC;MAAAC,MAAM,mBAAG,CAAH,GAAID;EACvE,IAAME,GAAG,GAAGT,MAAM,CAAiB,IAAjB,CAAlB;EACQ,IAA4BU,YAAY,GAAKR,eAAe,GAAE,0BAAF,CAA5D;EAERH,SAAS,CAAC;IACR,IAAI,CAACU,GAAG,CAACE,OAAT,EAAkB;MAChB;IACD;;IAED,IAAID,YAAY,IAAIL,UAAhB,IAA8BC,UAA9B,IAA4CA,UAAU,CAACK,OAAvD,IAAkEL,UAAU,CAACK,OAAX,CAAmBC,OAAzF,EAAkG;MAChG,IAAMC,OAAO,GAAGP,UAAU,CAACK,OAAX,CAAmBC,OAAnB,EAAhB;MACAE,WAAW,CAACL,GAAG,CAACE,OAAL,EAAcE,OAAd,EAAuBL,MAAvB,CAAX;IACD,CAHD,MAGO;MACLO,WAAW,CAACN,GAAG,CAACE,OAAL,CAAX;IACD;EACF,CAXQ,EAWN,CAACD,YAAD,EAAeL,UAAf,EAA2BC,UAA3B,EAAuCE,MAAvC,CAXM,CAAT;EAaA,OAAOV;IAAMW,GAAG,EAAEA,GAAX;IAAc,eAAc,MAA5B;IAAmCO,SAAS,EAAEf,MAAM,CAAC,eAAD,CAApD;IAAuEgB,EAAE,EAAC;EAA1E,EAAP;AACD;;AAED,SAASH,WAAT,CACEI,EADF,EAEEC,QAFF,EAGEX,MAHF,EAGgB;EAEdU,EAAE,CAACE,YAAH,CAAgB,GAAhB,EAAqB,CAACD,QAAQ,CAACE,CAAT,GAAab,MAAd,EAAsBc,QAAtB,EAArB;EACAJ,EAAE,CAACE,YAAH,CAAgB,GAAhB,EAAqB,CAACD,QAAQ,CAACI,CAAT,GAAaf,MAAd,EAAsBc,QAAtB,EAArB;EACAJ,EAAE,CAACE,YAAH,CAAgB,OAAhB,EAAyB,CAACD,QAAQ,CAACK,KAAT,GAAiB,IAAIhB,MAAtB,EAA8Bc,QAA9B,EAAzB;EACAJ,EAAE,CAACE,YAAH,CAAgB,QAAhB,EAA0B,CAACD,QAAQ,CAACM,MAAT,GAAkB,IAAIjB,MAAvB,EAA+Bc,QAA/B,EAA1B;EACAJ,EAAE,CAACQ,KAAH,CAASC,UAAT,GAAsB,SAAtB;AACD;;AAED,SAASZ,WAAT,CAAqBG,EAArB,EAAuC;EACrCA,EAAE,CAACQ,KAAH,CAASC,UAAT,GAAsB,QAAtB;EACAT,EAAE,CAACU,eAAH,CAAmB,GAAnB;EACAV,EAAE,CAACU,eAAH,CAAmB,GAAnB;EACAV,EAAE,CAACU,eAAH,CAAmB,OAAnB;EACAV,EAAE,CAACU,eAAH,CAAmB,QAAnB;AACD","names":["React","useEffect","useRef","styles","useFocusVisible","FocusOutline","_a","elementKey","elementRef","_b","offset","ref","focusVisible","current","getBBox","element","showOutline","hideOutline","className","rx","el","position","setAttribute","x","toString","y","width","height","style","visibility","removeAttribute"],"sourceRoot":"","sources":["../../../../../src/internal/components/chart-plot/focus-outline.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\n\nimport styles from './styles.css.js';\nimport useFocusVisible from '../../hooks/focus-visible/index';\n\nexport interface FocusOutlineProps {\n  elementKey?: null | string | number | boolean;\n  elementRef?: React.RefObject<SVGSVGElement | SVGGElement>;\n  offset?: number;\n}\n\nexport default function FocusOutline({ elementKey, elementRef, offset = 0 }: FocusOutlineProps) {\n  const ref = useRef<SVGRectElement>(null);\n  const { 'data-awsui-focus-visible': focusVisible } = useFocusVisible();\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {\n      const element = elementRef.current.getBBox();\n      showOutline(ref.current, element, offset);\n    } else {\n      hideOutline(ref.current);\n    }\n  }, [focusVisible, elementKey, elementRef, offset]);\n\n  return <rect ref={ref} aria-hidden=\"true\" className={styles['focus-outline']} rx=\"2\" />;\n}\n\nfunction showOutline(\n  el: SVGRectElement,\n  position: { x: number; y: number; width: number; height: number },\n  offset: number\n) {\n  el.setAttribute('x', (position.x - offset).toString());\n  el.setAttribute('y', (position.y - offset).toString());\n  el.setAttribute('width', (position.width + 2 * offset).toString());\n  el.setAttribute('height', (position.height + 2 * offset).toString());\n  el.style.visibility = 'visible';\n}\n\nfunction hideOutline(el: SVGRectElement) {\n  el.style.visibility = 'hidden';\n  el.removeAttribute('x');\n  el.removeAttribute('y');\n  el.removeAttribute('width');\n  el.removeAttribute('height');\n}\n"]},"metadata":{},"sourceType":"module"}