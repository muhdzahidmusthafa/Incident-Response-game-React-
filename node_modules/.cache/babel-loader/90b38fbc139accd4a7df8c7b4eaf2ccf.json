{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect } from 'react';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable'; // Provides controlled or uncontrolled props to filter chart series.\n\nexport default function useFilterProps(series, controlledVisibleSeries, controlledOnVisibleChange) {\n  var _a = useControllable(controlledVisibleSeries, controlledOnVisibleChange, series, {\n    componentName: 'AreaChart',\n    controlledProp: 'visibleSeries',\n    changeHandler: 'onFilterChange'\n  }),\n      _b = _a[0],\n      visibleSeries = _b === void 0 ? [] : _b,\n      setVisibleSeriesState = _a[1];\n\n  var setVisibleSeries = useCallback(function (selectedSeries) {\n    setVisibleSeriesState(selectedSeries);\n    fireNonCancelableEvent(controlledOnVisibleChange, {\n      visibleSeries: selectedSeries\n    });\n  }, [controlledOnVisibleChange, setVisibleSeriesState]); // Reset filter if series change.\n\n  useEffect(function () {\n    var newVisibleSeries = visibleSeries.filter(function (s) {\n      return series.indexOf(s) !== -1;\n    });\n\n    if (newVisibleSeries.length !== visibleSeries.length) {\n      setVisibleSeries(newVisibleSeries);\n    }\n  }, [series, visibleSeries, setVisibleSeries]);\n  return [visibleSeries, setVisibleSeries];\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,sBAAT,QAAkE,uBAAlE;AACA,SAASC,eAAT,QAAgC,uCAAhC,C,CAKA;;AACA,eAAc,SAAUC,cAAV,CACZC,MADY,EAEZC,uBAFY,EAGZC,yBAHY,EAG+E;EAErF,SAA8CJ,eAAe,CACjEG,uBADiE,EAEjEC,yBAFiE,EAGjEF,MAHiE,EAIjE;IACEG,aAAa,EAAE,WADjB;IAEEC,cAAc,EAAE,eAFlB;IAGEC,aAAa,EAAE;EAHjB,CAJiE,CAA7D;EAAA,IAACC,UAAD;EAAA,IAACC,aAAa,mBAAG,EAAH,GAAKD,EAAnB;EAAA,IAAqBE,qBAAqB,QAA1C;;EAWN,IAAMC,gBAAgB,GAAGd,WAAW,CAClC,UAACe,cAAD,EAAoD;IAClDF,qBAAqB,CAACE,cAAD,CAArB;IACAb,sBAAsB,CAACK,yBAAD,EAA4B;MAAEK,aAAa,EAAEG;IAAjB,CAA5B,CAAtB;EACD,CAJiC,EAKlC,CAACR,yBAAD,EAA4BM,qBAA5B,CALkC,CAApC,CAb2F,CAqB3F;;EACAZ,SAAS,CAAC;IACR,IAAMe,gBAAgB,GAAGJ,aAAa,CAACK,MAAd,CAAqB,aAAC;MAAI,aAAM,CAACC,OAAP,CAAeC,CAAf,MAAsB,CAAC,CAAvB;IAAwB,CAAlD,CAAzB;;IAEA,IAAIH,gBAAgB,CAACI,MAAjB,KAA4BR,aAAa,CAACQ,MAA9C,EAAsD;MACpDN,gBAAgB,CAACE,gBAAD,CAAhB;IACD;EACF,CANQ,EAMN,CAACX,MAAD,EAASO,aAAT,EAAwBE,gBAAxB,CANM,CAAT;EAQA,OAAO,CAACF,aAAD,EAAgBE,gBAAhB,CAAP;AACD","names":["useCallback","useEffect","fireNonCancelableEvent","useControllable","useFilterProps","series","controlledVisibleSeries","controlledOnVisibleChange","componentName","controlledProp","changeHandler","_b","visibleSeries","setVisibleSeriesState","setVisibleSeries","selectedSeries","newVisibleSeries","filter","indexOf","s","length"],"sourceRoot":"","sources":["../../../../src/area-chart/model/use-filter-props.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect } from 'react';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { AreaChartProps } from '../interfaces';\n\ntype FilterProps<T> = [readonly AreaChartProps.Series<T>[], (series: readonly AreaChartProps.Series<T>[]) => void];\n\n// Provides controlled or uncontrolled props to filter chart series.\nexport default function useFilterProps<T>(\n  series: readonly AreaChartProps.Series<T>[],\n  controlledVisibleSeries?: readonly AreaChartProps.Series<T>[],\n  controlledOnVisibleChange?: NonCancelableEventHandler<AreaChartProps.FilterChangeDetail<T>>\n): FilterProps<T> {\n  const [visibleSeries = [], setVisibleSeriesState] = useControllable(\n    controlledVisibleSeries,\n    controlledOnVisibleChange,\n    series,\n    {\n      componentName: 'AreaChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange',\n    }\n  );\n\n  const setVisibleSeries = useCallback(\n    (selectedSeries: readonly AreaChartProps.Series<T>[]) => {\n      setVisibleSeriesState(selectedSeries);\n      fireNonCancelableEvent(controlledOnVisibleChange, { visibleSeries: selectedSeries });\n    },\n    [controlledOnVisibleChange, setVisibleSeriesState]\n  );\n\n  // Reset filter if series change.\n  useEffect(() => {\n    const newVisibleSeries = visibleSeries.filter(s => series.indexOf(s) !== -1);\n\n    if (newVisibleSeries.length !== visibleSeries.length) {\n      setVisibleSeries(newVisibleSeries);\n    }\n  }, [series, visibleSeries, setVisibleSeries]);\n\n  return [visibleSeries, setVisibleSeries];\n}\n"]},"metadata":{},"sourceType":"module"}