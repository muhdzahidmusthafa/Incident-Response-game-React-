{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport OptionComponent from '../internal/components/option';\nimport SelectableItem from '../internal/components/selectable-item';\nimport { getBaseProps } from '../internal/base-component';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\nimport styles from './styles.css.js';\n\nvar AutosuggestOption = function (_a, ref) {\n  var _b = _a.nativeAttributes,\n      nativeAttributes = _b === void 0 ? {} : _b,\n      highlightText = _a.highlightText,\n      option = _a.option,\n      highlighted = _a.highlighted,\n      enteredTextLabel = _a.enteredTextLabel,\n      virtualPosition = _a.virtualPosition,\n      padBottom = _a.padBottom,\n      screenReaderContent = _a.screenReaderContent,\n      ariaSetsize = _a.ariaSetsize,\n      ariaPosinset = _a.ariaPosinset,\n      rest = __rest(_a, [\"nativeAttributes\", \"highlightText\", \"option\", \"highlighted\", \"enteredTextLabel\", \"virtualPosition\", \"padBottom\", \"screenReaderContent\", \"ariaSetsize\", \"ariaPosinset\"]);\n\n  var baseProps = getBaseProps(rest);\n  var useEntered = 'type' in option && option.type === 'use-entered';\n  var isParent = 'type' in option && option.type === 'parent';\n  var isChild = 'type' in option && option.type === 'child';\n\n  var _c = getTestOptionIndexes(option) || {},\n      throughIndex = _c.throughIndex,\n      inGroupIndex = _c.inGroupIndex,\n      groupIndex = _c.groupIndex;\n\n  var optionContent;\n\n  if (useEntered) {\n    optionContent = enteredTextLabel(option.value || '');\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    var a11yProperties = {};\n\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n\n    optionContent = React.createElement(\"div\", __assign({}, a11yProperties), React.createElement(OptionComponent, {\n      option: option,\n      highlightText: highlightText\n    }));\n  }\n\n  return React.createElement(SelectableItem, __assign({}, baseProps, {\n    className: styles.option,\n    ariaSelected: highlighted || undefined,\n    highlighted: highlighted,\n    disabled: option.disabled,\n    hasBackground: useEntered,\n    isParent: isParent,\n    isChild: isChild,\n    virtualPosition: virtualPosition,\n    \"data-test-index\": throughIndex,\n    \"data-in-group-index\": inGroupIndex,\n    \"data-group-index\": groupIndex,\n    ref: ref,\n    padBottom: padBottom,\n    screenReaderContent: screenReaderContent,\n    ariaSetsize: ariaSetsize,\n    ariaPosinset: ariaPosinset\n  }), optionContent);\n};\n\nexport default React.memo(React.forwardRef(AutosuggestOption));","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAA6BC,YAA7B,QAAiD,4BAAjD;AACA,SAASC,oBAAT,QAAqC,wDAArC;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;;AAgBA,IAAMC,iBAAiB,GAAG,UACxBC,EADwB,EAcxBC,GAdwB,EAcM;EAZ5B;EAAA,oBAAgB,mBAAG,EAAH,GAAKC,EAArB;EAAA,IACAC,aAAa,mBADb;EAAA,IAEAC,MAAM,YAFN;EAAA,IAGAC,WAAW,iBAHX;EAAA,IAIAC,gBAAgB,sBAJhB;EAAA,IAKAC,eAAe,qBALf;EAAA,IAMAC,SAAS,eANT;EAAA,IAOAC,mBAAmB,yBAPnB;EAAA,IAQAC,WAAW,iBARX;EAAA,IASAC,YAAY,kBATZ;EAAA,IAUGC,IAAI,cAXT,wKAWS,CAVP;;EAcF,IAAMC,SAAS,GAAGjB,YAAY,CAACgB,IAAD,CAA9B;EACA,IAAME,UAAU,GAAG,UAAUV,MAAV,IAAoBA,MAAM,CAACW,IAAP,KAAgB,aAAvD;EACA,IAAMC,QAAQ,GAAG,UAAUZ,MAAV,IAAoBA,MAAM,CAACW,IAAP,KAAgB,QAArD;EACA,IAAME,OAAO,GAAG,UAAUb,MAAV,IAAoBA,MAAM,CAACW,IAAP,KAAgB,OAApD;;EACM,SAA6ClB,oBAAoB,CAACO,MAAD,CAApB,IAAgC,EAA7E;EAAA,IAAEc,YAAY,kBAAd;EAAA,IAAgBC,YAAY,kBAA5B;EAAA,IAA8BC,UAAU,gBAAxC;;EAEN,IAAIC,aAAJ;;EACA,IAAIP,UAAJ,EAAgB;IACdO,aAAa,GAAGf,gBAAgB,CAACF,MAAM,CAACkB,KAAP,IAAgB,EAAjB,CAAhC;EACD,CAFD,MAEO,IAAIN,QAAJ,EAAc;IACnBK,aAAa,GAAGjB,MAAM,CAACmB,KAAvB;EACD,CAFM,MAEA;IACL,IAAMC,cAAc,GAA+C,EAAnE;;IACA,IAAIC,gBAAgB,CAAC,YAAD,CAApB,EAAoC;MAClCD,cAAc,CAAC,YAAD,CAAd,GAA+BC,gBAAgB,CAAC,YAAD,CAA/C;IACD;;IAEDJ,aAAa,GACX5B,wCAAS+B,cAAT,GACE/B,oBAACC,eAAD,EAAgB;MAACU,MAAM,EAAEA,MAAT;MAAiBD,aAAa,EAAEA;IAAhC,CAAhB,CADF,CADF;EAKD;;EAED,OACEV,oBAACE,cAAD,EAAe+B,aACTb,SADS,EACA;IACbc,SAAS,EAAE7B,MAAM,CAACM,MADL;IAEbwB,YAAY,EAAEvB,WAAW,IAAIwB,SAFhB;IAGbxB,WAAW,EAAEA,WAHA;IAIbyB,QAAQ,EAAE1B,MAAM,CAAC0B,QAJJ;IAKbC,aAAa,EAAEjB,UALF;IAMbE,QAAQ,EAAEA,QANG;IAObC,OAAO,EAAEA,OAPI;IAQbV,eAAe,EAAEA,eARJ;IAQmB,mBACfW,YATJ;IASgB,uBACRC,YAVR;IAUoB,oBACfC,UAXL;IAYbnB,GAAG,EAAEA,GAZQ;IAabO,SAAS,EAAEA,SAbE;IAcbC,mBAAmB,EAAEA,mBAdR;IAebC,WAAW,EAAEA,WAfA;IAgBbC,YAAY,EAAEA;EAhBD,CADA,CAAf,EAmBGU,aAnBH,CADF;AAuBD,CA/DD;;AAiEA,eAAe5B,KAAK,CAACuC,IAAN,CAAWvC,KAAK,CAACwC,UAAN,CAAiBlC,iBAAjB,CAAX,CAAf","names":["React","OptionComponent","SelectableItem","getBaseProps","getTestOptionIndexes","styles","AutosuggestOption","_a","ref","_b","highlightText","option","highlighted","enteredTextLabel","virtualPosition","padBottom","screenReaderContent","ariaSetsize","ariaPosinset","rest","baseProps","useEntered","type","isParent","isChild","throughIndex","inGroupIndex","groupIndex","optionContent","value","label","a11yProperties","nativeAttributes","__assign","className","ariaSelected","undefined","disabled","hasBackground","memo","forwardRef"],"sourceRoot":"","sources":["../../../src/autosuggest/autosuggest-option.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport OptionComponent from '../internal/components/option';\nimport SelectableItem from '../internal/components/selectable-item';\nimport { BaseComponentProps, getBaseProps } from '../internal/base-component';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\n\nimport styles from './styles.css.js';\nimport { AutosuggestItem } from './interfaces';\n\nexport interface AutosuggestOptionProps extends BaseComponentProps {\n  nativeAttributes?: Record<string, any>;\n  highlightText: string;\n  option: AutosuggestItem;\n  highlighted: boolean;\n  enteredTextLabel: (value: string) => string;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  screenReaderContent?: string;\n  ariaSetsize?: number;\n  ariaPosinset?: number;\n}\n\nconst AutosuggestOption = (\n  {\n    nativeAttributes = {},\n    highlightText,\n    option,\n    highlighted,\n    enteredTextLabel,\n    virtualPosition,\n    padBottom,\n    screenReaderContent,\n    ariaSetsize,\n    ariaPosinset,\n    ...rest\n  }: AutosuggestOptionProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(rest);\n  const useEntered = 'type' in option && option.type === 'use-entered';\n  const isParent = 'type' in option && option.type === 'parent';\n  const isChild = 'type' in option && option.type === 'child';\n  const { throughIndex, inGroupIndex, groupIndex } = getTestOptionIndexes(option) || {};\n\n  let optionContent;\n  if (useEntered) {\n    optionContent = enteredTextLabel(option.value || '');\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    const a11yProperties: AutosuggestOptionProps['nativeAttributes'] = {};\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n\n    optionContent = (\n      <div {...a11yProperties}>\n        <OptionComponent option={option} highlightText={highlightText} />\n      </div>\n    );\n  }\n\n  return (\n    <SelectableItem\n      {...baseProps}\n      className={styles.option}\n      ariaSelected={highlighted || undefined}\n      highlighted={highlighted}\n      disabled={option.disabled}\n      hasBackground={useEntered}\n      isParent={isParent}\n      isChild={isChild}\n      virtualPosition={virtualPosition}\n      data-test-index={throughIndex}\n      data-in-group-index={inGroupIndex}\n      data-group-index={groupIndex}\n      ref={ref}\n      padBottom={padBottom}\n      screenReaderContent={screenReaderContent}\n      ariaSetsize={ariaSetsize}\n      ariaPosinset={ariaPosinset}\n    >\n      {optionContent}\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(AutosuggestOption));\n"]},"metadata":{},"sourceType":"module"}