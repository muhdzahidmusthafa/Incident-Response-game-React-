{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport styles from '../../../styles.css.js';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { getDateLabel } from '../../utils/intl';\nimport clsx from 'clsx';\n\nvar GridDay = function (_a) {\n  var _b;\n\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      date = _a.date,\n      selectedDate = _a.selectedDate,\n      focusedDate = _a.focusedDate,\n      isDateEnabled = _a.isDateEnabled,\n      todayAriaLabel = _a.todayAriaLabel,\n      onSelectDate = _a.onSelectDate,\n      isDateInLastWeek = _a.isDateInLastWeek;\n  var labels = [getDateLabel(locale, date)];\n  var isFocusable = !!focusedDate && isSameDay(date, focusedDate);\n  var isSelected = !!selectedDate && isSameDay(date, selectedDate);\n  var isEnabled = !isDateEnabled || isDateEnabled(date);\n  var isDateOnSameDay = isSameDay(date, new Date());\n  var computedAttributes = {};\n  var classNames = clsx(styles['calendar-day'], (_b = {}, _b[styles['calendar-day-in-last-week']] = isDateInLastWeek, _b[styles['calendar-day-current-month']] = isSameMonth(date, baseDate), _b[styles['calendar-day-enabled']] = isEnabled, _b[styles['calendar-day-selected']] = isSelected, _b[styles['calendar-day-today']] = isDateOnSameDay, _b[styles['calendar-day-focusable']] = isFocusable && isEnabled, _b));\n\n  if (isSelected) {\n    computedAttributes['aria-current'] = 'date';\n  }\n\n  if (isDateOnSameDay) {\n    labels.push(todayAriaLabel);\n  }\n\n  if (isEnabled) {\n    computedAttributes.onClick = function () {\n      return onSelectDate(date);\n    };\n\n    computedAttributes.tabIndex = -1;\n  } else {\n    computedAttributes['aria-disabled'] = true;\n  }\n\n  if (isFocusable && isEnabled) {\n    computedAttributes.tabIndex = 0;\n  }\n\n  return React.createElement(\"div\", __assign({\n    className: classNames,\n    \"aria-label\": labels.join('. '),\n    role: \"button\"\n  }, computedAttributes), React.createElement(\"span\", {\n    className: styles['day-inner']\n  }, date.getDate()));\n};\n\nexport default GridDay;","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,UAAvC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAcA,IAAMC,OAAO,GAAG,UAACC,EAAD,EAUD;;;MATbC,MAAM;MACNC,QAAQ;MACRC,IAAI;MACJC,YAAY;MACZC,WAAW;MACXC,aAAa;MACbC,cAAc;MACdC,YAAY;MACZC,gBAAgB;EAEhB,IAAMC,MAAM,GAAG,CAACb,YAAY,CAACI,MAAD,EAASE,IAAT,CAAb,CAAf;EACA,IAAMQ,WAAW,GAAG,CAAC,CAACN,WAAF,IAAiBV,SAAS,CAACQ,IAAD,EAAOE,WAAP,CAA9C;EACA,IAAMO,UAAU,GAAG,CAAC,CAACR,YAAF,IAAkBT,SAAS,CAACQ,IAAD,EAAOC,YAAP,CAA9C;EACA,IAAMS,SAAS,GAAG,CAACP,aAAD,IAAkBA,aAAa,CAACH,IAAD,CAAjD;EACA,IAAMW,eAAe,GAAGnB,SAAS,CAACQ,IAAD,EAAO,IAAIY,IAAJ,EAAP,CAAjC;EACA,IAAMC,kBAAkB,GAAyC,EAAjE;EACA,IAAMC,UAAU,GAAGnB,IAAI,CAACJ,MAAM,CAAC,cAAD,CAAP,GAAuBwB,SAC5CA,GAACxB,MAAM,CAAC,2BAAD,CAAP,IAAuCe,gBADK,EAE5CS,GAACxB,MAAM,CAAC,4BAAD,CAAP,IAAwCE,WAAW,CAACO,IAAD,EAAOD,QAAP,CAFP,EAG5CgB,GAACxB,MAAM,CAAC,sBAAD,CAAP,IAAkCmB,SAHU,EAI5CK,GAACxB,MAAM,CAAC,uBAAD,CAAP,IAAmCkB,UAJS,EAK5CM,GAACxB,MAAM,CAAC,oBAAD,CAAP,IAAgCoB,eALY,EAM5CI,GAACxB,MAAM,CAAC,wBAAD,CAAP,IAAoCiB,WAAW,IAAIE,SANP,IAAvB,EAAvB;;EASA,IAAID,UAAJ,EAAgB;IACdI,kBAAkB,CAAC,cAAD,CAAlB,GAAqC,MAArC;EACD;;EAED,IAAIF,eAAJ,EAAqB;IACnBJ,MAAM,CAACS,IAAP,CAAYZ,cAAZ;EACD;;EAED,IAAIM,SAAJ,EAAe;IACbG,kBAAkB,CAACI,OAAnB,GAA6B;MAAM,mBAAY,CAACjB,IAAD,CAAZ;IAAkB,CAArD;;IACAa,kBAAkB,CAACK,QAAnB,GAA8B,CAAC,CAA/B;EACD,CAHD,MAGO;IACLL,kBAAkB,CAAC,eAAD,CAAlB,GAAsC,IAAtC;EACD;;EAED,IAAIL,WAAW,IAAIE,SAAnB,EAA8B;IAC5BG,kBAAkB,CAACK,QAAnB,GAA8B,CAA9B;EACD;;EAED,OACE5B;IAAK6B,SAAS,EAAEL,UAAhB;IAA0B,cAAcP,MAAM,CAACa,IAAP,CAAY,IAAZ,CAAxC;IAA2DC,IAAI,EAAC;EAAhE,GAA6ER,kBAA7E,GACEvB;IAAM6B,SAAS,EAAE5B,MAAM,CAAC,WAAD;EAAvB,GAAuCS,IAAI,CAACsB,OAAL,EAAvC,CADF,CADF;AAKD,CAlDD;;AAoDA,eAAe1B,OAAf","names":["React","styles","isSameDay","isSameMonth","getDateLabel","clsx","GridDay","_a","locale","baseDate","date","selectedDate","focusedDate","isDateEnabled","todayAriaLabel","onSelectDate","isDateInLastWeek","labels","isFocusable","isSelected","isEnabled","isDateOnSameDay","Date","computedAttributes","classNames","_b","push","onClick","tabIndex","className","join","role","getDate"],"sourceRoot":"","sources":["../../../../../../src/date-picker/calendar/grid/day/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from '../../../styles.css.js';\nimport { DatePickerProps } from '../../../interfaces';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { getDateLabel } from '../../utils/intl';\nimport clsx from 'clsx';\n\ninterface GridDayProps {\n  locale: string;\n  baseDate: Date;\n  date: Date;\n  selectedDate?: Date | null;\n  focusedDate: Date | null;\n  isDateEnabled?: DatePickerProps.IsDateEnabledFunction;\n  todayAriaLabel: string;\n  onSelectDate: (date: Date) => void;\n  isDateInLastWeek: boolean;\n}\n\nconst GridDay = ({\n  locale,\n  baseDate,\n  date,\n  selectedDate,\n  focusedDate,\n  isDateEnabled,\n  todayAriaLabel,\n  onSelectDate,\n  isDateInLastWeek,\n}: GridDayProps) => {\n  const labels = [getDateLabel(locale, date)];\n  const isFocusable = !!focusedDate && isSameDay(date, focusedDate);\n  const isSelected = !!selectedDate && isSameDay(date, selectedDate);\n  const isEnabled = !isDateEnabled || isDateEnabled(date);\n  const isDateOnSameDay = isSameDay(date, new Date());\n  const computedAttributes: React.HTMLAttributes<HTMLDivElement> = {};\n  const classNames = clsx(styles['calendar-day'], {\n    [styles['calendar-day-in-last-week']]: isDateInLastWeek,\n    [styles['calendar-day-current-month']]: isSameMonth(date, baseDate),\n    [styles['calendar-day-enabled']]: isEnabled,\n    [styles['calendar-day-selected']]: isSelected,\n    [styles['calendar-day-today']]: isDateOnSameDay,\n    [styles['calendar-day-focusable']]: isFocusable && isEnabled,\n  });\n\n  if (isSelected) {\n    computedAttributes['aria-current'] = 'date';\n  }\n\n  if (isDateOnSameDay) {\n    labels.push(todayAriaLabel);\n  }\n\n  if (isEnabled) {\n    computedAttributes.onClick = () => onSelectDate(date);\n    computedAttributes.tabIndex = -1;\n  } else {\n    computedAttributes['aria-disabled'] = true;\n  }\n\n  if (isFocusable && isEnabled) {\n    computedAttributes.tabIndex = 0;\n  }\n\n  return (\n    <div className={classNames} aria-label={labels.join('. ')} role=\"button\" {...computedAttributes}>\n      <span className={styles['day-inner']}>{date.getDate()}</span>\n    </div>\n  );\n};\n\nexport default GridDay;\n"]},"metadata":{},"sourceType":"module"}