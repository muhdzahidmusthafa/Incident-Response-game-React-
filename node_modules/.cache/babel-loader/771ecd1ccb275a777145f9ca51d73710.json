{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport InternalBox from '../box/internal';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { warnOnce } from '../internal/logging';\nimport InternalChartFilters from './chart-filters';\nimport InternalChartLegend from './chart-legend';\nimport ChartContainer from './chart-container';\nimport cartesianStyles from '../internal/components/cartesian-chart/styles.css.js';\nimport styles from './styles.css.js';\nimport { isDevelopment } from '../internal/is-development';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { nodeContains } from '../internal/utils/dom';\nimport { isXThreshold, isYThreshold } from './utils';\nexport default function InternalMixedLineBarChart(_a) {\n  var _b;\n\n  var height = _a.height,\n      xScaleType = _a.xScaleType,\n      yScaleType = _a.yScaleType,\n      xDomain = _a.xDomain,\n      yDomain = _a.yDomain,\n      controlledHighlightedSeries = _a.highlightedSeries,\n      controlledVisibleSeries = _a.visibleSeries,\n      externalSeries = _a.series,\n      onFilterChange = _a.onFilterChange,\n      controlledOnHighlightChange = _a.onHighlightChange,\n      i18nStrings = _a.i18nStrings,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescription = _a.ariaDescription,\n      xTitle = _a.xTitle,\n      yTitle = _a.yTitle,\n      stackedBars = _a.stackedBars,\n      horizontalBars = _a.horizontalBars,\n      hideFilter = _a.hideFilter,\n      additionalFilters = _a.additionalFilters,\n      hideLegend = _a.hideLegend,\n      legendTitle = _a.legendTitle,\n      statusType = _a.statusType,\n      detailPopoverSize = _a.detailPopoverSize,\n      emphasizeBaselineAxis = _a.emphasizeBaselineAxis,\n      empty = _a.empty,\n      noMatch = _a.noMatch,\n      errorText = _a.errorText,\n      loadingText = _a.loadingText,\n      recoveryText = _a.recoveryText,\n      onRecoveryClick = _a.onRecoveryClick,\n      _c = _a.__internalRootRef,\n      __internalRootRef = _c === void 0 ? null : _c,\n      props = __rest(_a, [\"height\", \"xScaleType\", \"yScaleType\", \"xDomain\", \"yDomain\", \"highlightedSeries\", \"visibleSeries\", \"series\", \"onFilterChange\", \"onHighlightChange\", \"i18nStrings\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"xTitle\", \"yTitle\", \"stackedBars\", \"horizontalBars\", \"hideFilter\", \"additionalFilters\", \"hideLegend\", \"legendTitle\", \"statusType\", \"detailPopoverSize\", \"emphasizeBaselineAxis\", \"empty\", \"noMatch\", \"errorText\", \"loadingText\", \"recoveryText\", \"onRecoveryClick\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(props);\n  var containerRef = useRef(null);\n  useEffect(function () {\n    var gotBarSeries = externalSeries.some(function (s) {\n      return s.type === 'bar';\n    });\n    var gotLineSeries = externalSeries.some(function (s) {\n      return s.type === 'line';\n    });\n\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce('MixedLineBarChart', \"Bar series cannot be used with a \".concat(xScaleType, \" scale. Use a categorical x axis instead.\"));\n    }\n\n    if (horizontalBars && gotLineSeries) {\n      warnOnce('MixedLineBarChart', \"Property horizontalBars can only be used with charts that contain only bar or threshold series.\");\n    }\n\n    for (var _i = 0, externalSeries_1 = externalSeries; _i < externalSeries_1.length; _i++) {\n      var s = externalSeries_1[_i];\n\n      if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n        warnOnce('MixedLineBarChart', \"Series of type \\\"threshold\\\" must contain either x or y property.\");\n      }\n\n      if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n        warnOnce('MixedLineBarChart', \"Series of type \\\"threshold\\\" must contain either x or y property.\");\n      }\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n  var series = useMemo(function () {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    var colors = createCategoryColorScale(externalSeries, function (it) {\n      return isYThreshold(it) || isXThreshold(it);\n    }, function (it) {\n      return it.color || null;\n    });\n    return externalSeries.map(function (s, i) {\n      return {\n        index: i,\n        color: colors[i],\n        series: s\n      };\n    });\n  }, [externalSeries]);\n\n  var _d = useState(null),\n      highlightedPoint = _d[0],\n      setHighlightedPoint = _d[1];\n\n  var _e = useState(null),\n      highlightedGroupIndex = _e[0],\n      setHighlightedGroupIndex = _e[1];\n\n  var _f = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {\n    componentName: 'MixedLineBarChart',\n    controlledProp: 'highlightedSeries',\n    changeHandler: 'onHighlightChange'\n  }),\n      _g = _f[0],\n      highlightedSeries = _g === void 0 ? null : _g,\n      setHighlightedSeries = _f[1];\n\n  var _h = useState(highlightedSeries),\n      legendSeries = _h[0],\n      setLegendSeries = _h[1];\n\n  useEffect(function () {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n\n  var _j = useControllable(controlledVisibleSeries, onFilterChange, externalSeries, {\n    componentName: 'MixedLineBarChart',\n    controlledProp: 'visibleSeries',\n    changeHandler: 'onFilterChange'\n  }),\n      externalVisibleSeries = _j[0],\n      setExternalVisibleSeries = _j[1];\n\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var previousSeries = usePrevious(externalSeries);\n    var hasPrevious = !!(previousSeries && previousSeries.length);\n    var hasCurrent = !!externalSeries.length;\n\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce('MixedLineBarChart', 'The `series` value passed into the component changed. ' + 'This may cause problems with filtering - we recommend that you make the `series` value constant, ' + 'or provide a `visibleSeries` value that derives from the current `series` value.');\n    }\n  }\n\n  var visibleSeries = useMemo(function () {\n    return series.filter(function (s) {\n      return (externalVisibleSeries === null || externalVisibleSeries === void 0 ? void 0 : externalVisibleSeries.indexOf(s.series)) !== -1;\n    });\n  }, [series, externalVisibleSeries]);\n\n  var filterChange = function (selectedSeries) {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries\n    });\n  };\n\n  var onHighlightChange = function (series) {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series\n    });\n    setLegendSeries(series);\n  };\n\n  var onBlur = function (event) {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n\n  var _k = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries || [],\n    statusType: statusType\n  }),\n      isEmpty = _k.isEmpty,\n      isNoMatch = _k.isNoMatch,\n      showChart = _k.showChart;\n\n  var showFilters = statusType === 'finished' && (!isEmpty || isNoMatch);\n  var showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  var reserveLegendSpace = !showChart && !hideLegend;\n  var reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  var mergedRef = useMergeRefs(containerRef, __internalRootRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef,\n    onBlur: onBlur\n  }), showFilters && React.createElement(InternalBox, {\n    className: cartesianStyles['filter-container'],\n    margin: {\n      bottom: 'l'\n    }\n  }, React.createElement(InternalChartFilters, {\n    series: series,\n    visibleSeries: externalVisibleSeries || [],\n    onChange: filterChange,\n    i18nStrings: i18nStrings,\n    hideFilter: hideFilter,\n    additionalFilters: additionalFilters\n  })), React.createElement(\"div\", {\n    className: clsx(styles.content, (_b = {}, _b[styles['content--reserve-filter']] = reserveFilterSpace, _b[styles['content--reserve-legend']] = reserveLegendSpace, _b)),\n    style: {\n      minHeight: height\n    }\n  }, React.createElement(ChartStatusContainer, {\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    showChart: showChart,\n    statusType: statusType,\n    empty: empty,\n    noMatch: noMatch,\n    loadingText: loadingText,\n    errorText: errorText,\n    recoveryText: recoveryText,\n    onRecoveryClick: onRecoveryClick\n  }), showChart && React.createElement(ChartContainer, {\n    height: height,\n    xScaleType: xScaleType,\n    yScaleType: yScaleType,\n    xDomain: xDomain,\n    yDomain: yDomain,\n    xTickFormatter: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.xTickFormatter,\n    yTickFormatter: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.yTickFormatter,\n    emphasizeBaselineAxis: emphasizeBaselineAxis,\n    stackedBars: stackedBars,\n    horizontalBars: horizontalBars,\n    series: series,\n    visibleSeries: visibleSeries,\n    highlightedSeries: highlightedSeries,\n    onHighlightChange: onHighlightChange,\n    highlightedPoint: highlightedPoint,\n    setHighlightedPoint: setHighlightedPoint,\n    highlightedGroupIndex: highlightedGroupIndex,\n    setHighlightedGroupIndex: setHighlightedGroupIndex,\n    legendSeries: legendSeries,\n    detailPopoverSize: detailPopoverSize,\n    xTitle: xTitle,\n    yTitle: yTitle,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescription: ariaDescription,\n    i18nStrings: i18nStrings,\n    plotContainerRef: containerRef\n  })), showLegend && React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, React.createElement(InternalChartLegend, {\n    series: series,\n    visibleSeries: externalVisibleSeries || [],\n    highlightedSeries: legendSeries,\n    onHighlightChange: onHighlightChange,\n    legendTitle: legendTitle,\n    ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel,\n    plotContainerRef: containerRef\n  })));\n}","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,oBAAP,IAA+BC,cAA/B,QAAqD,+CAArD;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,OAAOC,oBAAP,MAAiC,iBAAjC;AACA,OAAOC,mBAAP,MAAgC,gBAAhC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,eAAP,MAA4B,sDAA5B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AACA,OAAOC,wBAAP,MAAqC,+CAArC;AAEA,SAASC,YAAT,QAA6B,kCAA7B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,SAA3C;AAgBA,eAAc,SAAUC,yBAAV,CAAsEC,EAAtE,EAkCsB;;;EAjClC,UAAM,YAAN;EAAA,IACAC,UAAU,gBADV;EAAA,IAEAC,UAAU,gBAFV;EAAA,IAGAC,OAAO,aAHP;EAAA,IAIAC,OAAO,aAJP;EAAA,IAKmBC,2BAA2B,uBAL9C;EAAA,IAMeC,uBAAuB,mBANtC;EAAA,IAOQC,cAAc,YAPtB;EAAA,IAQAC,cAAc,oBARd;EAAA,IASmBC,2BAA2B,uBAT9C;EAAA,IAUAC,WAAW,iBAVX;EAAA,IAWAC,SAAS,eAXT;EAAA,IAYAC,cAAc,oBAZd;EAAA,IAaAC,eAAe,qBAbf;EAAA,IAcAC,MAAM,YAdN;EAAA,IAeAC,MAAM,YAfN;EAAA,IAgBAC,WAAW,iBAhBX;EAAA,IAiBAC,cAAc,oBAjBd;EAAA,IAkBAC,UAAU,gBAlBV;EAAA,IAmBAC,iBAAiB,uBAnBjB;EAAA,IAoBAC,UAAU,gBApBV;EAAA,IAqBAC,WAAW,iBArBX;EAAA,IAsBAC,UAAU,gBAtBV;EAAA,IAuBAC,iBAAiB,uBAvBjB;EAAA,IAwBAC,qBAAqB,2BAxBrB;EAAA,IAyBAC,KAAK,WAzBL;EAAA,IA0BAC,OAAO,aA1BP;EAAA,IA2BAC,SAAS,eA3BT;EAAA,IA4BAC,WAAW,iBA5BX;EAAA,IA6BAC,YAAY,kBA7BZ;EAAA,IA8BAC,eAAe,qBA9Bf;EAAA,IA+BAC,yBA/BA;EAAA,IA+BAC,iBAAiB,mBAAG,IAAH,GAAOD,EA/BxB;EAAA,IAgCGE,KAAK,cAjC0E,6eAiC1E,CAhCR;;EAkCA,IAAMC,SAAS,GAAGtD,YAAY,CAACqD,KAAD,CAA9B;EACA,IAAME,YAAY,GAAG1D,MAAM,CAAiB,IAAjB,CAA3B;EAEAF,SAAS,CAAC;IACR,IAAM6D,YAAY,GAAG7B,cAAc,CAAC8B,IAAf,CAAoB,aAAC;MAAI,QAAC,CAACC,IAAF,KAAW,KAAX;IAAgB,CAAzC,CAArB;IACA,IAAMC,aAAa,GAAGhC,cAAc,CAAC8B,IAAf,CAAoB,aAAC;MAAI,QAAC,CAACC,IAAF,KAAW,MAAX;IAAiB,CAA1C,CAAtB;;IAEA,IAAIrC,UAAU,KAAK,aAAf,IAAgCmC,YAApC,EAAkD;MAChDjD,QAAQ,CACN,mBADM,EAEN,2CAAoCc,UAApC,EAA8C,2CAA9C,CAFM,CAAR;IAID;;IAED,IAAIgB,cAAc,IAAIsB,aAAtB,EAAqC;MACnCpD,QAAQ,CACN,mBADM,EAEN,iGAFM,CAAR;IAID;;IAED,KAAgB,6CAAhB,EAAgBqD,4BAAhB,EAAgBA,IAAhB,EAAgC;MAA3B,IAAMC,CAAC,uBAAP;;MACH,IAAIA,CAAC,CAACH,IAAF,KAAW,WAAX,IAA0BG,CAAC,CAACC,CAAF,KAAQC,SAAlC,IAA+CF,CAAC,CAACG,CAAF,KAAQD,SAA3D,EAAsE;QACpExD,QAAQ,CAAC,mBAAD,EAAsB,mEAAtB,CAAR;MACD;;MACD,IAAIsD,CAAC,CAACH,IAAF,KAAW,WAAX,IAA0BG,CAAC,CAACC,CAAF,KAAQC,SAAlC,IAA+CF,CAAC,CAACG,CAAF,KAAQD,SAA3D,EAAsE;QACpExD,QAAQ,CAAC,mBAAD,EAAsB,mEAAtB,CAAR;MACD;IACF;EACF,CA1BQ,EA0BN,CAACc,UAAD,EAAagB,cAAb,EAA6BV,cAA7B,CA1BM,CAAT;EA4BA,IAAMsC,MAAM,GAAGrE,OAAO,CAAC;IACrB;IACA;IACA,IAAMsE,MAAM,GAAGpD,wBAAwB,CACrCa,cADqC,EAErC,cAAE;MAAI,mBAAY,CAACwC,EAAD,CAAZ,IAAoBlD,YAAY,CAACkD,EAAD,CAAhC;IAAoC,CAFL,EAGrC,cAAE;MAAI,SAAE,CAACC,KAAH,IAAY,IAAZ;IAAgB,CAHe,CAAvC;IAMA,OAAOzC,cAAc,CAAC0C,GAAf,CAAmB,UAACR,CAAD,EAAIS,CAAJ,EAAK;MAAK,OAAC;QAAEC,KAAK,EAAED,CAAT;QAAYF,KAAK,EAAEF,MAAM,CAACI,CAAD,CAAzB;QAA8BL,MAAM,EAAEJ;MAAtC,CAAD;IAA2C,CAAxE,CAAP;EACD,CAVqB,EAUnB,CAAClC,cAAD,CAVmB,CAAtB;;EAYM,SAA0C7B,QAAQ,CAAwB,IAAxB,CAAlD;EAAA,IAAC0E,gBAAgB,QAAjB;EAAA,IAAmBC,mBAAmB,QAAtC;;EACA,SAAoD3E,QAAQ,CAAgB,IAAhB,CAA5D;EAAA,IAAC4E,qBAAqB,QAAtB;EAAA,IAAwBC,wBAAwB,QAAhD;;EACA,SAAmDtE,eAAe,CACtEoB,2BADsE,EAEtEI,2BAFsE,EAGtE,IAHsE,EAItE;IACE+C,aAAa,EAAE,mBADjB;IAEEC,cAAc,EAAE,mBAFlB;IAGEC,aAAa,EAAE;EAHjB,CAJsE,CAAlE;EAAA,IAACC,UAAD;EAAA,IAACC,iBAAiB,mBAAG,IAAH,GAAOD,EAAzB;EAAA,IAA2BE,oBAAoB,QAA/C;;EAUA,SAAkCnF,QAAQ,CAA+CkF,iBAA/C,CAA1C;EAAA,IAACE,YAAY,QAAb;EAAA,IAAeC,eAAe,QAA9B;;EACNxF,SAAS,CAAC;IACRwF,eAAe,CAAC1D,2BAA2B,IAAI,IAAhC,CAAf;EACD,CAFQ,EAEN,CAACA,2BAAD,CAFM,CAAT;;EAIM,SAAoDpB,eAAe,CACvEqB,uBADuE,EAEvEE,cAFuE,EAGvED,cAHuE,EAIvE;IACEiD,aAAa,EAAE,mBADjB;IAEEC,cAAc,EAAE,eAFlB;IAGEC,aAAa,EAAE;EAHjB,CAJuE,CAAnE;EAAA,IAACM,qBAAqB,QAAtB;EAAA,IAAwBC,wBAAwB,QAAhD;;EAWN,IAAIxE,aAAJ,EAAmB;IACjB;IACA,IAAMyE,cAAc,GAAGhF,WAAW,CAACqB,cAAD,CAAlC;IAEA,IAAM4D,WAAW,GAAG,CAAC,EAAED,cAAc,IAAIA,cAAc,CAACE,MAAnC,CAArB;IACA,IAAMC,UAAU,GAAG,CAAC,CAAC9D,cAAc,CAAC6D,MAApC;;IAEA,IAAID,WAAW,IAAIE,UAAf,IAA6B9D,cAAc,KAAK2D,cAAhD,IAAkE,CAAC5D,uBAAnE,IAA8F,CAACY,UAAnG,EAA+G;MAC7G/B,QAAQ,CACN,mBADM,EAEN,2DACE,mGADF,GAEE,kFAJI,CAAR;IAMD;EACF;;EAED,IAAMmF,aAAa,GAAG9F,OAAO,CAC3B;IAAM,aAAM,CAAC+F,MAAP,CAAc,aAAC;MAAI,6BAAqB,SAArB,yBAAqB,WAArB,GAAqB,MAArB,wBAAqB,CAAEC,OAAvB,CAA+B/B,CAAC,CAACI,MAAjC,OAA6C,CAAC,CAA9C;IAA+C,CAAlE;EAAmE,CAD9C,EAE3B,CAACA,MAAD,EAASmB,qBAAT,CAF2B,CAA7B;;EAKA,IAAMS,YAAY,GAAG,UAACC,cAAD,EAAqE;IACxFT,wBAAwB,CAACS,cAAD,CAAxB;IACA7F,sBAAsB,CAAC2B,cAAD,EAAiB;MACrC8D,aAAa,EAAEI;IADsB,CAAjB,CAAtB;EAGD,CALD;;EAOA,IAAMC,iBAAiB,GAAG,UAAC9B,MAAD,EAAqD;IAC7EgB,oBAAoB,CAAChB,MAAD,CAApB;IACAhE,sBAAsB,CAAC4B,2BAAD,EAA8B;MAClDmD,iBAAiB,EAAEf;IAD+B,CAA9B,CAAtB;IAGAkB,eAAe,CAAClB,MAAD,CAAf;EACD,CAND;;EAQA,IAAM+B,MAAM,GAAG,UAACC,KAAD,EAAwB;IACrC,IAAIA,KAAK,CAACC,aAAN,IAAuB,CAAClF,YAAY,CAACuC,YAAY,CAAC4C,OAAd,EAAuBF,KAAK,CAACC,aAA7B,CAAxC,EAAqF;MACnFlB,iBAAiB,IAAIe,iBAAiB,CAACf,iBAAD,CAAtC;MACAP,mBAAmB,CAAC,IAAD,CAAnB;MACAE,wBAAwB,CAAC,IAAD,CAAxB;MACAQ,eAAe,CAAC,IAAD,CAAf;IACD;EACF,CAPD;;EASM,SAAoC/E,cAAc,CAAC;IACvDgG,YAAY,EAAEzE,cADyC;IAEvD0E,WAAW,EAAEX,aAAa,IAAI,EAFyB;IAGvDhD,UAAU;EAH6C,CAAD,CAAlD;EAAA,IAAE4D,OAAO,aAAT;EAAA,IAAWC,SAAS,eAApB;EAAA,IAAsBC,SAAS,eAA/B;;EAKN,IAAMC,WAAW,GAAG/D,UAAU,KAAK,UAAf,KAA8B,CAAC4D,OAAD,IAAYC,SAA1C,CAApB;EACA,IAAMG,UAAU,GAAG,CAAClE,UAAD,IAAe,CAAC8D,OAAhB,IAA2B5D,UAAU,KAAK,UAA7D;EACA,IAAMiE,kBAAkB,GAAG,CAACH,SAAD,IAAc,CAAChE,UAA1C;EACA,IAAMoE,kBAAkB,GAAG,CAACJ,SAAD,IAAc,CAACD,SAAf,KAA6B,CAACjE,UAAD,IAAeC,iBAA5C,CAA3B;EACA,IAAMsE,SAAS,GAAG9F,YAAY,CAACwC,YAAD,EAAeH,iBAAf,CAA9B;EAEA,OACE1D,wCAAS4D,SAAT,EAAkB;IAAEwD,SAAS,EAAE/G,IAAI,CAACuD,SAAS,CAACwD,SAAX,EAAsBlG,MAAM,CAACmG,IAA7B,CAAjB;IAAqDC,GAAG,EAAEH,SAA1D;IAAqEb,MAAM,EAAEA;EAA7E,CAAlB,GACGS,WAAW,IACV/G,oBAACQ,WAAD,EAAY;IAAC4G,SAAS,EAAEnG,eAAe,CAAC,kBAAD,CAA3B;IAAiDsG,MAAM,EAAE;MAAEC,MAAM,EAAE;IAAV;EAAzD,CAAZ,EACExH,oBAACc,oBAAD,EAAqB;IACnByD,MAAM,EAAEA,MADW;IAEnByB,aAAa,EAAEN,qBAAqB,IAAI,EAFrB;IAGnB+B,QAAQ,EAAEtB,YAHS;IAInB/D,WAAW,EAAEA,WAJM;IAKnBQ,UAAU,EAAEA,UALO;IAMnBC,iBAAiB,EAAEA;EANA,CAArB,CADF,CAFJ,EAcE7C;IACEoH,SAAS,EAAE/G,IAAI,CAACa,MAAM,CAACwG,OAAR,GAAeC,SAC5BA,GAACzG,MAAM,CAAC,yBAAD,CAAP,IAAqCgG,kBADT,EAE5BS,GAACzG,MAAM,CAAC,yBAAD,CAAP,IAAqC+F,kBAFT,IAAf,EADjB;IAKEW,KAAK,EAAE;MAAEC,SAAS,EAAEC;IAAb;EALT,GAOE9H,oBAACS,oBAAD,EAAqB;IACnBmG,OAAO,EAAEA,OADU;IAEnBC,SAAS,EAAEA,SAFQ;IAGnBC,SAAS,EAAEA,SAHQ;IAInB9D,UAAU,EAAEA,UAJO;IAKnBG,KAAK,EAAEA,KALY;IAMnBC,OAAO,EAAEA,OANU;IAOnBE,WAAW,EAAEA,WAPM;IAQnBD,SAAS,EAAEA,SARQ;IASnBE,YAAY,EAAEA,YATK;IAUnBC,eAAe,EAAEA;EAVE,CAArB,CAPF,EAmBGsD,SAAS,IACR9G,oBAACgB,cAAD,EAAe;IACb8G,MAAM,EAAEA,MADK;IAEbnG,UAAU,EAAEA,UAFC;IAGbC,UAAU,EAAEA,UAHC;IAIbC,OAAO,EAAEA,OAJI;IAKbC,OAAO,EAAEA,OALI;IAMbiG,cAAc,EAAE3F,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAE2F,cANhB;IAObC,cAAc,EAAE5F,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAE4F,cAPhB;IAQb9E,qBAAqB,EAAEA,qBARV;IASbR,WAAW,EAAEA,WATA;IAUbC,cAAc,EAAEA,cAVH;IAWb4B,MAAM,EAAEA,MAXK;IAYbyB,aAAa,EAAEA,aAZF;IAabV,iBAAiB,EAAEA,iBAbN;IAcbe,iBAAiB,EAAEA,iBAdN;IAebvB,gBAAgB,EAAEA,gBAfL;IAgBbC,mBAAmB,EAAEA,mBAhBR;IAiBbC,qBAAqB,EAAEA,qBAjBV;IAkBbC,wBAAwB,EAAEA,wBAlBb;IAmBbO,YAAY,EAAEA,YAnBD;IAoBbvC,iBAAiB,EAAEA,iBApBN;IAqBbT,MAAM,EAAEA,MArBK;IAsBbC,MAAM,EAAEA,MAtBK;IAuBbJ,SAAS,EAAEA,SAvBE;IAwBbC,cAAc,EAAEA,cAxBH;IAyBbC,eAAe,EAAEA,eAzBJ;IA0BbH,WAAW,EAAEA,WA1BA;IA2Bb6F,gBAAgB,EAAEpE;EA3BL,CAAf,CApBJ,CAdF,EAkEGmD,UAAU,IACThH,oBAACQ,WAAD,EAAY;IAAC+G,MAAM,EAAE;MAAEW,GAAG,EAAE;IAAP;EAAT,CAAZ,EACElI,oBAACe,mBAAD,EAAoB;IAClBwD,MAAM,EAAEA,MADU;IAElByB,aAAa,EAAEN,qBAAqB,IAAI,EAFtB;IAGlBJ,iBAAiB,EAAEE,YAHD;IAIlBa,iBAAiB,EAAEA,iBAJD;IAKlBtD,WAAW,EAAEA,WALK;IAMlBV,SAAS,EAAED,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAE+F,eANN;IAOlBF,gBAAgB,EAAEpE;EAPA,CAApB,CADF,CAnEJ,CADF;AAkFD","names":["React","useEffect","useMemo","useRef","useState","clsx","getBaseProps","fireNonCancelableEvent","InternalBox","ChartStatusContainer","getChartStatus","useControllable","usePrevious","warnOnce","InternalChartFilters","InternalChartLegend","ChartContainer","cartesianStyles","styles","isDevelopment","createCategoryColorScale","useMergeRefs","nodeContains","isXThreshold","isYThreshold","InternalMixedLineBarChart","_a","xScaleType","yScaleType","xDomain","yDomain","controlledHighlightedSeries","controlledVisibleSeries","externalSeries","onFilterChange","controlledOnHighlightChange","i18nStrings","ariaLabel","ariaLabelledby","ariaDescription","xTitle","yTitle","stackedBars","horizontalBars","hideFilter","additionalFilters","hideLegend","legendTitle","statusType","detailPopoverSize","emphasizeBaselineAxis","empty","noMatch","errorText","loadingText","recoveryText","onRecoveryClick","_c","__internalRootRef","props","baseProps","containerRef","gotBarSeries","some","type","gotLineSeries","_i","s","x","undefined","y","series","colors","it","color","map","i","index","highlightedPoint","setHighlightedPoint","highlightedGroupIndex","setHighlightedGroupIndex","componentName","controlledProp","changeHandler","_g","highlightedSeries","setHighlightedSeries","legendSeries","setLegendSeries","externalVisibleSeries","setExternalVisibleSeries","previousSeries","hasPrevious","length","hasCurrent","visibleSeries","filter","indexOf","filterChange","selectedSeries","onHighlightChange","onBlur","event","relatedTarget","current","externalData","visibleData","isEmpty","isNoMatch","showChart","showFilters","showLegend","reserveLegendSpace","reserveFilterSpace","mergedRef","className","root","ref","margin","bottom","onChange","content","_b","style","minHeight","height","xTickFormatter","yTickFormatter","plotContainerRef","top","legendAriaLabel"],"sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport InternalBox from '../box/internal';\nimport ChartStatusContainer, { getChartStatus } from '../internal/components/chart-status-container';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { warnOnce } from '../internal/logging';\n\nimport { ChartDataTypes, MixedLineBarChartProps } from './interfaces';\nimport InternalChartFilters from './chart-filters';\nimport InternalChartLegend from './chart-legend';\nimport ChartContainer from './chart-container';\nimport cartesianStyles from '../internal/components/cartesian-chart/styles.css.js';\nimport styles from './styles.css.js';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { isDevelopment } from '../internal/is-development';\nimport createCategoryColorScale from '../internal/utils/create-category-color-scale';\nimport { ScaledPoint } from './make-scaled-series';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { nodeContains } from '../internal/utils/dom';\nimport { SomeRequired } from '../internal/types';\nimport { isXThreshold, isYThreshold } from './utils';\n\ntype InternalMixedLineBarChartProps<T extends ChartDataTypes> = SomeRequired<\n  MixedLineBarChartProps<T>,\n  | 'series'\n  | 'height'\n  | 'xScaleType'\n  | 'yScaleType'\n  | 'stackedBars'\n  | 'horizontalBars'\n  | 'statusType'\n  | 'detailPopoverSize'\n  | 'emphasizeBaselineAxis'\n> &\n  InternalBaseComponentProps;\n\nexport default function InternalMixedLineBarChart<T extends number | string | Date>({\n  height,\n  xScaleType,\n  yScaleType,\n  xDomain,\n  yDomain,\n  highlightedSeries: controlledHighlightedSeries,\n  visibleSeries: controlledVisibleSeries,\n  series: externalSeries,\n  onFilterChange,\n  onHighlightChange: controlledOnHighlightChange,\n  i18nStrings,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  xTitle,\n  yTitle,\n  stackedBars,\n  horizontalBars,\n  hideFilter,\n  additionalFilters,\n  hideLegend,\n  legendTitle,\n  statusType,\n  detailPopoverSize,\n  emphasizeBaselineAxis,\n  empty,\n  noMatch,\n  errorText,\n  loadingText,\n  recoveryText,\n  onRecoveryClick,\n  __internalRootRef = null,\n  ...props\n}: InternalMixedLineBarChartProps<T>) {\n  const baseProps = getBaseProps(props);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const gotBarSeries = externalSeries.some(s => s.type === 'bar');\n    const gotLineSeries = externalSeries.some(s => s.type === 'line');\n\n    if (xScaleType !== 'categorical' && gotBarSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`\n      );\n    }\n\n    if (horizontalBars && gotLineSeries) {\n      warnOnce(\n        'MixedLineBarChart',\n        `Property horizontalBars can only be used with charts that contain only bar or threshold series.`\n      );\n    }\n\n    for (const s of externalSeries) {\n      if (s.type === 'threshold' && s.x !== undefined && s.y !== undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n      if (s.type === 'threshold' && s.x === undefined && s.y === undefined) {\n        warnOnce('MixedLineBarChart', `Series of type \"threshold\" must contain either x or y property.`);\n      }\n    }\n  }, [xScaleType, horizontalBars, externalSeries]);\n\n  const series = useMemo(() => {\n    // Generate series colors if not explicitly provided.\n    // The thresholds use a dedicated colour scale.\n    const colors = createCategoryColorScale(\n      externalSeries,\n      it => isYThreshold(it) || isXThreshold(it),\n      it => it.color || null\n    );\n\n    return externalSeries.map((s, i) => ({ index: i, color: colors[i], series: s }));\n  }, [externalSeries]);\n\n  const [highlightedPoint, setHighlightedPoint] = useState<ScaledPoint<T> | null>(null);\n  const [highlightedGroupIndex, setHighlightedGroupIndex] = useState<number | null>(null);\n  const [highlightedSeries = null, setHighlightedSeries] = useControllable(\n    controlledHighlightedSeries,\n    controlledOnHighlightChange,\n    null,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'highlightedSeries',\n      changeHandler: 'onHighlightChange',\n    }\n  );\n  const [legendSeries, setLegendSeries] = useState<MixedLineBarChartProps.ChartSeries<T> | null>(highlightedSeries);\n  useEffect(() => {\n    setLegendSeries(controlledHighlightedSeries || null);\n  }, [controlledHighlightedSeries]);\n\n  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable(\n    controlledVisibleSeries,\n    onFilterChange,\n    externalSeries,\n    {\n      componentName: 'MixedLineBarChart',\n      controlledProp: 'visibleSeries',\n      changeHandler: 'onFilterChange',\n    }\n  );\n\n  if (isDevelopment) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const previousSeries = usePrevious(externalSeries);\n\n    const hasPrevious = !!(previousSeries && previousSeries.length);\n    const hasCurrent = !!externalSeries.length;\n\n    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {\n      warnOnce(\n        'MixedLineBarChart',\n        'The `series` value passed into the component changed. ' +\n          'This may cause problems with filtering - we recommend that you make the `series` value constant, ' +\n          'or provide a `visibleSeries` value that derives from the current `series` value.'\n      );\n    }\n  }\n\n  const visibleSeries = useMemo(\n    () => series.filter(s => externalVisibleSeries?.indexOf(s.series) !== -1),\n    [series, externalVisibleSeries]\n  );\n\n  const filterChange = (selectedSeries: ReadonlyArray<MixedLineBarChartProps.ChartSeries<T>>) => {\n    setExternalVisibleSeries(selectedSeries);\n    fireNonCancelableEvent(onFilterChange, {\n      visibleSeries: selectedSeries,\n    });\n  };\n\n  const onHighlightChange = (series: MixedLineBarChartProps.ChartSeries<T> | null) => {\n    setHighlightedSeries(series);\n    fireNonCancelableEvent(controlledOnHighlightChange, {\n      highlightedSeries: series,\n    });\n    setLegendSeries(series);\n  };\n\n  const onBlur = (event: React.FocusEvent) => {\n    if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {\n      highlightedSeries && onHighlightChange(highlightedSeries);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(null);\n      setLegendSeries(null);\n    }\n  };\n\n  const { isEmpty, isNoMatch, showChart } = getChartStatus({\n    externalData: externalSeries,\n    visibleData: visibleSeries || [],\n    statusType,\n  });\n  const showFilters = statusType === 'finished' && (!isEmpty || isNoMatch);\n  const showLegend = !hideLegend && !isEmpty && statusType === 'finished';\n  const reserveLegendSpace = !showChart && !hideLegend;\n  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);\n  const mergedRef = useMergeRefs(containerRef, __internalRootRef);\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={mergedRef} onBlur={onBlur}>\n      {showFilters && (\n        <InternalBox className={cartesianStyles['filter-container']} margin={{ bottom: 'l' }}>\n          <InternalChartFilters\n            series={series}\n            visibleSeries={externalVisibleSeries || []}\n            onChange={filterChange}\n            i18nStrings={i18nStrings}\n            hideFilter={hideFilter}\n            additionalFilters={additionalFilters}\n          />\n        </InternalBox>\n      )}\n\n      <div\n        className={clsx(styles.content, {\n          [styles['content--reserve-filter']]: reserveFilterSpace,\n          [styles['content--reserve-legend']]: reserveLegendSpace,\n        })}\n        style={{ minHeight: height }}\n      >\n        <ChartStatusContainer\n          isEmpty={isEmpty}\n          isNoMatch={isNoMatch}\n          showChart={showChart}\n          statusType={statusType}\n          empty={empty}\n          noMatch={noMatch}\n          loadingText={loadingText}\n          errorText={errorText}\n          recoveryText={recoveryText}\n          onRecoveryClick={onRecoveryClick}\n        />\n        {showChart && (\n          <ChartContainer\n            height={height}\n            xScaleType={xScaleType}\n            yScaleType={yScaleType}\n            xDomain={xDomain}\n            yDomain={yDomain}\n            xTickFormatter={i18nStrings?.xTickFormatter}\n            yTickFormatter={i18nStrings?.yTickFormatter}\n            emphasizeBaselineAxis={emphasizeBaselineAxis}\n            stackedBars={stackedBars}\n            horizontalBars={horizontalBars}\n            series={series}\n            visibleSeries={visibleSeries}\n            highlightedSeries={highlightedSeries}\n            onHighlightChange={onHighlightChange}\n            highlightedPoint={highlightedPoint}\n            setHighlightedPoint={setHighlightedPoint}\n            highlightedGroupIndex={highlightedGroupIndex}\n            setHighlightedGroupIndex={setHighlightedGroupIndex}\n            legendSeries={legendSeries}\n            detailPopoverSize={detailPopoverSize}\n            xTitle={xTitle}\n            yTitle={yTitle}\n            ariaLabel={ariaLabel}\n            ariaLabelledby={ariaLabelledby}\n            ariaDescription={ariaDescription}\n            i18nStrings={i18nStrings}\n            plotContainerRef={containerRef}\n          />\n        )}\n      </div>\n\n      {showLegend && (\n        <InternalBox margin={{ top: 'm' }}>\n          <InternalChartLegend\n            series={series}\n            visibleSeries={externalVisibleSeries || []}\n            highlightedSeries={legendSeries}\n            onHighlightChange={onHighlightChange}\n            legendTitle={legendTitle}\n            ariaLabel={i18nStrings?.legendAriaLabel}\n            plotContainerRef={containerRef}\n          />\n        </InternalBox>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}