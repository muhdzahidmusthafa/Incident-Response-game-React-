{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { scaleLinear, scaleLog, scaleTime, scaleBand } from 'd3-scale';\n\nfunction isNumericDomain(domain) {\n  return domain.length > 0 && typeof domain[0] === 'number';\n}\n\nfunction isDateDomain(domain) {\n  return domain.length > 0 && domain[0] instanceof Date;\n}\n\nfunction createNumericScale(type, domain) {\n  var scale;\n\n  switch (type) {\n    case 'log':\n      scale = scaleLog();\n      break;\n\n    default:\n      scale = scaleLinear();\n  }\n\n  if (isNumericDomain(domain)) {\n    scale.domain(domain);\n  }\n\n  return scale;\n}\n\nfunction createTimeScale(domain) {\n  var scale = scaleTime();\n\n  if (isDateDomain(domain)) {\n    scale.domain(domain);\n  }\n\n  return scale;\n}\n\nfunction createBandScale(domain) {\n  var scale = scaleBand().padding(0.1);\n  scale.domain(domain);\n  return scale;\n}\n\nexport function createScale(type, domain, range) {\n  switch (type) {\n    case 'linear':\n    case 'log':\n      return {\n        type: 'numeric',\n        scale: createNumericScale(type, domain).range(range)\n      };\n\n    case 'time':\n      return {\n        type: 'time',\n        scale: createTimeScale(domain).range(range)\n      };\n\n    case 'categorical':\n      return {\n        type: 'categorical',\n        scale: createBandScale(domain).range(range)\n      };\n  }\n}\n\nvar ChartScale =\n/** @class */\nfunction () {\n  function ChartScale(scaleType, domain, range, noCategoricalOuterPadding) {\n    if (noCategoricalOuterPadding === void 0) {\n      noCategoricalOuterPadding = false;\n    }\n\n    this.scaleType = scaleType;\n    this.domain = domain;\n    this.range = range;\n    this.scale = createScale(this.scaleType, this.domain, this.range);\n    this.d3Scale = this.scale.scale;\n\n    if (this.isCategorical()) {\n      if (noCategoricalOuterPadding) {\n        // Categorical charts with only line (or threshold) series don't need as much out padding\n        // compared to a bar series. Increasing the inner padding to push more data points to the outside.\n        this.d3Scale.paddingInner(0.7);\n        this.d3Scale.paddingOuter(0);\n      } else {\n        this.d3Scale.paddingInner(0.2);\n        this.d3Scale.paddingOuter(0.05);\n      }\n    }\n  }\n\n  ChartScale.prototype.cloneScale = function (newScaleType, newDomain, newRange) {\n    return new ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);\n  };\n\n  ChartScale.prototype.isNumeric = function () {\n    return this.scale.type === 'numeric';\n  };\n\n  ChartScale.prototype.isTime = function () {\n    return this.scale.type === 'time';\n  };\n\n  ChartScale.prototype.isCategorical = function () {\n    return this.scale.type === 'categorical';\n  };\n\n  return ChartScale;\n}();\n\nexport { ChartScale };\n\nvar NumericChartScale =\n/** @class */\nfunction () {\n  function NumericChartScale(scaleType, domain, range, adjustDomain) {\n    this.scaleType = scaleType;\n    var scale = createNumericScale(scaleType, domain).range(range);\n\n    if (adjustDomain !== null) {\n      scale.nice(adjustDomain);\n    }\n\n    this.scale = {\n      type: 'numeric',\n      scale: scale\n    };\n    this.d3Scale = this.scale.scale;\n  }\n\n  NumericChartScale.prototype.isCategorical = function () {\n    return false;\n  };\n\n  return NumericChartScale;\n}();\n\nexport { NumericChartScale };","map":{"version":3,"mappings":"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","names":["scaleLinear","scaleLog","scaleTime","scaleBand","isNumericDomain","domain","length","isDateDomain","Date","createNumericScale","type","scale","createTimeScale","createBandScale","padding","createScale","range","scaleType","noCategoricalOuterPadding","d3Scale","isCategorical","paddingInner","paddingOuter","ChartScale","newScaleType","newDomain","newRange","adjustDomain","nice","NumericChartScale"],"sourceRoot":"","sources":["../../../../../src/internal/components/cartesian-chart/scales.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { scaleLinear, scaleLog, scaleTime, scaleBand, ScaleContinuousNumeric, ScaleTime, ScaleBand } from 'd3-scale';\n\nimport { ChartDataTypes, ChartDomain, ScaleType, ScaleRange } from './interfaces';\n\nexport interface NumericD3Scale {\n  type: 'numeric';\n  scale: ScaleContinuousNumeric<number, number>;\n}\n\nexport interface TimeD3Scale {\n  type: 'time';\n  scale: ScaleTime<number, number>;\n}\n\nexport interface CategoricalD3Scale {\n  type: 'categorical';\n  scale: ScaleBand<ChartDataTypes>;\n}\n\nexport type D3Scale = NumericD3Scale | TimeD3Scale | CategoricalD3Scale;\n\ntype InternalScale = ScaleContinuousNumeric<number, number> | ScaleBand<ChartDataTypes> | ScaleTime<number, number>;\n\nfunction isNumericDomain(domain: ChartDomain<ChartDataTypes>): domain is number[] {\n  return domain.length > 0 && typeof domain[0] === 'number';\n}\n\nfunction isDateDomain(domain: ChartDomain<ChartDataTypes>): domain is Date[] {\n  return domain.length > 0 && domain[0] instanceof Date;\n}\n\nfunction createNumericScale(type: ScaleType, domain: ChartDomain<ChartDataTypes>) {\n  let scale: ScaleContinuousNumeric<number, number>;\n  switch (type) {\n    case 'log':\n      scale = scaleLog();\n      break;\n    default:\n      scale = scaleLinear();\n  }\n\n  if (isNumericDomain(domain)) {\n    scale.domain(domain);\n  }\n\n  return scale;\n}\n\nfunction createTimeScale(domain: ChartDomain<ChartDataTypes>) {\n  const scale = scaleTime();\n  if (isDateDomain(domain)) {\n    scale.domain(domain);\n  }\n  return scale;\n}\n\nfunction createBandScale(domain: ChartDomain<ChartDataTypes>) {\n  const scale = scaleBand<ChartDataTypes>().padding(0.1);\n  scale.domain(domain);\n  return scale;\n}\n\nexport function createScale(type: ScaleType, domain: ChartDomain<ChartDataTypes>, range: ScaleRange): D3Scale {\n  switch (type) {\n    case 'linear':\n    case 'log':\n      return { type: 'numeric', scale: createNumericScale(type, domain).range(range) };\n\n    case 'time':\n      return { type: 'time', scale: createTimeScale(domain).range(range) };\n\n    case 'categorical':\n      return { type: 'categorical', scale: createBandScale(domain).range(range) };\n  }\n}\n\nexport class ChartScale {\n  public readonly scale: D3Scale;\n  public readonly d3Scale: InternalScale;\n\n  constructor(\n    public readonly scaleType: ScaleType,\n    public readonly domain: ChartDomain<ChartDataTypes>,\n    public readonly range: ScaleRange,\n    noCategoricalOuterPadding = false\n  ) {\n    this.scale = createScale(this.scaleType, this.domain, this.range);\n    this.d3Scale = this.scale.scale;\n\n    if (this.isCategorical()) {\n      if (noCategoricalOuterPadding) {\n        // Categorical charts with only line (or threshold) series don't need as much out padding\n        // compared to a bar series. Increasing the inner padding to push more data points to the outside.\n        this.d3Scale.paddingInner(0.7);\n        this.d3Scale.paddingOuter(0);\n      } else {\n        this.d3Scale.paddingInner(0.2);\n        this.d3Scale.paddingOuter(0.05);\n      }\n    }\n  }\n\n  cloneScale(newScaleType?: ScaleType, newDomain?: ChartDomain<ChartDataTypes>, newRange?: ScaleRange) {\n    return new ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);\n  }\n\n  isNumeric(): this is { d3Scale: ScaleContinuousNumeric<number, number>; domain: ChartDomain<number> } {\n    return this.scale.type === 'numeric';\n  }\n\n  isTime(): this is { d3Scale: ScaleTime<number, number>; domain: ChartDomain<Date> } {\n    return this.scale.type === 'time';\n  }\n\n  isCategorical(): this is { d3Scale: ScaleBand<ChartDataTypes>; domain: ChartDomain<string> } {\n    return this.scale.type === 'categorical';\n  }\n}\n\nexport class NumericChartScale {\n  public readonly scale: NumericD3Scale;\n  public readonly d3Scale: ScaleContinuousNumeric<number, number>;\n\n  constructor(\n    public readonly scaleType: 'linear' | 'log',\n    domain: ChartDomain<number>,\n    range: ScaleRange,\n    adjustDomain: null | number\n  ) {\n    const scale = createNumericScale(scaleType, domain).range(range);\n    if (adjustDomain !== null) {\n      scale.nice(adjustDomain);\n    }\n    this.scale = { type: 'numeric', scale };\n    this.d3Scale = this.scale.scale;\n  }\n\n  isCategorical() {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}