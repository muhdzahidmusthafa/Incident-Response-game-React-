{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useRef } from 'react';\nimport { fireNonCancelableEvent } from '../internal/events/index';\n/**\n * This hook generates `onBlur`, `onFocus` and `onLoadItems` handlers that make sure an `onLoadItems` event\n * fires exactly once every time control they are used on gets focused.\n * It is neccesary to do this because Autosuggest and Select dedupe their `onLoadItems` events stopping\n * the same event from firing twice in a row. This means, refocusing the control sometimes results in\n * `onLoadItems` firing, but sometimes not.\n */\n\nexport var useLoadItems = function (onLoadItems, focusFilteringText, currentFilteringProperty, currentFilteringText, currentFilteringOperator) {\n  var focusIn = useRef(false);\n\n  var handleBlur = function () {\n    focusIn.current = true;\n  };\n\n  var fireLoadItems = function (detail) {\n    var _a;\n\n    fireNonCancelableEvent(onLoadItems, __assign(__assign({}, detail), {\n      filteringText: (_a = currentFilteringText !== null && currentFilteringText !== void 0 ? currentFilteringText : detail.filteringText) !== null && _a !== void 0 ? _a : '',\n      filteringProperty: currentFilteringProperty,\n      filteringOperator: currentFilteringOperator\n    }));\n    focusIn.current = false;\n  };\n\n  var handleFocus = function () {\n    if (focusIn.current) {\n      fireLoadItems({\n        firstPage: true,\n        samePage: false,\n        filteringText: focusFilteringText\n      });\n    }\n  };\n\n  var handleLoadItems = function (_a) {\n    var detail = _a.detail;\n    return fireLoadItems(detail);\n  };\n\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onLoadItems: handleLoadItems\n  };\n};","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,SAASA,MAAT,QAAuB,OAAvB;AAEA,SAASC,sBAAT,QAAkE,0BAAlE;AAIA;;;;;;;;AAOA,OAAO,IAAMC,YAAY,GAAG,UAC1BC,WAD0B,EAE1BC,kBAF0B,EAG1BC,wBAH0B,EAI1BC,oBAJ0B,EAK1BC,wBAL0B,EAKuC;EAEjE,IAAMC,OAAO,GAAGR,MAAM,CAAU,KAAV,CAAtB;;EACA,IAAMS,UAAU,GAAG;IACjBD,OAAO,CAACE,OAAR,GAAkB,IAAlB;EACD,CAFD;;EAGA,IAAMC,aAAa,GAAG,UAACC,MAAD,EAA0E;;;IAC9FX,sBAAsB,CAACE,WAAD,EAAYU,sBAC7BD,MAD6B,GACvB;MACTE,aAAa,EAAE,0BAAoB,SAApB,wBAAoB,WAApB,0BAAwBF,MAAM,CAACE,aAA/B,MAA4C,IAA5C,IAA4CC,aAA5C,GAA4CA,EAA5C,GAAgD,EADtD;MAETC,iBAAiB,EAAEX,wBAFV;MAGTY,iBAAiB,EAAEV;IAHV,CADuB,CAAZ,CAAtB;IAMAC,OAAO,CAACE,OAAR,GAAkB,KAAlB;EACD,CARD;;EASA,IAAMQ,WAAW,GAAG;IAClB,IAAIV,OAAO,CAACE,OAAZ,EAAqB;MACnBC,aAAa,CAAC;QAAEQ,SAAS,EAAE,IAAb;QAAmBC,QAAQ,EAAE,KAA7B;QAAoCN,aAAa,EAAEV;MAAnD,CAAD,CAAb;IACD;EACF,CAJD;;EAKA,IAAMiB,eAAe,GAAgE,UAACN,EAAD,EAAW;QAARH,MAAM;IAC5F,oBAAa,CAACA,MAAD,CAAb;EAAqB,CADvB;;EAEA,OAAO;IACLU,MAAM,EAAEb,UADH;IAELc,OAAO,EAAEL,WAFJ;IAGLf,WAAW,EAAEkB;EAHR,CAAP;AAKD,CAhCM","names":["useRef","fireNonCancelableEvent","useLoadItems","onLoadItems","focusFilteringText","currentFilteringProperty","currentFilteringText","currentFilteringOperator","focusIn","handleBlur","current","fireLoadItems","detail","__assign","filteringText","_a","filteringProperty","filteringOperator","handleFocus","firstPage","samePage","handleLoadItems","onBlur","onFocus"],"sourceRoot":"","sources":["../../../src/property-filter/use-load-items.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\n\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events/index';\nimport { AutosuggestProps } from '../autosuggest/interfaces';\n\nimport { PropertyFilterProps } from './interfaces';\n/**\n * This hook generates `onBlur`, `onFocus` and `onLoadItems` handlers that make sure an `onLoadItems` event\n * fires exactly once every time control they are used on gets focused.\n * It is neccesary to do this because Autosuggest and Select dedupe their `onLoadItems` events stopping\n * the same event from firing twice in a row. This means, refocusing the control sometimes results in\n * `onLoadItems` firing, but sometimes not.\n */\nexport const useLoadItems = (\n  onLoadItems: PropertyFilterProps['onLoadItems'],\n  focusFilteringText?: string,\n  currentFilteringProperty?: PropertyFilterProps.FilteringProperty,\n  currentFilteringText?: string,\n  currentFilteringOperator?: PropertyFilterProps.ComparisonOperator\n) => {\n  const focusIn = useRef<boolean>(false);\n  const handleBlur = () => {\n    focusIn.current = true;\n  };\n  const fireLoadItems = (detail: { firstPage: boolean; samePage: boolean; filteringText?: string }) => {\n    fireNonCancelableEvent(onLoadItems, {\n      ...detail,\n      filteringText: currentFilteringText ?? detail.filteringText ?? '',\n      filteringProperty: currentFilteringProperty,\n      filteringOperator: currentFilteringOperator,\n    });\n    focusIn.current = false;\n  };\n  const handleFocus = () => {\n    if (focusIn.current) {\n      fireLoadItems({ firstPage: true, samePage: false, filteringText: focusFilteringText });\n    }\n  };\n  const handleLoadItems: NonCancelableEventHandler<AutosuggestProps.LoadItemsDetail> = ({ detail }) =>\n    fireLoadItems(detail);\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onLoadItems: handleLoadItems,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}