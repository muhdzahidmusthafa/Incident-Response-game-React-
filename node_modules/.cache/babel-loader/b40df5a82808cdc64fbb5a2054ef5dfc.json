{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { THEME, PACKAGE_VERSION } from './environment';\nvar oneTimeMetrics = {};\n\nvar buildMetricHash = function (_a) {\n  var source = _a.source,\n      action = _a.action;\n  return [\"src\".concat(source), \"action\".concat(action)].join('_');\n};\n\nvar getMajorVersion = function (versionString) {\n  var majorVersionMatch = versionString.match(/^(\\d+\\.\\d+)/);\n  return majorVersionMatch ? majorVersionMatch[1] : '';\n};\n\nvar formatMajorVersionForMetricDetail = function (version) {\n  return version.replace(/\\s/g, '');\n};\n\nvar formatVersionForMetricName = function (theme, version) {\n  return \"\".concat(theme.charAt(0)).concat(getMajorVersion(version).replace('.', ''));\n};\n\nvar buildMetricDetail = function (_a) {\n  var source = _a.source,\n      action = _a.action,\n      version = _a.version;\n  var metricOrigin = typeof AWSUI_METRIC_ORIGIN !== 'undefined' ? AWSUI_METRIC_ORIGIN : 'main';\n  var detailObject = {\n    o: metricOrigin,\n    s: source,\n    t: THEME,\n    a: action,\n    f: framework,\n    v: formatMajorVersionForMetricDetail(version)\n  };\n  return JSON.stringify(detailObject);\n};\n\nvar buildMetricName = function (_a) {\n  var source = _a.source,\n      version = _a.version;\n  return ['awsui', source, \"\".concat(formatVersionForMetricName(THEME, version))].join('_');\n};\n\nvar findAWSC = function (currentWindow) {\n  try {\n    if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === 'object') {\n      return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;\n    }\n\n    if (!currentWindow || currentWindow.parent === currentWindow) {\n      // When the window has no more parents, it references itself\n      return undefined;\n    }\n\n    return findAWSC(currentWindow.parent);\n  } catch (ex) {\n    // Most likely a cross-origin access error\n    return undefined;\n  }\n}; // react is the default framework we're logging, for angular we need to set it explicitly\n\n\nvar framework = 'react';\n\nfunction setFramework(fwk) {\n  framework = fwk;\n}\n\nexport var Metrics = {\n  initMetrics: function (fwk) {\n    setFramework(fwk);\n  },\n\n  /**\n   * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendMetric: function (metricName, value, detail) {\n    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {\n      console.error(\"Invalid metric name: \".concat(metricName));\n      return;\n    }\n\n    if (detail && detail.length > 200) {\n      console.error(\"Detail for metric \".concat(metricName, \" is too long: \").concat(detail));\n      return;\n    }\n\n    var AWSC = findAWSC(window);\n\n    if (typeof AWSC === 'object' && typeof AWSC.Clog === 'object' && typeof AWSC.Clog.log === 'function') {\n      AWSC.Clog.log(metricName, value, detail);\n    }\n  },\n  sendMetricObject: function (metric, value) {\n    this.sendMetric(buildMetricName(metric), value, buildMetricDetail(metric));\n  },\n  sendMetricObjectOnce: function (metric, value) {\n    var metricHash = buildMetricHash(metric);\n\n    if (!oneTimeMetrics[metricHash]) {\n      this.sendMetricObject(metric, value);\n      oneTimeMetrics[metricHash] = true;\n    }\n  },\n\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce: function (metricName, value, detail) {\n    if (!oneTimeMetrics[metricName]) {\n      this.sendMetric(metricName, value, detail);\n      oneTimeMetrics[metricName] = true;\n    }\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentLoaded: function () {\n    this.sendMetricObjectOnce({\n      source: 'components',\n      action: 'loaded',\n      version: PACKAGE_VERSION\n    }, 1);\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed: function (componentName) {\n    this.sendMetricObjectOnce({\n      source: componentName,\n      action: 'used',\n      version: PACKAGE_VERSION\n    }, 1);\n  }\n};\nexport var MetricsTestHelper = {\n  resetOneTimeMetricsCache: function () {\n    for (var prop in oneTimeMetrics) {\n      delete oneTimeMetrics[prop];\n    }\n  },\n  formatMajorVersionForMetricDetail: formatMajorVersionForMetricDetail,\n  formatVersionForMetricName: formatVersionForMetricName\n};","map":{"version":3,"mappings":"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","names":["THEME","PACKAGE_VERSION","oneTimeMetrics","buildMetricHash","_a","source","action","join","getMajorVersion","versionString","majorVersionMatch","match","formatMajorVersionForMetricDetail","version","replace","formatVersionForMetricName","theme","charAt","concat","buildMetricDetail","metricOrigin","AWSUI_METRIC_ORIGIN","detailObject","o","s","t","a","f","framework","v","JSON","stringify","buildMetricName","findAWSC","currentWindow","AWSC","parent","undefined","ex","setFramework","fwk","Metrics","initMetrics","sendMetric","metricName","value","detail","test","console","error","length","window","Clog","log","sendMetricObject","metric","sendMetricObjectOnce","metricHash","sendMetricOnce","logComponentLoaded","logComponentUsed","componentName","MetricsTestHelper","resetOneTimeMetricsCache","prop"],"sourceRoot":"","sources":["../../../src/internal/metrics.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { THEME, PACKAGE_VERSION } from './environment';\n\nexport interface MetricsLogItem {\n  source: string;\n  action: string;\n  version: string;\n}\n\ninterface AWSC {\n  Clog: any;\n}\n\ninterface MetricsWindow extends Window {\n  AWSC?: AWSC;\n}\n\ndeclare const AWSUI_METRIC_ORIGIN: string | undefined;\n\nconst oneTimeMetrics: Record<string, boolean> = {};\n\nconst buildMetricHash = ({ source, action }: MetricsLogItem): string => {\n  return [`src${source}`, `action${action}`].join('_');\n};\n\nconst getMajorVersion = (versionString: string): string => {\n  const majorVersionMatch = versionString.match(/^(\\d+\\.\\d+)/);\n  return majorVersionMatch ? majorVersionMatch[1] : '';\n};\n\nconst formatMajorVersionForMetricDetail = (version: string) => {\n  return version.replace(/\\s/g, '');\n};\n\nconst formatVersionForMetricName = (theme: string, version: string) => {\n  return `${theme.charAt(0)}${getMajorVersion(version).replace('.', '')}`;\n};\n\nconst buildMetricDetail = ({ source, action, version }: MetricsLogItem): string => {\n  const metricOrigin = typeof AWSUI_METRIC_ORIGIN !== 'undefined' ? AWSUI_METRIC_ORIGIN : 'main';\n  const detailObject = {\n    o: metricOrigin,\n    s: source,\n    t: THEME,\n    a: action,\n    f: framework,\n    v: formatMajorVersionForMetricDetail(version),\n  };\n  return JSON.stringify(detailObject);\n};\n\nconst buildMetricName = ({ source, version }: MetricsLogItem): string => {\n  return ['awsui', source, `${formatVersionForMetricName(THEME, version)}`].join('_');\n};\n\nconst findAWSC = (currentWindow?: MetricsWindow): AWSC | undefined => {\n  try {\n    if (typeof currentWindow?.AWSC === 'object') {\n      return currentWindow?.AWSC;\n    }\n\n    if (!currentWindow || currentWindow.parent === currentWindow) {\n      // When the window has no more parents, it references itself\n      return undefined;\n    }\n\n    return findAWSC(currentWindow.parent);\n  } catch (ex) {\n    // Most likely a cross-origin access error\n    return undefined;\n  }\n};\n\n// react is the default framework we're logging, for angular we need to set it explicitly\nlet framework = 'react';\nfunction setFramework(fwk: string) {\n  framework = fwk;\n}\n\nexport const Metrics = {\n  initMetrics(fwk: string) {\n    setFramework(fwk);\n  },\n\n  /**\n   * Calls Console Platform's client logging JS API with provided metric name, value, and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendMetric(metricName: string, value: number, detail?: string): void {\n    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {\n      console.error(`Invalid metric name: ${metricName}`);\n      return;\n    }\n    if (detail && detail.length > 200) {\n      console.error(`Detail for metric ${metricName} is too long: ${detail}`);\n      return;\n    }\n    const AWSC = findAWSC(window);\n    if (typeof AWSC === 'object' && typeof AWSC.Clog === 'object' && typeof AWSC.Clog.log === 'function') {\n      AWSC.Clog.log(metricName, value, detail);\n    }\n  },\n\n  sendMetricObject(metric: MetricsLogItem, value: number): void {\n    this.sendMetric(buildMetricName(metric), value, buildMetricDetail(metric));\n  },\n\n  sendMetricObjectOnce(metric: MetricsLogItem, value: number): void {\n    const metricHash = buildMetricHash(metric);\n    if (!oneTimeMetrics[metricHash]) {\n      this.sendMetricObject(metric, value);\n      oneTimeMetrics[metricHash] = true;\n    }\n  },\n\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce(metricName: string, value: number, detail?: string): void {\n    if (!oneTimeMetrics[metricName]) {\n      this.sendMetric(metricName, value, detail);\n      oneTimeMetrics[metricName] = true;\n    }\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentLoaded() {\n    this.sendMetricObjectOnce(\n      {\n        source: 'components',\n        action: 'loaded',\n        version: PACKAGE_VERSION,\n      },\n      1\n    );\n  },\n\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed(componentName: string) {\n    this.sendMetricObjectOnce(\n      {\n        source: componentName,\n        action: 'used',\n        version: PACKAGE_VERSION,\n      },\n      1\n    );\n  },\n};\n\nexport const MetricsTestHelper = {\n  resetOneTimeMetricsCache: () => {\n    for (const prop in oneTimeMetrics) {\n      delete oneTimeMetrics[prop];\n    }\n  },\n  formatMajorVersionForMetricDetail,\n  formatVersionForMetricName,\n};\n"]},"metadata":{},"sourceType":"module"}