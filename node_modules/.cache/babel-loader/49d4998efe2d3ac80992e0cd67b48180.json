{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport flattenChildren from 'react-keyed-flatten-children';\nexport default function InternalSpaceBetween(_a) {\n  var _b = _a.direction,\n      direction = _b === void 0 ? 'vertical' : _b,\n      size = _a.size,\n      children = _a.children,\n      __internalRootRef = _a.__internalRootRef,\n      props = __rest(_a, [\"direction\", \"size\", \"children\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(props);\n  /*\n   Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n   */\n\n  var flattenedChildren = flattenChildren(children);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, styles[direction], styles[\"\".concat(direction, \"-\").concat(size)]),\n    ref: __internalRootRef\n  }), flattenedChildren.map(function (child) {\n    // If this react child is a primitive value, the key will be undefined\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var key = child.key;\n    return React.createElement(\"div\", {\n      key: key,\n      className: clsx(styles.child, styles[\"child-\".concat(direction, \"-\").concat(size)])\n    }, child);\n  }));\n}","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAMA,eAAc,SAAUC,oBAAV,CAA+BC,EAA/B,EAMc;EAL1B;EAAA,aAAS,mBAAG,UAAH,GAAaC,EAAtB;EAAA,IACAC,IAAI,UADJ;EAAA,IAEAC,QAAQ,cAFR;EAAA,IAGAC,iBAAiB,uBAHjB;EAAA,IAIGC,KAAK,cALmC,sDAKnC,CAJR;;EAMA,IAAMC,SAAS,GAAGV,YAAY,CAACS,KAAD,CAA9B;EAEA;;;;EAGA,IAAME,iBAAiB,GAAGT,eAAe,CAACK,QAAD,CAAzC;EAEA,OACER,wCACMW,SADN,EACe;IACbE,SAAS,EAAEd,IAAI,CAACY,SAAS,CAACE,SAAX,EAAsBX,MAAM,CAACY,IAA7B,EAAmCZ,MAAM,CAACa,SAAD,CAAzC,EAAsDb,MAAM,CAAC,UAAGa,SAAH,EAAY,GAAZ,EAAYC,MAAZ,CAAgBT,IAAhB,CAAD,CAA5D,CADF;IAEbU,GAAG,EAAER;EAFQ,CADf,GAKGG,iBAAiB,CAACM,GAAlB,CAAsB,iBAAK;IAC1B;IACA;IACA,IAAMC,GAAG,GAAIC,KAAa,CAACD,GAA3B;IAEA,OACEnB;MAAKmB,GAAG,EAAEA,GAAV;MAAeN,SAAS,EAAEd,IAAI,CAACG,MAAM,CAACkB,KAAR,EAAelB,MAAM,CAAC,gBAASa,SAAT,EAAkB,GAAlB,EAAkBC,MAAlB,CAAsBT,IAAtB,CAAD,CAArB;IAA9B,GACGa,KADH,CADF;EAKD,CAVA,CALH,CADF;AAmBD","names":["clsx","React","getBaseProps","styles","flattenChildren","InternalSpaceBetween","_a","_b","size","children","__internalRootRef","props","baseProps","flattenedChildren","className","root","direction","concat","ref","map","key","child"],"sourceRoot":"","sources":["../../../src/space-between/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport flattenChildren from 'react-keyed-flatten-children';\nimport { SpaceBetweenProps } from './interfaces';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ntype InternalSpaceBetweenProps = SpaceBetweenProps & InternalBaseComponentProps;\n\nexport default function InternalSpaceBetween({\n  direction = 'vertical',\n  size,\n  children,\n  __internalRootRef,\n  ...props\n}: InternalSpaceBetweenProps) {\n  const baseProps = getBaseProps(props);\n\n  /*\n   Flattening the children allows us to \"see through\" React Fragments and nested arrays.\n   */\n  const flattenedChildren = flattenChildren(children);\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, styles[direction], styles[`${direction}-${size}`])}\n      ref={__internalRootRef}\n    >\n      {flattenedChildren.map(child => {\n        // If this react child is a primitive value, the key will be undefined\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const key = (child as any).key;\n\n        return (\n          <div key={key} className={clsx(styles.child, styles[`child-${direction}-${size}`])}>\n            {child}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}