{"ast":null,"code":"// Webpack loads JSON files by default - parses as JavaScript objects\nimport ChoicesJSON from '../storyModules/module01CHOICES.json';\nimport TextJSON from '../storyModules/module01TEXT.json';\nimport constants from '../globals/constants';\nexport default class TextManager {\n  // This method loads JSON story data and returns an object\n  // structured like this:\n  // {\n  //   textData: data,\n  //   linkNodesData: data,\n  //   choicesData: data\n  // }\n  static loadModule(moduleNumber) {\n    console.log('%c Loading story module ' + moduleNumber + '... ', 'color:white; background:orange;');\n\n    if (moduleNumber === constants.MODULE_INCIDENT) {\n      return this.loadJSON(TextJSON, ChoicesJSON);\n    } else {\n      console.log('%c Error: Invalid story module. ', 'color:white; background:red;');\n      return {};\n    }\n  } // Use this method to asynchronously load the JSON story data.\n  // It returns a promise, so it can be chained with .then() or .catch().\n\n\n  static loadModuleAsync(moduleNumber) {\n    console.log('%c Loading story module ' + moduleNumber + '... ', 'color:white; background:orange;');\n    return new Promise((resolve, reject) => {\n      if (moduleNumber === constants.MODULE_INCIDENT) {\n        const data = this.loadJSON(TextJSON, ChoicesJSON);\n\n        if (data) {\n          console.log('%c Successfully loaded story module ' + moduleNumber + '. ', 'color:white; background:green;');\n          resolve(data);\n        } else {\n          console.log('%c Error: Failed to load story module. ', 'color:white; background:red;');\n          reject({\n            error: 'Failed to load story module'\n          });\n        }\n      } else {\n        console.log('%c Error: Invalid story module. ', 'color:white; background:red;');\n        reject({\n          error: 'Invalid story module'\n        });\n      }\n    });\n  } // This method is used to structure and return the JSON story data.\n  // It sets the data keys (such as AA000AA000AA) to be keys in the objects.\n  // Don't use this method directly. Use either loadModule() or loadModuleAsync().\n  // (Create React App is not currently configured to support private methods).\n\n\n  static loadJSON(moduleText, moduleChoices, moduleLinkNodes) {\n    let data = {\n      textData: {},\n      linkNodesData: {},\n      choicesData: {}\n    };\n\n    for (const i in moduleText) {\n      data.textData[moduleText[i].KEY] = moduleText[i].TEXT;\n    }\n\n    for (const j in moduleChoices) {\n      data.choicesData[moduleChoices[j].KEY] = moduleChoices[j];\n    }\n\n    for (const k in moduleLinkNodes) {\n      data.linkNodesData[moduleLinkNodes[k].KEY] = moduleLinkNodes[k];\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"names":["ChoicesJSON","TextJSON","constants","TextManager","loadModule","moduleNumber","console","log","MODULE_INCIDENT","loadJSON","loadModuleAsync","Promise","resolve","reject","data","error","moduleText","moduleChoices","moduleLinkNodes","textData","linkNodesData","choicesData","i","KEY","TEXT","j","k"],"sources":["/Users/firozahmed/PycharmProjects/incident-response/src/mechanics/TextManager.js"],"sourcesContent":["// Webpack loads JSON files by default - parses as JavaScript objects\r\nimport ChoicesJSON from '../storyModules/module01CHOICES.json';\r\nimport TextJSON from '../storyModules/module01TEXT.json';\r\n\r\nimport constants from '../globals/constants';\r\n\r\nexport default class TextManager {\r\n\r\n  // This method loads JSON story data and returns an object\r\n  // structured like this:\r\n  // {\r\n  //   textData: data,\r\n  //   linkNodesData: data,\r\n  //   choicesData: data\r\n  // }\r\n  static loadModule(moduleNumber) {\r\n    console.log('%c Loading story module ' + moduleNumber + '... ', 'color:white; background:orange;');\r\n\r\n    if (moduleNumber === constants.MODULE_INCIDENT) {\r\n      return this.loadJSON(TextJSON, ChoicesJSON);\r\n    } else {\r\n      console.log('%c Error: Invalid story module. ', 'color:white; background:red;');\r\n      return {};\r\n    }\r\n  }\r\n\r\n  // Use this method to asynchronously load the JSON story data.\r\n  // It returns a promise, so it can be chained with .then() or .catch().\r\n  static loadModuleAsync(moduleNumber) {\r\n    console.log('%c Loading story module ' + moduleNumber + '... ', 'color:white; background:orange;');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (moduleNumber === constants.MODULE_INCIDENT) {\r\n        const data = this.loadJSON(TextJSON, ChoicesJSON);\r\n                \r\n        if(data) {\r\n          console.log('%c Successfully loaded story module ' + moduleNumber + '. ', 'color:white; background:green;');\r\n          resolve(data);\r\n        } else {\r\n          console.log('%c Error: Failed to load story module. ', 'color:white; background:red;');\r\n          reject({error: 'Failed to load story module'});\r\n        }        \r\n\r\n      } else {\r\n        console.log('%c Error: Invalid story module. ', 'color:white; background:red;');\r\n        reject({error: 'Invalid story module'});\r\n      }\r\n    });\r\n  }\r\n\r\n  // This method is used to structure and return the JSON story data.\r\n  // It sets the data keys (such as AA000AA000AA) to be keys in the objects.\r\n  // Don't use this method directly. Use either loadModule() or loadModuleAsync().\r\n  // (Create React App is not currently configured to support private methods).\r\n  static loadJSON(moduleText, moduleChoices, moduleLinkNodes) {\r\n    let data = {\r\n        textData: {},\r\n        linkNodesData: {},\r\n        choicesData: {}\r\n      }\r\n\r\n    for (const i in moduleText) {\r\n      data.textData[moduleText[i].KEY] = moduleText[i].TEXT;\r\n    }\r\n\r\n    for (const j in moduleChoices) {\r\n      data.choicesData[moduleChoices[j].KEY] = moduleChoices[j];\r\n    }\r\n\r\n    for (const k in moduleLinkNodes) {\r\n      data.linkNodesData[moduleLinkNodes[k].KEY] = moduleLinkNodes[k];\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,sCAAxB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AAEA,OAAOC,SAAP,MAAsB,sBAAtB;AAEA,eAAe,MAAMC,WAAN,CAAkB;EAE/B;EACA;EACA;EACA;EACA;EACA;EACA;EACiB,OAAVC,UAAU,CAACC,YAAD,EAAe;IAC9BC,OAAO,CAACC,GAAR,CAAY,6BAA6BF,YAA7B,GAA4C,MAAxD,EAAgE,iCAAhE;;IAEA,IAAIA,YAAY,KAAKH,SAAS,CAACM,eAA/B,EAAgD;MAC9C,OAAO,KAAKC,QAAL,CAAcR,QAAd,EAAwBD,WAAxB,CAAP;IACD,CAFD,MAEO;MACLM,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD,8BAAhD;MACA,OAAO,EAAP;IACD;EACF,CAlB8B,CAoB/B;EACA;;;EACsB,OAAfG,eAAe,CAACL,YAAD,EAAe;IACnCC,OAAO,CAACC,GAAR,CAAY,6BAA6BF,YAA7B,GAA4C,MAAxD,EAAgE,iCAAhE;IAEA,OAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtC,IAAIR,YAAY,KAAKH,SAAS,CAACM,eAA/B,EAAgD;QAC9C,MAAMM,IAAI,GAAG,KAAKL,QAAL,CAAcR,QAAd,EAAwBD,WAAxB,CAAb;;QAEA,IAAGc,IAAH,EAAS;UACPR,OAAO,CAACC,GAAR,CAAY,yCAAyCF,YAAzC,GAAwD,IAApE,EAA0E,gCAA1E;UACAO,OAAO,CAACE,IAAD,CAAP;QACD,CAHD,MAGO;UACLR,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuD,8BAAvD;UACAM,MAAM,CAAC;YAACE,KAAK,EAAE;UAAR,CAAD,CAAN;QACD;MAEF,CAXD,MAWO;QACLT,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD,8BAAhD;QACAM,MAAM,CAAC;UAACE,KAAK,EAAE;QAAR,CAAD,CAAN;MACD;IACF,CAhBM,CAAP;EAiBD,CA1C8B,CA4C/B;EACA;EACA;EACA;;;EACe,OAARN,QAAQ,CAACO,UAAD,EAAaC,aAAb,EAA4BC,eAA5B,EAA6C;IAC1D,IAAIJ,IAAI,GAAG;MACPK,QAAQ,EAAE,EADH;MAEPC,aAAa,EAAE,EAFR;MAGPC,WAAW,EAAE;IAHN,CAAX;;IAMA,KAAK,MAAMC,CAAX,IAAgBN,UAAhB,EAA4B;MAC1BF,IAAI,CAACK,QAAL,CAAcH,UAAU,CAACM,CAAD,CAAV,CAAcC,GAA5B,IAAmCP,UAAU,CAACM,CAAD,CAAV,CAAcE,IAAjD;IACD;;IAED,KAAK,MAAMC,CAAX,IAAgBR,aAAhB,EAA+B;MAC7BH,IAAI,CAACO,WAAL,CAAiBJ,aAAa,CAACQ,CAAD,CAAb,CAAiBF,GAAlC,IAAyCN,aAAa,CAACQ,CAAD,CAAtD;IACD;;IAED,KAAK,MAAMC,CAAX,IAAgBR,eAAhB,EAAiC;MAC/BJ,IAAI,CAACM,aAAL,CAAmBF,eAAe,CAACQ,CAAD,CAAf,CAAmBH,GAAtC,IAA6CL,eAAe,CAACQ,CAAD,CAA5D;IACD;;IAED,OAAOZ,IAAP;EACD;;AApE8B"},"metadata":{},"sourceType":"module"}