{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport FocusLock from 'react-focus-lock';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { KeyCode } from '../internal/keycode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { InternalButton } from '../button/internal';\nimport InternalHeader from '../header/internal';\nimport Portal from '../internal/components/portal';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { disableBodyScrolling, enableBodyScrolling } from './body-scroll';\nimport styles from './styles.css.js';\nexport default function InternalModal(_a) {\n  var _b, _c;\n\n  var size = _a.size,\n      visible = _a.visible,\n      closeAriaLabel = _a.closeAriaLabel,\n      header = _a.header,\n      children = _a.children,\n      footer = _a.footer,\n      disableContentPaddings = _a.disableContentPaddings,\n      onDismiss = _a.onDismiss,\n      modalRoot = _a.modalRoot,\n      _d = _a.__internalRootRef,\n      __internalRootRef = _d === void 0 ? null : _d,\n      rest = __rest(_a, [\"size\", \"visible\", \"closeAriaLabel\", \"header\", \"children\", \"footer\", \"disableContentPaddings\", \"onDismiss\", \"modalRoot\", \"__internalRootRef\"]);\n\n  var instanceUniqueId = useUniqueId();\n  var headerId = \"\".concat(rest.id || instanceUniqueId, \"-header\");\n  var focusLockRef = useRef(null);\n  var lastMouseDownElementRef = useRef(null);\n  var initiallyFocusedElementRef = useRef(null);\n\n  var _e = useContainerBreakpoints(['xs']),\n      breakpoint = _e[0],\n      breakpointsRef = _e[1];\n\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);\n  var isRefresh = useVisualRefresh(useRef(modalRoot !== null && modalRoot !== void 0 ? modalRoot : document.body));\n  var baseProps = getBaseProps(rest); // enable body scroll and restore focus if unmounting while visible\n\n  useEffect(function () {\n    return function () {\n      enableBodyScrolling();\n    };\n  }, []); // enable / disable body scroll\n\n  useEffect(function () {\n    if (visible) {\n      disableBodyScrolling();\n    } else {\n      enableBodyScrolling();\n    }\n  }, [visible]); // Because we hide the element with styles (and not actually detach it from DOM), we need to scroll to top\n\n  useEffect(function () {\n    if (visible && refObject.current) {\n      refObject.current.scrollTop = 0;\n    }\n  }, [refObject, visible]); // Handle focus restore\n\n  var onActivation = function () {\n    initiallyFocusedElementRef.current = document.activeElement;\n  };\n\n  var onDeactivation = function () {\n    var _a;\n\n    (_a = initiallyFocusedElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    initiallyFocusedElementRef.current = null;\n  };\n\n  var dismiss = function (reason) {\n    return fireNonCancelableEvent(onDismiss, {\n      reason: reason\n    });\n  };\n\n  var onOverlayMouseDown = function (event) {\n    lastMouseDownElementRef.current = event.target;\n  };\n\n  var onOverlayClick = function (event) {\n    var overlay = refObject.current;\n    var lastClicked = lastMouseDownElementRef.current;\n\n    if (event.target === overlay && lastClicked === overlay) {\n      dismiss('overlay');\n    }\n  };\n\n  var onCloseButtonClick = function () {\n    return dismiss('closeButton');\n  };\n\n  var escKeyHandler = function (event) {\n    if (event.keyCode === KeyCode.escape) {\n      dismiss('keyboard');\n    }\n  };\n\n  return React.createElement(Portal, {\n    container: modalRoot\n  }, React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(styles.root, (_b = {}, _b[styles.hidden] = !visible, _b), baseProps.className, isRefresh && styles.refresh),\n    role: \"dialog\",\n    \"aria-modal\": true,\n    \"aria-labelledby\": headerId,\n    onMouseDown: onOverlayMouseDown,\n    onClick: onOverlayClick,\n    ref: mergedRef\n  }), React.createElement(FocusLock, {\n    disabled: !visible,\n    autoFocus: true,\n    className: styles['focus-lock'],\n    ref: focusLockRef,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation\n  }, React.createElement(\"div\", {\n    className: clsx(styles.dialog, styles[size], styles[\"breakpoint-\".concat(breakpoint)], isRefresh && styles.refresh),\n    onKeyDown: escKeyHandler,\n    tabIndex: -1\n  }, React.createElement(\"div\", {\n    className: styles.container\n  }, React.createElement(\"div\", {\n    className: styles.header\n  }, React.createElement(InternalHeader, {\n    variant: \"h2\",\n    __disableActionsWrapping: true,\n    actions: React.createElement(InternalButton, {\n      ariaLabel: closeAriaLabel,\n      className: styles['dismiss-control'],\n      variant: \"modal-dismiss\",\n      iconName: \"close\",\n      formAction: \"none\",\n      onClick: onCloseButtonClick\n    })\n  }, React.createElement(\"span\", {\n    id: headerId,\n    className: styles['header--text']\n  }, header))), React.createElement(\"div\", {\n    className: clsx(styles.content, (_c = {}, _c[styles['no-paddings']] = disableContentPaddings, _c))\n  }, children), footer && React.createElement(\"div\", {\n    className: styles.footer\n  }, footer))))));\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","FocusLock","useMergeRefs","clsx","getBaseProps","fireNonCancelableEvent","KeyCode","useUniqueId","InternalButton","InternalHeader","Portal","useContainerBreakpoints","useVisualRefresh","disableBodyScrolling","enableBodyScrolling","styles","InternalModal","_a","visible","closeAriaLabel","header","children","footer","disableContentPaddings","onDismiss","modalRoot","_d","__internalRootRef","rest","instanceUniqueId","headerId","id","focusLockRef","lastMouseDownElementRef","initiallyFocusedElementRef","breakpoint","breakpointsRef","refObject","mergedRef","isRefresh","document","body","baseProps","current","scrollTop","onActivation","activeElement","onDeactivation","focus","dismiss","reason","onOverlayMouseDown","event","target","onOverlayClick","overlay","lastClicked","onCloseButtonClick","escKeyHandler","keyCode","escape","container","className","root","_b","hidden","refresh","role","onMouseDown","onClick","ref","disabled","autoFocus","dialog","size","onKeyDown","tabIndex","variant","__disableActionsWrapping","actions","ariaLabel","iconName","formAction","content","_c"],"sourceRoot":"","sources":["../../../src/modal/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport FocusLock from 'react-focus-lock';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { KeyCode } from '../internal/keycode';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { InternalButton } from '../button/internal';\nimport InternalHeader from '../header/internal';\nimport Portal from '../internal/components/portal';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nimport { disableBodyScrolling, enableBodyScrolling } from './body-scroll';\nimport { ModalProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { SomeRequired } from '../internal/types';\n\ntype InternalModalProps = SomeRequired<ModalProps, 'size' | 'closeAriaLabel'> & InternalBaseComponentProps;\n\nexport default function InternalModal({\n  size,\n  visible,\n  closeAriaLabel,\n  header,\n  children,\n  footer,\n  disableContentPaddings,\n  onDismiss,\n  modalRoot,\n  __internalRootRef = null,\n  ...rest\n}: InternalModalProps) {\n  const instanceUniqueId = useUniqueId();\n  const headerId = `${rest.id || instanceUniqueId}-header`;\n  const focusLockRef = useRef<HTMLDivElement>(null);\n  const lastMouseDownElementRef = useRef<HTMLElement | null>(null);\n  const initiallyFocusedElementRef = useRef<HTMLElement | null>(null);\n  const [breakpoint, breakpointsRef] = useContainerBreakpoints(['xs']);\n\n  const refObject = useRef<HTMLDivElement>(null);\n  const mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);\n\n  const isRefresh = useVisualRefresh(useRef(modalRoot ?? document.body));\n\n  const baseProps = getBaseProps(rest);\n\n  // enable body scroll and restore focus if unmounting while visible\n  useEffect(() => {\n    return () => {\n      enableBodyScrolling();\n    };\n  }, []);\n\n  // enable / disable body scroll\n  useEffect(() => {\n    if (visible) {\n      disableBodyScrolling();\n    } else {\n      enableBodyScrolling();\n    }\n  }, [visible]);\n\n  // Because we hide the element with styles (and not actually detach it from DOM), we need to scroll to top\n  useEffect(() => {\n    if (visible && refObject.current) {\n      refObject.current.scrollTop = 0;\n    }\n  }, [refObject, visible]);\n\n  // Handle focus restore\n  const onActivation = () => {\n    initiallyFocusedElementRef.current = document.activeElement as HTMLElement;\n  };\n\n  const onDeactivation = () => {\n    initiallyFocusedElementRef.current?.focus();\n    initiallyFocusedElementRef.current = null;\n  };\n\n  const dismiss = (reason: string) => fireNonCancelableEvent(onDismiss, { reason });\n\n  const onOverlayMouseDown = (event: React.MouseEvent) => {\n    lastMouseDownElementRef.current = event.target as HTMLElement;\n  };\n  const onOverlayClick = (event: React.MouseEvent) => {\n    const overlay = refObject.current;\n    const lastClicked = lastMouseDownElementRef.current;\n\n    if (event.target === overlay && lastClicked === overlay) {\n      dismiss('overlay');\n    }\n  };\n  const onCloseButtonClick = () => dismiss('closeButton');\n  const escKeyHandler = (event: React.KeyboardEvent) => {\n    if (event.keyCode === KeyCode.escape) {\n      dismiss('keyboard');\n    }\n  };\n\n  return (\n    <Portal container={modalRoot}>\n      <div\n        {...baseProps}\n        className={clsx(styles.root, { [styles.hidden]: !visible }, baseProps.className, isRefresh && styles.refresh)}\n        role=\"dialog\"\n        aria-modal={true}\n        aria-labelledby={headerId}\n        onMouseDown={onOverlayMouseDown}\n        onClick={onOverlayClick}\n        ref={mergedRef}\n      >\n        <FocusLock\n          disabled={!visible}\n          autoFocus={true}\n          className={styles['focus-lock']}\n          ref={focusLockRef}\n          onActivation={onActivation}\n          onDeactivation={onDeactivation}\n        >\n          <div\n            className={clsx(\n              styles.dialog,\n              styles[size],\n              styles[`breakpoint-${breakpoint}`],\n              isRefresh && styles.refresh\n            )}\n            onKeyDown={escKeyHandler}\n            tabIndex={-1}\n          >\n            <div className={styles.container}>\n              <div className={styles.header}>\n                <InternalHeader\n                  variant=\"h2\"\n                  __disableActionsWrapping={true}\n                  actions={\n                    <InternalButton\n                      ariaLabel={closeAriaLabel}\n                      className={styles['dismiss-control']}\n                      variant=\"modal-dismiss\"\n                      iconName=\"close\"\n                      formAction=\"none\"\n                      onClick={onCloseButtonClick}\n                    />\n                  }\n                >\n                  <span id={headerId} className={styles['header--text']}>\n                    {header}\n                  </span>\n                </InternalHeader>\n              </div>\n              <div className={clsx(styles.content, { [styles['no-paddings']]: disableContentPaddings })}>\n                {children}\n              </div>\n              {footer && <div className={styles.footer}>{footer}</div>}\n            </div>\n          </div>\n        </FocusLock>\n      </div>\n    </Portal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}