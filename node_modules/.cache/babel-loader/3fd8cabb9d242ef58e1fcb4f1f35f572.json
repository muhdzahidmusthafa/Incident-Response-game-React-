{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nexport var useOpenState = function (_a) {\n  var onOpen = _a.onOpen,\n      onClose = _a.onClose;\n\n  var _b = useState(false),\n      isOpen = _b[0],\n      setIsOpen = _b[1];\n\n  var openDropdown = function () {\n    if (!isOpen) {\n      setIsOpen(true);\n      onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n    }\n  };\n\n  var closeDropdown = function () {\n    if (isOpen) {\n      setIsOpen(false);\n      onClose === null || onClose === void 0 ? void 0 : onClose();\n    }\n  };\n\n  var toggleDropdown = function () {\n    if (isOpen) {\n      closeDropdown();\n    } else {\n      openDropdown();\n    }\n  };\n\n  return {\n    isOpen: isOpen,\n    openDropdown: openDropdown,\n    closeDropdown: closeDropdown,\n    toggleDropdown: toggleDropdown\n  };\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAOA,OAAO,IAAMC,YAAY,GAAG,UAACC,EAAD,EAAoC;MAAjCC,MAAM;MAAEC,OAAO;;EACtC,SAAsBJ,QAAQ,CAAC,KAAD,CAA9B;EAAA,IAACK,MAAM,QAAP;EAAA,IAASC,SAAS,QAAlB;;EAEN,IAAMC,YAAY,GAAG;IACnB,IAAI,CAACF,MAAL,EAAa;MACXC,SAAS,CAAC,IAAD,CAAT;MACAH,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,EAAN;IACD;EACF,CALD;;EAOA,IAAMK,aAAa,GAAG;IACpB,IAAIH,MAAJ,EAAY;MACVC,SAAS,CAAC,KAAD,CAAT;MACAF,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,EAAP;IACD;EACF,CALD;;EAOA,IAAMK,cAAc,GAAG;IACrB,IAAIJ,MAAJ,EAAY;MACVG,aAAa;IACd,CAFD,MAEO;MACLD,YAAY;IACb;EACF,CAND;;EAQA,OAAO;IAAEF,MAAM,QAAR;IAAUE,YAAY,cAAtB;IAAwBC,aAAa,eAArC;IAAuCC,cAAc;EAArD,CAAP;AACD,CA1BM","names":["useState","useOpenState","_a","onOpen","onClose","isOpen","setIsOpen","openDropdown","closeDropdown","toggleDropdown"],"sourceRoot":"","sources":["../../../../../../src/internal/components/options-list/utils/use-open-state.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\n\ninterface OpenStateProps {\n  onOpen?: () => void;\n  onClose?: () => void;\n}\n\nexport const useOpenState = ({ onOpen, onClose }: OpenStateProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openDropdown = () => {\n    if (!isOpen) {\n      setIsOpen(true);\n      onOpen?.();\n    }\n  };\n\n  const closeDropdown = () => {\n    if (isOpen) {\n      setIsOpen(false);\n      onClose?.();\n    }\n  };\n\n  const toggleDropdown = () => {\n    if (isOpen) {\n      closeDropdown();\n    } else {\n      openDropdown();\n    }\n  };\n\n  return { isOpen, openDropdown, closeDropdown, toggleDropdown };\n};\n"]},"metadata":{},"sourceType":"module"}