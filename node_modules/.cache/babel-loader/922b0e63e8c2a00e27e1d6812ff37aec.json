{"ast":null,"code":"import { padLeftZeros } from '../internal/components/masked-input/utils/strings';\nimport { addMinutes } from 'date-fns';\nimport { formatTime, formatDate } from '../date-picker/calendar/utils/date';\nimport { warnOnce } from '../internal/logging';\n/**\n * Returns the time offset of the browser.\n *\n * I.e. determines the `x` in `current offset = UTC + x`\n */\n\nexport function getBrowserTimezoneOffset() {\n  return 0 - new Date().getTimezoneOffset();\n}\n/**\n * Appends a time zone offset to an offset-less date string.\n */\n\nexport function setTimeOffset(value, timeOffsetInMinutes) {\n  if (!((value === null || value === void 0 ? void 0 : value.type) === 'absolute')) {\n    return value;\n  }\n\n  var offsetSuffix = formatOffset(timeOffsetInMinutes);\n  var startDate = value.startDate,\n      endDate = value.endDate;\n  return {\n    type: 'absolute',\n    startDate: startDate + offsetSuffix,\n    endDate: endDate + offsetSuffix\n  };\n}\nexport function formatOffset(offsetInMinutes) {\n  var hoursOffset = padLeftZeros(Math.floor(Math.abs(offsetInMinutes) / 60).toFixed(0), 2);\n  var minuteOffset = padLeftZeros(Math.abs(offsetInMinutes % 60).toFixed(0), 2);\n  var sign = offsetInMinutes < 0 ? '-' : '+';\n  var offsetSuffix = \"\".concat(sign).concat(hoursOffset, \":\").concat(minuteOffset);\n  return offsetSuffix;\n}\n/**\n * Re-formats an absolute date range so that it is expressed using the\n * target time offset. The returned value still represents the same range\n * in time, but contains no visible offset.\n */\n\nexport function shiftTimeOffset(value, timeOffsetInMinutes) {\n  if (!value || value.type !== 'absolute') {\n    return value;\n  }\n  /*\n    This regex matches an ISO date-time with\n    - optional seconds;\n    - optional milliseconds;\n    - optional time offset or 'Z'.\n  */\n\n\n  var dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n\n  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n    warnOnce('DateRangePicker', 'You have provided a misformatted start or end date. The component will fall back to an empty value. ' + 'Dates have to be ISO8601-formatted with an optional time zone offset.');\n    return null;\n  }\n\n  return {\n    type: 'absolute',\n    startDate: doShiftTimeOffset(value.startDate, timeOffsetInMinutes),\n    endDate: doShiftTimeOffset(value.endDate, timeOffsetInMinutes)\n  };\n}\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target time offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * doShiftTimeOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60)\n * = \"2020-01-01T08:00:00\"\n * ```\n */\n\nfunction doShiftTimeOffset(value, targetOffsetInMinutes) {\n  var _a = splitOffset(value),\n      valueWithoutOffset = _a[0],\n      offsetInMinutes = _a[1];\n\n  var differenceBetweenValueAndTarget = targetOffsetInMinutes - offsetInMinutes;\n  var date = new Date(valueWithoutOffset);\n  var adjustedDate = addMinutes(date, differenceBetweenValueAndTarget);\n  var formattedDate = formatDate(adjustedDate);\n  var formattedTime = formatTime(adjustedDate);\n  return \"\".concat(formattedDate, \"T\").concat(formattedTime);\n}\n/**\n * Splits an ISO8601 date string into its timezone-independent part\n * and its time offset in minutes.\n */\n\n\nfunction splitOffset(value) {\n  var _a = value.split('T'),\n      datePart = _a[0],\n      timePart = _a[1];\n\n  var _b = timePart.split(/(-|\\+)/),\n      time = _b[0],\n      signCharacter = _b[1],\n      offsetPart = _b[2];\n\n  if (signCharacter && offsetPart) {\n    var _c = offsetPart.split(':'),\n        offsetHours = _c[0],\n        offsetMinutes = _c[1];\n\n    var offset = Number(offsetHours) * 60 + Number(offsetMinutes);\n    var sign = signCharacter === '-' ? -1 : 1;\n    return [\"\".concat(datePart, \"T\").concat(time), offset * sign];\n  }\n\n  var utcTimezoneIndicator = value.indexOf('Z');\n\n  if (utcTimezoneIndicator !== -1) {\n    return [value.substring(0, utcTimezoneIndicator), 0];\n  }\n\n  return [value, getBrowserTimezoneOffset()];\n}","map":{"version":3,"mappings":"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","names":["padLeftZeros","addMinutes","formatTime","formatDate","warnOnce","getBrowserTimezoneOffset","Date","getTimezoneOffset","setTimeOffset","value","timeOffsetInMinutes","type","offsetSuffix","formatOffset","endDate","startDate","offsetInMinutes","hoursOffset","Math","floor","abs","toFixed","minuteOffset","sign","concat","shiftTimeOffset","dateTimeRegex","test","doShiftTimeOffset","targetOffsetInMinutes","splitOffset","valueWithoutOffset","differenceBetweenValueAndTarget","date","adjustedDate","formattedDate","formattedTime","split","datePart","timePart","time","signCharacter","offsetPart","offsetHours","offsetMinutes","offset","Number","utcTimezoneIndicator","indexOf","substring"],"sourceRoot":"","sources":["../../../src/date-range-picker/time-offset.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DateRangePickerProps } from './interfaces';\nimport { padLeftZeros } from '../internal/components/masked-input/utils/strings';\nimport { addMinutes } from 'date-fns';\nimport { formatTime, formatDate } from '../date-picker/calendar/utils/date';\nimport { warnOnce } from '../internal/logging';\n\n/**\n * Returns the time offset of the browser.\n *\n * I.e. determines the `x` in `current offset = UTC + x`\n */\nexport function getBrowserTimezoneOffset() {\n  return 0 - new Date().getTimezoneOffset();\n}\n\n/**\n * Appends a time zone offset to an offset-less date string.\n */\nexport function setTimeOffset(\n  value: DateRangePickerProps.Value | null,\n  timeOffsetInMinutes: number\n): DateRangePickerProps.Value | null {\n  if (!(value?.type === 'absolute')) {\n    return value;\n  }\n\n  const offsetSuffix = formatOffset(timeOffsetInMinutes);\n\n  const { startDate, endDate } = value;\n\n  return {\n    type: 'absolute',\n    startDate: startDate + offsetSuffix,\n    endDate: endDate + offsetSuffix,\n  };\n}\n\nexport function formatOffset(offsetInMinutes: number) {\n  const hoursOffset = padLeftZeros(Math.floor(Math.abs(offsetInMinutes) / 60).toFixed(0), 2);\n  const minuteOffset = padLeftZeros(Math.abs(offsetInMinutes % 60).toFixed(0), 2);\n\n  const sign = offsetInMinutes < 0 ? '-' : '+';\n  const offsetSuffix = `${sign}${hoursOffset}:${minuteOffset}`;\n\n  return offsetSuffix;\n}\n\n/**\n * Re-formats an absolute date range so that it is expressed using the\n * target time offset. The returned value still represents the same range\n * in time, but contains no visible offset.\n */\nexport function shiftTimeOffset(\n  value: null | DateRangePickerProps.Value,\n  timeOffsetInMinutes: number\n): DateRangePickerProps.Value | null {\n  if (!value || value.type !== 'absolute') {\n    return value;\n  }\n\n  /*\n    This regex matches an ISO date-time with\n    - optional seconds;\n    - optional milliseconds;\n    - optional time offset or 'Z'.\n  */\n  const dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n\n  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n    warnOnce(\n      'DateRangePicker',\n      'You have provided a misformatted start or end date. The component will fall back to an empty value. ' +\n        'Dates have to be ISO8601-formatted with an optional time zone offset.'\n    );\n    return null;\n  }\n\n  return {\n    type: 'absolute',\n    startDate: doShiftTimeOffset(value.startDate, timeOffsetInMinutes),\n    endDate: doShiftTimeOffset(value.endDate, timeOffsetInMinutes),\n  };\n}\n\n/**\n * Re-formats an ISO8601 date string so that it is expressed using the\n * target time offset. The returned date string still represents the\n * same instant in time, but contains no visible offset.\n *\n * Example:\n * ```\n * doShiftTimeOffset(\"2020-01-01T09:00:00+03:00\", 2 * 60)\n * = \"2020-01-01T08:00:00\"\n * ```\n */\nfunction doShiftTimeOffset(value: string, targetOffsetInMinutes: number) {\n  const [valueWithoutOffset, offsetInMinutes] = splitOffset(value);\n\n  const differenceBetweenValueAndTarget = targetOffsetInMinutes - offsetInMinutes;\n\n  const date = new Date(valueWithoutOffset);\n  const adjustedDate = addMinutes(date, differenceBetweenValueAndTarget);\n\n  const formattedDate = formatDate(adjustedDate);\n  const formattedTime = formatTime(adjustedDate);\n\n  return `${formattedDate}T${formattedTime}`;\n}\n\n/**\n * Splits an ISO8601 date string into its timezone-independent part\n * and its time offset in minutes.\n */\nfunction splitOffset(value: string) {\n  const [datePart, timePart] = value.split('T');\n  const [time, signCharacter, offsetPart] = timePart.split(/(-|\\+)/);\n\n  if (signCharacter && offsetPart) {\n    const [offsetHours, offsetMinutes] = offsetPart.split(':');\n\n    const offset = Number(offsetHours) * 60 + Number(offsetMinutes);\n\n    const sign = signCharacter === '-' ? -1 : 1;\n\n    return [`${datePart}T${time}`, offset * sign] as const;\n  }\n\n  const utcTimezoneIndicator = value.indexOf('Z');\n  if (utcTimezoneIndicator !== -1) {\n    return [value.substring(0, utcTimezoneIndicator), 0] as const;\n  }\n\n  return [value, getBrowserTimezoneOffset()] as const;\n}\n"]},"metadata":{},"sourceType":"module"}