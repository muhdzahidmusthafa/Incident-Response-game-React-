{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { formatDate } from './calendar/utils/date';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { fireNonCancelableEvent } from '../internal/events';\nexport function useDatePicker(_a) {\n  var value = _a.value,\n      onChange = _a.onChange;\n  var defaultSelectedDate = value.length >= 10 ? value : null;\n\n  var _b = useState(defaultSelectedDate),\n      selectedDate = _b[0],\n      setSelectedDate = _b[1];\n\n  var defaultDisplayedDate = value.length >= 10 ? value : formatDate(new Date());\n\n  var _c = useState(defaultDisplayedDate),\n      displayedDate = _c[0],\n      setDisplayedDate = _c[1];\n\n  var onChangeMonthHandler = function (newMonth) {\n    setDisplayedDate(formatDate(newMonth));\n  };\n\n  var onSelectDateHandler = function (_a) {\n    var date = _a.date;\n    var formattedDate = formatDate(date);\n    setSelectedDate(formattedDate);\n    setDisplayedDate(formattedDate);\n    fireNonCancelableEvent(onChange, {\n      value: formattedDate\n    });\n  };\n\n  var prevValue = usePrevious(value);\n\n  if (prevValue !== value) {\n    if (value === '' && selectedDate !== value) {\n      setSelectedDate(value);\n    } // update the displayedDate when inputValue changes in order to\n    // display the correct month when the date picker gets open again.\n\n\n    if (value.length >= 4 && displayedDate !== value) {\n      setDisplayedDate(value);\n    } // set the selected date only when a full date (yyyy-mm-dd) is entered\n\n\n    if (value.length >= 10 && selectedDate !== value) {\n      setSelectedDate(value);\n    }\n  }\n\n  return {\n    defaultDisplayedDate: defaultDisplayedDate,\n    displayedDate: displayedDate,\n    setDisplayedDate: setDisplayedDate,\n    selectedDate: selectedDate,\n    setSelectedDate: setSelectedDate,\n    onChangeMonthHandler: onChangeMonthHandler,\n    onSelectDateHandler: onSelectDateHandler\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,sBAAT,QAAkE,oBAAlE;AAGA,OAAM,SAAUC,aAAV,CAAwBC,EAAxB,EAA+D;MAArCC,KAAK;MAAEC,QAAQ;EAC7C,IAAMC,mBAAmB,GAAGF,KAAK,CAACG,MAAN,IAAgB,EAAhB,GAAqBH,KAArB,GAA6B,IAAzD;;EACM,SAAkCN,QAAQ,CAAgBQ,mBAAhB,CAA1C;EAAA,IAACE,YAAY,QAAb;EAAA,IAAeC,eAAe,QAA9B;;EAEN,IAAMC,oBAAoB,GAAGN,KAAK,CAACG,MAAN,IAAgB,EAAhB,GAAqBH,KAArB,GAA6BL,UAAU,CAAC,IAAIY,IAAJ,EAAD,CAApE;;EACM,SAAoCb,QAAQ,CAASY,oBAAT,CAA5C;EAAA,IAACE,aAAa,QAAd;EAAA,IAAgBC,gBAAgB,QAAhC;;EAEN,IAAMC,oBAAoB,GAAG,UAACC,QAAD,EAAe;IAC1CF,gBAAgB,CAACd,UAAU,CAACgB,QAAD,CAAX,CAAhB;EACD,CAFD;;EAIA,IAAMC,mBAAmB,GAAG,UAACb,EAAD,EAAmC;QAAhCc,IAAI;IACjC,IAAMC,aAAa,GAAGnB,UAAU,CAACkB,IAAD,CAAhC;IACAR,eAAe,CAACS,aAAD,CAAf;IACAL,gBAAgB,CAACK,aAAD,CAAhB;IACAjB,sBAAsB,CAACI,QAAD,EAAW;MAAED,KAAK,EAAEc;IAAT,CAAX,CAAtB;EACD,CALD;;EAOA,IAAMC,SAAS,GAAGnB,WAAW,CAACI,KAAD,CAA7B;;EACA,IAAIe,SAAS,KAAKf,KAAlB,EAAyB;IACvB,IAAIA,KAAK,KAAK,EAAV,IAAgBI,YAAY,KAAKJ,KAArC,EAA4C;MAC1CK,eAAe,CAACL,KAAD,CAAf;IACD,CAHsB,CAIvB;IACA;;;IACA,IAAIA,KAAK,CAACG,MAAN,IAAgB,CAAhB,IAAqBK,aAAa,KAAKR,KAA3C,EAAkD;MAChDS,gBAAgB,CAACT,KAAD,CAAhB;IACD,CARsB,CASvB;;;IACA,IAAIA,KAAK,CAACG,MAAN,IAAgB,EAAhB,IAAsBC,YAAY,KAAKJ,KAA3C,EAAkD;MAChDK,eAAe,CAACL,KAAD,CAAf;IACD;EACF;;EAED,OAAO;IACLM,oBAAoB,sBADf;IAELE,aAAa,eAFR;IAGLC,gBAAgB,kBAHX;IAILL,YAAY,cAJP;IAKLC,eAAe,iBALV;IAMLK,oBAAoB,sBANf;IAOLE,mBAAmB;EAPd,CAAP;AASD","names":["useState","formatDate","usePrevious","fireNonCancelableEvent","useDatePicker","_a","value","onChange","defaultSelectedDate","length","selectedDate","setSelectedDate","defaultDisplayedDate","Date","displayedDate","setDisplayedDate","onChangeMonthHandler","newMonth","onSelectDateHandler","date","formattedDate","prevValue"],"sourceRoot":"","sources":["../../../src/date-picker/use-date-picker.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { CalendarTypes } from './calendar/definitions';\nimport { formatDate } from './calendar/utils/date';\nimport { usePrevious } from '../internal/hooks/use-previous';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../internal/events';\nimport { DatePickerProps } from './interfaces';\n\nexport function useDatePicker({ value, onChange }: UseDatePickerProps) {\n  const defaultSelectedDate = value.length >= 10 ? value : null;\n  const [selectedDate, setSelectedDate] = useState<string | null>(defaultSelectedDate);\n\n  const defaultDisplayedDate = value.length >= 10 ? value : formatDate(new Date());\n  const [displayedDate, setDisplayedDate] = useState<string>(defaultDisplayedDate);\n\n  const onChangeMonthHandler = (newMonth: Date) => {\n    setDisplayedDate(formatDate(newMonth));\n  };\n\n  const onSelectDateHandler = ({ date }: CalendarTypes.DateDetail) => {\n    const formattedDate = formatDate(date);\n    setSelectedDate(formattedDate);\n    setDisplayedDate(formattedDate);\n    fireNonCancelableEvent(onChange, { value: formattedDate });\n  };\n\n  const prevValue = usePrevious(value);\n  if (prevValue !== value) {\n    if (value === '' && selectedDate !== value) {\n      setSelectedDate(value);\n    }\n    // update the displayedDate when inputValue changes in order to\n    // display the correct month when the date picker gets open again.\n    if (value.length >= 4 && displayedDate !== value) {\n      setDisplayedDate(value);\n    }\n    // set the selected date only when a full date (yyyy-mm-dd) is entered\n    if (value.length >= 10 && selectedDate !== value) {\n      setSelectedDate(value);\n    }\n  }\n\n  return {\n    defaultDisplayedDate,\n    displayedDate,\n    setDisplayedDate,\n    selectedDate,\n    setSelectedDate,\n    onChangeMonthHandler,\n    onSelectDateHandler,\n  };\n}\n\nexport interface UseDatePickerProps {\n  value: string;\n  onChange: NonCancelableEventHandler<DatePickerProps.ChangeDetail> | undefined;\n}\n"]},"metadata":{},"sourceType":"module"}