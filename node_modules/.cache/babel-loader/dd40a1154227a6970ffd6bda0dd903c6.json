{"ast":null,"code":"import { KeyCode } from '../../keycode';\nimport * as logger from '../../logging';\nimport { isCommand, isDigit } from './utils/keys';\nimport { backspaceHandler, keyHandler, enterHandler } from './keyboard-handler';\n\nvar onAutoComplete = function (value, onChange, maskFormat) {\n  // Do not autocomplete if input is empty\n  if (!value) {\n    return;\n  }\n\n  var autoCompletedValue = maskFormat.autoComplete(value);\n\n  if (autoCompletedValue !== value) {\n    onChange(autoCompletedValue);\n  }\n};\n\nvar preventDefault = function (event, result) {\n  return result && event.preventDefault();\n};\n\nvar useMask = function (_a) {\n  var _b = _a.value,\n      value = _b === void 0 ? '' : _b,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onKeyDown = _a.onKeyDown,\n      format = _a.format,\n      inputRef = _a.inputRef,\n      _c = _a.autofix,\n      autofix = _c === void 0 ? false : _c,\n      _d = _a.disableAutocompleteOnBlur,\n      disableAutocompleteOnBlur = _d === void 0 ? false : _d,\n      setPosition = _a.setPosition;\n\n  if (!format.isValid(value)) {\n    logger.warnOnce('useMask', \"Invalid string \\\"\".concat(value, \"\\\" provided\"));\n  }\n\n  var onMaskChange = function (updatedValue) {\n    var autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n\n    if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n      return;\n    }\n\n    onChange(autofixedUpdatedValue);\n  };\n\n  var initialValue = autofix ? format.correctMinMaxValues(value) : value;\n  var maskedValue = format.getValidValue(initialValue);\n  return {\n    value: maskedValue,\n    onKeyDown: function (event) {\n      var _a, _b;\n\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var result;\n      var _c = event.detail,\n          keyCode = _c.keyCode,\n          key = _c.key,\n          ctrlKey = _c.ctrlKey,\n          metaKey = _c.metaKey;\n\n      if (isDigit(key) || format.isSeparator(key)) {\n        result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.backspace) {\n        result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.enter) {\n        result = enterHandler(maskedValue, format);\n      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n        event.preventDefault();\n      }\n\n      if (result) {\n        var value_1 = result.value,\n            position = result.position;\n        onMaskChange(value_1);\n        setPosition(position);\n      } // Proxy original event\n\n\n      onKeyDown && onKeyDown(event);\n    },\n    onChange: function (_a) {\n      var detail = _a.detail;\n      return onMaskChange(detail.value);\n    },\n    onBlur: function () {\n      if (!disableAutocompleteOnBlur) {\n        onAutoComplete(maskedValue, onChange, format);\n      }\n\n      onBlur && onBlur();\n    },\n    onPaste: function (event) {\n      var _a, _b;\n\n      var text = (event.clipboardData || window.clipboardData).getData('text');\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n      onMaskChange(formattedText);\n    }\n  };\n};\n\nexport default useMask;","map":{"version":3,"mappings":"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","names":["KeyCode","logger","isCommand","isDigit","backspaceHandler","keyHandler","enterHandler","onAutoComplete","value","onChange","maskFormat","autoCompletedValue","autoComplete","preventDefault","event","result","useMask","_a","_b","onBlur","onKeyDown","format","inputRef","_c","autofix","_d","disableAutocompleteOnBlur","setPosition","isValid","warnOnce","onMaskChange","updatedValue","autofixedUpdatedValue","correctMinMaxValues","initialValue","maskedValue","getValidValue","selectionStart","current","selectionEnd","detail","keyCode","key","ctrlKey","metaKey","isSeparator","backspace","enter","position","value_1","onPaste","text","clipboardData","window","getData","formattedText","formatPastedText"],"sourceRoot":"","sources":["../../../../../src/internal/components/masked-input/use-mask.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject } from 'react';\nimport { InputProps } from '../../../input/interfaces';\nimport { NonCancelableEventHandler, CancelableEventHandler } from '../../events';\nimport { KeyCode } from '../../keycode';\n\nimport * as logger from '../../logging';\nimport { isCommand, isDigit } from './utils/keys';\n\nimport MaskFormat from './utils/mask-format';\nimport { backspaceHandler, HandlerResult, keyHandler, enterHandler } from './keyboard-handler';\n\ninterface UseMaskHook {\n  value: string;\n  onChange: NonCancelableEventHandler<InputProps.ChangeDetail>;\n  onKeyDown: CancelableEventHandler<InputProps.KeyDetail>;\n  onBlur: NonCancelableEventHandler<null>;\n  onPaste: (event: ClipboardEvent) => void;\n}\n\ninterface UseMaskProps {\n  value: string;\n  onChange: (value: string) => void;\n  onKeyDown?: (event: CustomEvent) => void;\n  onBlur?: () => void;\n  format: MaskFormat;\n  autofix?: boolean;\n  inputRef: RefObject<HTMLInputElement>;\n  disableAutocompleteOnBlur?: boolean;\n  setPosition: (position: number | null) => void;\n}\n\nconst onAutoComplete = (value: string, onChange: UseMaskProps['onChange'], maskFormat: MaskFormat) => {\n  // Do not autocomplete if input is empty\n  if (!value) {\n    return;\n  }\n\n  const autoCompletedValue = maskFormat.autoComplete(value);\n  if (autoCompletedValue !== value) {\n    onChange(autoCompletedValue);\n  }\n};\n\nconst preventDefault = (event: CustomEvent, result?: HandlerResult | null) => result && event.preventDefault();\n\nconst useMask = ({\n  value = '',\n  onBlur,\n  onChange,\n  onKeyDown,\n  format,\n  inputRef,\n  autofix = false,\n  disableAutocompleteOnBlur = false,\n  setPosition,\n}: UseMaskProps): UseMaskHook => {\n  if (!format.isValid(value)) {\n    logger.warnOnce('useMask', `Invalid string \"${value}\" provided`);\n  }\n\n  const onMaskChange = (updatedValue: string) => {\n    const autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n    if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n      return;\n    }\n\n    onChange(autofixedUpdatedValue);\n  };\n\n  const initialValue = autofix ? format.correctMinMaxValues(value) : value;\n  const maskedValue = format.getValidValue(initialValue);\n\n  return {\n    value: maskedValue,\n    onKeyDown: (event: CustomEvent) => {\n      const selectionStart = inputRef.current?.selectionStart || 0;\n      const selectionEnd = inputRef.current?.selectionEnd || 0;\n\n      let result: HandlerResult | undefined;\n      const { keyCode, key, ctrlKey, metaKey } = event.detail;\n      if (isDigit(key) || format.isSeparator(key)) {\n        result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.backspace) {\n        result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.enter) {\n        result = enterHandler(maskedValue, format);\n      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n        event.preventDefault();\n      }\n\n      if (result) {\n        const { value, position } = result;\n\n        onMaskChange(value);\n        setPosition(position);\n      }\n\n      // Proxy original event\n      onKeyDown && onKeyDown(event);\n    },\n    onChange: ({ detail }) => onMaskChange(detail.value),\n    onBlur: () => {\n      if (!disableAutocompleteOnBlur) {\n        onAutoComplete(maskedValue, onChange, format);\n      }\n\n      onBlur && onBlur();\n    },\n    onPaste: (event: ClipboardEvent) => {\n      const text = (event.clipboardData || (window as any).clipboardData).getData('text');\n\n      const selectionStart = inputRef.current?.selectionStart || 0;\n      const selectionEnd = inputRef.current?.selectionEnd || 0;\n\n      const formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n      onMaskChange(formattedText);\n    },\n  };\n};\n\nexport default useMask;\n"]},"metadata":{},"sourceType":"module"}