{"ast":null,"code":"import { __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { nodeContains } from '../internal/utils/dom';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { getXTickCount, getYTickCount, createXTicks, createYTicks } from '../internal/components/cartesian-chart/ticks';\nimport ChartPlot from '../internal/components/chart-plot';\nimport AxisLabel from '../internal/components/cartesian-chart/axis-label';\nimport LabelsMeasure from '../internal/components/cartesian-chart/labels-measure';\nimport LeftLabels from '../internal/components/cartesian-chart/left-labels';\nimport BottomLabels from '../internal/components/cartesian-chart/bottom-labels';\nimport VerticalGridLines from '../internal/components/cartesian-chart/vertical-grid-lines';\nimport EmphasizedBaseline from '../internal/components/cartesian-chart/emphasized-baseline';\nimport HighlightedPoint from '../internal/components/cartesian-chart/highlighted-point';\nimport VerticalMarker from '../internal/components/cartesian-chart/vertical-marker';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport ChartPopover from './chart-popover';\nimport { computeDomainX, computeDomainY } from './domain';\nimport { isXThreshold } from './utils';\nimport makeScaledSeries from './make-scaled-series';\nimport makeScaledBarGroups from './make-scaled-bar-groups';\nimport formatHighlighted from './format-highlighted';\nimport DataSeries from './data-series';\nimport BarGroups from './bar-groups';\nimport { useMouseHover } from './hooks/use-mouse-hover';\nimport { useNavigation } from './hooks/use-navigation';\nimport { usePopover } from './hooks/use-popover';\nimport styles from './styles.css.js';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar LEFT_LABELS_MARGIN = 16;\nvar BOTTOM_LABELS_OFFSET = 12;\nexport default function ChartContainer(_a) {\n  var _b;\n\n  var plotHeight = _a.height,\n      series = _a.series,\n      visibleSeries = _a.visibleSeries,\n      highlightedSeries = _a.highlightedSeries,\n      onHighlightChange = _a.onHighlightChange,\n      highlightedPoint = _a.highlightedPoint,\n      setHighlightedPoint = _a.setHighlightedPoint,\n      highlightedGroupIndex = _a.highlightedGroupIndex,\n      setHighlightedGroupIndex = _a.setHighlightedGroupIndex,\n      legendSeries = _a.legendSeries,\n      _c = _a.detailPopoverSize,\n      detailPopoverSize = _c === void 0 ? 'medium' : _c,\n      _d = _a.stackedBars,\n      stackedBars = _d === void 0 ? false : _d,\n      _e = _a.horizontalBars,\n      horizontalBars = _e === void 0 ? false : _e,\n      xScaleType = _a.xScaleType,\n      yScaleType = _a.yScaleType,\n      xTickFormatter = _a.xTickFormatter,\n      yTickFormatter = _a.yTickFormatter,\n      emphasizeBaselineAxis = _a.emphasizeBaselineAxis,\n      xTitle = _a.xTitle,\n      yTitle = _a.yTitle,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescription = _a.ariaDescription,\n      _f = _a.i18nStrings,\n      i18nStrings = _f === void 0 ? {} : _f,\n      plotContainerRef = _a.plotContainerRef,\n      props = __rest(_a, [\"height\", \"series\", \"visibleSeries\", \"highlightedSeries\", \"onHighlightChange\", \"highlightedPoint\", \"setHighlightedPoint\", \"highlightedGroupIndex\", \"setHighlightedGroupIndex\", \"legendSeries\", \"detailPopoverSize\", \"stackedBars\", \"horizontalBars\", \"xScaleType\", \"yScaleType\", \"xTickFormatter\", \"yTickFormatter\", \"emphasizeBaselineAxis\", \"xTitle\", \"yTitle\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"i18nStrings\", \"plotContainerRef\"]);\n\n  var plotRef = useRef(null);\n  var verticalMarkerRef = useRef(null);\n\n  var _g = useState(0),\n      leftLabelsWidth = _g[0],\n      setLeftLabelsWidth = _g[1];\n\n  var _h = useState(0),\n      bottomLabelsHeight = _h[0],\n      setBottomLabelsHeight = _h[1];\n\n  var _j = useContainerWidth(500),\n      containerWidth = _j[0],\n      containerMeasureRef = _j[1];\n\n  var plotWidth = containerWidth ? containerWidth - leftLabelsWidth - LEFT_LABELS_MARGIN : 500;\n  var containerRefObject = useRef(null);\n  var containerRef = useMergeRefs(containerMeasureRef, containerRefObject);\n  var isRefresh = useVisualRefresh(containerRefObject);\n  var linesOnly = series.every(function (_a) {\n    var series = _a.series;\n    return series.type === 'line' || series.type === 'threshold';\n  });\n  var xDomain = props.xDomain || computeDomainX(series, xScaleType);\n  var yDomain = props.yDomain || computeDomainY(series, yScaleType, stackedBars);\n  var xTickCount = getXTickCount(plotWidth);\n  var yTickCount = getYTickCount(plotHeight);\n  var rangeBottomTop = [0, plotHeight];\n  var rangeTopBottom = [plotHeight, 0];\n  var rangeLeftRight = [0, plotWidth];\n  var xScale = new ChartScale(xScaleType, xDomain, horizontalBars ? rangeBottomTop : rangeLeftRight, linesOnly);\n  var yScale = new NumericChartScale(yScaleType, yDomain, horizontalBars ? rangeLeftRight : rangeTopBottom, props.yDomain ? null : yTickCount);\n  var xTicks = createXTicks(xScale, xTickCount);\n  var yTicks = createYTicks(yScale, yTickCount);\n  /**\n   * Interactions\n   */\n\n  var highlightedPointRef = useRef(null);\n  var highlightedGroupRef = useRef(null);\n\n  var _k = useState(false),\n      isPlotFocused = _k[0],\n      setPlotFocused = _k[1]; // Some chart components are rendered against \"x\" or \"y\" axes,\n  // When \"horizontalBars\" is enabled, the axes are inverted.\n\n\n  var x = !horizontalBars ? 'x' : 'y';\n  var y = !horizontalBars ? 'y' : 'x';\n  var xy = {\n    ticks: {\n      x: xTicks,\n      y: yTicks\n    },\n    scale: {\n      x: xScale,\n      y: yScale\n    },\n    tickFormatter: {\n      x: xTickFormatter,\n      y: yTickFormatter\n    },\n    title: {\n      x: xTitle,\n      y: yTitle\n    },\n    ariaRoleDescription: {\n      x: i18nStrings.xAxisAriaRoleDescription,\n      y: i18nStrings.yAxisAriaRoleDescription\n    }\n  };\n  var scaledSeries = makeScaledSeries(visibleSeries, xScale, yScale);\n  var barGroups = makeScaledBarGroups(visibleSeries, xScale, plotWidth, plotHeight, y);\n\n  var _l = usePopover(),\n      isPopoverOpen = _l.isPopoverOpen,\n      isPopoverPinned = _l.isPopoverPinned,\n      showPopover = _l.showPopover,\n      pinPopover = _l.pinPopover,\n      dismissPopover = _l.dismissPopover; // Allows to add a delay between popover is dismissed and handlers are enabled to prevent immediate popover reopening.\n\n\n  var _m = useState(!isPopoverPinned),\n      isHandlersDisabled = _m[0],\n      setHandlersDisabled = _m[1];\n\n  useEffect(function () {\n    if (isPopoverPinned) {\n      setHandlersDisabled(true);\n    } else {\n      var timeoutId_1 = setTimeout(function () {\n        return setHandlersDisabled(false);\n      }, 25);\n      return function () {\n        return clearTimeout(timeoutId_1);\n      };\n    }\n  }, [isPopoverPinned]); // Highlighted point and highlighted series must be in sync.\n  // TODO: refactor the code so that it is not possible to make series and point highlight out of sync.\n\n  var highlightPoint = useCallback(function (point) {\n    setHighlightedGroupIndex(null);\n    setHighlightedPoint(point);\n  }, [setHighlightedPoint, setHighlightedGroupIndex]);\n  var highlightSeries = useCallback(function (series) {\n    if (series !== highlightedSeries) {\n      onHighlightChange(series);\n    }\n  }, [highlightedSeries, onHighlightChange]);\n  var highlightGroup = useCallback(function (groupIndex) {\n    highlightSeries(null);\n    setHighlightedPoint(null);\n    setHighlightedGroupIndex(groupIndex);\n  }, [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]);\n  var clearHighlightedSeries = useCallback(function () {\n    highlightSeries(null);\n    setHighlightedGroupIndex(null);\n    setHighlightedPoint(null);\n    dismissPopover();\n  }, [dismissPopover, highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);\n\n  var _o = useNavigation({\n    series: series,\n    visibleSeries: visibleSeries,\n    scaledSeries: scaledSeries,\n    barGroups: barGroups,\n    xScale: xScale,\n    yScale: yScale,\n    highlightedPoint: highlightedPoint,\n    highlightedGroupIndex: highlightedGroupIndex,\n    highlightedSeries: highlightedSeries,\n    legendSeries: legendSeries,\n    isHandlersDisabled: isHandlersDisabled,\n    pinPopover: pinPopover,\n    highlightSeries: highlightSeries,\n    highlightGroup: highlightGroup,\n    highlightPoint: highlightPoint,\n    clearHighlightedSeries: clearHighlightedSeries\n  }),\n      isGroupNavigation = _o.isGroupNavigation,\n      handlers = __rest(_o, [\"isGroupNavigation\"]);\n\n  var _p = useMouseHover({\n    scaledSeries: scaledSeries,\n    barGroups: barGroups,\n    plotRef: plotRef,\n    highlightSeries: highlightSeries,\n    highlightPoint: highlightPoint,\n    highlightGroup: highlightGroup,\n    clearHighlightedSeries: clearHighlightedSeries,\n    isGroupNavigation: isGroupNavigation,\n    isHandlersDisabled: isHandlersDisabled\n  }),\n      onSVGMouseMove = _p.onSVGMouseMove,\n      onSVGMouseOut = _p.onSVGMouseOut,\n      verticalMarkerLeft = _p.verticalMarkerLeft; // There are multiple ways to indicate what X is selected.\n  // TODO: make a uniform verticalMarkerX state to fit all use-cases.\n\n\n  var highlightedX = useMemo(function () {\n    var _a, _b, _c, _d;\n\n    if (highlightedGroupIndex !== null) {\n      return barGroups[highlightedGroupIndex].x;\n    }\n\n    if (verticalMarkerLeft !== null) {\n      for (var _i = 0, scaledSeries_1 = scaledSeries; _i < scaledSeries_1.length; _i++) {\n        var series_1 = scaledSeries_1[_i];\n\n        if (series_1.x === verticalMarkerLeft) {\n          return (_b = (_a = series_1.datum) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : null;\n        }\n      }\n    }\n\n    if (highlightedPoint !== null) {\n      return (_d = (_c = highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.datum) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : null;\n    }\n\n    return null;\n  }, [highlightedPoint, verticalMarkerLeft, highlightedGroupIndex, scaledSeries, barGroups]);\n\n  var onPopoverDismiss = function (outsideClick) {\n    dismissPopover();\n\n    if (!outsideClick) {\n      // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n      setTimeout(function () {\n        var _a, _b;\n\n        if (highlightedPoint || highlightedGroupIndex !== null) {\n          (_a = plotRef.current) === null || _a === void 0 ? void 0 : _a.focusApplication();\n        } else {\n          (_b = plotRef.current) === null || _b === void 0 ? void 0 : _b.focusPlot();\n        }\n      }, 0);\n    }\n  };\n\n  useLayoutEffect(function () {\n    if (highlightedX !== null) {\n      showPopover();\n    }\n  }, [highlightedX, showPopover]);\n\n  var onSVGMouseDown = function () {\n    if (isPopoverOpen) {\n      if (isPopoverPinned) {\n        dismissPopover();\n      } else {\n        pinPopover();\n      }\n    } else {\n      showPopover();\n    }\n  };\n\n  var onSVGFocus = function (event, trigger) {\n    setPlotFocused(true);\n\n    if (trigger === 'keyboard') {\n      handlers.onFocus();\n    } else {// noop: clicks are handled separately\n    }\n  };\n\n  var onSVGBlur = function (event) {\n    var _a;\n\n    setPlotFocused(false);\n    var blurTarget = event.relatedTarget || event.target;\n\n    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeContains(containerRefObject.current, blurTarget)) {\n      setHighlightedPoint(null);\n\n      if (!((_a = plotContainerRef === null || plotContainerRef === void 0 ? void 0 : plotContainerRef.current) === null || _a === void 0 ? void 0 : _a.contains(blurTarget))) {\n        clearHighlightedSeries();\n      }\n\n      if (isPopoverOpen && !isPopoverPinned) {\n        dismissPopover();\n      }\n    }\n  };\n\n  var onSVGKeyDown = handlers.onKeyDown;\n  var xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n  var verticalLineX = null;\n\n  if (verticalMarkerLeft !== null) {\n    verticalLineX = verticalMarkerLeft;\n  } else if (isGroupNavigation && highlightedGroupIndex !== null) {\n    var x_1 = (_b = xScale.d3Scale(barGroups[highlightedGroupIndex].x)) !== null && _b !== void 0 ? _b : null;\n\n    if (x_1 !== null) {\n      verticalLineX = xOffset + x_1;\n    }\n  }\n\n  var point = useMemo(function () {\n    return highlightedPoint ? {\n      key: \"\".concat(highlightedPoint.x, \"-\").concat(highlightedPoint.y),\n      x: highlightedPoint.x,\n      y: highlightedPoint.y,\n      color: highlightedPoint.color\n    } : null;\n  }, [highlightedPoint]);\n  var verticalMarkers = useMemo(function () {\n    return verticalLineX !== null ? scaledSeries.filter(function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      return (x === verticalLineX || isNaN(x)) && !isNaN(y);\n    }).map(function (_a, index) {\n      var x = _a.x,\n          y = _a.y,\n          color = _a.color;\n      return {\n        key: \"\".concat(index, \"-\").concat(x, \"-\").concat(y),\n        x: !horizontalBars ? verticalLineX || 0 : y,\n        y: !horizontalBars ? y : verticalLineX || 0,\n        color: color\n      };\n    }) : [];\n  }, [scaledSeries, verticalLineX, horizontalBars]);\n  var popoverTrackRef = isGroupNavigation ? highlightedGroupRef : highlightedPoint ? highlightedPointRef : verticalMarkerRef;\n  var highlightDetails = useMemo(function () {\n    if (highlightedX === null) {\n      return null;\n    } // When series point is highlighted show the corresponding series and matching x-thresholds.\n\n\n    if (highlightedPoint) {\n      var seriesToShow = visibleSeries.filter(function (series) {\n        return series.series === (highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.series) || isXThreshold(series.series);\n      });\n      return formatHighlighted(highlightedX, seriesToShow, xTickFormatter);\n    } // Otherwise - show all visible series details.\n\n\n    return formatHighlighted(highlightedX, visibleSeries, xTickFormatter);\n  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter]);\n  var activeAriaLabel = useMemo(function () {\n    return highlightDetails ? \"\".concat(highlightDetails.position, \", \").concat(highlightDetails.details.map(function (d) {\n      return d.key + ' ' + d.value;\n    }).join(',')) : '';\n  }, [highlightDetails]); // Live region is used when nothing is focused e.g. when hovering.\n\n  var activeLiveRegion = activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : '';\n  return React.createElement(\"div\", {\n    className: styles['chart-container'],\n    ref: containerRef\n  }, React.createElement(AxisLabel, {\n    axis: y,\n    position: \"left\",\n    title: xy.title[y]\n  }), React.createElement(\"div\", {\n    className: styles['chart-container__horizontal']\n  }, React.createElement(LabelsMeasure, {\n    ticks: xy.ticks[y],\n    scale: xy.scale[y],\n    tickFormatter: xy.tickFormatter[y],\n    autoWidth: setLeftLabelsWidth\n  }), React.createElement(\"div\", {\n    className: styles['chart-container__vertical']\n  }, React.createElement(ChartPlot, {\n    ref: plotRef,\n    width: plotWidth,\n    height: plotHeight,\n    offsetBottom: bottomLabelsHeight,\n    isClickable: isPopoverOpen && !isPopoverPinned,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescription: ariaDescription,\n    ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription,\n    ariaLiveRegion: activeLiveRegion,\n    activeElementRef: isGroupNavigation ? highlightedGroupRef : highlightedPointRef,\n    activeElementKey: isPlotFocused && ((highlightedGroupIndex === null || highlightedGroupIndex === void 0 ? void 0 : highlightedGroupIndex.toString()) || (point === null || point === void 0 ? void 0 : point.key)),\n    activeElementFocusOffset: isGroupNavigation ? 0 : 3,\n    onMouseMove: onSVGMouseMove,\n    onMouseOut: onSVGMouseOut,\n    onMouseDown: onSVGMouseDown,\n    onFocus: onSVGFocus,\n    onBlur: onSVGBlur,\n    onKeyDown: onSVGKeyDown\n  }, React.createElement(LeftLabels, {\n    axis: y,\n    ticks: xy.ticks[y],\n    scale: xy.scale[y],\n    tickFormatter: xy.tickFormatter[y],\n    title: xy.title[y],\n    ariaRoleDescription: xy.ariaRoleDescription[y],\n    width: plotWidth,\n    height: plotHeight\n  }), horizontalBars && React.createElement(VerticalGridLines, {\n    scale: yScale,\n    ticks: yTicks,\n    height: plotHeight\n  }), emphasizeBaselineAxis && linesOnly && React.createElement(EmphasizedBaseline, {\n    axis: x,\n    scale: yScale,\n    width: plotWidth,\n    height: plotHeight\n  }), React.createElement(DataSeries, {\n    axis: x,\n    plotWidth: plotWidth,\n    plotHeight: plotHeight,\n    highlightedSeries: highlightedSeries !== null && highlightedSeries !== void 0 ? highlightedSeries : null,\n    highlightedGroupIndex: highlightedGroupIndex,\n    stackedBars: stackedBars,\n    isGroupNavigation: isGroupNavigation,\n    visibleSeries: visibleSeries,\n    xScale: xScale,\n    yScale: yScale\n  }), emphasizeBaselineAxis && !linesOnly && React.createElement(EmphasizedBaseline, {\n    axis: x,\n    scale: yScale,\n    width: plotWidth,\n    height: plotHeight\n  }), React.createElement(VerticalMarker, {\n    key: verticalLineX || '',\n    height: plotHeight,\n    showPoints: highlightedPoint === null,\n    showLine: !isGroupNavigation,\n    points: verticalMarkers,\n    ref: verticalMarkerRef\n  }), highlightedPoint && React.createElement(HighlightedPoint, {\n    ref: highlightedPointRef,\n    point: point,\n    role: \"button\",\n    ariaLabel: activeAriaLabel,\n    ariaHasPopup: true,\n    ariaExpanded: isPopoverPinned\n  }), isGroupNavigation && xScale.isCategorical() && React.createElement(BarGroups, {\n    ariaLabel: activeAriaLabel,\n    isRefresh: isRefresh,\n    isPopoverPinned: isPopoverPinned,\n    barGroups: barGroups,\n    highlightedGroupIndex: highlightedGroupIndex,\n    highlightedGroupRef: highlightedGroupRef\n  }), React.createElement(BottomLabels, {\n    axis: x,\n    ticks: xy.ticks[x],\n    scale: xy.scale[x],\n    tickFormatter: xy.tickFormatter[x],\n    title: xy.title[x],\n    ariaRoleDescription: xy.ariaRoleDescription[x],\n    height: plotHeight,\n    width: plotWidth,\n    offsetLeft: leftLabelsWidth + BOTTOM_LABELS_OFFSET,\n    offsetRight: BOTTOM_LABELS_OFFSET,\n    autoHeight: setBottomLabelsHeight\n  })), React.createElement(AxisLabel, {\n    axis: x,\n    position: \"bottom\",\n    title: xy.title[x]\n  })), React.createElement(ChartPopover, {\n    containerRef: containerRefObject,\n    trackRef: popoverTrackRef,\n    isOpen: isPopoverOpen,\n    isPinned: isPopoverPinned,\n    highlightDetails: highlightDetails,\n    onDismiss: onPopoverDismiss,\n    size: detailPopoverSize,\n    dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useLayoutEffect","useMemo","useRef","useState","nodeContains","useVisualRefresh","getXTickCount","getYTickCount","createXTicks","createYTicks","ChartPlot","AxisLabel","LabelsMeasure","LeftLabels","BottomLabels","VerticalGridLines","EmphasizedBaseline","HighlightedPoint","VerticalMarker","ChartScale","NumericChartScale","ChartPopover","computeDomainX","computeDomainY","isXThreshold","makeScaledSeries","makeScaledBarGroups","formatHighlighted","DataSeries","BarGroups","useMouseHover","useNavigation","usePopover","styles","useContainerWidth","useMergeRefs","LEFT_LABELS_MARGIN","BOTTOM_LABELS_OFFSET","ChartContainer","_a","plotHeight","series","visibleSeries","highlightedSeries","onHighlightChange","highlightedPoint","setHighlightedPoint","highlightedGroupIndex","setHighlightedGroupIndex","legendSeries","_c","detailPopoverSize","_d","stackedBars","_e","horizontalBars","xScaleType","yScaleType","xTickFormatter","yTickFormatter","emphasizeBaselineAxis","xTitle","yTitle","ariaLabel","ariaLabelledby","ariaDescription","_f","i18nStrings","plotContainerRef","props","plotRef","verticalMarkerRef","leftLabelsWidth","setLeftLabelsWidth","bottomLabelsHeight","setBottomLabelsHeight","containerWidth","containerMeasureRef","plotWidth","containerRefObject","containerRef","isRefresh","linesOnly","every","type","xDomain","yDomain","xTickCount","yTickCount","rangeBottomTop","rangeTopBottom","rangeLeftRight","xScale","yScale","xTicks","yTicks","highlightedPointRef","highlightedGroupRef","isPlotFocused","setPlotFocused","x","y","xy","ticks","scale","tickFormatter","title","ariaRoleDescription","xAxisAriaRoleDescription","yAxisAriaRoleDescription","scaledSeries","barGroups","isPopoverOpen","isPopoverPinned","showPopover","pinPopover","dismissPopover","isHandlersDisabled","setHandlersDisabled","timeoutId_1","setTimeout","highlightPoint","point","highlightSeries","highlightGroup","groupIndex","clearHighlightedSeries","_o","isGroupNavigation","handlers","onSVGMouseMove","onSVGMouseOut","verticalMarkerLeft","highlightedX","_i","series_1","datum","_b","onPopoverDismiss","outsideClick","current","focusApplication","focusPlot","onSVGMouseDown","onSVGFocus","event","trigger","onFocus","onSVGBlur","blurTarget","relatedTarget","target","Element","contains","onSVGKeyDown","onKeyDown","xOffset","isCategorical","Math","max","d3Scale","bandwidth","verticalLineX","x_1","key","concat","color","verticalMarkers","filter","isNaN","map","index","popoverTrackRef","highlightDetails","seriesToShow","activeAriaLabel","position","details","d","value","join","activeLiveRegion","className","ref","axis","autoWidth","width","height","offsetBottom","isClickable","chartAriaRoleDescription","ariaLiveRegion","activeElementRef","activeElementKey","toString","activeElementFocusOffset","onMouseMove","onMouseOut","onMouseDown","onBlur","showPoints","showLine","points","role","ariaHasPopup","ariaExpanded","offsetLeft","offsetRight","autoHeight","trackRef","isOpen","isPinned","onDismiss","size","dismissAriaLabel","detailPopoverDismissAriaLabel"],"sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/chart-container.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { nodeContains } from '../internal/utils/dom';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nimport { getXTickCount, getYTickCount, createXTicks, createYTicks } from '../internal/components/cartesian-chart/ticks';\nimport ChartPlot, { ChartPlotRef } from '../internal/components/chart-plot';\nimport AxisLabel from '../internal/components/cartesian-chart/axis-label';\nimport LabelsMeasure from '../internal/components/cartesian-chart/labels-measure';\nimport LeftLabels from '../internal/components/cartesian-chart/left-labels';\nimport BottomLabels from '../internal/components/cartesian-chart/bottom-labels';\nimport VerticalGridLines from '../internal/components/cartesian-chart/vertical-grid-lines';\nimport EmphasizedBaseline from '../internal/components/cartesian-chart/emphasized-baseline';\nimport HighlightedPoint from '../internal/components/cartesian-chart/highlighted-point';\nimport VerticalMarker from '../internal/components/cartesian-chart/vertical-marker';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport ChartPopover from './chart-popover';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps, ScaleType } from './interfaces';\nimport { computeDomainX, computeDomainY } from './domain';\nimport { isXThreshold } from './utils';\nimport makeScaledSeries, { ScaledPoint } from './make-scaled-series';\nimport makeScaledBarGroups, { ScaledBarGroup } from './make-scaled-bar-groups';\nimport formatHighlighted from './format-highlighted';\nimport DataSeries from './data-series';\nimport BarGroups from './bar-groups';\nimport { useMouseHover } from './hooks/use-mouse-hover';\nimport { useNavigation } from './hooks/use-navigation';\nimport { usePopover } from './hooks/use-popover';\n\nimport styles from './styles.css.js';\nimport { CartesianChartProps } from '../internal/components/cartesian-chart/interfaces';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nconst LEFT_LABELS_MARGIN = 16;\nconst BOTTOM_LABELS_OFFSET = 12;\n\ntype TickFormatter = undefined | ((value: ChartDataTypes) => string);\n\nexport interface ChartContainerProps<T extends ChartDataTypes> {\n  series: ReadonlyArray<InternalChartSeries<T>>;\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n\n  height: number;\n  detailPopoverSize: MixedLineBarChartProps<T>['detailPopoverSize'];\n\n  xScaleType: ScaleType;\n  yScaleType: 'linear' | 'log';\n\n  xDomain: MixedLineBarChartProps<T>['xDomain'];\n  yDomain: MixedLineBarChartProps<T>['yDomain'];\n\n  xTickFormatter?: CartesianChartProps.TickFormatter<T>;\n  yTickFormatter?: CartesianChartProps.TickFormatter<number>;\n\n  xTitle?: string;\n  yTitle?: string;\n\n  stackedBars?: boolean;\n  emphasizeBaselineAxis: boolean;\n  horizontalBars?: boolean;\n\n  highlightedSeries?: MixedLineBarChartProps<T>['highlightedSeries'];\n  onHighlightChange: (series: InternalChartSeries<T>['series'] | null) => void;\n  highlightedPoint: ScaledPoint<T> | null;\n  setHighlightedPoint: (point: ScaledPoint<T> | null) => void;\n  highlightedGroupIndex: number | null;\n  setHighlightedGroupIndex: (groupIndex: number | null) => void;\n  legendSeries: null | MixedLineBarChartProps.ChartSeries<T>;\n\n  ariaLabel: MixedLineBarChartProps<T>['ariaLabel'];\n  ariaLabelledby: MixedLineBarChartProps<T>['ariaLabelledby'];\n  ariaDescription: MixedLineBarChartProps<T>['ariaDescription'];\n  i18nStrings: MixedLineBarChartProps<T>['i18nStrings'];\n\n  plotContainerRef: React.RefObject<HTMLDivElement>;\n}\n\nexport default function ChartContainer<T extends ChartDataTypes>({\n  height: plotHeight,\n  series,\n  visibleSeries,\n  highlightedSeries,\n  onHighlightChange,\n  highlightedPoint,\n  setHighlightedPoint,\n  highlightedGroupIndex,\n  setHighlightedGroupIndex,\n  legendSeries,\n  detailPopoverSize = 'medium',\n  stackedBars = false,\n  horizontalBars = false,\n  xScaleType,\n  yScaleType,\n  xTickFormatter,\n  yTickFormatter,\n  emphasizeBaselineAxis,\n  xTitle,\n  yTitle,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  i18nStrings = {},\n  plotContainerRef,\n  ...props\n}: ChartContainerProps<T>) {\n  const plotRef = useRef<ChartPlotRef>(null);\n  const verticalMarkerRef = useRef<SVGLineElement>(null);\n\n  const [leftLabelsWidth, setLeftLabelsWidth] = useState(0);\n  const [bottomLabelsHeight, setBottomLabelsHeight] = useState(0);\n  const [containerWidth, containerMeasureRef] = useContainerWidth(500);\n  const plotWidth = containerWidth ? containerWidth - leftLabelsWidth - LEFT_LABELS_MARGIN : 500;\n  const containerRefObject = useRef(null);\n  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);\n\n  const isRefresh = useVisualRefresh(containerRefObject);\n\n  const linesOnly = series.every(({ series }) => series.type === 'line' || series.type === 'threshold');\n\n  const xDomain = (props.xDomain || computeDomainX(series, xScaleType)) as\n    | readonly number[]\n    | readonly string[]\n    | readonly Date[];\n  const yDomain = (props.yDomain || computeDomainY(series, yScaleType, stackedBars)) as readonly number[];\n\n  const xTickCount = getXTickCount(plotWidth);\n  const yTickCount = getYTickCount(plotHeight);\n\n  const rangeBottomTop: [number, number] = [0, plotHeight];\n  const rangeTopBottom: [number, number] = [plotHeight, 0];\n  const rangeLeftRight: [number, number] = [0, plotWidth];\n  const xScale = new ChartScale(xScaleType, xDomain, horizontalBars ? rangeBottomTop : rangeLeftRight, linesOnly);\n  const yScale = new NumericChartScale(\n    yScaleType,\n    yDomain,\n    horizontalBars ? rangeLeftRight : rangeTopBottom,\n    props.yDomain ? null : yTickCount\n  );\n\n  const xTicks = createXTicks(xScale, xTickCount);\n  const yTicks = createYTicks(yScale, yTickCount);\n\n  /**\n   * Interactions\n   */\n  const highlightedPointRef = useRef<SVGGElement>(null);\n  const highlightedGroupRef = useRef<SVGRectElement>(null);\n  const [isPlotFocused, setPlotFocused] = useState(false);\n\n  // Some chart components are rendered against \"x\" or \"y\" axes,\n  // When \"horizontalBars\" is enabled, the axes are inverted.\n  const x = !horizontalBars ? 'x' : 'y';\n  const y = !horizontalBars ? 'y' : 'x';\n  const xy = {\n    ticks: { x: xTicks, y: yTicks },\n    scale: { x: xScale, y: yScale },\n    tickFormatter: { x: xTickFormatter, y: yTickFormatter },\n    title: { x: xTitle, y: yTitle },\n    ariaRoleDescription: { x: i18nStrings.xAxisAriaRoleDescription, y: i18nStrings.yAxisAriaRoleDescription },\n  };\n\n  const scaledSeries = makeScaledSeries(visibleSeries, xScale, yScale);\n  const barGroups: ScaledBarGroup<T>[] = makeScaledBarGroups(visibleSeries, xScale, plotWidth, plotHeight, y);\n\n  const { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, dismissPopover } = usePopover();\n\n  // Allows to add a delay between popover is dismissed and handlers are enabled to prevent immediate popover reopening.\n  const [isHandlersDisabled, setHandlersDisabled] = useState(!isPopoverPinned);\n  useEffect(() => {\n    if (isPopoverPinned) {\n      setHandlersDisabled(true);\n    } else {\n      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isPopoverPinned]);\n\n  // Highlighted point and highlighted series must be in sync.\n  // TODO: refactor the code so that it is not possible to make series and point highlight out of sync.\n  const highlightPoint = useCallback(\n    (point: ScaledPoint<T> | null) => {\n      setHighlightedGroupIndex(null);\n      setHighlightedPoint(point);\n    },\n    [setHighlightedPoint, setHighlightedGroupIndex]\n  );\n\n  const highlightSeries = useCallback(\n    (series: MixedLineBarChartProps.ChartSeries<T> | null) => {\n      if (series !== highlightedSeries) {\n        onHighlightChange(series);\n      }\n    },\n    [highlightedSeries, onHighlightChange]\n  );\n\n  const highlightGroup = useCallback(\n    (groupIndex: number) => {\n      highlightSeries(null);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(groupIndex);\n    },\n    [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]\n  );\n\n  const clearHighlightedSeries = useCallback(() => {\n    highlightSeries(null);\n    setHighlightedGroupIndex(null);\n    setHighlightedPoint(null);\n    dismissPopover();\n  }, [dismissPopover, highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);\n\n  const { isGroupNavigation, ...handlers } = useNavigation({\n    series,\n    visibleSeries,\n    scaledSeries,\n    barGroups,\n    xScale,\n    yScale,\n    highlightedPoint,\n    highlightedGroupIndex,\n    highlightedSeries,\n    legendSeries,\n    isHandlersDisabled,\n    pinPopover,\n    highlightSeries,\n    highlightGroup,\n    highlightPoint,\n    clearHighlightedSeries,\n  });\n\n  const { onSVGMouseMove, onSVGMouseOut, verticalMarkerLeft } = useMouseHover<T>({\n    scaledSeries,\n    barGroups,\n    plotRef,\n    highlightSeries,\n    highlightPoint,\n    highlightGroup,\n    clearHighlightedSeries,\n    isGroupNavigation,\n    isHandlersDisabled,\n  });\n\n  // There are multiple ways to indicate what X is selected.\n  // TODO: make a uniform verticalMarkerX state to fit all use-cases.\n  const highlightedX = useMemo(() => {\n    if (highlightedGroupIndex !== null) {\n      return barGroups[highlightedGroupIndex].x;\n    }\n    if (verticalMarkerLeft !== null) {\n      for (const series of scaledSeries) {\n        if (series.x === verticalMarkerLeft) {\n          return series.datum?.x ?? null;\n        }\n      }\n    }\n    if (highlightedPoint !== null) {\n      return highlightedPoint?.datum?.x ?? null;\n    }\n    return null;\n  }, [highlightedPoint, verticalMarkerLeft, highlightedGroupIndex, scaledSeries, barGroups]);\n\n  const onPopoverDismiss = (outsideClick?: boolean) => {\n    dismissPopover();\n\n    if (!outsideClick) {\n      // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n      setTimeout(() => {\n        if (highlightedPoint || highlightedGroupIndex !== null) {\n          plotRef.current?.focusApplication();\n        } else {\n          plotRef.current?.focusPlot();\n        }\n      }, 0);\n    }\n  };\n\n  useLayoutEffect(() => {\n    if (highlightedX !== null) {\n      showPopover();\n    }\n  }, [highlightedX, showPopover]);\n\n  const onSVGMouseDown = () => {\n    if (isPopoverOpen) {\n      if (isPopoverPinned) {\n        dismissPopover();\n      } else {\n        pinPopover();\n      }\n    } else {\n      showPopover();\n    }\n  };\n\n  const onSVGFocus = (event: React.FocusEvent, trigger: 'mouse' | 'keyboard') => {\n    setPlotFocused(true);\n    if (trigger === 'keyboard') {\n      handlers.onFocus();\n    } else {\n      // noop: clicks are handled separately\n    }\n  };\n\n  const onSVGBlur = (event: React.FocusEvent<Element>) => {\n    setPlotFocused(false);\n    const blurTarget = event.relatedTarget || event.target;\n    if (\n      blurTarget === null ||\n      !(blurTarget instanceof Element) ||\n      !nodeContains(containerRefObject.current, blurTarget)\n    ) {\n      setHighlightedPoint(null);\n      if (!plotContainerRef?.current?.contains(blurTarget)) {\n        clearHighlightedSeries();\n      }\n\n      if (isPopoverOpen && !isPopoverPinned) {\n        dismissPopover();\n      }\n    }\n  };\n\n  const onSVGKeyDown = handlers.onKeyDown;\n\n  const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;\n\n  let verticalLineX: number | null = null;\n  if (verticalMarkerLeft !== null) {\n    verticalLineX = verticalMarkerLeft;\n  } else if (isGroupNavigation && highlightedGroupIndex !== null) {\n    const x = xScale.d3Scale(barGroups[highlightedGroupIndex].x as any) ?? null;\n    if (x !== null) {\n      verticalLineX = xOffset + x;\n    }\n  }\n\n  const point = useMemo(\n    () =>\n      highlightedPoint\n        ? {\n            key: `${highlightedPoint.x}-${highlightedPoint.y}`,\n            x: highlightedPoint.x,\n            y: highlightedPoint.y,\n            color: highlightedPoint.color,\n          }\n        : null,\n    [highlightedPoint]\n  );\n\n  const verticalMarkers = useMemo(\n    () =>\n      verticalLineX !== null\n        ? scaledSeries\n            .filter(({ x, y }) => (x === verticalLineX || isNaN(x)) && !isNaN(y))\n            .map(({ x, y, color }, index) => ({\n              key: `${index}-${x}-${y}`,\n              x: !horizontalBars ? verticalLineX || 0 : y,\n              y: !horizontalBars ? y : verticalLineX || 0,\n              color: color,\n            }))\n        : [],\n    [scaledSeries, verticalLineX, horizontalBars]\n  );\n\n  const popoverTrackRef = isGroupNavigation\n    ? highlightedGroupRef\n    : highlightedPoint\n    ? highlightedPointRef\n    : verticalMarkerRef;\n\n  const highlightDetails = useMemo(() => {\n    if (highlightedX === null) {\n      return null;\n    }\n\n    // When series point is highlighted show the corresponding series and matching x-thresholds.\n    if (highlightedPoint) {\n      const seriesToShow = visibleSeries.filter(\n        series => series.series === highlightedPoint?.series || isXThreshold(series.series)\n      );\n      return formatHighlighted(highlightedX, seriesToShow, xTickFormatter);\n    }\n\n    // Otherwise - show all visible series details.\n    return formatHighlighted(highlightedX, visibleSeries, xTickFormatter);\n  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter]);\n\n  const activeAriaLabel = useMemo(\n    () =>\n      highlightDetails\n        ? `${highlightDetails.position}, ${highlightDetails.details.map(d => d.key + ' ' + d.value).join(',')}`\n        : '',\n    [highlightDetails]\n  );\n\n  // Live region is used when nothing is focused e.g. when hovering.\n  const activeLiveRegion =\n    activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : '';\n\n  return (\n    <div className={styles['chart-container']} ref={containerRef}>\n      <AxisLabel axis={y} position=\"left\" title={xy.title[y]} />\n      <div className={styles['chart-container__horizontal']}>\n        <LabelsMeasure\n          ticks={xy.ticks[y]}\n          scale={xy.scale[y]}\n          tickFormatter={xy.tickFormatter[y] as TickFormatter}\n          autoWidth={setLeftLabelsWidth}\n        />\n\n        <div className={styles['chart-container__vertical']}>\n          <ChartPlot\n            ref={plotRef}\n            width={plotWidth}\n            height={plotHeight}\n            offsetBottom={bottomLabelsHeight}\n            isClickable={isPopoverOpen && !isPopoverPinned}\n            ariaLabel={ariaLabel}\n            ariaLabelledby={ariaLabelledby}\n            ariaDescription={ariaDescription}\n            ariaRoleDescription={i18nStrings?.chartAriaRoleDescription}\n            ariaLiveRegion={activeLiveRegion}\n            activeElementRef={isGroupNavigation ? highlightedGroupRef : highlightedPointRef}\n            activeElementKey={isPlotFocused && (highlightedGroupIndex?.toString() || point?.key)}\n            activeElementFocusOffset={isGroupNavigation ? 0 : 3}\n            onMouseMove={onSVGMouseMove}\n            onMouseOut={onSVGMouseOut}\n            onMouseDown={onSVGMouseDown}\n            onFocus={onSVGFocus}\n            onBlur={onSVGBlur}\n            onKeyDown={onSVGKeyDown}\n          >\n            <LeftLabels\n              axis={y}\n              ticks={xy.ticks[y]}\n              scale={xy.scale[y]}\n              tickFormatter={xy.tickFormatter[y] as TickFormatter}\n              title={xy.title[y]}\n              ariaRoleDescription={xy.ariaRoleDescription[y]}\n              width={plotWidth}\n              height={plotHeight}\n            />\n\n            {horizontalBars && <VerticalGridLines scale={yScale} ticks={yTicks} height={plotHeight} />}\n\n            {emphasizeBaselineAxis && linesOnly && (\n              <EmphasizedBaseline axis={x} scale={yScale} width={plotWidth} height={plotHeight} />\n            )}\n\n            <DataSeries\n              axis={x}\n              plotWidth={plotWidth}\n              plotHeight={plotHeight}\n              highlightedSeries={highlightedSeries ?? null}\n              highlightedGroupIndex={highlightedGroupIndex}\n              stackedBars={stackedBars}\n              isGroupNavigation={isGroupNavigation}\n              visibleSeries={visibleSeries}\n              xScale={xScale}\n              yScale={yScale}\n            />\n\n            {emphasizeBaselineAxis && !linesOnly && (\n              <EmphasizedBaseline axis={x} scale={yScale} width={plotWidth} height={plotHeight} />\n            )}\n\n            <VerticalMarker\n              key={verticalLineX || ''}\n              height={plotHeight}\n              showPoints={highlightedPoint === null}\n              showLine={!isGroupNavigation}\n              points={verticalMarkers}\n              ref={verticalMarkerRef}\n            />\n\n            {highlightedPoint && (\n              <HighlightedPoint\n                ref={highlightedPointRef}\n                point={point}\n                role=\"button\"\n                ariaLabel={activeAriaLabel}\n                ariaHasPopup={true}\n                ariaExpanded={isPopoverPinned}\n              />\n            )}\n\n            {isGroupNavigation && xScale.isCategorical() && (\n              <BarGroups\n                ariaLabel={activeAriaLabel}\n                isRefresh={isRefresh}\n                isPopoverPinned={isPopoverPinned}\n                barGroups={barGroups}\n                highlightedGroupIndex={highlightedGroupIndex}\n                highlightedGroupRef={highlightedGroupRef}\n              />\n            )}\n\n            <BottomLabels\n              axis={x}\n              ticks={xy.ticks[x]}\n              scale={xy.scale[x]}\n              tickFormatter={xy.tickFormatter[x] as TickFormatter}\n              title={xy.title[x]}\n              ariaRoleDescription={xy.ariaRoleDescription[x]}\n              height={plotHeight}\n              width={plotWidth}\n              offsetLeft={leftLabelsWidth + BOTTOM_LABELS_OFFSET}\n              offsetRight={BOTTOM_LABELS_OFFSET}\n              autoHeight={setBottomLabelsHeight}\n            />\n          </ChartPlot>\n\n          <AxisLabel axis={x} position=\"bottom\" title={xy.title[x]} />\n        </div>\n\n        <ChartPopover\n          containerRef={containerRefObject}\n          trackRef={popoverTrackRef}\n          isOpen={isPopoverOpen}\n          isPinned={isPopoverPinned}\n          highlightDetails={highlightDetails}\n          onDismiss={onPopoverDismiss}\n          size={detailPopoverSize}\n          dismissAriaLabel={i18nStrings.detailPopoverDismissAriaLabel}\n        />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}