{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameMonth, isToday as isTodayFn } from 'date-fns';\nimport { getDateLabel } from '../../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nimport { KeyCode } from '../../../../internal/keycode.js';\nimport { formatDate } from '../../../../date-picker/calendar/utils/date.js';\nimport useFocusVisible from '../../../../internal/hooks/focus-visible';\n\nfunction propsAreEqual(prevProps, nextProps) {\n  return prevProps.locale === nextProps.locale && prevProps.baseDate.getTime() === nextProps.baseDate.getTime() && prevProps.date.getTime() === nextProps.date.getTime() && prevProps.isDateInFirstRow === nextProps.isDateInFirstRow && prevProps.isDateInFirstColumn === nextProps.isDateInFirstColumn && prevProps.isDateInLastColumn === nextProps.isDateInLastColumn && prevProps.isDateInSelectionStartWeek === nextProps.isDateInSelectionStartWeek && prevProps.isDateInSelectionEndWeek === nextProps.isDateInSelectionEndWeek && prevProps.isFocusedDate === nextProps.isFocusedDate && prevProps.isDateEnabled === nextProps.isDateEnabled && prevProps.todayAriaLabel === nextProps.todayAriaLabel && prevProps.onSelectDate === nextProps.onSelectDate && prevProps.onFocusDate === nextProps.onFocusDate && prevProps.isInRange === nextProps.isInRange && prevProps.isSelected === nextProps.isSelected && prevProps.isStartDate === nextProps.isStartDate && prevProps.isEndDate === nextProps.isEndDate && prevProps.onlyOneSelected === nextProps.onlyOneSelected && prevProps.isRangeStartDate === nextProps.isRangeStartDate && prevProps.isRangeEndDate === nextProps.isRangeEndDate;\n}\n\nvar GridDay = React.memo(React.forwardRef(function (_a, ref) {\n  var _b, _c, _d;\n\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      date = _a.date,\n      isSelected = _a.isSelected,\n      isStartDate = _a.isStartDate,\n      isEndDate = _a.isEndDate,\n      onlyOneSelected = _a.onlyOneSelected,\n      isRangeStartDate = _a.isRangeStartDate,\n      isRangeEndDate = _a.isRangeEndDate,\n      isFocusedDate = _a.isFocusedDate,\n      isDateEnabled = _a.isDateEnabled,\n      todayAriaLabel = _a.todayAriaLabel,\n      onSelectDate = _a.onSelectDate,\n      onFocusDate = _a.onFocusDate,\n      isDateInFirstRow = _a.isDateInFirstRow,\n      isDateInFirstColumn = _a.isDateInFirstColumn,\n      isDateInLastColumn = _a.isDateInLastColumn,\n      isDateInSelectionStartWeek = _a.isDateInSelectionStartWeek,\n      isDateInSelectionEndWeek = _a.isDateInSelectionEndWeek,\n      isInRange = _a.isInRange;\n  var dayLabel = getDateLabel(locale, date);\n  var labels = [dayLabel];\n  var isEnabled = !isDateEnabled || isDateEnabled(date);\n  var isFocusable = isFocusedDate && isEnabled;\n  var isToday = isTodayFn(date);\n  var computedAttributes = {};\n  var focusVisible = useFocusVisible();\n  var baseClasses = (_b = {}, _b[styles['in-first-row']] = isDateInFirstRow, _b[styles['in-first-column']] = isDateInFirstColumn, _b);\n\n  if (!isSameMonth(date, baseDate)) {\n    var classNames_1 = clsx(styles.day, baseClasses, (_c = {}, _c[styles['in-previous-month']] = isBefore(date, baseDate), _c[styles['last-day-of-month']] = isLastDayOfMonth(date), _c[styles['in-next-month']] = isAfter(date, baseDate), _c));\n    return React.createElement(\"div\", {\n      className: classNames_1,\n      ref: ref\n    });\n  }\n\n  var classNames = clsx(styles.day, baseClasses, (_d = {}, _d[styles['in-current-month']] = isSameMonth(date, baseDate), _d[styles.enabled] = isEnabled, _d[styles.selected] = isSelected, _d[styles['start-date']] = isStartDate, _d[styles['end-date']] = isEndDate, _d[styles['range-start-date']] = isRangeStartDate, _d[styles['range-end-date']] = isRangeEndDate, _d[styles['no-range']] = isSelected && onlyOneSelected, _d[styles['in-range']] = isInRange, _d[styles['in-range-border-top']] = isDateInSelectionStartWeek || date.getDate() <= 7, _d[styles['in-range-border-bottom']] = isDateInSelectionEndWeek || date.getDate() > getDaysInMonth(date) - 7, _d[styles['in-range-border-left']] = isDateInFirstColumn || date.getDate() === 1 || isRangeStartDate, _d[styles['in-range-border-right']] = isDateInLastColumn || isLastDayOfMonth(date) || isRangeEndDate, _d[styles.today] = isToday, _d));\n  computedAttributes['aria-pressed'] = isSelected || isInRange;\n\n  if (isToday) {\n    labels.push(todayAriaLabel);\n    computedAttributes['aria-current'] = 'date';\n  }\n\n  if (isEnabled) {\n    computedAttributes.onClick = function () {\n      return onSelectDate(date);\n    };\n\n    computedAttributes.onFocus = function () {\n      return onFocusDate(date);\n    };\n\n    computedAttributes.tabIndex = -1;\n  }\n\n  if (isFocusable) {\n    computedAttributes.tabIndex = 0;\n  }\n\n  var onKeyDown = function (event) {\n    if (event.keyCode === KeyCode.space) {\n      event.preventDefault();\n      onSelectDate(date);\n    }\n  };\n\n  return React.createElement(\"div\", __assign({\n    className: classNames,\n    \"aria-label\": labels.join('. '),\n    \"data-date\": formatDate(date),\n    role: \"button\"\n  }, computedAttributes, {\n    ref: ref,\n    onKeyDown: onKeyDown\n  }, focusVisible), React.createElement(\"span\", {\n    className: styles['day-inner']\n  }, date.getDate()));\n}), propsAreEqual);\nexport default GridDay;","map":{"version":3,"mappings":"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","names":["React","styles","getDaysInMonth","isAfter","isBefore","isLastDayOfMonth","isSameMonth","isToday","isTodayFn","getDateLabel","clsx","KeyCode","formatDate","useFocusVisible","propsAreEqual","prevProps","nextProps","locale","baseDate","getTime","date","isDateInFirstRow","isDateInFirstColumn","isDateInLastColumn","isDateInSelectionStartWeek","isDateInSelectionEndWeek","isFocusedDate","isDateEnabled","todayAriaLabel","onSelectDate","onFocusDate","isInRange","isSelected","isStartDate","isEndDate","onlyOneSelected","isRangeStartDate","isRangeEndDate","GridDay","memo","forwardRef","_a","ref","dayLabel","labels","isEnabled","isFocusable","computedAttributes","focusVisible","baseClasses","_b","classNames_1","day","_c","className","classNames","_d","enabled","selected","getDate","today","push","onClick","onFocus","tabIndex","onKeyDown","event","keyCode","space","preventDefault","join","role"],"sourceRoot":"","sources":["../../../../../../src/date-range-picker/calendar/grids/day/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { DateRangePickerProps } from '../../../interfaces';\nimport { getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameMonth, isToday as isTodayFn } from 'date-fns';\nimport { getDateLabel } from '../../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nimport { KeyCode } from '../../../../internal/keycode.js';\nimport { formatDate } from '../../../../date-picker/calendar/utils/date.js';\nimport useFocusVisible from '../../../../internal/hooks/focus-visible';\n\ninterface GridDayProps {\n  locale: string;\n  baseDate: Date;\n  date: Date;\n\n  isDateInFirstRow: boolean;\n  isDateInFirstColumn: boolean;\n  isDateInLastColumn: boolean;\n  isDateInSelectionStartWeek: boolean;\n  isDateInSelectionEndWeek: boolean;\n\n  isFocusedDate: boolean;\n  isDateEnabled?: DateRangePickerProps.IsDateEnabledFunction;\n  todayAriaLabel: string;\n  onSelectDate: (date: Date) => void;\n  onFocusDate: (date: Date) => void;\n  isInRange: boolean;\n  isSelected: boolean;\n\n  // these only exist for the test-utils\n  isStartDate: boolean;\n  isEndDate: boolean;\n  // used for refresh styles\n  onlyOneSelected: boolean;\n  isRangeStartDate: boolean;\n  isRangeEndDate: boolean;\n}\n\nfunction propsAreEqual(prevProps: GridDayProps, nextProps: GridDayProps): boolean {\n  return (\n    prevProps.locale === nextProps.locale &&\n    prevProps.baseDate.getTime() === nextProps.baseDate.getTime() &&\n    prevProps.date.getTime() === nextProps.date.getTime() &&\n    prevProps.isDateInFirstRow === nextProps.isDateInFirstRow &&\n    prevProps.isDateInFirstColumn === nextProps.isDateInFirstColumn &&\n    prevProps.isDateInLastColumn === nextProps.isDateInLastColumn &&\n    prevProps.isDateInSelectionStartWeek === nextProps.isDateInSelectionStartWeek &&\n    prevProps.isDateInSelectionEndWeek === nextProps.isDateInSelectionEndWeek &&\n    prevProps.isFocusedDate === nextProps.isFocusedDate &&\n    prevProps.isDateEnabled === nextProps.isDateEnabled &&\n    prevProps.todayAriaLabel === nextProps.todayAriaLabel &&\n    prevProps.onSelectDate === nextProps.onSelectDate &&\n    prevProps.onFocusDate === nextProps.onFocusDate &&\n    prevProps.isInRange === nextProps.isInRange &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.isStartDate === nextProps.isStartDate &&\n    prevProps.isEndDate === nextProps.isEndDate &&\n    prevProps.onlyOneSelected === nextProps.onlyOneSelected &&\n    prevProps.isRangeStartDate === nextProps.isRangeStartDate &&\n    prevProps.isRangeEndDate === nextProps.isRangeEndDate\n  );\n}\n\nconst GridDay = React.memo(\n  React.forwardRef<HTMLDivElement, GridDayProps>(\n    (\n      {\n        locale,\n        baseDate,\n        date,\n        isSelected,\n        isStartDate,\n        isEndDate,\n        onlyOneSelected,\n        isRangeStartDate,\n        isRangeEndDate,\n        isFocusedDate,\n        isDateEnabled,\n        todayAriaLabel,\n        onSelectDate,\n        onFocusDate,\n        isDateInFirstRow,\n        isDateInFirstColumn,\n        isDateInLastColumn,\n        isDateInSelectionStartWeek,\n        isDateInSelectionEndWeek,\n        isInRange,\n      }: GridDayProps,\n      ref\n    ) => {\n      const dayLabel = getDateLabel(locale, date);\n\n      const labels = [dayLabel];\n\n      const isEnabled = !isDateEnabled || isDateEnabled(date);\n      const isFocusable = isFocusedDate && isEnabled;\n      const isToday = isTodayFn(date);\n      const computedAttributes: React.HTMLAttributes<HTMLDivElement> = {};\n\n      const focusVisible = useFocusVisible();\n\n      const baseClasses = {\n        [styles['in-first-row']]: isDateInFirstRow,\n        [styles['in-first-column']]: isDateInFirstColumn,\n      };\n\n      if (!isSameMonth(date, baseDate)) {\n        const classNames = clsx(styles.day, baseClasses, {\n          [styles['in-previous-month']]: isBefore(date, baseDate),\n          [styles['last-day-of-month']]: isLastDayOfMonth(date),\n          [styles['in-next-month']]: isAfter(date, baseDate),\n        });\n        return <div className={classNames} ref={ref}></div>;\n      }\n\n      const classNames = clsx(styles.day, baseClasses, {\n        [styles['in-current-month']]: isSameMonth(date, baseDate),\n        [styles.enabled]: isEnabled,\n        [styles.selected]: isSelected,\n        [styles['start-date']]: isStartDate,\n        [styles['end-date']]: isEndDate,\n        [styles['range-start-date']]: isRangeStartDate,\n        [styles['range-end-date']]: isRangeEndDate,\n        [styles['no-range']]: isSelected && onlyOneSelected,\n        [styles['in-range']]: isInRange,\n        [styles['in-range-border-top']]: isDateInSelectionStartWeek || date.getDate() <= 7,\n        [styles['in-range-border-bottom']]: isDateInSelectionEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n        [styles['in-range-border-left']]: isDateInFirstColumn || date.getDate() === 1 || isRangeStartDate,\n        [styles['in-range-border-right']]: isDateInLastColumn || isLastDayOfMonth(date) || isRangeEndDate,\n        [styles.today]: isToday,\n      });\n\n      computedAttributes['aria-pressed'] = isSelected || isInRange;\n\n      if (isToday) {\n        labels.push(todayAriaLabel);\n        computedAttributes['aria-current'] = 'date';\n      }\n\n      if (isEnabled) {\n        computedAttributes.onClick = () => onSelectDate(date);\n        computedAttributes.onFocus = () => onFocusDate(date);\n        computedAttributes.tabIndex = -1;\n      }\n\n      if (isFocusable) {\n        computedAttributes.tabIndex = 0;\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.keyCode === KeyCode.space) {\n          event.preventDefault();\n          onSelectDate(date);\n        }\n      };\n\n      return (\n        <div\n          className={classNames}\n          aria-label={labels.join('. ')}\n          data-date={formatDate(date)}\n          role=\"button\"\n          {...computedAttributes}\n          ref={ref}\n          onKeyDown={onKeyDown}\n          {...focusVisible}\n        >\n          <span className={styles['day-inner']}>{date.getDate()}</span>\n        </div>\n      );\n    }\n  ),\n  propsAreEqual\n);\n\nexport default GridDay;\n"]},"metadata":{},"sourceType":"module"}