{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useEffect, useRef, useState, useImperativeHandle } from 'react';\nimport clsx from 'clsx';\nimport { KeyCode } from '../internal/keycode';\nimport { getBaseProps } from '../internal/base-component';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport Arrow from './arrow';\nimport Portal from '../internal/components/portal';\nimport PopoverContainer from './container';\nimport PopoverBody from './body';\nimport styles from './styles.css.js';\nimport { fireNonCancelableEvent } from '../internal/events/index';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\nexport default React.forwardRef(InternalPopover);\n\nfunction InternalPopover(_a, ref) {\n  var _b = _a.position,\n      position = _b === void 0 ? 'right' : _b,\n      _c = _a.size,\n      size = _c === void 0 ? 'medium' : _c,\n      _d = _a.fixedWidth,\n      fixedWidth = _d === void 0 ? false : _d,\n      _e = _a.triggerType,\n      triggerType = _e === void 0 ? 'text' : _e,\n      _f = _a.dismissButton,\n      dismissButton = _f === void 0 ? true : _f,\n      dismissAriaLabel = _a.dismissAriaLabel,\n      children = _a.children,\n      header = _a.header,\n      content = _a.content,\n      _g = _a.renderWithPortal,\n      renderWithPortal = _g === void 0 ? false : _g,\n      __onOpen = _a.__onOpen,\n      _h = _a.__internalRootRef,\n      __internalRootRef = _h === void 0 ? null : _h,\n      restProps = __rest(_a, [\"position\", \"size\", \"fixedWidth\", \"triggerType\", \"dismissButton\", \"dismissAriaLabel\", \"children\", \"header\", \"content\", \"renderWithPortal\", \"__onOpen\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var clickFrameId = useRef(null);\n\n  var _j = useState(false),\n      visible = _j[0],\n      setVisible = _j[1];\n\n  var onTriggerClick = useCallback(function () {\n    fireNonCancelableEvent(__onOpen);\n    setVisible(true);\n  }, [__onOpen]);\n  var onDismiss = useCallback(function () {\n    setVisible(false);\n  }, []);\n  var onTriggerKeyDown = useCallback(function (event) {\n    if (event.keyCode === KeyCode.tab || event.keyCode === KeyCode.escape) {\n      setVisible(false);\n    }\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      dismissPopover: onDismiss\n    };\n  });\n  useEffect(function () {\n    if (!triggerRef.current) {\n      return;\n    }\n\n    var document = triggerRef.current.ownerDocument;\n\n    var onDocumentClick = function () {\n      // Dismiss popover unless there was a click inside within the last animation frame.\n      if (clickFrameId.current === null) {\n        setVisible(false);\n      }\n    }; // useCapture=false makes sure this listener is called after the one attached to the element.\n    // the options.capture notation is unsupported by IE.\n\n\n    document.addEventListener('mousedown', onDocumentClick, false);\n    return function () {\n      document.removeEventListener('mousedown', onDocumentClick, false);\n    };\n  }, []);\n  var popoverClasses = usePortalModeClasses(triggerRef);\n  var triggerProps = {\n    // https://github.com/microsoft/TypeScript/issues/36659\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: triggerRef,\n    onClick: onTriggerClick,\n    onKeyDown: onTriggerKeyDown,\n    className: clsx(styles.trigger, styles[\"trigger-type-\".concat(triggerType)])\n  };\n  var popoverContent = React.createElement(\"span\", {\n    \"aria-live\": dismissButton ? undefined : 'polite',\n    \"aria-atomic\": dismissButton ? undefined : true,\n    className: popoverClasses\n  }, visible && React.createElement(PopoverContainer, {\n    position: position,\n    trackRef: triggerRef,\n    arrow: function (position) {\n      return React.createElement(Arrow, {\n        position: position\n      });\n    },\n    renderWithPortal: renderWithPortal,\n    zIndex: renderWithPortal ? 7000 : undefined\n  }, React.createElement(PopoverBody, {\n    size: size,\n    fixedWidth: fixedWidth,\n    dismissButton: dismissButton,\n    dismissAriaLabel: dismissAriaLabel,\n    header: header,\n    onDismiss: onDismiss,\n    overflowVisible: \"both\"\n  }, content)));\n  var mergedRef = useMergeRefs(popoverRef, __internalRootRef);\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: mergedRef,\n    onMouseDown: function () {\n      // Indicate there was a click inside popover recently, including nested portals.\n      clickFrameId.current = requestAnimationFrame(function () {\n        clickFrameId.current = null;\n      });\n    }\n  }), triggerType === 'text' ? React.createElement(\"button\", __assign({}, triggerProps, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\"\n  }, focusVisible), React.createElement(\"span\", {\n    className: styles['trigger-inner-text']\n  }, children)) : React.createElement(\"span\", __assign({}, triggerProps), children), renderWithPortal ? React.createElement(Portal, null, popoverContent) : popoverContent);\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useRef","useState","useImperativeHandle","clsx","KeyCode","getBaseProps","useFocusVisible","Arrow","Portal","PopoverContainer","PopoverBody","styles","fireNonCancelableEvent","useMergeRefs","usePortalModeClasses","forwardRef","InternalPopover","_a","ref","_b","_c","size","_d","fixedWidth","_e","triggerType","_f","dismissButton","dismissAriaLabel","children","header","content","_g","renderWithPortal","__onOpen","_h","__internalRootRef","restProps","baseProps","focusVisible","triggerRef","popoverRef","clickFrameId","visible","setVisible","onTriggerClick","onDismiss","onTriggerKeyDown","event","keyCode","tab","escape","dismissPopover","current","document","ownerDocument","onDocumentClick","addEventListener","removeEventListener","popoverClasses","triggerProps","onClick","onKeyDown","className","trigger","popoverContent","undefined","position","trackRef","arrow","zIndex","overflowVisible","mergedRef","root","onMouseDown","requestAnimationFrame","type"],"sourceRoot":"","sources":["../../../src/popover/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState, useImperativeHandle } from 'react';\nimport clsx from 'clsx';\n\nimport { KeyCode } from '../internal/keycode';\nimport { getBaseProps } from '../internal/base-component';\nimport useFocusVisible from '../internal/hooks/focus-visible';\n\nimport Arrow from './arrow';\nimport Portal from '../internal/components/portal';\nimport { PopoverProps } from './interfaces';\nimport PopoverContainer from './container';\nimport PopoverBody from './body';\n\nimport styles from './styles.css.js';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../internal/events/index';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\n\nexport interface InternalPopoverProps extends PopoverProps, InternalBaseComponentProps {\n  __onOpen?: NonCancelableEventHandler<null>;\n}\n\nexport interface InternalPopoverRef {\n  dismissPopover: () => void;\n}\n\nexport default React.forwardRef(InternalPopover);\n\nfunction InternalPopover(\n  {\n    position = 'right',\n    size = 'medium',\n    fixedWidth = false,\n    triggerType = 'text',\n    dismissButton = true,\n    dismissAriaLabel,\n\n    children,\n    header,\n    content,\n\n    renderWithPortal = false,\n\n    __onOpen,\n    __internalRootRef = null,\n    ...restProps\n  }: InternalPopoverProps,\n  ref: React.Ref<InternalPopoverRef>\n) {\n  const baseProps = getBaseProps(restProps);\n  const focusVisible = useFocusVisible();\n  const triggerRef = useRef<HTMLElement | null>(null);\n  const popoverRef = useRef<HTMLSpanElement | null>(null);\n  const clickFrameId = useRef<number | null>(null);\n\n  const [visible, setVisible] = useState(false);\n\n  const onTriggerClick = useCallback(() => {\n    fireNonCancelableEvent(__onOpen);\n    setVisible(true);\n  }, [__onOpen]);\n\n  const onDismiss = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const onTriggerKeyDown = useCallback((event: React.KeyboardEvent) => {\n    if (event.keyCode === KeyCode.tab || event.keyCode === KeyCode.escape) {\n      setVisible(false);\n    }\n  }, []);\n\n  useImperativeHandle(ref, () => ({\n    dismissPopover: onDismiss,\n  }));\n\n  useEffect(() => {\n    if (!triggerRef.current) {\n      return;\n    }\n    const document = triggerRef.current.ownerDocument;\n\n    const onDocumentClick = () => {\n      // Dismiss popover unless there was a click inside within the last animation frame.\n      if (clickFrameId.current === null) {\n        setVisible(false);\n      }\n    };\n\n    // useCapture=false makes sure this listener is called after the one attached to the element.\n    // the options.capture notation is unsupported by IE.\n    document.addEventListener('mousedown', onDocumentClick, false);\n\n    return () => {\n      document.removeEventListener('mousedown', onDocumentClick, false);\n    };\n  }, []);\n\n  const popoverClasses = usePortalModeClasses(triggerRef);\n\n  const triggerProps = {\n    // https://github.com/microsoft/TypeScript/issues/36659\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: triggerRef as any,\n    onClick: onTriggerClick,\n    onKeyDown: onTriggerKeyDown,\n    className: clsx(styles.trigger, styles[`trigger-type-${triggerType}`]),\n  };\n\n  const popoverContent = (\n    <span\n      aria-live={dismissButton ? undefined : 'polite'}\n      aria-atomic={dismissButton ? undefined : true}\n      className={popoverClasses}\n    >\n      {visible && (\n        <PopoverContainer\n          position={position}\n          trackRef={triggerRef}\n          arrow={position => <Arrow position={position} />}\n          renderWithPortal={renderWithPortal}\n          zIndex={renderWithPortal ? 7000 : undefined}\n        >\n          <PopoverBody\n            size={size}\n            fixedWidth={fixedWidth}\n            dismissButton={dismissButton}\n            dismissAriaLabel={dismissAriaLabel}\n            header={header}\n            onDismiss={onDismiss}\n            overflowVisible=\"both\"\n          >\n            {content}\n          </PopoverBody>\n        </PopoverContainer>\n      )}\n    </span>\n  );\n\n  const mergedRef = useMergeRefs(popoverRef, __internalRootRef);\n\n  return (\n    <span\n      {...baseProps}\n      className={clsx(styles.root, baseProps.className)}\n      ref={mergedRef}\n      onMouseDown={() => {\n        // Indicate there was a click inside popover recently, including nested portals.\n        clickFrameId.current = requestAnimationFrame(() => {\n          clickFrameId.current = null;\n        });\n      }}\n    >\n      {triggerType === 'text' ? (\n        <button {...triggerProps} type=\"button\" aria-haspopup=\"dialog\" {...focusVisible}>\n          <span className={styles['trigger-inner-text']}>{children}</span>\n        </button>\n      ) : (\n        <span {...triggerProps}>{children}</span>\n      )}\n      {renderWithPortal ? <Portal>{popoverContent}</Portal> : popoverContent}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}