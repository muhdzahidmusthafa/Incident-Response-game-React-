{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { KeyCode } from '../../../internal/keycode';\nimport { addDays, addWeeks, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport rotateDayIndexes from '../utils/rotate-day-indexes';\nimport { renderDayName } from '../utils/intl';\n\nvar Grid = function (_a) {\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      isDateEnabled = _a.isDateEnabled,\n      focusedDate = _a.focusedDate,\n      onSelectDate = _a.onSelectDate,\n      onFocusDate = _a.onFocusDate,\n      onChangeMonth = _a.onChangeMonth,\n      startOfWeek = _a.startOfWeek,\n      todayAriaLabel = _a.todayAriaLabel,\n      selectedDate = _a.selectedDate,\n      handleFocusMove = _a.handleFocusMove;\n\n  var onGridKeyDownHandler = function (event) {\n    var updatedFocusDate;\n\n    if (focusedDate === null) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case KeyCode.enter:\n        event.preventDefault();\n\n        if (focusedDate) {\n          onFocusDate({\n            date: null\n          });\n          onSelectDate({\n            date: focusedDate\n          });\n        }\n\n        return;\n\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addDays(date, 1);\n        });\n        break;\n\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addDays(date, -1);\n        });\n        break;\n\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addWeeks(date, -1);\n        });\n        break;\n\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addWeeks(date, 1);\n        });\n        break;\n\n      default:\n        return;\n    }\n\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n\n    onFocusDate({\n      date: updatedFocusDate\n    });\n  };\n\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  }, [baseDate, startOfWeek]);\n  return React.createElement(\"div\", null, React.createElement(\"div\", {\n    className: styles['calendar-day-names']\n  }, rotateDayIndexes(startOfWeek).map(function (i) {\n    return React.createElement(\"div\", {\n      key: \"day-name-\".concat(i),\n      className: styles['calendar-day-name']\n    }, renderDayName(locale, i));\n  })), React.createElement(\"div\", {\n    className: styles['calendar-dates'],\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    var isDateInLastWeek = weeks.length - 1 === weekIndex;\n    return React.createElement(\"div\", {\n      key: \"week-\".concat(weekIndex),\n      className: styles['calendar-week']\n    }, week.map(function (date, dateIndex) {\n      return React.createElement(GridDay, {\n        key: \"date-\".concat(weekIndex, \"-\").concat(dateIndex),\n        locale: locale,\n        baseDate: baseDate,\n        selectedDate: selectedDate,\n        date: date,\n        focusedDate: focusedDate,\n        todayAriaLabel: todayAriaLabel,\n        onSelectDate: function (date) {\n          onSelectDate({\n            date: date\n          });\n        },\n        isDateEnabled: isDateEnabled,\n        isDateInLastWeek: isDateInLastWeek\n      });\n    }));\n  })));\n};\n\nexport default Grid;","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,WAA5B,QAA+C,UAA/C;AACA,SAASC,gBAAT,QAAiC,MAAjC;AAKA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,SAASC,aAAT,QAA8B,eAA9B;;AAoBA,IAAMC,IAAI,GAAG,UAACC,EAAD,EAYD;MAXVC,MAAM;MACNC,QAAQ;MACRC,aAAa;MACbC,WAAW;MACXC,YAAY;MACZC,WAAW;MACXC,aAAa;MACbC,WAAW;MACXC,cAAc;MACdC,YAAY;MACZC,eAAe;;EAEf,IAAMC,oBAAoB,GAAG,UAACC,KAAD,EAA2B;IACtD,IAAIC,gBAAJ;;IAEA,IAAIV,WAAW,KAAK,IAApB,EAA0B;MACxB;IACD;;IAED,QAAQS,KAAK,CAACE,OAAd;MACE,KAAKvB,OAAO,CAACwB,KAAb;QACEH,KAAK,CAACI,cAAN;;QACA,IAAIb,WAAJ,EAAiB;UACfE,WAAW,CAAC;YAAEY,IAAI,EAAE;UAAR,CAAD,CAAX;UACAb,YAAY,CAAC;YAAEa,IAAI,EAAEd;UAAR,CAAD,CAAZ;QACD;;QACD;;MACF,KAAKZ,OAAO,CAAC2B,KAAb;QACEN,KAAK,CAACI,cAAN;QACAH,gBAAgB,GAAGH,eAAe,CAACP,WAAD,EAAcD,aAAd,EAA6B,gBAAI;UAAI,cAAO,CAACe,IAAD,EAAO,CAAP,CAAP;QAAgB,CAArD,CAAlC;QACA;;MACF,KAAK1B,OAAO,CAAC4B,IAAb;QACEP,KAAK,CAACI,cAAN;QACAH,gBAAgB,GAAGH,eAAe,CAACP,WAAD,EAAcD,aAAd,EAA6B,gBAAI;UAAI,cAAO,CAACe,IAAD,EAAO,CAAC,CAAR,CAAP;QAAiB,CAAtD,CAAlC;QACA;;MACF,KAAK1B,OAAO,CAAC6B,EAAb;QACER,KAAK,CAACI,cAAN;QACAH,gBAAgB,GAAGH,eAAe,CAACP,WAAD,EAAcD,aAAd,EAA6B,gBAAI;UAAI,eAAQ,CAACe,IAAD,EAAO,CAAC,CAAR,CAAR;QAAkB,CAAvD,CAAlC;QACA;;MACF,KAAK1B,OAAO,CAAC8B,IAAb;QACET,KAAK,CAACI,cAAN;QACAH,gBAAgB,GAAGH,eAAe,CAACP,WAAD,EAAcD,aAAd,EAA6B,gBAAI;UAAI,eAAQ,CAACe,IAAD,EAAO,CAAP,CAAR;QAAiB,CAAtD,CAAlC;QACA;;MACF;QACE;IAzBJ;;IA4BA,IAAI,CAACvB,WAAW,CAACmB,gBAAD,EAAmBZ,QAAnB,CAAhB,EAA8C;MAC5CK,aAAa,CAACO,gBAAD,CAAb;IACD;;IACDR,WAAW,CAAC;MAAEY,IAAI,EAAEJ;IAAR,CAAD,CAAX;EACD,CAvCD;;EAyCA,IAAMS,KAAK,GAAGlC,OAAO,CACnB;IAAM,uBAAgB,CAACa,QAAD,EAAW;MAAEsB,cAAc,EAAEhB;IAAlB,CAAX,CAAhB;EAA2D,CAD9C,EAEnB,CAACN,QAAD,EAAWM,WAAX,CAFmB,CAArB;EAKA,OACEpB,iCACEA;IAAKqC,SAAS,EAAEnC,MAAM,CAAC,oBAAD;EAAtB,GACGO,gBAAgB,CAACW,WAAD,CAAhB,CAA8BkB,GAA9B,CAAkC,aAAC;IAAI,OACtCtC;MAAKuC,GAAG,EAAE,mBAAYC,CAAZ,CAAV;MAA2BH,SAAS,EAAEnC,MAAM,CAAC,mBAAD;IAA5C,GACGQ,aAAa,CAACG,MAAD,EAAS2B,CAAT,CADhB,CADsC;EAIvC,CAJA,CADH,CADF,EAQExC;IAAKqC,SAAS,EAAEnC,MAAM,CAAC,gBAAD,CAAtB;IAA0CuC,SAAS,EAAEjB;EAArD,GACGW,KAAK,CAACG,GAAN,CAAU,UAACI,IAAD,EAAOC,SAAP,EAAgB;IACzB,IAAMC,gBAAgB,GAAGT,KAAK,CAACU,MAAN,GAAe,CAAf,KAAqBF,SAA9C;IAEA,OACE3C;MAAKuC,GAAG,EAAE,eAAQI,SAAR,CAAV;MAA+BN,SAAS,EAAEnC,MAAM,CAAC,eAAD;IAAhD,GACGwC,IAAI,CAACJ,GAAL,CAAS,UAACR,IAAD,EAAOgB,SAAP,EAAgB;MACxB,OACE9C,oBAACG,OAAD,EAAQ;QACNoC,GAAG,EAAE,eAAQI,SAAR,EAAiB,GAAjB,EAAiBI,MAAjB,CAAqBD,SAArB,CADC;QAENjC,MAAM,EAAEA,MAFF;QAGNC,QAAQ,EAAEA,QAHJ;QAINQ,YAAY,EAAEA,YAJR;QAKNQ,IAAI,EAAEA,IALA;QAMNd,WAAW,EAAEA,WANP;QAONK,cAAc,EAAEA,cAPV;QAQNJ,YAAY,EAAE,gBAAI;UAChBA,YAAY,CAAC;YAAEa,IAAI;UAAN,CAAD,CAAZ;QACD,CAVK;QAWNf,aAAa,EAAEA,aAXT;QAYN6B,gBAAgB,EAAEA;MAZZ,CAAR,CADF;IAgBD,CAjBA,CADH,CADF;EAsBD,CAzBA,CADH,CARF,CADF;AAuCD,CAlGD;;AAoGA,eAAejC,IAAf","names":["React","useMemo","styles","GridDay","KeyCode","addDays","addWeeks","isSameMonth","getCalendarMonth","rotateDayIndexes","renderDayName","Grid","_a","locale","baseDate","isDateEnabled","focusedDate","onSelectDate","onFocusDate","onChangeMonth","startOfWeek","todayAriaLabel","selectedDate","handleFocusMove","onGridKeyDownHandler","event","updatedFocusDate","keyCode","enter","preventDefault","date","right","left","up","down","weeks","firstDayOfWeek","className","map","key","i","onKeyDown","week","weekIndex","isDateInLastWeek","length","dateIndex","concat"],"sourceRoot":"","sources":["../../../../../src/date-picker/calendar/grid/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { KeyCode } from '../../../internal/keycode';\nimport { addDays, addWeeks, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport { DateChangeHandler, DayIndex, MonthChangeHandler } from '../index';\nimport { MoveFocusHandler } from '../utils/move-focus-handler';\nimport { CalendarTypes } from '../definitions';\nimport { DatePickerProps } from '../../interfaces';\nimport rotateDayIndexes from '../utils/rotate-day-indexes';\nimport { renderDayName } from '../utils/intl';\n\nexport interface GridProps {\n  locale: string;\n  baseDate: Date;\n  isDateEnabled: DatePickerProps.IsDateEnabledFunction;\n  focusedDate: Date | null;\n  onSelectDate: DateChangeHandler;\n  onFocusDate: DateChangeHandlerNullable;\n  onChangeMonth: MonthChangeHandler;\n  startOfWeek: DayIndex;\n  todayAriaLabel: string;\n  selectedDate: Date | null;\n  handleFocusMove: MoveFocusHandler;\n}\n\nexport interface DateChangeHandlerNullable {\n  (detail: CalendarTypes.DateDetailNullable): void;\n}\n\nconst Grid = ({\n  locale,\n  baseDate,\n  isDateEnabled,\n  focusedDate,\n  onSelectDate,\n  onFocusDate,\n  onChangeMonth,\n  startOfWeek,\n  todayAriaLabel,\n  selectedDate,\n  handleFocusMove,\n}: GridProps) => {\n  const onGridKeyDownHandler = (event: React.KeyboardEvent) => {\n    let updatedFocusDate;\n\n    if (focusedDate === null) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case KeyCode.enter:\n        event.preventDefault();\n        if (focusedDate) {\n          onFocusDate({ date: null });\n          onSelectDate({ date: focusedDate });\n        }\n        return;\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, date => addDays(date, 1));\n        break;\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, date => addDays(date, -1));\n        break;\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, date => addWeeks(date, -1));\n        break;\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, date => addWeeks(date, 1));\n        break;\n      default:\n        return;\n    }\n\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n    onFocusDate({ date: updatedFocusDate });\n  };\n\n  const weeks = useMemo<Date[][]>(\n    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }),\n    [baseDate, startOfWeek]\n  );\n\n  return (\n    <div>\n      <div className={styles['calendar-day-names']}>\n        {rotateDayIndexes(startOfWeek).map(i => (\n          <div key={`day-name-${i}`} className={styles['calendar-day-name']}>\n            {renderDayName(locale, i)}\n          </div>\n        ))}\n      </div>\n      <div className={styles['calendar-dates']} onKeyDown={onGridKeyDownHandler}>\n        {weeks.map((week, weekIndex) => {\n          const isDateInLastWeek = weeks.length - 1 === weekIndex;\n\n          return (\n            <div key={`week-${weekIndex}`} className={styles['calendar-week']}>\n              {week.map((date, dateIndex) => {\n                return (\n                  <GridDay\n                    key={`date-${weekIndex}-${dateIndex}`}\n                    locale={locale}\n                    baseDate={baseDate}\n                    selectedDate={selectedDate}\n                    date={date}\n                    focusedDate={focusedDate}\n                    todayAriaLabel={todayAriaLabel}\n                    onSelectDate={date => {\n                      onSelectDate({ date });\n                    }}\n                    isDateEnabled={isDateEnabled}\n                    isDateInLastWeek={isDateInLastWeek}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}