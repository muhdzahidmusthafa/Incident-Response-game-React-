{"ast":null,"code":"import { isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useEffect, useRef } from 'react';\nimport { createHighlightedOptionHook } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useIds, getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { connectOptionsByValue } from './connect-options';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { fireCancelableEvent } from '../../internal/events/index';\nimport { containsOrEqual } from '../../internal/utils/dom';\nexport function useSelect(_a) {\n  var selectedOptions = _a.selectedOptions,\n      updateSelectedOption = _a.updateSelectedOption,\n      options = _a.options,\n      filteringType = _a.filteringType,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      externalRef = _a.externalRef,\n      keepOpen = _a.keepOpen,\n      fireLoadItems = _a.fireLoadItems,\n      setFilteringValue = _a.setFilteringValue,\n      _b = _a.useInteractiveGroups,\n      useInteractiveGroups = _b === void 0 ? false : _b;\n  var interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n\n  var isHighlightable = function (option) {\n    return !!option && (useInteractiveGroups || option.type !== 'parent');\n  };\n\n  var useHighlightedOption = createHighlightedOptionHook({\n    isHighlightable: isHighlightable\n  });\n  var filterRef = useRef(null);\n  var triggerRef = useRef(null);\n  var menuRef = useRef(null);\n  var hasFilter = filteringType !== 'none';\n  var activeRef = hasFilter ? filterRef : menuRef;\n  var isKeyboard = useRef(false);\n  var isSelectingUsingSpace = useRef(false);\n\n  var __selectedOptions = connectOptionsByValue(options, selectedOptions);\n\n  var __selectedValuesSet = selectedOptions.reduce(function (selectedValuesSet, item) {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n\n    return selectedValuesSet;\n  }, new Set());\n\n  var _c = useHighlightedOption(options),\n      highlightedOption = _c.highlightedOption,\n      highlightedIndex = _c.highlightedIndex,\n      moveHighlight = _c.moveHighlight,\n      resetHighlight = _c.resetHighlight,\n      setHighlightedIndex = _c.setHighlightedIndex,\n      highlightOption = _c.highlightOption,\n      goHome = _c.goHome,\n      goEnd = _c.goEnd;\n\n  var _d = useOpenState({\n    onOpen: function () {\n      return fireLoadItems('');\n    },\n    onClose: function () {\n      resetHighlight();\n      setFilteringValue('');\n    }\n  }),\n      isOpen = _d.isOpen,\n      openDropdown = _d.openDropdown,\n      closeDropdown = _d.closeDropdown,\n      toggleDropdown = _d.toggleDropdown;\n\n  var focused = useRef(false);\n\n  var handleFocus = function () {\n    if (!focused.current) {\n      fireCancelableEvent(onFocus, {});\n      focused.current = true;\n    }\n  };\n\n  var handleBlur = function (_a) {\n    var detail = _a.detail;\n    var relatedTarget = detail.relatedTarget;\n    var nextFocusedIsTrigger = relatedTarget ? containsOrEqual(triggerRef.current, relatedTarget) : false;\n    var nextFocusedInsideDropdown = relatedTarget ? containsOrEqual(menuRef.current, relatedTarget) || containsOrEqual(filterRef.current, relatedTarget) : false;\n    var nextFocusedInsideComponent = nextFocusedIsTrigger || nextFocusedInsideDropdown;\n    var focusingOut = focused.current && !nextFocusedInsideComponent;\n\n    if (nextFocusedIsTrigger || focusingOut) {\n      closeDropdown();\n    }\n\n    if (focusingOut) {\n      fireCancelableEvent(onBlur, {});\n      focused.current = false;\n    }\n  };\n\n  var hasSelectedOption = __selectedOptions.length > 0;\n\n  var _e = useIds({\n    hasSelectedOption: hasSelectedOption\n  }),\n      selectedOptionId = _e.selectedOptionId,\n      menuId = _e.menuId;\n\n  var highlightedOptionId = getOptionId(menuId, highlightedIndex);\n\n  var selectOption = function (option) {\n    var _a;\n\n    isSelectingUsingSpace.current = false;\n    var optionToSelect = option || highlightedOption;\n\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n\n    updateSelectedOption(optionToSelect.option);\n\n    if (!keepOpen) {\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    }\n  };\n\n  var activeKeyDownHandler = useMenuKeyboard({\n    moveHighlight: moveHighlight,\n    selectOption: selectOption,\n    goHome: goHome,\n    goEnd: goEnd,\n    closeDropdown: function () {\n      var _a;\n\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    },\n    isKeyboard: isKeyboard,\n    isSelectingUsingSpace: isSelectingUsingSpace,\n    preventNativeSpace: !hasFilter\n  });\n  var triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown: openDropdown,\n    goHome: goHome,\n    isKeyboard: isKeyboard\n  });\n\n  var getTriggerProps = function (disabled) {\n    if (disabled === void 0) {\n      disabled = false;\n    }\n\n    var triggerProps = {\n      ref: triggerRef,\n      onFocus: handleFocus,\n      onBlur: handleBlur\n    };\n\n    if (!disabled) {\n      triggerProps.onMouseDown = function (event) {\n        var _a;\n\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n\n        if (isOpen) {\n          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n\n        toggleDropdown();\n      };\n\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n\n    if (hasSelectedOption) {\n      triggerProps.ariaLabelledby = selectedOptionId;\n    }\n\n    return triggerProps;\n  };\n\n  var getFilterProps = function () {\n    var _a;\n\n    if (!hasFilter) {\n      return {};\n    }\n\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      __onBlurWithDetail: handleBlur,\n      onFocus: handleFocus,\n      onChange: function (event) {\n        setFilteringValue(event.detail.value);\n        resetHighlight();\n      },\n      __onDelayedInput: function (event) {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: (_a = {\n        'aria-activedescendant': highlightedOptionId\n      }, _a['aria-owns'] = menuId, _a['aria-controls'] = menuId, _a)\n    };\n  };\n\n  var getMenuProps = function () {\n    var menuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onMouseUp: function (itemIndex) {\n        isKeyboard.current = false;\n\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: function (itemIndex) {\n        isKeyboard.current = false;\n\n        if (itemIndex > -1) {\n          setHighlightedIndex(itemIndex);\n        }\n      }\n    };\n\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.onBlur = handleBlur;\n      menuProps.onFocus = handleFocus;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId\n      };\n    }\n\n    return menuProps;\n  };\n\n  var getGroupState = function (option) {\n    var totalSelected = option.options.filter(function (item) {\n      return !!item.value && __selectedValuesSet.has(item.value);\n    }).length;\n    var hasSelected = totalSelected > 0;\n    var allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected\n    };\n  };\n\n  var getOptionProps = function (option, index) {\n    var _a;\n\n    var _b;\n\n    var highlighted = option === highlightedOption;\n    var groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    var selected = __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);\n    var nextOption = (_b = options[index + 1]) === null || _b === void 0 ? void 0 : _b.option;\n    var isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;\n    var optionProps = (_a = {\n      key: index,\n      option: option,\n      highlighted: highlighted,\n      selected: selected,\n      isNextSelected: isNextSelected,\n      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate)\n    }, _a['data-mouse-target'] = isHighlightable(option) ? index : -1, _a.id = getOptionId(menuId, index), _a);\n    return optionProps;\n  };\n\n  var prevOpen = usePrevious(isOpen);\n  useEffect(function () {\n    // highlight the first selected option, when opening the Select component\n    if (isOpen && !prevOpen && hasSelectedOption) {\n      setHighlightedIndex(options.indexOf(__selectedOptions[0]));\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndex, options, prevOpen]);\n  useEffect(function () {\n    var _a;\n\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  }, [isOpen, activeRef]);\n  useForwardFocus(externalRef, triggerRef);\n  var highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  var announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n  return {\n    isOpen: isOpen,\n    highlightedOption: highlightedOption,\n    highlightedIndex: highlightedIndex,\n    getTriggerProps: getTriggerProps,\n    getMenuProps: getMenuProps,\n    getFilterProps: getFilterProps,\n    getOptionProps: getOptionProps,\n    isKeyboard: isKeyboard,\n    highlightOption: highlightOption,\n    selectOption: selectOption,\n    announceSelected: announceSelected\n  };\n}","map":{"version":3,"mappings":"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","names":["isInteractive","isGroupInteractive","isGroup","useEffect","useRef","createHighlightedOptionHook","useOpenState","useMenuKeyboard","useTriggerKeyboard","useIds","getOptionId","connectOptionsByValue","useForwardFocus","usePrevious","fireCancelableEvent","containsOrEqual","useSelect","_a","selectedOptions","updateSelectedOption","options","filteringType","onBlur","onFocus","externalRef","keepOpen","fireLoadItems","setFilteringValue","_b","useInteractiveGroups","interactivityCheck","isHighlightable","option","type","useHighlightedOption","filterRef","triggerRef","menuRef","hasFilter","activeRef","isKeyboard","isSelectingUsingSpace","__selectedOptions","__selectedValuesSet","reduce","selectedValuesSet","item","value","add","Set","highlightedOption","highlightedIndex","moveHighlight","resetHighlight","setHighlightedIndex","highlightOption","goHome","goEnd","onOpen","onClose","isOpen","openDropdown","closeDropdown","toggleDropdown","focused","handleFocus","current","handleBlur","detail","nextFocusedIsTrigger","relatedTarget","nextFocusedInsideDropdown","nextFocusedInsideComponent","focusingOut","hasSelectedOption","length","selectedOptionId","menuId","highlightedOptionId","selectOption","optionToSelect","focus","activeKeyDownHandler","preventNativeSpace","triggerKeyDownHandler","getTriggerProps","disabled","triggerProps","ref","onMouseDown","event","preventDefault","onKeyDown","ariaLabelledby","getFilterProps","__onBlurWithDetail","onChange","__onDelayedInput","__nativeAttributes","getMenuProps","menuProps","id","open","onMouseUp","itemIndex","onMouseMove","nativeAttributes","getGroupState","totalSelected","filter","has","hasSelected","allSelected","selected","indeterminate","getOptionProps","index","highlighted","groupState","undefined","indexOf","nextOption","isNextSelected","optionProps","key","prevOpen","preventScroll","highlightedGroupSelected","announceSelected"],"sourceRoot":"","sources":["../../../../src/select/utils/use-select.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject } from 'react';\nimport { DropdownOption, OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { isInteractive, isGroupInteractive, isGroup } from '../../internal/components/option/utils/filter-options';\nimport { useEffect, useRef, MutableRefObject } from 'react';\nimport { createHighlightedOptionHook } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useIds, getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { connectOptionsByValue } from './connect-options';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { OptionsListProps } from '../../internal/components/options-list';\nimport { FilterProps } from '../parts/filter';\nimport { ItemProps } from '../parts/item';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { BaseKeyDetail } from '../../internal/events';\nimport { CancelableEventHandler, fireCancelableEvent, NonCancelableEventHandler } from '../../internal/events/index';\nimport { containsOrEqual } from '../../internal/utils/dom';\n\nexport type MenuProps = Omit<OptionsListProps, 'children'> & { ref: React.RefObject<HTMLUListElement> };\nexport type GetOptionProps = (option: DropdownOption, index: number) => ItemProps;\n\ninterface UseSelectProps {\n  selectedOptions: ReadonlyArray<OptionDefinition>;\n  updateSelectedOption: (option: OptionDefinition) => void;\n  options: ReadonlyArray<DropdownOption>;\n  filteringType: string;\n  keepOpen?: boolean;\n  onBlur?: CancelableEventHandler;\n  onFocus?: CancelableEventHandler;\n  externalRef: React.Ref<any>;\n  fireLoadItems: (filteringText: string) => void;\n  setFilteringValue: (filteringText: string) => void;\n  useInteractiveGroups?: boolean;\n}\n\nexport interface SelectTriggerProps {\n  ref: RefObject<HTMLButtonElement>;\n  onMouseDown?: (event: CustomEvent) => void;\n  onKeyDown?: (event: CustomEvent<BaseKeyDetail>) => void;\n  ariaLabelledby?: string;\n  onFocus: NonCancelableEventHandler;\n  onBlur: NonCancelableEventHandler<{ relatedTarget: Node | null }>;\n}\n\nexport function useSelect({\n  selectedOptions,\n  updateSelectedOption,\n  options,\n  filteringType,\n  onBlur,\n  onFocus,\n  externalRef,\n  keepOpen,\n  fireLoadItems,\n  setFilteringValue,\n  useInteractiveGroups = false,\n}: UseSelectProps) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n\n  const isHighlightable = (option?: DropdownOption) => !!option && (useInteractiveGroups || option.type !== 'parent');\n  const useHighlightedOption = createHighlightedOptionHook({ isHighlightable: isHighlightable });\n\n  const filterRef = useRef<HTMLInputElement>(null);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLUListElement>(null);\n  const hasFilter = filteringType !== 'none';\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const isKeyboard = useRef<boolean>(false);\n  const isSelectingUsingSpace = useRef<boolean>(false);\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet: Set<string>, item: OptionDefinition) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set<string>());\n  const {\n    highlightedOption,\n    highlightedIndex,\n    moveHighlight,\n    resetHighlight,\n    setHighlightedIndex,\n    highlightOption,\n    goHome,\n    goEnd,\n  } = useHighlightedOption(options);\n\n  const { isOpen, openDropdown, closeDropdown, toggleDropdown } = useOpenState({\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlight();\n      setFilteringValue('');\n    },\n  });\n\n  const focused: MutableRefObject<boolean> = useRef<boolean>(false);\n  const handleFocus = () => {\n    if (!focused.current) {\n      fireCancelableEvent(onFocus, {});\n      focused.current = true;\n    }\n  };\n  const handleBlur = ({ detail }: { detail: { relatedTarget: Node | null } }) => {\n    const { relatedTarget } = detail;\n    const nextFocusedIsTrigger = relatedTarget ? containsOrEqual(triggerRef.current, relatedTarget) : false;\n    const nextFocusedInsideDropdown = relatedTarget\n      ? containsOrEqual(menuRef.current, relatedTarget) || containsOrEqual(filterRef.current, relatedTarget)\n      : false;\n    const nextFocusedInsideComponent = nextFocusedIsTrigger || nextFocusedInsideDropdown;\n    const focusingOut = focused.current && !nextFocusedInsideComponent;\n\n    if (nextFocusedIsTrigger || focusingOut) {\n      closeDropdown();\n    }\n    if (focusingOut) {\n      fireCancelableEvent(onBlur, {});\n      focused.current = false;\n    }\n  };\n\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const { selectedOptionId, menuId } = useIds({ hasSelectedOption });\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n\n  const selectOption = (option?: DropdownOption) => {\n    isSelectingUsingSpace.current = false;\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    updateSelectedOption(optionToSelect.option);\n    if (!keepOpen) {\n      triggerRef.current?.focus();\n      closeDropdown();\n    }\n  };\n\n  const activeKeyDownHandler = useMenuKeyboard({\n    moveHighlight,\n    selectOption,\n    goHome,\n    goEnd,\n    closeDropdown: () => {\n      triggerRef.current?.focus();\n      closeDropdown();\n    },\n    isKeyboard,\n    isSelectingUsingSpace,\n    preventNativeSpace: !hasFilter,\n  });\n\n  const triggerKeyDownHandler = useTriggerKeyboard({ openDropdown, goHome, isKeyboard });\n\n  const getTriggerProps = (disabled = false) => {\n    const triggerProps: SelectTriggerProps = {\n      ref: triggerRef,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = (event: CustomEvent) => {\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          triggerRef.current?.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    if (hasSelectedOption) {\n      triggerProps.ariaLabelledby = selectedOptionId;\n    }\n    return triggerProps;\n  };\n\n  const getFilterProps = (): Partial<FilterProps> => {\n    if (!hasFilter) {\n      return {};\n    }\n\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      __onBlurWithDetail: handleBlur,\n      onFocus: handleFocus,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlight();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId,\n      },\n    };\n  };\n\n  const getMenuProps = () => {\n    const menuProps: MenuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onMouseUp: itemIndex => {\n        isKeyboard.current = false;\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        isKeyboard.current = false;\n        if (itemIndex > -1) {\n          setHighlightedIndex(itemIndex);\n        }\n      },\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.onBlur = handleBlur;\n      menuProps.onFocus = handleFocus;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId,\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = (option: OptionGroup) => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected,\n      indeterminate: hasSelected && !allSelected,\n    };\n  };\n\n  const getOptionProps = (option: DropdownOption, index: number) => {\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = __selectedOptions.indexOf(option) > -1 || !!groupState?.selected;\n    const nextOption = options[index + 1]?.option;\n    const isNextSelected =\n      !!nextOption && isGroup(nextOption)\n        ? getGroupState(nextOption).selected\n        : __selectedOptions.indexOf(options[index + 1]) > -1;\n\n    const optionProps: any = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!groupState?.indeterminate,\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index),\n    };\n\n    return optionProps;\n  };\n\n  const prevOpen = usePrevious<boolean>(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component\n    if (isOpen && !prevOpen && hasSelectedOption) {\n      setHighlightedIndex(options.indexOf(__selectedOptions[0]));\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndex, options, prevOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      activeRef.current?.focus({ preventScroll: true });\n    }\n  }, [isOpen, activeRef]);\n\n  useForwardFocus(externalRef, triggerRef as React.RefObject<HTMLElement>);\n  const highlightedGroupSelected =\n    !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected =\n    !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    getTriggerProps,\n    getMenuProps,\n    getFilterProps,\n    getOptionProps,\n    isKeyboard,\n    highlightOption,\n    selectOption,\n    announceSelected,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}