{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport ResizeHandler from './icons/resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport { useMouseEvents } from './utils/use-mouse-events';\nimport { useKeyboardEvents } from './utils/use-keyboard-events';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { getLimitedValue } from './utils/size-utils';\nimport { Transition } from '../internal/components/transition';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nvar MIN_HEIGHT = 160;\nvar MIN_WIDTH = 280;\n\nvar TransitionContentSide = function (_a) {\n  var _b, _c;\n\n  var baseProps = _a.baseProps,\n      isOpen = _a.isOpen,\n      splitPanelRef = _a.splitPanelRef,\n      topOffset = _a.topOffset,\n      bottomOffset = _a.bottomOffset,\n      cappedSize = _a.cappedSize,\n      isRefresh = _a.isRefresh,\n      onToggle = _a.onToggle,\n      i18nStrings = _a.i18nStrings,\n      relativeSize = _a.relativeSize,\n      onKeyDown = _a.onKeyDown,\n      onSliderMouseDown = _a.onSliderMouseDown,\n      focusVisible = _a.focusVisible,\n      toggleRef = _a.toggleRef,\n      paneHeader = _a.paneHeader,\n      wrappedChildren = _a.wrappedChildren;\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.drawer, styles.root, styles['position-side'], (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b)),\n    ref: splitPanelRef\n  }), React.createElement(\"aside\", {\n    style: {\n      top: topOffset,\n      bottom: bottomOffset,\n      width: isOpen ? cappedSize : undefined,\n      maxWidth: isRefresh ? '100%' : undefined\n    },\n    className: clsx(styles['drawer-content-side'], (_c = {}, _c[styles.refresh] = isRefresh, _c)),\n    onClick: function () {\n      return !isOpen && onToggle();\n    }\n  }, isOpen ? React.createElement(\"div\", {\n    className: styles['slider-wrapper-side']\n  }, React.createElement(\"div\", __assign({\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": i18nStrings.resizeHandleAriaLabel,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(styles.slider, styles['slider-side']),\n    onKeyDown: onKeyDown,\n    onMouseDown: onSliderMouseDown\n  }, focusVisible), React.createElement(ResizeHandler, {\n    className: clsx(styles['slider-icon'], styles['slider-icon-side'])\n  }))) : React.createElement(InternalButton, {\n    className: clsx(styles['open-button'], styles['open-button-side']),\n    iconName: \"angle-left\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18nStrings.openButtonAriaLabel,\n    ref: isRefresh ? null : toggleRef\n  }), React.createElement(\"div\", {\n    className: styles['content-side'],\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-side'])\n  }, paneHeader), React.createElement(\"hr\", {\n    className: styles['header-divider']\n  }), React.createElement(\"div\", {\n    className: clsx(styles['pane-content-wrapper-side'])\n  }, wrappedChildren))));\n};\n\nvar TransitionContentBottom = function (_a) {\n  var _b, _c;\n\n  var baseProps = _a.baseProps,\n      isOpen = _a.isOpen,\n      splitPanelRef = _a.splitPanelRef,\n      bottomOffset = _a.bottomOffset,\n      cappedSize = _a.cappedSize,\n      isRefresh = _a.isRefresh,\n      onToggle = _a.onToggle,\n      i18nStrings = _a.i18nStrings,\n      relativeSize = _a.relativeSize,\n      onKeyDown = _a.onKeyDown,\n      onSliderMouseDown = _a.onSliderMouseDown,\n      focusVisible = _a.focusVisible,\n      paneHeader = _a.paneHeader,\n      wrappedChildren = _a.wrappedChildren,\n      isMobile = _a.isMobile,\n      disableContentPaddings = _a.disableContentPaddings,\n      state = _a.state,\n      leftOffset = _a.leftOffset,\n      rightOffset = _a.rightOffset,\n      transitioningElementRef = _a.transitioningElementRef,\n      centeredMaxWidthClasses = _a.centeredMaxWidthClasses,\n      splitPanelHeaderRef = _a.splitPanelHeaderRef,\n      appLayoutMaxWidth = _a.appLayoutMaxWidth;\n  var transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, styles.drawer, styles['position-bottom'], (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b[styles['drawer-mobile']] = isMobile, _b[styles['drawer-disable-content-paddings']] = disableContentPaddings, _b[styles.animating] = isRefresh && (state === 'entering' || state === 'exiting'), _b[styles.refresh] = isRefresh, _b)),\n    onClick: function () {\n      return !isOpen && onToggle();\n    },\n    style: {\n      bottom: bottomOffset,\n      left: leftOffset,\n      right: rightOffset,\n      height: isOpen ? cappedSize : undefined\n    },\n    ref: transitionContentBottomRef\n  }), isOpen && React.createElement(\"div\", {\n    className: styles['slider-wrapper-bottom']\n  }, React.createElement(\"div\", __assign({\n    role: \"slider\",\n    tabIndex: 0,\n    \"aria-label\": i18nStrings.resizeHandleAriaLabel,\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": relativeSize,\n    className: clsx(styles.slider, styles['slider-bottom']),\n    onKeyDown: onKeyDown,\n    onMouseDown: onSliderMouseDown\n  }, focusVisible), React.createElement(ResizeHandler, {\n    className: clsx(styles['slider-icon'], styles['slider-icon-bottom'])\n  }))), React.createElement(\"div\", {\n    className: styles['drawer-content-bottom']\n  }, React.createElement(\"div\", {\n    className: clsx(styles['pane-header-wrapper-bottom'], centeredMaxWidthClasses),\n    ref: splitPanelHeaderRef\n  }, paneHeader), React.createElement(\"div\", {\n    className: clsx(styles['content-bottom'], centeredMaxWidthClasses),\n    \"aria-hidden\": !isOpen\n  }, React.createElement(\"div\", {\n    className: clsx((_c = {}, _c[styles['content-bottom-max-width']] = isRefresh, _c)),\n    style: appLayoutMaxWidth\n  }, wrappedChildren))));\n};\n\nexport default function SplitPanel(_a) {\n  var _b;\n\n  var header = _a.header,\n      children = _a.children,\n      _c = _a.hidePreferencesButton,\n      hidePreferencesButton = _c === void 0 ? false : _c,\n      i18nStrings = _a.i18nStrings,\n      restProps = __rest(_a, [\"header\", \"children\", \"hidePreferencesButton\", \"i18nStrings\"]);\n\n  var __internalRootRef = useBaseComponent('SplitPanel').__internalRootRef;\n\n  var _d = useSplitPanelContext(),\n      size = _d.size,\n      getMaxWidth = _d.getMaxWidth,\n      getMaxHeight = _d.getMaxHeight,\n      position = _d.position,\n      topOffset = _d.topOffset,\n      bottomOffset = _d.bottomOffset,\n      leftOffset = _d.leftOffset,\n      rightOffset = _d.rightOffset,\n      disableContentPaddings = _d.disableContentPaddings,\n      contentWidthStyles = _d.contentWidthStyles,\n      contentWrapperPaddings = _d.contentWrapperPaddings,\n      isCopy = _d.isCopy,\n      isOpen = _d.isOpen,\n      isMobile = _d.isMobile,\n      isRefresh = _d.isRefresh,\n      isForcedPosition = _d.isForcedPosition,\n      splitPanelRef = _d.splitPanelRef,\n      splitPanelHeaderRef = _d.splitPanelHeaderRef,\n      lastInteraction = _d.lastInteraction,\n      onPreferencesChange = _d.onPreferencesChange,\n      onResize = _d.onResize,\n      onToggle = _d.onToggle,\n      reportSize = _d.reportSize,\n      setOpenButtonAriaLabel = _d.setOpenButtonAriaLabel;\n\n  var baseProps = getBaseProps(restProps);\n  var focusVisible = useFocusVisible();\n\n  var _e = useState(false),\n      isPreferencesOpen = _e[0],\n      setPreferencesOpen = _e[1];\n\n  var _f = useState(0),\n      relativeSize = _f[0],\n      setRelativeSize = _f[1];\n\n  var _g = useState(size),\n      maxSize = _g[0],\n      setMaxSize = _g[1];\n\n  var minSize = position === 'bottom' ? MIN_HEIGHT : MIN_WIDTH;\n  var cappedSize = getLimitedValue(minSize, size, maxSize);\n  var appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n  useEffect(function () {\n    setOpenButtonAriaLabel === null || setOpenButtonAriaLabel === void 0 ? void 0 : setOpenButtonAriaLabel(i18nStrings.openButtonAriaLabel);\n  }, [setOpenButtonAriaLabel, i18nStrings.openButtonAriaLabel]);\n  useEffect(function () {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    var handle = requestAnimationFrame(function () {\n      var maxSize = position === 'bottom' ? getMaxHeight() : getMaxWidth();\n      setRelativeSize(size / maxSize * 100);\n      setMaxSize(maxSize);\n    });\n    return function () {\n      return cancelAnimationFrame(handle);\n    };\n  }, [size, position, getMaxHeight, getMaxWidth]);\n  useEffect(function () {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n  useEffect(function () {\n    var handler = function () {\n      return setMaxSize(position === 'bottom' ? getMaxHeight() : getMaxWidth());\n    };\n\n    window.addEventListener('resize', handler);\n    return function () {\n      return window.removeEventListener('resize', handler);\n    };\n  }, [position, getMaxWidth, getMaxHeight]);\n\n  var setSidePanelWidth = function (width) {\n    var maxWidth = getMaxWidth();\n    var size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n\n    if (isOpen && maxWidth >= MIN_WIDTH) {\n      onResize({\n        size: size\n      });\n    }\n  };\n\n  var setBottomPanelHeight = function (height) {\n    var maxHeight = getMaxHeight();\n    var size = getLimitedValue(MIN_HEIGHT, height, maxHeight);\n\n    if (isOpen && maxHeight >= MIN_HEIGHT) {\n      onResize({\n        size: size\n      });\n    }\n  };\n\n  var splitPanelRefObject = useRef(null);\n  var sizeControlProps = {\n    position: position,\n    splitPanelRef: splitPanelRefObject,\n    setSidePanelWidth: setSidePanelWidth,\n    setBottomPanelHeight: setBottomPanelHeight\n  };\n  var onSliderMouseDown = useMouseEvents(sizeControlProps);\n  var onKeyDown = useKeyboardEvents(sizeControlProps);\n  var toggleRef = useRef(null);\n  var closeRef = useRef(null);\n  var preferencesRef = useRef(null);\n  useEffectOnUpdate(function () {\n    var _a, _b, _c;\n\n    switch (lastInteraction === null || lastInteraction === void 0 ? void 0 : lastInteraction.type) {\n      case 'open':\n        return (_a = closeRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n\n      case 'close':\n        return (_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n\n      case 'position':\n        return (_c = preferencesRef.current) === null || _c === void 0 ? void 0 : _c.focus();\n\n      default:\n        return;\n    }\n  }, [lastInteraction]);\n  var wrappedChildren = React.createElement(AppLayoutContext.Provider, {\n    value: {\n      stickyOffsetTop: topOffset,\n      stickyOffsetBottom: bottomOffset\n    }\n  }, children);\n  var paneHeader = React.createElement(\"div\", {\n    className: styles.header,\n    style: appLayoutMaxWidth\n  }, React.createElement(\"h2\", {\n    className: styles['header-text']\n  }, header), React.createElement(\"div\", {\n    className: styles['header-actions']\n  }, !hidePreferencesButton && isOpen && React.createElement(React.Fragment, null, React.createElement(InternalButton, {\n    className: styles['preferences-button'],\n    iconName: \"settings\",\n    variant: \"icon\",\n    onClick: function () {\n      return setPreferencesOpen(true);\n    },\n    formAction: \"none\",\n    ariaLabel: i18nStrings.preferencesTitle,\n    ref: preferencesRef\n  }), React.createElement(\"span\", {\n    className: styles.divider\n  })), isOpen ? React.createElement(InternalButton, {\n    className: styles['close-button'],\n    iconName: isRefresh && position === 'side' ? 'angle-right' : isRefresh ? 'angle-down' : 'close',\n    variant: \"icon\",\n    onClick: onToggle,\n    formAction: \"none\",\n    ariaLabel: i18nStrings.closeButtonAriaLabel,\n    ref: closeRef\n  }) : position === 'side' ? null : React.createElement(InternalButton, {\n    className: styles['open-button'],\n    iconName: \"angle-up\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: i18nStrings.openButtonAriaLabel,\n    ref: toggleRef\n  })));\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n       This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n\n  useLayoutEffect(function () {\n    var root = __internalRootRef.current;\n\n    if (root) {\n      var property = 'transform';\n      var temporaryValue = 'translateZ(0)';\n      var valueBefore = root.style[property];\n      root.style[property] = temporaryValue; // This line forces the browser to recalculate the layout\n\n      void root.offsetHeight;\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n  var mergedRef = useMergeRefs(splitPanelRef, splitPanelRefObject, __internalRootRef);\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n\n  if (isRefresh && (!isOpen || isCopy) && position === 'side') {\n    return React.createElement(React.Fragment, null);\n  }\n\n  var centeredMaxWidthClasses = clsx((_b = {}, _b[styles['pane-bottom-center-align']] = isRefresh, _b[styles['pane-bottom-content-nav-padding']] = contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedNav, _b[styles['pane-bottom-content-tools-padding']] = contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedTools, _b));\n  return React.createElement(Transition, {\n    \"in\": isOpen !== null && isOpen !== void 0 ? isOpen : false\n  }, function (state, transitioningElementRef) {\n    return React.createElement(React.Fragment, null, position === 'side' && React.createElement(TransitionContentSide, {\n      baseProps: baseProps,\n      isOpen: isOpen,\n      splitPanelRef: mergedRef,\n      topOffset: topOffset,\n      bottomOffset: bottomOffset,\n      cappedSize: cappedSize,\n      isRefresh: isRefresh,\n      onToggle: onToggle,\n      i18nStrings: i18nStrings,\n      relativeSize: relativeSize,\n      onKeyDown: onKeyDown,\n      onSliderMouseDown: onSliderMouseDown,\n      focusVisible: focusVisible,\n      toggleRef: toggleRef,\n      paneHeader: paneHeader,\n      wrappedChildren: wrappedChildren\n    }), position === 'bottom' && React.createElement(TransitionContentBottom, {\n      baseProps: baseProps,\n      isOpen: isOpen,\n      splitPanelRef: mergedRef,\n      bottomOffset: bottomOffset,\n      cappedSize: cappedSize,\n      isRefresh: isRefresh,\n      onToggle: onToggle,\n      i18nStrings: i18nStrings,\n      relativeSize: relativeSize,\n      onKeyDown: onKeyDown,\n      onSliderMouseDown: onSliderMouseDown,\n      focusVisible: focusVisible,\n      paneHeader: paneHeader,\n      wrappedChildren: wrappedChildren,\n      isMobile: isMobile,\n      disableContentPaddings: disableContentPaddings,\n      state: state,\n      leftOffset: leftOffset,\n      rightOffset: rightOffset,\n      transitioningElementRef: transitioningElementRef,\n      centeredMaxWidthClasses: centeredMaxWidthClasses,\n      splitPanelHeaderRef: splitPanelHeaderRef,\n      appLayoutMaxWidth: appLayoutMaxWidth\n    }), isPreferencesOpen && React.createElement(PreferencesModal, {\n      visible: true,\n      preferences: {\n        position: position\n      },\n      disabledSidePosition: position === 'bottom' && isForcedPosition,\n      isRefresh: isRefresh,\n      i18nStrings: {\n        header: i18nStrings.preferencesTitle,\n        confirm: i18nStrings.preferencesConfirm,\n        cancel: i18nStrings.preferencesCancel,\n        positionLabel: i18nStrings.preferencesPositionLabel,\n        positionDescription: i18nStrings.preferencesPositionDescription,\n        positionBottom: i18nStrings.preferencesPositionBottom,\n        positionSide: i18nStrings.preferencesPositionSide\n      },\n      onConfirm: function (preferences) {\n        onPreferencesChange(__assign({}, preferences));\n        setPreferencesOpen(false);\n      },\n      onDismiss: function () {\n        setPreferencesOpen(false);\n      }\n    }));\n  });\n}\napplyDisplayName(SplitPanel, 'SplitPanel');","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","useLayoutEffect","useRef","clsx","InternalButton","getBaseProps","useSplitPanelContext","useFocusVisible","applyDisplayName","ResizeHandler","PreferencesModal","useMouseEvents","useKeyboardEvents","styles","useBaseComponent","useMergeRefs","AppLayoutContext","getLimitedValue","Transition","useEffectOnUpdate","MIN_HEIGHT","MIN_WIDTH","TransitionContentSide","_a","baseProps","isOpen","splitPanelRef","topOffset","bottomOffset","cappedSize","isRefresh","onToggle","i18nStrings","relativeSize","onKeyDown","onSliderMouseDown","focusVisible","toggleRef","paneHeader","wrappedChildren","className","drawer","root","_b","ref","style","top","bottom","width","undefined","maxWidth","_c","refresh","onClick","role","tabIndex","resizeHandleAriaLabel","slider","onMouseDown","iconName","variant","formAction","ariaLabel","openButtonAriaLabel","TransitionContentBottom","isMobile","disableContentPaddings","state","leftOffset","rightOffset","transitioningElementRef","centeredMaxWidthClasses","splitPanelHeaderRef","appLayoutMaxWidth","transitionContentBottomRef","animating","left","right","height","SplitPanel","children","hidePreferencesButton","restProps","__internalRootRef","size","getMaxWidth","getMaxHeight","position","contentWidthStyles","contentWrapperPaddings","isCopy","isForcedPosition","lastInteraction","onPreferencesChange","onResize","reportSize","setOpenButtonAriaLabel","isPreferencesOpen","setPreferencesOpen","setRelativeSize","maxSize","setMaxSize","minSize","handle","requestAnimationFrame","handler","window","addEventListener","removeEventListener","setSidePanelWidth","setBottomPanelHeight","maxHeight","splitPanelRefObject","sizeControlProps","closeRef","preferencesRef","type","current","focus","Provider","value","stickyOffsetTop","stickyOffsetBottom","header","preferencesTitle","divider","closeButtonAriaLabel","property","temporaryValue","valueBefore","offsetHeight","mergedRef","closedNav","closedTools","visible","preferences","disabledSidePosition","confirm","preferencesConfirm","cancel","preferencesCancel","positionLabel","preferencesPositionLabel","positionDescription","preferencesPositionDescription","positionBottom","preferencesPositionBottom","positionSide","preferencesPositionSide","onConfirm","onDismiss"],"sourceRoot":"","sources":["../../../src/split-panel/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps, BaseComponentProps } from '../internal/base-component';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\n\nimport { SplitPanelProps, SizeControlProps } from './interfaces';\nimport ResizeHandler from './icons/resize-handler';\nimport PreferencesModal from './preferences-modal';\nimport { useMouseEvents } from './utils/use-mouse-events';\nimport { useKeyboardEvents } from './utils/use-keyboard-events';\n\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { getLimitedValue } from './utils/size-utils';\nimport { Transition, TransitionStatus } from '../internal/components/transition';\nimport { ButtonProps } from '../button/interfaces';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\n\nexport { SplitPanelProps };\n\nconst MIN_HEIGHT = 160;\nconst MIN_WIDTH = 280;\ninterface TransitionContentProps {\n  baseProps: BaseComponentProps;\n  isOpen?: boolean;\n  splitPanelRef?: React.Ref<any>;\n  bottomOffset: number;\n  cappedSize: number;\n  isRefresh: boolean;\n  onToggle: () => void;\n  i18nStrings: SplitPanelProps.I18nStrings;\n  relativeSize: number;\n  onKeyDown: (event: React.KeyboardEvent<Element>) => void;\n  onSliderMouseDown: () => void;\n  focusVisible: { 'data-awsui-focus-visible': true } | { 'data-awsui-focus-visible'?: undefined };\n  paneHeader: JSX.Element;\n  wrappedChildren: JSX.Element;\n}\n\ninterface TransitionContentSideProps extends TransitionContentProps {\n  topOffset: number;\n  toggleRef: React.RefObject<ButtonProps.Ref>;\n}\n\nconst TransitionContentSide = ({\n  baseProps,\n  isOpen,\n  splitPanelRef,\n  topOffset,\n  bottomOffset,\n  cappedSize,\n  isRefresh,\n  onToggle,\n  i18nStrings,\n  relativeSize,\n  onKeyDown,\n  onSliderMouseDown,\n  focusVisible,\n  toggleRef,\n  paneHeader,\n  wrappedChildren,\n}: TransitionContentSideProps) => {\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.drawer, styles.root, styles['position-side'], {\n        [styles['drawer-closed']]: !isOpen,\n      })}\n      ref={splitPanelRef}\n    >\n      <aside\n        style={{\n          top: topOffset,\n          bottom: bottomOffset,\n          width: isOpen ? cappedSize : undefined,\n          maxWidth: isRefresh ? '100%' : undefined,\n        }}\n        className={clsx(styles['drawer-content-side'], {\n          [styles.refresh]: isRefresh,\n        })}\n        onClick={() => !isOpen && onToggle()}\n      >\n        {isOpen ? (\n          <div className={styles['slider-wrapper-side']}>\n            <div\n              role=\"slider\"\n              tabIndex={0}\n              aria-label={i18nStrings.resizeHandleAriaLabel}\n              aria-valuemax={100}\n              aria-valuemin={0}\n              aria-valuenow={relativeSize}\n              className={clsx(styles.slider, styles['slider-side'])}\n              onKeyDown={onKeyDown}\n              onMouseDown={onSliderMouseDown}\n              {...focusVisible}\n            >\n              <ResizeHandler className={clsx(styles['slider-icon'], styles['slider-icon-side'])} />\n            </div>\n          </div>\n        ) : (\n          <InternalButton\n            className={clsx(styles['open-button'], styles['open-button-side'])}\n            iconName=\"angle-left\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={i18nStrings.openButtonAriaLabel}\n            ref={isRefresh ? null : toggleRef}\n          />\n        )}\n        <div className={styles['content-side']} aria-hidden={!isOpen}>\n          <div className={clsx(styles['pane-header-wrapper-side'])}>{paneHeader}</div>\n          <hr className={styles['header-divider']} />\n          <div className={clsx(styles['pane-content-wrapper-side'])}>{wrappedChildren}</div>\n        </div>\n      </aside>\n    </div>\n  );\n};\n\ninterface TransitionContentBottomProps extends TransitionContentProps {\n  isMobile: boolean;\n  disableContentPaddings?: boolean;\n  state: TransitionStatus;\n  leftOffset: number;\n  rightOffset: number;\n  transitioningElementRef: React.Ref<any>;\n  centeredMaxWidthClasses: string;\n  splitPanelHeaderRef?: React.Ref<any>;\n  appLayoutMaxWidth: React.CSSProperties | undefined;\n}\n\nconst TransitionContentBottom = ({\n  baseProps,\n  isOpen,\n  splitPanelRef,\n  bottomOffset,\n  cappedSize,\n  isRefresh,\n  onToggle,\n  i18nStrings,\n  relativeSize,\n  onKeyDown,\n  onSliderMouseDown,\n  focusVisible,\n  paneHeader,\n  wrappedChildren,\n  isMobile,\n  disableContentPaddings,\n  state,\n  leftOffset,\n  rightOffset,\n  transitioningElementRef,\n  centeredMaxWidthClasses,\n  splitPanelHeaderRef,\n  appLayoutMaxWidth,\n}: TransitionContentBottomProps) => {\n  const transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, styles.drawer, styles['position-bottom'], {\n        [styles['drawer-closed']]: !isOpen,\n        [styles['drawer-mobile']]: isMobile,\n        [styles['drawer-disable-content-paddings']]: disableContentPaddings,\n        [styles.animating]: isRefresh && (state === 'entering' || state === 'exiting'),\n        [styles.refresh]: isRefresh,\n      })}\n      onClick={() => !isOpen && onToggle()}\n      style={{\n        bottom: bottomOffset,\n        left: leftOffset,\n        right: rightOffset,\n        height: isOpen ? cappedSize : undefined,\n      }}\n      ref={transitionContentBottomRef}\n    >\n      {isOpen && (\n        <div className={styles['slider-wrapper-bottom']}>\n          <div\n            role=\"slider\"\n            tabIndex={0}\n            aria-label={i18nStrings.resizeHandleAriaLabel}\n            aria-valuemax={100}\n            aria-valuemin={0}\n            aria-valuenow={relativeSize}\n            className={clsx(styles.slider, styles['slider-bottom'])}\n            onKeyDown={onKeyDown}\n            onMouseDown={onSliderMouseDown}\n            {...focusVisible}\n          >\n            <ResizeHandler className={clsx(styles['slider-icon'], styles['slider-icon-bottom'])} />\n          </div>\n        </div>\n      )}\n      <div className={styles['drawer-content-bottom']}>\n        <div className={clsx(styles['pane-header-wrapper-bottom'], centeredMaxWidthClasses)} ref={splitPanelHeaderRef}>\n          {paneHeader}\n        </div>\n        <div className={clsx(styles['content-bottom'], centeredMaxWidthClasses)} aria-hidden={!isOpen}>\n          <div className={clsx({ [styles['content-bottom-max-width']]: isRefresh })} style={appLayoutMaxWidth}>\n            {wrappedChildren}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function SplitPanel({\n  header,\n  children,\n  hidePreferencesButton = false,\n  i18nStrings,\n  ...restProps\n}: SplitPanelProps) {\n  const { __internalRootRef } = useBaseComponent('SplitPanel');\n  const {\n    size,\n    getMaxWidth,\n    getMaxHeight,\n    position,\n    topOffset,\n    bottomOffset,\n    leftOffset,\n    rightOffset,\n    disableContentPaddings,\n    contentWidthStyles,\n    contentWrapperPaddings,\n    isCopy,\n    isOpen,\n    isMobile,\n    isRefresh,\n    isForcedPosition,\n    splitPanelRef,\n    splitPanelHeaderRef,\n    lastInteraction,\n    onPreferencesChange,\n    onResize,\n    onToggle,\n    reportSize,\n    setOpenButtonAriaLabel,\n  } = useSplitPanelContext();\n  const baseProps = getBaseProps(restProps);\n  const focusVisible = useFocusVisible();\n  const [isPreferencesOpen, setPreferencesOpen] = useState<boolean>(false);\n  const [relativeSize, setRelativeSize] = useState(0);\n  const [maxSize, setMaxSize] = useState(size);\n  const minSize = position === 'bottom' ? MIN_HEIGHT : MIN_WIDTH;\n  const cappedSize = getLimitedValue(minSize, size, maxSize);\n  const appLayoutMaxWidth = isRefresh && position === 'bottom' ? contentWidthStyles : undefined;\n\n  useEffect(() => {\n    setOpenButtonAriaLabel?.(i18nStrings.openButtonAriaLabel);\n  }, [setOpenButtonAriaLabel, i18nStrings.openButtonAriaLabel]);\n\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = position === 'bottom' ? getMaxHeight() : getMaxWidth();\n      setRelativeSize((size / maxSize) * 100);\n      setMaxSize(maxSize);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [size, position, getMaxHeight, getMaxWidth]);\n\n  useEffect(() => {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n\n  useEffect(() => {\n    const handler = () => setMaxSize(position === 'bottom' ? getMaxHeight() : getMaxWidth());\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [position, getMaxWidth, getMaxHeight]);\n\n  const setSidePanelWidth = (width: number) => {\n    const maxWidth = getMaxWidth();\n    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n\n    if (isOpen && maxWidth >= MIN_WIDTH) {\n      onResize({ size });\n    }\n  };\n\n  const setBottomPanelHeight = (height: number) => {\n    const maxHeight = getMaxHeight();\n    const size = getLimitedValue(MIN_HEIGHT, height, maxHeight);\n\n    if (isOpen && maxHeight >= MIN_HEIGHT) {\n      onResize({ size });\n    }\n  };\n\n  const splitPanelRefObject = useRef(null);\n  const sizeControlProps: SizeControlProps = {\n    position,\n    splitPanelRef: splitPanelRefObject,\n    setSidePanelWidth,\n    setBottomPanelHeight,\n  };\n  const onSliderMouseDown = useMouseEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const toggleRef = useRef<ButtonProps.Ref>(null);\n  const closeRef = useRef<ButtonProps.Ref>(null);\n  const preferencesRef = useRef<ButtonProps.Ref>(null);\n\n  useEffectOnUpdate(() => {\n    switch (lastInteraction?.type) {\n      case 'open':\n        return closeRef.current?.focus();\n      case 'close':\n        return toggleRef.current?.focus();\n      case 'position':\n        return preferencesRef.current?.focus();\n      default:\n        return;\n    }\n  }, [lastInteraction]);\n\n  const wrappedChildren = (\n    <AppLayoutContext.Provider\n      value={{\n        stickyOffsetTop: topOffset,\n        stickyOffsetBottom: bottomOffset,\n      }}\n    >\n      {children}\n    </AppLayoutContext.Provider>\n  );\n\n  const paneHeader = (\n    <div className={styles.header} style={appLayoutMaxWidth}>\n      <h2 className={styles['header-text']}>{header}</h2>\n      <div className={styles['header-actions']}>\n        {!hidePreferencesButton && isOpen && (\n          <>\n            <InternalButton\n              className={styles['preferences-button']}\n              iconName=\"settings\"\n              variant=\"icon\"\n              onClick={() => setPreferencesOpen(true)}\n              formAction=\"none\"\n              ariaLabel={i18nStrings.preferencesTitle}\n              ref={preferencesRef}\n            />\n            <span className={styles.divider} />\n          </>\n        )}\n\n        {isOpen ? (\n          <InternalButton\n            className={styles['close-button']}\n            iconName={isRefresh && position === 'side' ? 'angle-right' : isRefresh ? 'angle-down' : 'close'}\n            variant=\"icon\"\n            onClick={onToggle}\n            formAction=\"none\"\n            ariaLabel={i18nStrings.closeButtonAriaLabel}\n            ref={closeRef}\n          />\n        ) : position === 'side' ? null : (\n          <InternalButton\n            className={styles['open-button']}\n            iconName=\"angle-up\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={i18nStrings.openButtonAriaLabel}\n            ref={toggleRef}\n          />\n        )}\n      </div>\n    </div>\n  );\n\n  /*\n    This effect forces the browser to recalculate the layout\n    whenever the split panel might have moved.\n\n    This is needed as a workaround for a bug in Safari, which does\n    not automatically calculate the new position of the split panel\n    _content_ when the split panel moves.\n  */\n  useLayoutEffect(() => {\n    const root = __internalRootRef.current;\n\n    if (root) {\n      const property = 'transform';\n      const temporaryValue = 'translateZ(0)';\n\n      const valueBefore = root.style[property];\n      root.style[property] = temporaryValue;\n\n      // This line forces the browser to recalculate the layout\n      void root.offsetHeight;\n\n      root.style[property] = valueBefore;\n    }\n  }, [rightOffset, __internalRootRef]);\n\n  const mergedRef = useMergeRefs(splitPanelRef, splitPanelRefObject, __internalRootRef);\n\n  /**\n   * The AppLayout factor moved the circular buttons out of the\n   * SplitPanel and into the Tools component. This conditional\n   * is still needed for the early return to prevent execution\n   * of the following code.\n   */\n  if (isRefresh && (!isOpen || isCopy) && position === 'side') {\n    return <></>;\n  }\n\n  const centeredMaxWidthClasses = clsx({\n    [styles['pane-bottom-center-align']]: isRefresh,\n    [styles['pane-bottom-content-nav-padding']]: contentWrapperPaddings?.closedNav,\n    [styles['pane-bottom-content-tools-padding']]: contentWrapperPaddings?.closedTools,\n  });\n\n  return (\n    <Transition in={isOpen ?? false}>\n      {(state, transitioningElementRef) => (\n        <>\n          {position === 'side' && (\n            <TransitionContentSide\n              baseProps={baseProps}\n              isOpen={isOpen}\n              splitPanelRef={mergedRef}\n              topOffset={topOffset}\n              bottomOffset={bottomOffset}\n              cappedSize={cappedSize}\n              isRefresh={isRefresh}\n              onToggle={onToggle}\n              i18nStrings={i18nStrings}\n              relativeSize={relativeSize}\n              onKeyDown={onKeyDown}\n              onSliderMouseDown={onSliderMouseDown}\n              focusVisible={focusVisible}\n              toggleRef={toggleRef}\n              paneHeader={paneHeader}\n              wrappedChildren={wrappedChildren}\n            ></TransitionContentSide>\n          )}\n\n          {position === 'bottom' && (\n            <TransitionContentBottom\n              baseProps={baseProps}\n              isOpen={isOpen}\n              splitPanelRef={mergedRef}\n              bottomOffset={bottomOffset}\n              cappedSize={cappedSize}\n              isRefresh={isRefresh}\n              onToggle={onToggle}\n              i18nStrings={i18nStrings}\n              relativeSize={relativeSize}\n              onKeyDown={onKeyDown}\n              onSliderMouseDown={onSliderMouseDown}\n              focusVisible={focusVisible}\n              paneHeader={paneHeader}\n              wrappedChildren={wrappedChildren}\n              isMobile={isMobile}\n              disableContentPaddings={disableContentPaddings}\n              state={state}\n              leftOffset={leftOffset}\n              rightOffset={rightOffset}\n              transitioningElementRef={transitioningElementRef}\n              centeredMaxWidthClasses={centeredMaxWidthClasses}\n              splitPanelHeaderRef={splitPanelHeaderRef}\n              appLayoutMaxWidth={appLayoutMaxWidth}\n            ></TransitionContentBottom>\n          )}\n          {isPreferencesOpen && (\n            <PreferencesModal\n              visible={true}\n              preferences={{ position }}\n              disabledSidePosition={position === 'bottom' && isForcedPosition}\n              isRefresh={isRefresh}\n              i18nStrings={{\n                header: i18nStrings.preferencesTitle,\n                confirm: i18nStrings.preferencesConfirm,\n                cancel: i18nStrings.preferencesCancel,\n                positionLabel: i18nStrings.preferencesPositionLabel,\n                positionDescription: i18nStrings.preferencesPositionDescription,\n                positionBottom: i18nStrings.preferencesPositionBottom,\n                positionSide: i18nStrings.preferencesPositionSide,\n              }}\n              onConfirm={preferences => {\n                onPreferencesChange({ ...preferences });\n                setPreferencesOpen(false);\n              }}\n              onDismiss={() => {\n                setPreferencesOpen(false);\n              }}\n            />\n          )}\n        </>\n      )}\n    </Transition>\n  );\n}\n\napplyDisplayName(SplitPanel, 'SplitPanel');\n"]},"metadata":{},"sourceType":"module"}