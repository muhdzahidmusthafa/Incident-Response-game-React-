{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '../../hooks/container-queries';\nexport default memo(LabelsMeasure); // Places the invisible left-hand side labels to calculate their maximum width.\n\nfunction LabelsMeasure(_a) {\n  var scale = _a.scale,\n      ticks = _a.ticks,\n      tickFormatter = _a.tickFormatter,\n      autoWidth = _a.autoWidth;\n\n  var _b = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      width = _b[0],\n      ref = _b[1]; // Tell elements's width to the parent.\n\n\n  useEffect(function () {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n\n  var labelMapper = function (value) {\n    var scaledValue = scale.d3Scale(value);\n\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      key: \"\".concat(value),\n      className: styles['labels-left__label'],\n      \"aria-hidden\": \"true\"\n    }, tickFormatter ? tickFormatter(value) : value.toString());\n  };\n\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles['labels-left'], styles['labels-left--hidden'])\n  }, ticks.map(labelMapper));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAIA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAUA,eAAeJ,IAAI,CAACK,aAAD,CAAnB,C,CAEA;;AACA,SAASA,aAAT,CAAuBC,EAAvB,EAAqF;MAA5DC,KAAK;MAAEC,KAAK;MAAEC,aAAa;MAAEC,SAAS;;EACvD,SAAeN,iBAAiB,CAAS,gBAAI;IAAI,WAAI,CAACO,KAAL;EAAU,CAA3B,CAAhC;EAAA,IAACA,KAAK,QAAN;EAAA,IAAQC,GAAG,QAAX,CAD6E,CAGnF;;;EACAX,SAAS,CAAC;IACRS,SAAS,CAACC,KAAK,IAAI,CAAV,CAAT;EACD,CAFQ,EAEN,CAACD,SAAD,EAAYC,KAAZ,CAFM,CAAT;;EAIA,IAAME,WAAW,GAAG,UAACC,KAAD,EAAsB;IACxC,IAAMC,WAAW,GAAGR,KAAK,CAACS,OAAN,CAAcF,KAAd,CAApB;;IACA,IAAIC,WAAW,KAAKE,SAAhB,IAA6B,CAACC,QAAQ,CAACH,WAAD,CAA1C,EAAyD;MACvD,OAAO,IAAP;IACD;;IAED,OACEhB;MAAKoB,GAAG,EAAE,UAAGL,KAAH,CAAV;MAAsBM,SAAS,EAAEjB,MAAM,CAAC,oBAAD,CAAvC;MAA6D,eAAc;IAA3E,GACGM,aAAa,GAAGA,aAAa,CAACK,KAAD,CAAhB,GAAiCA,KAAK,CAACO,QAAN,EADjD,CADF;EAKD,CAXD;;EAaA,OACEtB;IAAKa,GAAG,EAAEA,GAAV;IAAeQ,SAAS,EAAElB,IAAI,CAACC,MAAM,CAAC,aAAD,CAAP,EAAwBA,MAAM,CAAC,qBAAD,CAA9B;EAA9B,GACGK,KAAK,CAACc,GAAN,CAAUT,WAAV,CADH,CADF;AAKD","names":["React","memo","useEffect","clsx","styles","useContainerQuery","LabelsMeasure","_a","scale","ticks","tickFormatter","autoWidth","width","ref","labelMapper","value","scaledValue","d3Scale","undefined","isFinite","key","className","toString","map"],"sourceRoot":"","sources":["../../../../../src/internal/components/cartesian-chart/labels-measure.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useEffect } from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from './scales';\n\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '../../hooks/container-queries';\nimport { ChartDataTypes } from '../../../mixed-line-bar-chart/interfaces';\n\ninterface LabelsMeasureProps {\n  scale: ChartScale | NumericChartScale;\n  ticks: readonly ChartDataTypes[];\n  tickFormatter?: (value: ChartDataTypes) => string;\n  autoWidth: (value: number) => void;\n}\n\nexport default memo(LabelsMeasure) as typeof LabelsMeasure;\n\n// Places the invisible left-hand side labels to calculate their maximum width.\nfunction LabelsMeasure({ scale, ticks, tickFormatter, autoWidth }: LabelsMeasureProps) {\n  const [width, ref] = useContainerQuery<number>(rect => rect.width);\n\n  // Tell elements's width to the parent.\n  useEffect(() => {\n    autoWidth(width || 0);\n  }, [autoWidth, width]);\n\n  const labelMapper = (value: ChartDataTypes) => {\n    const scaledValue = scale.d3Scale(value as any);\n    if (scaledValue === undefined || !isFinite(scaledValue)) {\n      return null;\n    }\n\n    return (\n      <div key={`${value}`} className={styles['labels-left__label']} aria-hidden=\"true\">\n        {tickFormatter ? tickFormatter(value as any) : value.toString()}\n      </div>\n    );\n  };\n\n  return (\n    <div ref={ref} className={clsx(styles['labels-left'], styles['labels-left--hidden'])}>\n      {ticks.map(labelMapper)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}