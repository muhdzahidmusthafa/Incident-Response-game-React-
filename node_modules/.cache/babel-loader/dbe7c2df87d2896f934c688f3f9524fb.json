{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport { fireNonCancelableEvent } from '../../events';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport InternalLink from '../../../link/internal';\nimport styles from './styles.css.js';\nexport function getChartStatus(_a) {\n  var externalData = _a.externalData,\n      visibleData = _a.visibleData,\n      statusType = _a.statusType;\n  var isEmpty = !visibleData || visibleData.length === 0;\n  var isNoMatch = isEmpty && visibleData.length !== externalData.length;\n  var showChart = statusType === 'finished' && !isEmpty;\n  return {\n    isEmpty: isEmpty,\n    isNoMatch: isNoMatch,\n    showChart: showChart\n  };\n}\n\nvar ChartStatusContainer = function (_a) {\n  var statusType = _a.statusType,\n      errorText = _a.errorText,\n      loadingText = _a.loadingText,\n      recoveryText = _a.recoveryText,\n      noMatch = _a.noMatch,\n      empty = _a.empty,\n      onRecoveryClick = _a.onRecoveryClick,\n      isNoMatch = _a.isNoMatch,\n      isEmpty = _a.isEmpty,\n      showChart = _a.showChart;\n  var statusContainer = useMemo(function () {\n    var handleRecoveryClick = function (event) {\n      event.preventDefault();\n      fireNonCancelableEvent(onRecoveryClick);\n    };\n\n    if (statusType === 'error') {\n      return React.createElement(\"span\", null, React.createElement(InternalStatusIndicator, {\n        type: \"error\"\n      }, errorText), ' ', recoveryText && React.createElement(InternalLink, {\n        onFollow: handleRecoveryClick,\n        variant: \"recovery\"\n      }, recoveryText));\n    }\n\n    if (statusType === 'loading') {\n      return React.createElement(InternalStatusIndicator, {\n        type: \"loading\"\n      }, loadingText);\n    }\n\n    if (isNoMatch) {\n      return React.createElement(\"div\", {\n        className: styles.empty\n      }, noMatch);\n    }\n\n    if (isEmpty) {\n      return React.createElement(\"div\", {\n        className: styles.empty\n      }, empty);\n    }\n  }, [statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);\n  return React.createElement(\"div\", {\n    className: styles.root,\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, !showChart && statusContainer);\n};\n\nexport default ChartStatusContainer;","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAGA,SAASC,sBAAT,QAAkE,cAAlE;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AAoBA,OAAM,SAAUC,cAAV,CAA+BC,EAA/B,EAQL;MAPCC,YAAY;MACZC,WAAW;MACXC,UAAU;EAMV,IAAMC,OAAO,GAAG,CAACF,WAAD,IAAgBA,WAAW,CAACG,MAAZ,KAAuB,CAAvD;EACA,IAAMC,SAAS,GAAGF,OAAO,IAAIF,WAAW,CAACG,MAAZ,KAAuBJ,YAAY,CAACI,MAAjE;EACA,IAAME,SAAS,GAAGJ,UAAU,KAAK,UAAf,IAA6B,CAACC,OAAhD;EACA,OAAO;IAAEA,OAAO,SAAT;IAAWE,SAAS,WAApB;IAAsBC,SAAS;EAA/B,CAAP;AACD;;AAED,IAAMC,oBAAoB,GAAG,UAACR,EAAD,EAWD;MAV1BG,UAAU;MACVM,SAAS;MACTC,WAAW;MACXC,YAAY;MACZC,OAAO;MACPC,KAAK;MACLC,eAAe;MACfR,SAAS;MACTF,OAAO;MACPG,SAAS;EAET,IAAMQ,eAAe,GAAGrB,OAAO,CAAC;IAC9B,IAAMsB,mBAAmB,GAAG,UAACC,KAAD,EAAmB;MAC7CA,KAAK,CAACC,cAAN;MACAvB,sBAAsB,CAACmB,eAAD,CAAtB;IACD,CAHD;;IAIA,IAAIX,UAAU,KAAK,OAAnB,EAA4B;MAC1B,OACEV,kCACEA,oBAACG,uBAAD,EAAwB;QAACuB,IAAI,EAAC;MAAN,CAAxB,EAAuCV,SAAvC,CADF,EAC8E,GAD9E,EAEGE,YAAY,IACXlB,oBAACI,YAAD,EAAa;QAACuB,QAAQ,EAAEJ,mBAAX;QAAgCK,OAAO,EAAC;MAAxC,CAAb,EACGV,YADH,CAHJ,CADF;IAUD;;IAED,IAAIR,UAAU,KAAK,SAAnB,EAA8B;MAC5B,OAAOV,oBAACG,uBAAD,EAAwB;QAACuB,IAAI,EAAC;MAAN,CAAxB,EAAyCT,WAAzC,CAAP;IACD;;IAED,IAAIJ,SAAJ,EAAe;MACb,OAAOb;QAAK6B,SAAS,EAAExB,MAAM,CAACe;MAAvB,GAA+BD,OAA/B,CAAP;IACD;;IAED,IAAIR,OAAJ,EAAa;MACX,OAAOX;QAAK6B,SAAS,EAAExB,MAAM,CAACe;MAAvB,GAA+BA,KAA/B,CAAP;IACD;EACF,CA7B8B,EA6B5B,CAACV,UAAD,EAAaW,eAAb,EAA8BV,OAA9B,EAAuCE,SAAvC,EAAkDK,YAAlD,EAAgED,WAAhE,EAA6ED,SAA7E,EAAwFI,KAAxF,EAA+FD,OAA/F,CA7B4B,CAA/B;EA+BA,OACEnB;IAAK6B,SAAS,EAAExB,MAAM,CAACyB,IAAvB;IAA2B,aAAY,QAAvC;IAA+C,eAAa;EAA5D,GACG,CAAChB,SAAD,IAAcQ,eADjB,CADF;AAKD,CAhDD;;AAkDA,eAAeP,oBAAf","names":["React","useMemo","fireNonCancelableEvent","InternalStatusIndicator","InternalLink","styles","getChartStatus","_a","externalData","visibleData","statusType","isEmpty","length","isNoMatch","showChart","ChartStatusContainer","errorText","loadingText","recoveryText","noMatch","empty","onRecoveryClick","statusContainer","handleRecoveryClick","event","preventDefault","type","onFollow","variant","className","root"],"sourceRoot":"","sources":["../../../../../src/internal/components/chart-status-container/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\n\nimport { BaseComponentProps } from '../../base-component';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../events';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport InternalLink from '../../../link/internal';\n\nimport styles from './styles.css.js';\n\ninterface ChartStatusContainerProps extends BaseComponentProps {\n  statusType: 'loading' | 'finished' | 'error';\n\n  empty?: React.ReactNode;\n  noMatch?: React.ReactNode;\n\n  loadingText?: string;\n  errorText?: string;\n  recoveryText?: string;\n\n  onRecoveryClick?: NonCancelableEventHandler;\n\n  // From `getChartStatus`\n  isEmpty?: boolean;\n  isNoMatch?: boolean;\n  showChart?: boolean;\n}\n\nexport function getChartStatus<T, U>({\n  externalData,\n  visibleData,\n  statusType,\n}: {\n  externalData: ReadonlyArray<T>;\n  visibleData: ReadonlyArray<U>;\n  statusType: 'loading' | 'finished' | 'error';\n}) {\n  const isEmpty = !visibleData || visibleData.length === 0;\n  const isNoMatch = isEmpty && visibleData.length !== externalData.length;\n  const showChart = statusType === 'finished' && !isEmpty;\n  return { isEmpty, isNoMatch, showChart };\n}\n\nconst ChartStatusContainer = ({\n  statusType,\n  errorText,\n  loadingText,\n  recoveryText,\n  noMatch,\n  empty,\n  onRecoveryClick,\n  isNoMatch,\n  isEmpty,\n  showChart,\n}: ChartStatusContainerProps) => {\n  const statusContainer = useMemo(() => {\n    const handleRecoveryClick = (event: CustomEvent) => {\n      event.preventDefault();\n      fireNonCancelableEvent(onRecoveryClick);\n    };\n    if (statusType === 'error') {\n      return (\n        <span>\n          <InternalStatusIndicator type=\"error\">{errorText}</InternalStatusIndicator>{' '}\n          {recoveryText && (\n            <InternalLink onFollow={handleRecoveryClick} variant=\"recovery\">\n              {recoveryText}\n            </InternalLink>\n          )}\n        </span>\n      );\n    }\n\n    if (statusType === 'loading') {\n      return <InternalStatusIndicator type=\"loading\">{loadingText}</InternalStatusIndicator>;\n    }\n\n    if (isNoMatch) {\n      return <div className={styles.empty}>{noMatch}</div>;\n    }\n\n    if (isEmpty) {\n      return <div className={styles.empty}>{empty}</div>;\n    }\n  }, [statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);\n\n  return (\n    <div className={styles.root} aria-live=\"polite\" aria-atomic=\"true\">\n      {!showChart && statusContainer}\n    </div>\n  );\n};\n\nexport default ChartStatusContainer;\n"]},"metadata":{},"sourceType":"module"}