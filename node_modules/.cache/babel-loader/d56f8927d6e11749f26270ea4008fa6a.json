{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport InternalLink from '../../link/internal';\nimport InternalIcon from '../../icon/internal';\nimport MenuDropdown from '../../internal/components/menu-dropdown';\nimport styles from '../styles.css.js';\nimport { checkSafeUrl } from '../../internal/utils/check-safe-url';\nexport default function Utility(_a) {\n  var _b;\n\n  var hideText = _a.hideText,\n      definition = _a.definition,\n      offsetRight = _a.offsetRight;\n  var hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;\n  var shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;\n  var ariaLabel = (_b = definition.ariaLabel) !== null && _b !== void 0 ? _b : definition.text;\n\n  if (definition.type === 'button') {\n    checkSafeUrl('TopNavigation', definition.href);\n\n    if (definition.variant === 'primary-button') {\n      return React.createElement(\"span\", {\n        className: styles[\"offset-right-\".concat(offsetRight)]\n      }, React.createElement(InternalButton, {\n        variant: \"primary\",\n        href: definition.href,\n        target: definition.external ? '_blank' : undefined,\n        onClick: definition.onClick,\n        ariaLabel: ariaLabel,\n        iconName: definition.iconName,\n        iconUrl: definition.iconUrl,\n        iconAlt: definition.iconAlt,\n        iconSvg: definition.iconSvg\n      }, shouldHideText ? null : React.createElement(React.Fragment, null, definition.text, definition.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n        className: clsx(styles['utility-button-external-icon'], styles[\"offset-right-\".concat(offsetRight)]),\n        \"aria-label\": definition.externalIconAriaLabel,\n        role: definition.externalIconAriaLabel ? 'img' : undefined\n      }, React.createElement(InternalIcon, {\n        name: \"external\"\n      }))))));\n    } else {\n      // Link\n      return React.createElement(\"span\", {\n        className: styles[\"offset-right-\".concat(offsetRight)]\n      }, React.createElement(InternalLink, {\n        variant: \"top-navigation\",\n        href: definition.href,\n        target: definition.external ? '_blank' : undefined,\n        onFollow: definition.onClick,\n        ariaLabel: ariaLabel\n      }, hasIcon && React.createElement(InternalIcon, {\n        name: definition.iconName,\n        url: definition.iconUrl,\n        alt: definition.iconAlt,\n        svg: definition.iconSvg,\n        badge: definition.badge\n      }), !shouldHideText && definition.text && React.createElement(\"span\", {\n        className: hasIcon ? styles['utility-link-icon'] : undefined\n      }, definition.text), definition.external && React.createElement(React.Fragment, null, ' ', React.createElement(\"span\", {\n        role: definition.externalIconAriaLabel ? 'img' : undefined,\n        \"aria-label\": definition.externalIconAriaLabel\n      }, React.createElement(InternalIcon, {\n        name: \"external\",\n        size: \"normal\"\n      })))));\n    }\n  } else if (definition.type === 'menu-dropdown') {\n    var title = definition.title || definition.text;\n    var shouldShowTitle = shouldHideText || !definition.text;\n    checkSafeUrlRecursively(definition.items);\n    return React.createElement(MenuDropdown, __assign({}, definition, {\n      title: shouldShowTitle ? title : '',\n      ariaLabel: ariaLabel,\n      offsetRight: offsetRight\n    }), !shouldHideText && definition.text);\n  }\n\n  return null;\n}\n\nfunction checkSafeUrlRecursively(itemOrGroup) {\n  for (var _i = 0, itemOrGroup_1 = itemOrGroup; _i < itemOrGroup_1.length; _i++) {\n    var item = itemOrGroup_1[_i];\n    checkSafeUrl('TopNavigation', item.href);\n\n    if ('items' in item) {\n      checkSafeUrlRecursively(item.items);\n    }\n  }\n}","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,YAAP,MAAgD,yCAAhD;AAIA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,YAAT,QAA6B,qCAA7B;AAQA,eAAc,SAAUC,OAAV,CAAkBC,EAAlB,EAAqE;;;MAAjDC,QAAQ;MAAEC,UAAU;MAAEC,WAAW;EACjE,IAAMC,OAAO,GAAG,CAAC,CAACF,UAAU,CAACG,QAAb,IAAyB,CAAC,CAACH,UAAU,CAACI,OAAtC,IAAiD,CAAC,CAACJ,UAAU,CAACK,OAA9D,IAAyE,CAAC,CAACL,UAAU,CAACM,OAAtG;EACA,IAAMC,cAAc,GAAGR,QAAQ,IAAI,CAACC,UAAU,CAACQ,mBAAxB,IAA+CN,OAAtE;EACA,IAAMO,SAAS,GAAG,gBAAU,CAACA,SAAX,MAAoB,IAApB,IAAoBC,aAApB,GAAoBA,EAApB,GAAwBV,UAAU,CAACW,IAArD;;EAEA,IAAIX,UAAU,CAACY,IAAX,KAAoB,QAAxB,EAAkC;IAChChB,YAAY,CAAC,eAAD,EAAkBI,UAAU,CAACa,IAA7B,CAAZ;;IACA,IAAIb,UAAU,CAACc,OAAX,KAAuB,gBAA3B,EAA6C;MAC3C,OACEzB;QAAM0B,SAAS,EAAEpB,MAAM,CAAC,uBAAgBM,WAAhB,CAAD;MAAvB,GACEZ,oBAACE,cAAD,EAAe;QACbuB,OAAO,EAAC,SADK;QAEbD,IAAI,EAAEb,UAAU,CAACa,IAFJ;QAGbG,MAAM,EAAEhB,UAAU,CAACiB,QAAX,GAAsB,QAAtB,GAAiCC,SAH5B;QAIbC,OAAO,EAAEnB,UAAU,CAACmB,OAJP;QAKbV,SAAS,EAAEA,SALE;QAMbN,QAAQ,EAAEH,UAAU,CAACG,QANR;QAObC,OAAO,EAAEJ,UAAU,CAACI,OAPP;QAQbC,OAAO,EAAEL,UAAU,CAACK,OARP;QASbC,OAAO,EAAEN,UAAU,CAACM;MATP,CAAf,EAWGC,cAAc,GAAG,IAAH,GACblB,0CACGW,UAAU,CAACW,IADd,EAEGX,UAAU,CAACiB,QAAX,IACC5B,0CACG,GADH,EAEEA;QACE0B,SAAS,EAAEzB,IAAI,CAACK,MAAM,CAAC,8BAAD,CAAP,EAAyCA,MAAM,CAAC,uBAAgBM,WAAhB,CAAD,CAA/C,CADjB;QACgG,cAClFD,UAAU,CAACoB,qBAFzB;QAGEC,IAAI,EAAErB,UAAU,CAACoB,qBAAX,GAAmC,KAAnC,GAA2CF;MAHnD,GAKE7B,oBAACI,YAAD,EAAa;QAAC6B,IAAI,EAAC;MAAN,CAAb,CALF,CAFF,CAHJ,CAZJ,CADF,CADF;IAiCD,CAlCD,MAkCO;MACL;MACA,OACEjC;QAAM0B,SAAS,EAAEpB,MAAM,CAAC,uBAAgBM,WAAhB,CAAD;MAAvB,GACEZ,oBAACG,YAAD,EAAa;QACXsB,OAAO,EAAC,gBADG;QAEXD,IAAI,EAAEb,UAAU,CAACa,IAFN;QAGXG,MAAM,EAAEhB,UAAU,CAACiB,QAAX,GAAsB,QAAtB,GAAiCC,SAH9B;QAIXK,QAAQ,EAAEvB,UAAU,CAACmB,OAJV;QAKXV,SAAS,EAAEA;MALA,CAAb,EAOGP,OAAO,IACNb,oBAACI,YAAD,EAAa;QACX6B,IAAI,EAAEtB,UAAU,CAACG,QADN;QAEXqB,GAAG,EAAExB,UAAU,CAACI,OAFL;QAGXqB,GAAG,EAAEzB,UAAU,CAACK,OAHL;QAIXqB,GAAG,EAAE1B,UAAU,CAACM,OAJL;QAKXqB,KAAK,EAAE3B,UAAU,CAAC2B;MALP,CAAb,CARJ,EAgBG,CAACpB,cAAD,IAAmBP,UAAU,CAACW,IAA9B,IACCtB;QAAM0B,SAAS,EAAEb,OAAO,GAAGP,MAAM,CAAC,mBAAD,CAAT,GAAiCuB;MAAzD,GAAqElB,UAAU,CAACW,IAAhF,CAjBJ,EAoBGX,UAAU,CAACiB,QAAX,IACC5B,0CACG,GADH,EAEEA;QACEgC,IAAI,EAAErB,UAAU,CAACoB,qBAAX,GAAmC,KAAnC,GAA2CF,SADnD;QAC4D,cAC9ClB,UAAU,CAACoB;MAFzB,GAIE/B,oBAACI,YAAD,EAAa;QAAC6B,IAAI,EAAC,UAAN;QAAiBM,IAAI,EAAC;MAAtB,CAAb,CAJF,CAFF,CArBJ,CADF,CADF;IAoCD;EACF,CA3ED,MA2EO,IAAI5B,UAAU,CAACY,IAAX,KAAoB,eAAxB,EAAyC;IAC9C,IAAMiB,KAAK,GAAG7B,UAAU,CAAC6B,KAAX,IAAoB7B,UAAU,CAACW,IAA7C;IACA,IAAMmB,eAAe,GAAGvB,cAAc,IAAI,CAACP,UAAU,CAACW,IAAtD;IAEAoB,uBAAuB,CAAC/B,UAAU,CAACgC,KAAZ,CAAvB;IAEA,OACE3C,oBAACK,YAAD,EAAauC,aACPjC,UADO,EACG;MACd6B,KAAK,EAAEC,eAAe,GAAGD,KAAH,GAAW,EADnB;MAEdpB,SAAS,EAAEA,SAFG;MAGdR,WAAW,EAAEA;IAHC,CADH,CAAb,EAMG,CAACM,cAAD,IAAmBP,UAAU,CAACW,IANjC,CADF;EAUD;;EAED,OAAO,IAAP;AACD;;AAED,SAASoB,uBAAT,CAAiCG,WAAjC,EAAwE;EACtE,KAAmB,uCAAnB,EAAmBC,yBAAnB,EAAmBA,IAAnB,EAAgC;IAA3B,IAAMC,IAAI,oBAAV;IACHxC,YAAY,CAAC,eAAD,EAAkBwC,IAAI,CAACvB,IAAvB,CAAZ;;IAEA,IAAI,WAAWuB,IAAf,EAAqB;MACnBL,uBAAuB,CAACK,IAAI,CAACJ,KAAN,CAAvB;IACD;EACF;AACF","names":["React","clsx","InternalButton","InternalLink","InternalIcon","MenuDropdown","styles","checkSafeUrl","Utility","_a","hideText","definition","offsetRight","hasIcon","iconName","iconUrl","iconAlt","iconSvg","shouldHideText","disableTextCollapse","ariaLabel","_b","text","type","href","variant","className","target","external","undefined","onClick","externalIconAriaLabel","role","name","onFollow","url","alt","svg","badge","size","title","shouldShowTitle","checkSafeUrlRecursively","items","__assign","itemOrGroup","_i","item"],"sourceRoot":"","sources":["../../../../src/top-navigation/parts/utility.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../../button/internal';\nimport InternalLink from '../../link/internal';\nimport InternalIcon from '../../icon/internal';\nimport MenuDropdown, { MenuDropdownProps } from '../../internal/components/menu-dropdown';\n\nimport { TopNavigationProps } from '../interfaces';\n\nimport styles from '../styles.css.js';\nimport { checkSafeUrl } from '../../internal/utils/check-safe-url';\n\nexport interface UtilityProps {\n  hideText: boolean;\n  definition: TopNavigationProps.Utility;\n  offsetRight?: MenuDropdownProps['offsetRight'];\n}\n\nexport default function Utility({ hideText, definition, offsetRight }: UtilityProps) {\n  const hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;\n  const shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;\n  const ariaLabel = definition.ariaLabel ?? definition.text;\n\n  if (definition.type === 'button') {\n    checkSafeUrl('TopNavigation', definition.href);\n    if (definition.variant === 'primary-button') {\n      return (\n        <span className={styles[`offset-right-${offsetRight}`]}>\n          <InternalButton\n            variant=\"primary\"\n            href={definition.href}\n            target={definition.external ? '_blank' : undefined}\n            onClick={definition.onClick}\n            ariaLabel={ariaLabel}\n            iconName={definition.iconName}\n            iconUrl={definition.iconUrl}\n            iconAlt={definition.iconAlt}\n            iconSvg={definition.iconSvg}\n          >\n            {shouldHideText ? null : (\n              <>\n                {definition.text}\n                {definition.external && (\n                  <>\n                    {' '}\n                    <span\n                      className={clsx(styles['utility-button-external-icon'], styles[`offset-right-${offsetRight}`])}\n                      aria-label={definition.externalIconAriaLabel}\n                      role={definition.externalIconAriaLabel ? 'img' : undefined}\n                    >\n                      <InternalIcon name=\"external\" />\n                    </span>\n                  </>\n                )}\n              </>\n            )}\n          </InternalButton>\n        </span>\n      );\n    } else {\n      // Link\n      return (\n        <span className={styles[`offset-right-${offsetRight}`]}>\n          <InternalLink\n            variant=\"top-navigation\"\n            href={definition.href}\n            target={definition.external ? '_blank' : undefined}\n            onFollow={definition.onClick}\n            ariaLabel={ariaLabel}\n          >\n            {hasIcon && (\n              <InternalIcon\n                name={definition.iconName}\n                url={definition.iconUrl}\n                alt={definition.iconAlt}\n                svg={definition.iconSvg}\n                badge={definition.badge}\n              />\n            )}\n            {!shouldHideText && definition.text && (\n              <span className={hasIcon ? styles['utility-link-icon'] : undefined}>{definition.text}</span>\n            )}\n            {/* HACK: The link component uses size=\"inherit\", and Firefox scales up SVGs massively on the first render */}\n            {definition.external && (\n              <>\n                {' '}\n                <span\n                  role={definition.externalIconAriaLabel ? 'img' : undefined}\n                  aria-label={definition.externalIconAriaLabel}\n                >\n                  <InternalIcon name=\"external\" size=\"normal\" />\n                </span>\n              </>\n            )}\n          </InternalLink>\n        </span>\n      );\n    }\n  } else if (definition.type === 'menu-dropdown') {\n    const title = definition.title || definition.text;\n    const shouldShowTitle = shouldHideText || !definition.text;\n\n    checkSafeUrlRecursively(definition.items);\n\n    return (\n      <MenuDropdown\n        {...definition}\n        title={shouldShowTitle ? title : ''}\n        ariaLabel={ariaLabel}\n        offsetRight={offsetRight}\n      >\n        {!shouldHideText && definition.text}\n      </MenuDropdown>\n    );\n  }\n\n  return null;\n}\n\nfunction checkSafeUrlRecursively(itemOrGroup: MenuDropdownProps['items']) {\n  for (const item of itemOrGroup) {\n    checkSafeUrl('TopNavigation', item.href);\n\n    if ('items' in item) {\n      checkSafeUrlRecursively(item.items);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}