{"ast":null,"code":"var WIDTHS = [1920, 1400, 1200, 992, 768]; // Transform the array of widths into a valid cardsPerRow property that is used as default\n\nvar defaultCardsPerRow = WIDTHS.map(function (value, index, widths) {\n  return {\n    minWidth: value,\n    cards: widths.length + 1 - index\n  };\n});\nexport var getCardsPerRow = function (width, config) {\n  if (config.length === 0) {\n    config = defaultCardsPerRow;\n  }\n\n  var cardsPerRow = 1; // sort them by descending order of minWidth\n\n  var sortedConfig = config.slice().map(function (value) {\n    return {\n      minWidth: value.minWidth || 0,\n      cards: value.cards\n    };\n  }).sort(function (a, b) {\n    return b.minWidth - a.minWidth;\n  });\n  sortedConfig.some(function (layout) {\n    if (width >= layout.minWidth) {\n      cardsPerRow = layout.cards;\n      return true;\n    }\n  });\n  return cardsPerRow;\n};","map":{"version":3,"mappings":"AAIA,IAAMA,MAAM,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,GAAnB,EAAwB,GAAxB,CAAf,C,CAEA;;AACA,IAAMC,kBAAkB,GAAGD,MAAM,CAACE,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR,EAAeC,MAAf,EAAqB;EAAK,OAAC;IAC/DC,QAAQ,EAAEH,KADqD;IAE/DI,KAAK,EAAEF,MAAM,CAACG,MAAP,GAAgB,CAAhB,GAAoBJ;EAFoC,CAAD;AAG9D,CAHyB,CAA3B;AAKA,OAAO,IAAMK,cAAc,GAAG,UAACC,KAAD,EAAgBC,MAAhB,EAA6D;EACzF,IAAIA,MAAM,CAACH,MAAP,KAAkB,CAAtB,EAAyB;IACvBG,MAAM,GAAGV,kBAAT;EACD;;EACD,IAAIW,WAAW,GAAG,CAAlB,CAJyF,CAKzF;;EACA,IAAMC,YAAY,GAAuCF,MAAM,CAC5DG,KADsD,GAEtDZ,GAFsD,CAElD,iBAAK;IAAI,OAAC;MACbI,QAAQ,EAAEH,KAAK,CAACG,QAAN,IAAkB,CADf;MAEbC,KAAK,EAAEJ,KAAK,CAACI;IAFA,CAAD;EAGZ,CALqD,EAMtDQ,IANsD,CAMjD,UAACC,CAAD,EAAIC,CAAJ,EAAK;IAAK,QAAC,CAACX,QAAF,GAAaU,CAAC,CAACV,QAAf;EAAuB,CANgB,CAAzD;EAQAO,YAAY,CAACK,IAAb,CAAkB,kBAAM;IACtB,IAAIR,KAAK,IAAIS,MAAM,CAACb,QAApB,EAA8B;MAC5BM,WAAW,GAAGO,MAAM,CAACZ,KAArB;MACA,OAAO,IAAP;IACD;EACF,CALD;EAMA,OAAOK,WAAP;AACD,CArBM","names":["WIDTHS","defaultCardsPerRow","map","value","index","widths","minWidth","cards","length","getCardsPerRow","width","config","cardsPerRow","sortedConfig","slice","sort","a","b","some","layout"],"sourceRoot":"","sources":["../../../src/cards/cards-layout-helper.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CardsProps } from './interfaces';\n\nconst WIDTHS = [1920, 1400, 1200, 992, 768];\n\n// Transform the array of widths into a valid cardsPerRow property that is used as default\nconst defaultCardsPerRow = WIDTHS.map((value, index, widths) => ({\n  minWidth: value,\n  cards: widths.length + 1 - index,\n}));\n\nexport const getCardsPerRow = (width: number, config: ReadonlyArray<CardsProps.CardsLayout>) => {\n  if (config.length === 0) {\n    config = defaultCardsPerRow;\n  }\n  let cardsPerRow = 1;\n  // sort them by descending order of minWidth\n  const sortedConfig: Required<CardsProps.CardsLayout>[] = config\n    .slice()\n    .map(value => ({\n      minWidth: value.minWidth || 0,\n      cards: value.cards,\n    }))\n    .sort((a, b) => b.minWidth - a.minWidth);\n\n  sortedConfig.some(layout => {\n    if (width >= layout.minWidth) {\n      cardsPerRow = layout.cards;\n      return true;\n    }\n  });\n  return cardsPerRow;\n};\n"]},"metadata":{},"sourceType":"module"}