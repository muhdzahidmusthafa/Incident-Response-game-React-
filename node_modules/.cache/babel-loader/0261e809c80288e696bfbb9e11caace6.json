{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\n\nfunction SplitPanel(_a) {\n  var children = _a.children;\n\n  var _b = useContext(AppLayoutContext),\n      handleSplitPanelClick = _b.handleSplitPanelClick,\n      handleSplitPanelPreferencesChange = _b.handleSplitPanelPreferencesChange,\n      handleSplitPanelResize = _b.handleSplitPanelResize,\n      isMobile = _b.isMobile,\n      isSplitPanelForcedPosition = _b.isSplitPanelForcedPosition,\n      isSplitPanelOpen = _b.isSplitPanelOpen,\n      setSplitPanelReportedSize = _b.setSplitPanelReportedSize,\n      splitPanelPosition = _b.splitPanelPosition,\n      splitPanelSize = _b.splitPanelSize,\n      headerHeight = _b.headerHeight,\n      footerHeight = _b.footerHeight;\n\n  var _c = useState(undefined),\n      openButtonAriaLabel = _c[0],\n      setOpenButtonAriaLabel = _c[1];\n\n  var _d = useState(),\n      splitPanelLastInteraction = _d[0],\n      setSplitPanelLastInteraction = _d[1];\n\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction(isSplitPanelOpen ? {\n      type: 'open'\n    } : {\n      type: 'close'\n    });\n  }, [isSplitPanelOpen]);\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction({\n      type: 'position'\n    });\n  }, [splitPanelPosition]);\n  var splitPanelRef = useRef(null);\n  var splitPanelHeaderRef = useRef(null);\n  var context = {\n    bottomOffset: 0,\n    getMaxHeight: function () {\n      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight; // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: function () {\n      return document.documentElement.clientWidth;\n    },\n    getHeader: function () {\n      return splitPanelHeaderRef.current;\n    },\n    isForcedPosition: isSplitPanelForcedPosition,\n    isMobile: isMobile,\n    isOpen: isSplitPanelOpen,\n    isRefresh: true,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    splitPanelRef: splitPanelRef,\n    splitPanelHeaderRef: splitPanelHeaderRef,\n    topOffset: 0,\n    openButtonAriaLabel: openButtonAriaLabel,\n    setOpenButtonAriaLabel: setOpenButtonAriaLabel,\n    lastInteraction: splitPanelLastInteraction\n  };\n  return React.createElement(SplitPanelContext.Provider, {\n    value: __assign({}, context)\n  }, children);\n}\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the the presence and state of the Navigation and Tools components.\n */\n\n\nfunction SplitPanelBottom() {\n  var _a = useContext(AppLayoutContext),\n      disableBodyScroll = _a.disableBodyScroll,\n      isNavigationOpen = _a.isNavigationOpen,\n      isSplitPanelOpen = _a.isSplitPanelOpen,\n      isToolsOpen = _a.isToolsOpen,\n      splitPanel = _a.splitPanel,\n      splitPanelReportedSize = _a.splitPanelReportedSize;\n\n  var _b = useContext(SplitPanelContext),\n      splitPanelPosition = _b.position,\n      getHeader = _b.getHeader;\n\n  var headerHeight = useObservedElement(getHeader);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a, _b;\n\n    return React.createElement(\"section\", {\n      className: clsx(styles['split-panel-bottom'], styles[\"position-\".concat(splitPanelPosition)], (_a = {}, _a[styles.animating] = state === 'entering', _a[styles['disable-body-scroll']] = disableBodyScroll, _a[styles['is-navigation-open']] = isNavigationOpen, _a[styles['is-split-panel-open']] = isSplitPanelOpen, _a[styles['is-tools-open']] = isToolsOpen, _a)),\n      ref: transitionEventsRef,\n      style: (_b = {}, _b[customCssProps.splitPanelReportedSize] = \"\".concat(splitPanelReportedSize, \"px\"), _b[customCssProps.splitPanelReportedHeaderSize] = \"\".concat(headerHeight, \"px\"), _b)\n    }, React.createElement(SplitPanel, null), splitPanelPosition === 'bottom' && splitPanel);\n  });\n}\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\n\n\nfunction SplitPanelSide() {\n  var _a = useContext(AppLayoutContext),\n      isSplitPanelOpen = _a.isSplitPanelOpen,\n      splitPanel = _a.splitPanel,\n      splitPanelMaxWidth = _a.splitPanelMaxWidth,\n      splitPanelMinWidth = _a.splitPanelMinWidth,\n      splitPanelReportedSize = _a.splitPanelReportedSize;\n\n  var splitPanelPosition = useContext(SplitPanelContext).position;\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a, _b;\n\n    return React.createElement(\"section\", {\n      \"aria-hidden\": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false,\n      className: clsx(styles['split-panel-side'], styles[\"position-\".concat(splitPanelPosition)], (_a = {}, _a[styles.animating] = state === 'entering', _a[styles['is-split-panel-open']] = isSplitPanelOpen, _a)),\n      ref: transitionEventsRef,\n      style: (_b = {}, _b[customCssProps.splitPanelMaxWidth] = \"\".concat(splitPanelMaxWidth, \"px\"), _b[customCssProps.splitPanelMinWidth] = \"\".concat(splitPanelMinWidth, \"px\"), _b[customCssProps.splitPanelReportedHeaderSize] = \"\".concat(splitPanelReportedSize, \"px\"), _b)\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, splitPanelPosition === 'side' && splitPanel));\n  });\n}\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\n\n\nexport function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {\n  var splitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\nexport default SplitPanel;","map":{"version":3,"mappings":"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","names":["React","useContext","useRef","useState","clsx","AppLayoutContext","SplitPanelContext","styles","useEffectOnUpdate","Transition","useObservedElement","customCssProps","SplitPanel","_a","children","handleSplitPanelClick","handleSplitPanelPreferencesChange","handleSplitPanelResize","isMobile","isSplitPanelForcedPosition","isSplitPanelOpen","setSplitPanelReportedSize","splitPanelPosition","splitPanelSize","headerHeight","footerHeight","undefined","openButtonAriaLabel","setOpenButtonAriaLabel","splitPanelLastInteraction","setSplitPanelLastInteraction","type","splitPanelRef","splitPanelHeaderRef","context","bottomOffset","getMaxHeight","availableHeight","document","documentElement","clientHeight","getMaxWidth","clientWidth","getHeader","current","isForcedPosition","isOpen","isRefresh","leftOffset","onPreferencesChange","onResize","onToggle","position","reportSize","rightOffset","size","topOffset","lastInteraction","Provider","value","SplitPanelBottom","disableBodyScroll","isNavigationOpen","isToolsOpen","splitPanel","splitPanelReportedSize","exit","state","transitionEventsRef","className","animating","ref","style","_b","splitPanelReportedHeaderSize","SplitPanelSide","splitPanelMaxWidth","splitPanelMinWidth","getSplitPanelPosition","splitPanelPreferences","Bottom","Side"],"sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/split-panel.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport {\n  SplitPanelContext,\n  SplitPanelContextProps,\n  SplitPanelLastInteraction,\n} from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { AppLayoutProps } from '../interfaces';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel({ children }: React.PropsWithChildren<unknown>) {\n  const {\n    handleSplitPanelClick,\n    handleSplitPanelPreferencesChange,\n    handleSplitPanelResize,\n    isMobile,\n    isSplitPanelForcedPosition,\n    isSplitPanelOpen,\n    setSplitPanelReportedSize,\n    splitPanelPosition,\n    splitPanelSize,\n    headerHeight,\n    footerHeight,\n  } = useContext(AppLayoutContext);\n\n  const [openButtonAriaLabel, setOpenButtonAriaLabel] = useState<undefined | string>(undefined);\n\n  const [splitPanelLastInteraction, setSplitPanelLastInteraction] = useState<undefined | SplitPanelLastInteraction>();\n  useEffectOnUpdate(\n    () => setSplitPanelLastInteraction(isSplitPanelOpen ? { type: 'open' } : { type: 'close' }),\n    [isSplitPanelOpen]\n  );\n  useEffectOnUpdate(() => setSplitPanelLastInteraction({ type: 'position' }), [splitPanelPosition]);\n\n  const splitPanelRef = useRef<HTMLDivElement>(null);\n  const splitPanelHeaderRef = useRef<HTMLDivElement>(null);\n\n  const context: SplitPanelContextProps = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: () => document.documentElement.clientWidth,\n    getHeader: () => splitPanelHeaderRef.current,\n    isForcedPosition: isSplitPanelForcedPosition,\n    isMobile,\n    isOpen: isSplitPanelOpen,\n    isRefresh: true,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    splitPanelRef,\n    splitPanelHeaderRef,\n    topOffset: 0,\n    openButtonAriaLabel,\n    setOpenButtonAriaLabel,\n    lastInteraction: splitPanelLastInteraction,\n  };\n\n  return <SplitPanelContext.Provider value={{ ...context }}>{children}</SplitPanelContext.Provider>;\n}\n\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  const { disableBodyScroll, isNavigationOpen, isSplitPanelOpen, isToolsOpen, splitPanel, splitPanelReportedSize } =\n    useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition, getHeader } = useContext(SplitPanelContext);\n\n  const headerHeight = useObservedElement(getHeader);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          className={clsx(styles['split-panel-bottom'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles['is-navigation-open']]: isNavigationOpen,\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n            [styles['is-tools-open']]: isToolsOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelReportedSize]: `${splitPanelReportedSize}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${headerHeight}px`,\n          }}\n        >\n          <SplitPanel></SplitPanel>\n          {splitPanelPosition === 'bottom' && splitPanel}\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\nfunction SplitPanelSide() {\n  const { isSplitPanelOpen, splitPanel, splitPanelMaxWidth, splitPanelMinWidth, splitPanelReportedSize } =\n    useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition } = useContext(SplitPanelContext);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          aria-hidden={!isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false}\n          className={clsx(styles['split-panel-side'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,\n            [customCssProps.splitPanelMinWidth]: `${splitPanelMinWidth}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${splitPanelReportedSize}px`,\n          }}\n        >\n          <div className={clsx(styles['animated-content'])}>{splitPanelPosition === 'side' && splitPanel}</div>\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(\n  isSplitPanelForcedPosition: boolean,\n  splitPanelPreferences: AppLayoutProps.SplitPanelPreferences | undefined\n) {\n  let splitPanelPosition: AppLayoutProps.SplitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && splitPanelPreferences?.position === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\n\nexport default SplitPanel;\n"]},"metadata":{},"sourceType":"module"}