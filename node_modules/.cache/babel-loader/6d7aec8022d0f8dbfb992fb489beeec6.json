{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useEffect, useRef } from 'react';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { getBaseProps } from '../internal/base-component';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport styles from './styles.css.js';\nimport CheckboxIcon from '../internal/components/checkbox-icon';\nvar InternalCheckbox = React.forwardRef(function (_a, ref) {\n  var controlId = _a.controlId,\n      name = _a.name,\n      checked = _a.checked,\n      disabled = _a.disabled,\n      indeterminate = _a.indeterminate,\n      children = _a.children,\n      description = _a.description,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      withoutLabel = _a.withoutLabel,\n      tabIndex = _a.tabIndex,\n      __internalRootRef = _a.__internalRootRef,\n      rest = __rest(_a, [\"controlId\", \"name\", \"checked\", \"disabled\", \"indeterminate\", \"children\", \"description\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"onFocus\", \"onBlur\", \"onChange\", \"withoutLabel\", \"tabIndex\", \"__internalRootRef\"]);\n\n  var baseProps = getBaseProps(rest);\n  var checkboxRef = useRef(null);\n  useForwardFocus(ref, checkboxRef);\n  useEffect(function () {\n    if (checkboxRef.current) {\n      checkboxRef.current.indeterminate = Boolean(indeterminate);\n    }\n  });\n  return React.createElement(AbstractSwitch, __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    controlClassName: styles['checkbox-control'],\n    controlId: controlId,\n    disabled: disabled,\n    label: children,\n    description: description,\n    descriptionBottomPadding: true,\n    ariaLabel: ariaLabel,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby,\n    nativeControl: function (nativeControlProps) {\n      return React.createElement(\"input\", __assign({}, nativeControlProps, {\n        ref: checkboxRef,\n        className: styles.input,\n        type: \"checkbox\",\n        checked: checked,\n        name: name,\n        tabIndex: tabIndex,\n        onFocus: onFocus && function () {\n          return fireNonCancelableEvent(onFocus);\n        },\n        onBlur: onBlur && function () {\n          return fireNonCancelableEvent(onBlur);\n        },\n        // empty handler to suppress React controllability warning\n        onChange: function () {},\n        onClick: // Using onClick because onChange does not fire in indeterminate state in Internet Explorer and Legacy Edge\n        // https://stackoverflow.com/questions/33523130/ie-does-not-fire-change-event-on-indeterminate-checkbox-when-you-click-on-it\n        onChange && function () {\n          return fireNonCancelableEvent(onChange, // for deterministic transitions \"indeterminate\" -> \"checked\" -> \"unchecked\"\n          indeterminate ? {\n            checked: true,\n            indeterminate: false\n          } : {\n            checked: !checked,\n            indeterminate: false\n          });\n        }\n      }));\n    },\n    styledControl: React.createElement(CheckboxIcon, {\n      checked: checked,\n      indeterminate: indeterminate,\n      disabled: disabled\n    }),\n    withoutLabel: withoutLabel,\n    __internalRootRef: __internalRootRef\n  }));\n});\nexport default InternalCheckbox;","map":{"version":3,"mappings":"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","names":["clsx","React","useEffect","useRef","fireNonCancelableEvent","useForwardFocus","getBaseProps","AbstractSwitch","styles","CheckboxIcon","InternalCheckbox","forwardRef","_a","ref","name","checked","disabled","indeterminate","children","description","ariaLabel","ariaLabelledby","ariaDescribedby","onFocus","onBlur","onChange","withoutLabel","tabIndex","__internalRootRef","rest","baseProps","checkboxRef","current","Boolean","__assign","className","root","controlClassName","controlId","label","descriptionBottomPadding","nativeControl","nativeControlProps","input","type","onClick","styledControl"],"sourceRoot":"","sources":["../../../src/checkbox/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect, useRef } from 'react';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { getBaseProps } from '../internal/base-component';\nimport AbstractSwitch from '../internal/components/abstract-switch';\nimport { CheckboxProps } from './interfaces';\nimport styles from './styles.css.js';\nimport CheckboxIcon from '../internal/components/checkbox-icon';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ninterface InternalProps extends CheckboxProps, InternalBaseComponentProps {\n  withoutLabel?: boolean;\n  tabIndex?: -1;\n}\n\nconst InternalCheckbox = React.forwardRef<CheckboxProps.Ref, InternalProps>(\n  (\n    {\n      controlId,\n      name,\n      checked,\n      disabled,\n      indeterminate,\n      children,\n      description,\n      ariaLabel,\n      ariaLabelledby,\n      ariaDescribedby,\n      onFocus,\n      onBlur,\n      onChange,\n      withoutLabel,\n      tabIndex,\n      __internalRootRef,\n      ...rest\n    },\n    ref\n  ) => {\n    const baseProps = getBaseProps(rest);\n    const checkboxRef = useRef<HTMLInputElement>(null);\n    useForwardFocus(ref, checkboxRef);\n    useEffect(() => {\n      if (checkboxRef.current) {\n        checkboxRef.current.indeterminate = Boolean(indeterminate);\n      }\n    });\n    return (\n      <AbstractSwitch\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        controlClassName={styles['checkbox-control']}\n        controlId={controlId}\n        disabled={disabled}\n        label={children}\n        description={description}\n        descriptionBottomPadding={true}\n        ariaLabel={ariaLabel}\n        ariaLabelledby={ariaLabelledby}\n        ariaDescribedby={ariaDescribedby}\n        nativeControl={nativeControlProps => (\n          <input\n            {...nativeControlProps}\n            ref={checkboxRef}\n            className={styles.input}\n            type=\"checkbox\"\n            checked={checked}\n            name={name}\n            tabIndex={tabIndex}\n            onFocus={onFocus && (() => fireNonCancelableEvent(onFocus))}\n            onBlur={onBlur && (() => fireNonCancelableEvent(onBlur))}\n            // empty handler to suppress React controllability warning\n            onChange={() => {}}\n            onClick={\n              // Using onClick because onChange does not fire in indeterminate state in Internet Explorer and Legacy Edge\n              // https://stackoverflow.com/questions/33523130/ie-does-not-fire-change-event-on-indeterminate-checkbox-when-you-click-on-it\n              onChange &&\n              (() =>\n                fireNonCancelableEvent(\n                  onChange,\n                  // for deterministic transitions \"indeterminate\" -> \"checked\" -> \"unchecked\"\n                  indeterminate ? { checked: true, indeterminate: false } : { checked: !checked, indeterminate: false }\n                ))\n            }\n          />\n        )}\n        styledControl={<CheckboxIcon checked={checked} indeterminate={indeterminate} disabled={disabled} />}\n        withoutLabel={withoutLabel}\n        __internalRootRef={__internalRootRef}\n      />\n    );\n  }\n);\n\nexport default InternalCheckbox;\n"]},"metadata":{},"sourceType":"module"}