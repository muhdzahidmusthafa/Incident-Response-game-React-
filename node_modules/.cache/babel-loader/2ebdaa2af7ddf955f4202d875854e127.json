{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Progress, ResultState, SmallText } from './internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nexport default function ProgressBar(_a) {\n  var _b = _a.value,\n      value = _b === void 0 ? 0 : _b,\n      _c = _a.status,\n      status = _c === void 0 ? 'in-progress' : _c,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'standalone' : _d,\n      resultButtonText = _a.resultButtonText,\n      label = _a.label,\n      description = _a.description,\n      additionalInfo = _a.additionalInfo,\n      resultText = _a.resultText,\n      onResultButtonClick = _a.onResultButtonClick,\n      rest = __rest(_a, [\"value\", \"status\", \"variant\", \"resultButtonText\", \"label\", \"description\", \"additionalInfo\", \"resultText\", \"onResultButtonClick\"]);\n\n  var __internalRootRef = useBaseComponent('ProgressBar').__internalRootRef;\n\n  var baseProps = getBaseProps(rest);\n  var generatedName = useUniqueId('awsui-progress-bar-');\n  var labelId = \"\".concat(generatedName, \"-label\");\n  var isInFlash = variant === 'flash';\n  var isInProgressState = status === 'in-progress';\n\n  if (isInFlash && resultButtonText) {\n    warnOnce('ProgressBar', 'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');\n  }\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root, variant && styles[variant]),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", {\n    className: isInFlash ? styles['flash-container'] : undefined\n  }, React.createElement(\"div\", {\n    className: clsx(styles['word-wrap'], styles[\"label-\".concat(variant)]),\n    id: labelId\n  }, label), description && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, description), React.createElement(\"div\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, isInProgressState ? React.createElement(Progress, {\n    value: value,\n    labelId: labelId,\n    isInFlash: isInFlash\n  }) : React.createElement(ResultState, {\n    resultText: resultText,\n    isInFlash: isInFlash,\n    resultButtonText: resultButtonText,\n    status: status,\n    onClick: function () {\n      fireNonCancelableEvent(onResultButtonClick);\n    }\n  }))), additionalInfo && React.createElement(SmallText, {\n    color: isInFlash ? 'inherit' : undefined\n  }, additionalInfo));\n}\napplyDisplayName(ProgressBar, 'ProgressBar');","map":{"version":3,"mappings":"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","names":["React","clsx","styles","getBaseProps","warnOnce","fireNonCancelableEvent","useUniqueId","Progress","ResultState","SmallText","applyDisplayName","useBaseComponent","ProgressBar","_a","_b","_c","status","_d","variant","resultButtonText","label","description","additionalInfo","resultText","onResultButtonClick","rest","__internalRootRef","baseProps","generatedName","labelId","isInFlash","isInProgressState","className","root","ref","undefined","id","color","value","onClick"],"sourceRoot":"","sources":["../../../src/progress-bar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport { ProgressBarProps } from './interfaces';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { Progress, ResultState, SmallText } from './internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nexport { ProgressBarProps };\n\nexport default function ProgressBar({\n  value = 0,\n  status = 'in-progress',\n  variant = 'standalone',\n  resultButtonText,\n  label,\n  description,\n  additionalInfo,\n  resultText,\n  onResultButtonClick,\n  ...rest\n}: ProgressBarProps) {\n  const { __internalRootRef } = useBaseComponent('ProgressBar');\n  const baseProps = getBaseProps(rest);\n  const generatedName = useUniqueId('awsui-progress-bar-');\n\n  const labelId = `${generatedName}-label`;\n  const isInFlash = variant === 'flash';\n  const isInProgressState = status === 'in-progress';\n\n  if (isInFlash && resultButtonText) {\n    warnOnce(\n      'ProgressBar',\n      'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.'\n    );\n  }\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, variant && styles[variant])}\n      ref={__internalRootRef}\n    >\n      <div className={isInFlash ? styles['flash-container'] : undefined}>\n        <div className={clsx(styles['word-wrap'], styles[`label-${variant}`])} id={labelId}>\n          {label}\n        </div>\n        {description && <SmallText color={isInFlash ? 'inherit' : undefined}>{description}</SmallText>}\n        <div aria-live=\"polite\" aria-atomic=\"true\">\n          {isInProgressState ? (\n            <Progress value={value} labelId={labelId} isInFlash={isInFlash} />\n          ) : (\n            <ResultState\n              resultText={resultText}\n              isInFlash={isInFlash}\n              resultButtonText={resultButtonText}\n              status={status}\n              onClick={() => {\n                fireNonCancelableEvent(onResultButtonClick);\n              }}\n            />\n          )}\n        </div>\n      </div>\n      {additionalInfo && <SmallText color={isInFlash ? 'inherit' : undefined}>{additionalInfo}</SmallText>}\n    </div>\n  );\n}\n\napplyDisplayName(ProgressBar, 'ProgressBar');\n"]},"metadata":{},"sourceType":"module"}