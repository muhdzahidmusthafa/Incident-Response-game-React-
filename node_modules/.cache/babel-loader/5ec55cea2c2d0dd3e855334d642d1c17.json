{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport { getBaseProps } from '../../internal/base-component';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\n\nvar MultiSelectItem = function (_a, ref) {\n  var _b;\n\n  var option = _a.option,\n      highlighted = _a.highlighted,\n      selected = _a.selected,\n      filteringValue = _a.filteringValue,\n      hasCheckbox = _a.hasCheckbox,\n      isKeyboard = _a.isKeyboard,\n      virtualPosition = _a.virtualPosition,\n      padBottom = _a.padBottom,\n      isNextSelected = _a.isNextSelected,\n      indeterminate = _a.indeterminate,\n      screenReaderContent = _a.screenReaderContent,\n      ariaPosinset = _a.ariaPosinset,\n      ariaSetsize = _a.ariaSetsize,\n      restProps = __rest(_a, [\"option\", \"highlighted\", \"selected\", \"filteringValue\", \"hasCheckbox\", \"isKeyboard\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"indeterminate\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\"]);\n\n  var baseProps = getBaseProps(restProps);\n  var isParent = option.type === 'parent';\n  var isChild = option.type === 'child';\n  var wrappedOption = option.option;\n  var disabled = option.disabled || wrappedOption.disabled;\n  var className = clsx(styles.item, (_b = {}, _b[styles.disabled] = disabled, _b));\n  return React.createElement(SelectableItem, __assign({\n    ariaChecked: selected,\n    selected: selected,\n    isNextSelected: isNextSelected,\n    highlighted: highlighted,\n    disabled: disabled,\n    isParent: isParent,\n    isChild: isChild,\n    isKeyboard: isKeyboard,\n    ref: ref,\n    virtualPosition: virtualPosition,\n    padBottom: padBottom,\n    useInteractiveGroups: true,\n    screenReaderContent: screenReaderContent,\n    ariaPosinset: ariaPosinset,\n    ariaSetsize: ariaSetsize\n  }, baseProps), React.createElement(\"div\", {\n    className: className\n  }, hasCheckbox && React.createElement(\"div\", {\n    className: styles.checkbox\n  }, React.createElement(CheckboxIcon, {\n    checked: selected,\n    indeterminate: isParent && indeterminate,\n    disabled: option.disabled\n  })), React.createElement(Option, {\n    option: __assign(__assign({}, wrappedOption), {\n      disabled: disabled\n    }),\n    highlightText: filteringValue,\n    isGroupOption: isParent\n  })));\n};\n\nexport default React.memo(React.forwardRef(MultiSelectItem));","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,cAAP,MAA2B,2CAA3B;AACA,SAASC,YAAT,QAA6B,+BAA7B;AAEA,OAAOC,YAAP,MAAyB,yCAAzB;;AAiBA,IAAMC,eAAe,GAAG,UACtBC,EADsB,EAiBtBC,GAjBsB,EAiBQ;;;EAf5B,UAAM,YAAN;EAAA,IACAC,WAAW,iBADX;EAAA,IAEAC,QAAQ,cAFR;EAAA,IAGAC,cAAc,oBAHd;EAAA,IAIAC,WAAW,iBAJX;EAAA,IAKAC,UAAU,gBALV;EAAA,IAMAC,eAAe,qBANf;EAAA,IAOAC,SAAS,eAPT;EAAA,IAQAC,cAAc,oBARd;EAAA,IASAC,aAAa,mBATb;EAAA,IAUAC,mBAAmB,yBAVnB;EAAA,IAWAC,YAAY,kBAXZ;EAAA,IAYAC,WAAW,iBAZX;EAAA,IAaGC,SAAS,cAdd,6MAcc,CAbZ;;EAiBF,IAAMC,SAAS,GAAGlB,YAAY,CAACiB,SAAD,CAA9B;EAEA,IAAME,QAAQ,GAAGC,MAAM,CAACC,IAAP,KAAgB,QAAjC;EACA,IAAMC,OAAO,GAAGF,MAAM,CAACC,IAAP,KAAgB,OAAhC;EACA,IAAME,aAAa,GAAqBH,MAAM,CAACA,MAA/C;EACA,IAAMI,QAAQ,GAAGJ,MAAM,CAACI,QAAP,IAAmBD,aAAa,CAACC,QAAlD;EACA,IAAMC,SAAS,GAAG7B,IAAI,CAACC,MAAM,CAAC6B,IAAR,GAAYC,SAChCA,GAAC9B,MAAM,CAAC2B,QAAR,IAAmBA,QADa,IAAZ,EAAtB;EAIA,OACE7B,oBAACI,cAAD,EAAe6B;IACbC,WAAW,EAAEvB,QADA;IAEbA,QAAQ,EAAEA,QAFG;IAGbM,cAAc,EAAEA,cAHH;IAIbP,WAAW,EAAEA,WAJA;IAKbmB,QAAQ,EAAEA,QALG;IAMbL,QAAQ,EAAEA,QANG;IAObG,OAAO,EAAEA,OAPI;IAQbb,UAAU,EAAEA,UARC;IASbL,GAAG,EAAEA,GATQ;IAUbM,eAAe,EAAEA,eAVJ;IAWbC,SAAS,EAAEA,SAXE;IAYbmB,oBAAoB,EAAE,IAZT;IAabhB,mBAAmB,EAAEA,mBAbR;IAcbC,YAAY,EAAEA,YAdD;IAebC,WAAW,EAAEA;EAfA,GAgBTE,SAhBS,CAAf,EAkBEvB;IAAK8B,SAAS,EAAEA;EAAhB,GACGjB,WAAW,IACVb;IAAK8B,SAAS,EAAE5B,MAAM,CAACkC;EAAvB,GACEpC,oBAACM,YAAD,EAAa;IAAC+B,OAAO,EAAE1B,QAAV;IAAoBO,aAAa,EAAEM,QAAQ,IAAIN,aAA/C;IAA8DW,QAAQ,EAAEJ,MAAM,CAACI;EAA/E,CAAb,CADF,CAFJ,EAME7B,oBAACG,MAAD,EAAO;IAACsB,MAAM,wBAAOG,aAAP,GAAoB;MAAEC,QAAQ;IAAV,CAApB,CAAP;IAAyCS,aAAa,EAAE1B,cAAxD;IAAwE2B,aAAa,EAAEf;EAAvF,CAAP,CANF,CAlBF,CADF;AA6BD,CA1DD;;AA4DA,eAAexB,KAAK,CAACwC,IAAN,CAAWxC,KAAK,CAACyC,UAAN,CAAiBlC,eAAjB,CAAX,CAAf","names":["React","clsx","styles","Option","SelectableItem","getBaseProps","CheckboxIcon","MultiSelectItem","_a","ref","highlighted","selected","filteringValue","hasCheckbox","isKeyboard","virtualPosition","padBottom","isNextSelected","indeterminate","screenReaderContent","ariaPosinset","ariaSetsize","restProps","baseProps","isParent","option","type","isChild","wrappedOption","disabled","className","item","_b","__assign","ariaChecked","useInteractiveGroups","checkbox","checked","highlightText","isGroupOption","memo","forwardRef"],"sourceRoot":"","sources":["../../../../src/select/parts/multiselect-item.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport Option from '../../internal/components/option';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport { getBaseProps } from '../../internal/base-component';\nimport { DropdownOption, OptionDefinition } from '../../internal/components/option/interfaces';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\nexport interface ItemProps {\n  option: DropdownOption;\n  highlighted?: boolean;\n  selected?: boolean;\n  indeterminate?: boolean;\n  filteringValue?: string;\n  hasCheckbox?: boolean;\n  isKeyboard?: boolean;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  isNextSelected?: boolean;\n  screenReaderContent?: string;\n  ariaPosinset?: number;\n  ariaSetsize?: number;\n}\n\nconst MultiSelectItem = (\n  {\n    option,\n    highlighted,\n    selected,\n    filteringValue,\n    hasCheckbox,\n    isKeyboard,\n    virtualPosition,\n    padBottom,\n    isNextSelected,\n    indeterminate,\n    screenReaderContent,\n    ariaPosinset,\n    ariaSetsize,\n    ...restProps\n  }: ItemProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(restProps);\n\n  const isParent = option.type === 'parent';\n  const isChild = option.type === 'child';\n  const wrappedOption: OptionDefinition = option.option;\n  const disabled = option.disabled || wrappedOption.disabled;\n  const className = clsx(styles.item, {\n    [styles.disabled]: disabled,\n  });\n\n  return (\n    <SelectableItem\n      ariaChecked={selected}\n      selected={selected}\n      isNextSelected={isNextSelected}\n      highlighted={highlighted}\n      disabled={disabled}\n      isParent={isParent}\n      isChild={isChild}\n      isKeyboard={isKeyboard}\n      ref={ref}\n      virtualPosition={virtualPosition}\n      padBottom={padBottom}\n      useInteractiveGroups={true}\n      screenReaderContent={screenReaderContent}\n      ariaPosinset={ariaPosinset}\n      ariaSetsize={ariaSetsize}\n      {...baseProps}\n    >\n      <div className={className}>\n        {hasCheckbox && (\n          <div className={styles.checkbox}>\n            <CheckboxIcon checked={selected} indeterminate={isParent && indeterminate} disabled={option.disabled} />\n          </div>\n        )}\n        <Option option={{ ...wrappedOption, disabled }} highlightText={filteringValue} isGroupOption={isParent} />\n      </div>\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(MultiSelectItem));\n"]},"metadata":{},"sourceType":"module"}