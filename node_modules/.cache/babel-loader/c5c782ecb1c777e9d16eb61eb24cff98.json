{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport { getColumnAriaLabel, compareDates } from './table-utils';\nimport { formatSize, formatDefault } from './column-formats';\nimport { BasicS3Table, getSharedI18Strings } from './basic-table';\nimport { joinObjectPath } from '../utils';\nexport function VersionsTable(_a) {\n  var forwardFocusRef = _a.forwardFocusRef,\n      pathSegments = _a.pathSegments,\n      i18nStrings = _a.i18nStrings,\n      isVisualRefresh = _a.isVisualRefresh,\n      isItemDisabled = _a.isItemDisabled,\n      fetchData = _a.fetchData,\n      visibleColumns = _a.visibleColumns,\n      onSelect = _a.onSelect;\n  return React.createElement(BasicS3Table, {\n    forwardFocusRef: forwardFocusRef,\n    trackBy: \"VersionId\",\n    fetchData: function () {\n      var bucketName = pathSegments[0],\n          rest = pathSegments.slice(1);\n      return fetchData(bucketName, joinObjectPath(rest));\n    },\n    i18nStrings: __assign(__assign({}, getSharedI18Strings(i18nStrings)), {\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions,\n      filteringAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering(i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions),\n      filteringPlaceholder: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsSearchPlaceholder,\n      loadingText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsLoading,\n      emptyText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsNoItems,\n      selectionLabels: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection\n    }),\n    isVisualRefresh: isVisualRefresh,\n    visibleColumns: visibleColumns,\n    isItemDisabled: isItemDisabled,\n    columnDefinitions: [{\n      id: 'ID',\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID,\n      ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID),\n      sortingField: 'VersionId',\n      cell: function (item) {\n        return item.VersionId;\n      },\n      minWidth: '250px'\n    }, {\n      id: 'LastModified',\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified,\n      ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified),\n      sortingComparator: function (a, b) {\n        return compareDates(a.LastModified, b.LastModified);\n      },\n      cell: function (item) {\n        return formatDefault(item.LastModified);\n      }\n    }, {\n      id: 'Size',\n      header: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize,\n      ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize),\n      sortingField: 'Size',\n      cell: function (item) {\n        return formatSize(item.Size);\n      }\n    }],\n    onSelect: function (item) {\n      var _a;\n\n      return onSelect((_a = item === null || item === void 0 ? void 0 : item.VersionId) !== null && _a !== void 0 ? _a : '');\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["React","getColumnAriaLabel","compareDates","formatSize","formatDefault","BasicS3Table","getSharedI18Strings","joinObjectPath","VersionsTable","_a","forwardFocusRef","pathSegments","i18nStrings","isVisualRefresh","isItemDisabled","fetchData","visibleColumns","onSelect","trackBy","rest","bucketName","header","selectionVersions","filteringAriaLabel","labelFiltering","filteringPlaceholder","selectionVersionsSearchPlaceholder","loadingText","selectionVersionsLoading","emptyText","selectionVersionsNoItems","selectionLabels","labelsVersionsSelection","columnDefinitions","id","columnVersionID","ariaLabel","sortingField","cell","VersionId","minWidth","columnVersionLastModified","sortingComparator","a","b","LastModified","item","columnVersionSize","Size"],"sourceRoot":"","sources":["../../../../src/s3-resource-selector/s3-modal/versions-table.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { S3ResourceSelectorProps } from '../interfaces';\nimport { getColumnAriaLabel, compareDates } from './table-utils';\nimport { TableProps } from '../../table/interfaces';\nimport { ForwardFocusRef } from '../../internal/hooks/forward-focus';\nimport { formatSize, formatDefault } from './column-formats';\nimport { BasicS3Table, getSharedI18Strings } from './basic-table';\nimport { joinObjectPath } from '../utils';\n\ninterface VersionsTableProps {\n  forwardFocusRef: React.Ref<ForwardFocusRef>;\n  pathSegments: ReadonlyArray<string>;\n  visibleColumns: ReadonlyArray<string>;\n  isItemDisabled: TableProps.IsItemDisabled<S3ResourceSelectorProps.Version> | undefined;\n  fetchData: S3ResourceSelectorProps['fetchVersions'];\n  i18nStrings: S3ResourceSelectorProps.I18nStrings | undefined;\n  isVisualRefresh?: boolean;\n  onSelect: (versionId: string) => void;\n}\n\nexport function VersionsTable({\n  forwardFocusRef,\n  pathSegments,\n  i18nStrings,\n  isVisualRefresh,\n  isItemDisabled,\n  fetchData,\n  visibleColumns,\n  onSelect,\n}: VersionsTableProps) {\n  return (\n    <BasicS3Table<S3ResourceSelectorProps.Version>\n      forwardFocusRef={forwardFocusRef}\n      trackBy=\"VersionId\"\n      fetchData={() => {\n        const [bucketName, ...rest] = pathSegments;\n        return fetchData(bucketName, joinObjectPath(rest));\n      }}\n      i18nStrings={{\n        ...getSharedI18Strings(i18nStrings),\n        header: i18nStrings?.selectionVersions,\n        filteringAriaLabel: i18nStrings?.labelFiltering(i18nStrings?.selectionVersions),\n        filteringPlaceholder: i18nStrings?.selectionVersionsSearchPlaceholder,\n        loadingText: i18nStrings?.selectionVersionsLoading,\n        emptyText: i18nStrings?.selectionVersionsNoItems,\n        selectionLabels: i18nStrings?.labelsVersionsSelection,\n      }}\n      isVisualRefresh={isVisualRefresh}\n      visibleColumns={visibleColumns}\n      isItemDisabled={isItemDisabled}\n      columnDefinitions={[\n        {\n          id: 'ID',\n          header: i18nStrings?.columnVersionID,\n          ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings?.columnVersionID),\n          sortingField: 'VersionId',\n          cell: item => item.VersionId,\n          minWidth: '250px',\n        },\n        {\n          id: 'LastModified',\n          header: i18nStrings?.columnVersionLastModified,\n          ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings?.columnVersionLastModified),\n          sortingComparator: (a, b) => compareDates(a.LastModified, b.LastModified),\n          cell: item => formatDefault(item.LastModified),\n        },\n        {\n          id: 'Size',\n          header: i18nStrings?.columnVersionSize,\n          ariaLabel: getColumnAriaLabel(i18nStrings, i18nStrings?.columnVersionSize),\n          sortingField: 'Size',\n          cell: item => formatSize(item.Size),\n        },\n      ]}\n      onSelect={item => onSelect(item?.VersionId ?? '')}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}