{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\n/**\n * The CSS class 'awsui-context-content-header' needs to be added to the root element so\n * that the design tokens used are overridden with the appropriate values.\n */\n\nexport default function AppBar() {\n  var _a, _b, _c, _d;\n\n  var _e, _f, _g;\n\n  var _h = useContext(AppLayoutContext),\n      ariaLabels = _h.ariaLabels,\n      breadcrumbs = _h.breadcrumbs,\n      contentHeader = _h.contentHeader,\n      contentType = _h.contentType,\n      dynamicOverlapHeight = _h.dynamicOverlapHeight,\n      handleNavigationClick = _h.handleNavigationClick,\n      handleToolsClick = _h.handleToolsClick,\n      hasNotificationsContent = _h.hasNotificationsContent,\n      isMobile = _h.isMobile,\n      navigationHide = _h.navigationHide,\n      isNavigationOpen = _h.isNavigationOpen,\n      isToolsOpen = _h.isToolsOpen,\n      toolsHide = _h.toolsHide,\n      isAnyPanelOpen = _h.isAnyPanelOpen;\n\n  var focusRefsNav = useFocusControl(isNavigationOpen);\n  var focusRefsTools = useFocusControl(isToolsOpen);\n\n  if (navigationHide && !breadcrumbs && toolsHide) {\n    return null;\n  }\n\n  return React.createElement(\"section\", {\n    \"aria-hidden\": !isMobile && !breadcrumbs ? true : undefined,\n    className: clsx(styles.appbar, (_a = {}, _a[styles['has-breadcrumbs']] = breadcrumbs, _a[styles.unfocusable] = isMobile && isAnyPanelOpen, _a[testutilStyles['mobile-bar']] = isMobile, _a), 'awsui-context-content-header')\n  }, !navigationHide && isMobile && React.createElement(\"nav\", {\n    className: clsx(styles['appbar-nav'], (_b = {}, _b[testutilStyles['drawer-closed']] = !isNavigationOpen, _b)),\n    \"aria-hidden\": isNavigationOpen\n  }, React.createElement(InternalButton, {\n    ariaLabel: (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _e !== void 0 ? _e : undefined,\n    ariaExpanded: isNavigationOpen,\n    iconName: \"menu\",\n    formAction: \"none\",\n    onClick: function () {\n      return handleNavigationClick(true);\n    },\n    variant: \"icon\",\n    className: testutilStyles['navigation-toggle'],\n    ref: focusRefsNav.toggle,\n    disabled: isAnyPanelOpen\n  })), breadcrumbs && React.createElement(\"div\", {\n    className: clsx(styles.breadcrumbs, styles[\"content-type-\".concat(contentType)], testutilStyles.breadcrumbs, (_c = {}, _c[styles['has-dynamic-overlap-height']] = dynamicOverlapHeight > 0, _c[styles['has-header']] = contentHeader, _c[styles['has-notifications-content']] = hasNotificationsContent, _c))\n  }, breadcrumbs), !toolsHide && isMobile && React.createElement(\"aside\", {\n    className: clsx(styles['appbar-tools'], (_d = {}, _d[testutilStyles['drawer-closed']] = !isToolsOpen, _d)),\n    \"aria-hidden\": isToolsOpen,\n    \"aria-label\": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _f !== void 0 ? _f : undefined\n  }, React.createElement(InternalButton, {\n    className: testutilStyles['tools-toggle'],\n    ariaExpanded: isToolsOpen,\n    disabled: isAnyPanelOpen,\n    ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _g !== void 0 ? _g : undefined,\n    iconName: \"status-info\",\n    formAction: \"none\",\n    onClick: function () {\n      return handleToolsClick(true);\n    },\n    variant: \"icon\",\n    ref: focusRefsTools.toggle\n  })));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AAEA;;;;;AAIA,eAAc,SAAUC,MAAV,GAAgB;;;;;EACtB,SAeFP,UAAU,CAACE,gBAAD,CAfR;EAAA,IACJM,UAAU,gBADN;EAAA,IAEJC,WAAW,iBAFP;EAAA,IAGJC,aAAa,mBAHT;EAAA,IAIJC,WAAW,iBAJP;EAAA,IAKJC,oBAAoB,0BALhB;EAAA,IAMJC,qBAAqB,2BANjB;EAAA,IAOJC,gBAAgB,sBAPZ;EAAA,IAQJC,uBAAuB,6BARnB;EAAA,IASJC,QAAQ,cATJ;EAAA,IAUJC,cAAc,oBAVV;EAAA,IAWJC,gBAAgB,sBAXZ;EAAA,IAYJC,WAAW,iBAZP;EAAA,IAaJC,SAAS,eAbL;EAAA,IAcJC,cAAc,oBAdV;;EAgBN,IAAMC,YAAY,GAAGhB,eAAe,CAACY,gBAAD,CAApC;EACA,IAAMK,cAAc,GAAGjB,eAAe,CAACa,WAAD,CAAtC;;EAEA,IAAIF,cAAc,IAAI,CAACR,WAAnB,IAAkCW,SAAtC,EAAiD;IAC/C,OAAO,IAAP;EACD;;EAED,OACErB;IAAA,eACe,CAACiB,QAAD,IAAa,CAACP,WAAd,GAA4B,IAA5B,GAAmCe,SADlD;IAEEC,SAAS,EAAExB,IAAI,CACbG,MAAM,CAACsB,MADM,GACAC,SAEXA,GAACvB,MAAM,CAAC,iBAAD,CAAP,IAA6BK,WAFlB,EAGXkB,GAACvB,MAAM,CAACwB,WAAR,IAAsBZ,QAAQ,IAAIK,cAHvB,EAIXM,GAACtB,cAAc,CAAC,YAAD,CAAf,IAAgCW,QAJrB,IADA,GAOb,8BAPa;EAFjB,GAYG,CAACC,cAAD,IAAmBD,QAAnB,IACCjB;IACE0B,SAAS,EAAExB,IAAI,CAACG,MAAM,CAAC,YAAD,CAAP,GAAqByB,SAAIA,GAACxB,cAAc,CAAC,eAAD,CAAf,IAAmC,CAACa,gBAAxC,EAAwDW,EAA7E,EADjB;IACiG,eAClFX;EAFf,GAIEnB,oBAACI,cAAD,EAAe;IACb2B,SAAS,EAAE,gBAAU,SAAV,cAAU,WAAV,GAAU,MAAV,aAAU,CAAEC,gBAAZ,MAA4B,IAA5B,IAA4BC,aAA5B,GAA4BA,EAA5B,GAAgCR,SAD9B;IAEbS,YAAY,EAAEf,gBAFD;IAGbgB,QAAQ,EAAC,MAHI;IAIbC,UAAU,EAAC,MAJE;IAKbC,OAAO,EAAE;MAAM,4BAAqB,CAAC,IAAD,CAArB;IAA2B,CAL7B;IAMbC,OAAO,EAAC,MANK;IAObZ,SAAS,EAAEpB,cAAc,CAAC,mBAAD,CAPZ;IAQbiC,GAAG,EAAEhB,YAAY,CAACiB,MARL;IASbC,QAAQ,EAAEnB;EATG,CAAf,CAJF,CAbJ,EA+BGZ,WAAW,IACVV;IACE0B,SAAS,EAAExB,IAAI,CAACG,MAAM,CAACK,WAAR,EAAqBL,MAAM,CAAC,uBAAgBO,WAAhB,CAAD,CAA3B,EAA4DN,cAAc,CAACI,WAA3E,GAAsFgC,SACnGA,GAACrC,MAAM,CAAC,4BAAD,CAAP,IAAwCQ,oBAAoB,GAAG,CADoC,EAEnG6B,GAACrC,MAAM,CAAC,YAAD,CAAP,IAAwBM,aAF2E,EAGnG+B,GAACrC,MAAM,CAAC,2BAAD,CAAP,IAAuCW,uBAH4D,IAAtF;EADjB,GAOGN,WAPH,CAhCJ,EA2CG,CAACW,SAAD,IAAcJ,QAAd,IACCjB;IACE0B,SAAS,EAAExB,IAAI,CAACG,MAAM,CAAC,cAAD,CAAP,GAAuBsC,SAAIA,GAACrC,cAAc,CAAC,eAAD,CAAf,IAAmC,CAACc,WAAxC,EAAmDuB,EAA1E,EADjB;IAC8F,eAC/EvB,WAFf;IAE0B,cACZ,gBAAU,SAAV,cAAU,WAAV,GAAU,MAAV,aAAU,CAAEwB,KAAZ,MAAiB,IAAjB,IAAiBC,aAAjB,GAAiBA,EAAjB,GAAqBpB;EAHnC,GAKEzB,oBAACI,cAAD,EAAe;IACbsB,SAAS,EAAEpB,cAAc,CAAC,cAAD,CADZ;IAEb4B,YAAY,EAAEd,WAFD;IAGbqB,QAAQ,EAAEnB,cAHG;IAIbS,SAAS,EAAE,gBAAU,SAAV,cAAU,WAAV,GAAU,MAAV,aAAU,CAAEe,WAAZ,MAAuB,IAAvB,IAAuBC,aAAvB,GAAuBA,EAAvB,GAA2BtB,SAJzB;IAKbU,QAAQ,EAAC,aALI;IAMbC,UAAU,EAAC,MANE;IAObC,OAAO,EAAE;MAAM,uBAAgB,CAAC,IAAD,CAAhB;IAAsB,CAPxB;IAQbC,OAAO,EAAC,MARK;IASbC,GAAG,EAAEf,cAAc,CAACgB;EATP,CAAf,CALF,CA5CJ,CADF;AAiED","names":["React","useContext","clsx","AppLayoutContext","InternalButton","styles","testutilStyles","useFocusControl","AppBar","ariaLabels","breadcrumbs","contentHeader","contentType","dynamicOverlapHeight","handleNavigationClick","handleToolsClick","hasNotificationsContent","isMobile","navigationHide","isNavigationOpen","isToolsOpen","toolsHide","isAnyPanelOpen","focusRefsNav","focusRefsTools","undefined","className","appbar","_a","unfocusable","_b","ariaLabel","navigationToggle","_e","ariaExpanded","iconName","formAction","onClick","variant","ref","toggle","disabled","_c","_d","tools","_f","toolsToggle","_g"],"sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/app-bar.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\n\n/**\n * The CSS class 'awsui-context-content-header' needs to be added to the root element so\n * that the design tokens used are overridden with the appropriate values.\n */\nexport default function AppBar() {\n  const {\n    ariaLabels,\n    breadcrumbs,\n    contentHeader,\n    contentType,\n    dynamicOverlapHeight,\n    handleNavigationClick,\n    handleToolsClick,\n    hasNotificationsContent,\n    isMobile,\n    navigationHide,\n    isNavigationOpen,\n    isToolsOpen,\n    toolsHide,\n    isAnyPanelOpen,\n  } = useContext(AppLayoutContext);\n  const focusRefsNav = useFocusControl(isNavigationOpen);\n  const focusRefsTools = useFocusControl(isToolsOpen);\n\n  if (navigationHide && !breadcrumbs && toolsHide) {\n    return null;\n  }\n\n  return (\n    <section\n      aria-hidden={!isMobile && !breadcrumbs ? true : undefined}\n      className={clsx(\n        styles.appbar,\n        {\n          [styles['has-breadcrumbs']]: breadcrumbs,\n          [styles.unfocusable]: isMobile && isAnyPanelOpen,\n          [testutilStyles['mobile-bar']]: isMobile,\n        },\n        'awsui-context-content-header'\n      )}\n    >\n      {!navigationHide && isMobile && (\n        <nav\n          className={clsx(styles['appbar-nav'], { [testutilStyles['drawer-closed']]: !isNavigationOpen })}\n          aria-hidden={isNavigationOpen}\n        >\n          <InternalButton\n            ariaLabel={ariaLabels?.navigationToggle ?? undefined}\n            ariaExpanded={isNavigationOpen}\n            iconName=\"menu\"\n            formAction=\"none\"\n            onClick={() => handleNavigationClick(true)}\n            variant=\"icon\"\n            className={testutilStyles['navigation-toggle']}\n            ref={focusRefsNav.toggle}\n            disabled={isAnyPanelOpen}\n          />\n        </nav>\n      )}\n\n      {breadcrumbs && (\n        <div\n          className={clsx(styles.breadcrumbs, styles[`content-type-${contentType}`], testutilStyles.breadcrumbs, {\n            [styles['has-dynamic-overlap-height']]: dynamicOverlapHeight > 0,\n            [styles['has-header']]: contentHeader,\n            [styles['has-notifications-content']]: hasNotificationsContent,\n          })}\n        >\n          {breadcrumbs}\n        </div>\n      )}\n\n      {!toolsHide && isMobile && (\n        <aside\n          className={clsx(styles['appbar-tools'], { [testutilStyles['drawer-closed']]: !isToolsOpen })}\n          aria-hidden={isToolsOpen}\n          aria-label={ariaLabels?.tools ?? undefined}\n        >\n          <InternalButton\n            className={testutilStyles['tools-toggle']}\n            ariaExpanded={isToolsOpen}\n            disabled={isAnyPanelOpen}\n            ariaLabel={ariaLabels?.toolsToggle ?? undefined}\n            iconName=\"status-info\"\n            formAction=\"none\"\n            onClick={() => handleToolsClick(true)}\n            variant=\"icon\"\n            ref={focusRefsTools.toggle}\n          />\n        </aside>\n      )}\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}