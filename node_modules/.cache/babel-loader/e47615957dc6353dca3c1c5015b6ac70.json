{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isMotionDisabled } from '../internal/motion';\nimport isNativeSmoothScrollingSupported from './native-smooth-scroll-supported'; // The scroll speed depends on the scrolling distance. The equation below is an interpolation of measurements in Chrome.\n\nvar getScrollSpeed = function (pixels) {\n  return 0.0015 * Math.abs(pixels) + 0.558;\n};\n\nvar getScrollTime = function (pixels) {\n  return Math.round(Math.abs(pixels) / getScrollSpeed(pixels));\n};\n\nvar now = function () {\n  return window.performance ? window.performance.now() : Date.now();\n};\n\nvar ease = function (k) {\n  return 0.5 * (1 - Math.cos(Math.PI * k));\n};\n\nvar step = function (context) {\n  var time = now();\n  var elapsed = Math.min((time - context.startTime) / context.scrollTime, 1);\n  var value = ease(elapsed);\n  var currentX = context.startX + (context.endX - context.startX) * value;\n  context.scrollable.scrollLeft = currentX; // scroll more if we have not reached our destination\n\n  if (currentX !== context.endX) {\n    requestAnimationFrame(function () {\n      return step(context);\n    });\n  }\n};\n\nvar simulateSmoothScroll = function (element, endX) {\n  var startX = element.scrollLeft;\n  step({\n    scrollable: element,\n    startX: startX,\n    endX: endX,\n    startTime: now(),\n    scrollTime: getScrollTime(endX - startX)\n  });\n};\n\nvar smoothScroll = function (element, to) {\n  if (isMotionDisabled(element)) {\n    element.scrollLeft = to;\n    return;\n  }\n\n  if (isNativeSmoothScrollingSupported() && element.scrollTo) {\n    element.scrollTo({\n      left: to,\n      behavior: 'smooth'\n    });\n    return;\n  }\n\n  simulateSmoothScroll(element, to);\n};\n\nexport default smoothScroll;","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,gCAAP,MAA6C,kCAA7C,C,CAUA;;AACA,IAAMC,cAAc,GAAG,UAACC,MAAD,EAAe;EAAK,gBAASC,IAAI,CAACC,GAAL,CAASF,MAAT,CAAT,GAA4B,KAA5B;AAAiC,CAA5E;;AACA,IAAMG,aAAa,GAAG,UAACH,MAAD,EAAe;EAAK,WAAI,CAACI,KAAL,CAAWH,IAAI,CAACC,GAAL,CAASF,MAAT,IAAmBD,cAAc,CAACC,MAAD,CAA5C;AAAqD,CAA/F;;AAEA,IAAMK,GAAG,GAAG;EAAM,OAACC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACC,WAAP,CAAmBF,GAAnB,EAArB,GAAgDG,IAAI,CAACH,GAAL,EAAjD;AAA4D,CAA9E;;AAEA,IAAMI,IAAI,GAAG,UAACC,CAAD,EAAU;EACrB,OAAO,OAAO,IAAIT,IAAI,CAACU,GAAL,CAASV,IAAI,CAACW,EAAL,GAAUF,CAAnB,CAAX,CAAP;AACD,CAFD;;AAIA,IAAMG,IAAI,GAAG,UAACC,OAAD,EAAuB;EAClC,IAAMC,IAAI,GAAGV,GAAG,EAAhB;EACA,IAAMW,OAAO,GAAGf,IAAI,CAACgB,GAAL,CAAS,CAACF,IAAI,GAAGD,OAAO,CAACI,SAAhB,IAA6BJ,OAAO,CAACK,UAA9C,EAA0D,CAA1D,CAAhB;EACA,IAAMC,KAAK,GAAGX,IAAI,CAACO,OAAD,CAAlB;EACA,IAAMK,QAAQ,GAAGP,OAAO,CAACQ,MAAR,GAAiB,CAACR,OAAO,CAACS,IAAR,GAAeT,OAAO,CAACQ,MAAxB,IAAkCF,KAApE;EACAN,OAAO,CAACU,UAAR,CAAmBC,UAAnB,GAAgCJ,QAAhC,CALkC,CAMlC;;EACA,IAAIA,QAAQ,KAAKP,OAAO,CAACS,IAAzB,EAA+B;IAC7BG,qBAAqB,CAAC;MAAM,WAAI,CAACZ,OAAD,CAAJ;IAAa,CAApB,CAArB;EACD;AACF,CAVD;;AAYA,IAAMa,oBAAoB,GAAG,UAACC,OAAD,EAAuBL,IAAvB,EAAmC;EAC9D,IAAMD,MAAM,GAAGM,OAAO,CAACH,UAAvB;EACAZ,IAAI,CAAC;IACHW,UAAU,EAAEI,OADT;IAEHN,MAAM,QAFH;IAGHC,IAAI,MAHD;IAIHL,SAAS,EAAEb,GAAG,EAJX;IAKHc,UAAU,EAAEhB,aAAa,CAACoB,IAAI,GAAGD,MAAR;EALtB,CAAD,CAAJ;AAOD,CATD;;AAWA,IAAMO,YAAY,GAAG,UAACD,OAAD,EAAuBE,EAAvB,EAAiC;EACpD,IAAIjC,gBAAgB,CAAC+B,OAAD,CAApB,EAA+B;IAC7BA,OAAO,CAACH,UAAR,GAAqBK,EAArB;IACA;EACD;;EACD,IAAIhC,gCAAgC,MAAM8B,OAAO,CAACG,QAAlD,EAA4D;IAC1DH,OAAO,CAACG,QAAR,CAAiB;MACfC,IAAI,EAAEF,EADS;MAEfG,QAAQ,EAAE;IAFK,CAAjB;IAIA;EACD;;EACDN,oBAAoB,CAACC,OAAD,EAAUE,EAAV,CAApB;AACD,CAbD;;AAeA,eAAeD,YAAf","names":["isMotionDisabled","isNativeSmoothScrollingSupported","getScrollSpeed","pixels","Math","abs","getScrollTime","round","now","window","performance","Date","ease","k","cos","PI","step","context","time","elapsed","min","startTime","scrollTime","value","currentX","startX","endX","scrollable","scrollLeft","requestAnimationFrame","simulateSmoothScroll","element","smoothScroll","to","scrollTo","left","behavior"],"sourceRoot":"","sources":["../../../src/tabs/smooth-scroll.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isMotionDisabled } from '../internal/motion';\nimport isNativeSmoothScrollingSupported from './native-smooth-scroll-supported';\n\ninterface ScrollContext {\n  scrollable: HTMLElement;\n  startX: number;\n  endX: number;\n  startTime: number;\n  scrollTime: number;\n}\n\n// The scroll speed depends on the scrolling distance. The equation below is an interpolation of measurements in Chrome.\nconst getScrollSpeed = (pixels: number) => 0.0015 * Math.abs(pixels) + 0.558;\nconst getScrollTime = (pixels: number) => Math.round(Math.abs(pixels) / getScrollSpeed(pixels));\n\nconst now = () => (window.performance ? window.performance.now() : Date.now());\n\nconst ease = (k: number): number => {\n  return 0.5 * (1 - Math.cos(Math.PI * k));\n};\n\nconst step = (context: ScrollContext): void => {\n  const time = now();\n  const elapsed = Math.min((time - context.startTime) / context.scrollTime, 1);\n  const value = ease(elapsed);\n  const currentX = context.startX + (context.endX - context.startX) * value;\n  context.scrollable.scrollLeft = currentX;\n  // scroll more if we have not reached our destination\n  if (currentX !== context.endX) {\n    requestAnimationFrame(() => step(context));\n  }\n};\n\nconst simulateSmoothScroll = (element: HTMLElement, endX: number): void => {\n  const startX = element.scrollLeft;\n  step({\n    scrollable: element,\n    startX,\n    endX,\n    startTime: now(),\n    scrollTime: getScrollTime(endX - startX),\n  });\n};\n\nconst smoothScroll = (element: HTMLElement, to: number) => {\n  if (isMotionDisabled(element)) {\n    element.scrollLeft = to;\n    return;\n  }\n  if (isNativeSmoothScrollingSupported() && element.scrollTo) {\n    element.scrollTo({\n      left: to,\n      behavior: 'smooth',\n    });\n    return;\n  }\n  simulateSmoothScroll(element, to);\n};\n\nexport default smoothScroll;\n"]},"metadata":{},"sourceType":"module"}