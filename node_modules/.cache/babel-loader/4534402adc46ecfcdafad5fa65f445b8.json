{"ast":null,"code":"var CustomEventStub =\n/** @class */\nfunction () {\n  function CustomEventStub(cancelable, detail) {\n    if (cancelable === void 0) {\n      cancelable = false;\n    }\n\n    if (detail === void 0) {\n      detail = null;\n    }\n\n    this.cancelable = cancelable;\n    this.detail = detail;\n    this.defaultPrevented = false;\n    this.cancelBubble = false;\n  }\n\n  CustomEventStub.prototype.preventDefault = function () {\n    this.defaultPrevented = true;\n  };\n\n  CustomEventStub.prototype.stopPropagation = function () {\n    this.cancelBubble = true;\n  };\n\n  return CustomEventStub;\n}();\n\nexport function createCustomEvent(_a) {\n  var cancelable = _a.cancelable,\n      detail = _a.detail;\n  return new CustomEventStub(cancelable, detail);\n}\nexport function fireNonCancelableEvent(handler, detail) {\n  if (!handler) {\n    return;\n  }\n\n  var event = createCustomEvent({\n    cancelable: false,\n    detail: detail\n  });\n  handler(event);\n}\nexport function fireCancelableEvent(handler, detail, sourceEvent) {\n  if (!handler) {\n    return false;\n  }\n\n  var event = createCustomEvent({\n    cancelable: true,\n    detail: detail\n  });\n  handler(event);\n\n  if (event.defaultPrevented && sourceEvent) {\n    sourceEvent.preventDefault();\n  }\n\n  if (event.cancelBubble && sourceEvent) {\n    sourceEvent.stopPropagation();\n  }\n\n  return event.defaultPrevented;\n}\nexport function fireKeyboardEvent(handler, reactEvent) {\n  return fireCancelableEvent(handler, {\n    keyCode: reactEvent.keyCode,\n    key: reactEvent.key,\n    ctrlKey: reactEvent.ctrlKey,\n    shiftKey: reactEvent.shiftKey,\n    altKey: reactEvent.altKey,\n    metaKey: reactEvent.metaKey\n  }, reactEvent);\n}\n\nvar isMouseEvent = function (e) {\n  return e.button !== undefined;\n};\n\nexport function isPlainLeftClick(event) {\n  return event && (!isMouseEvent(event) || event.button === 0) && !event.ctrlKey && !event.altKey && !event.shiftKey && !event.metaKey;\n}\n/**\n * Returns the element the focus is going to, when a blur event is fired.\n * IE11 does not support `realtedTarget` on blur FocusEvent's. However, it\n * moves the focus before the blur event is fired, so we can get the needed\n * element by accessing `document.activeElement`\n * @param event FocusEvent - native focus event\n * @returns Node | null - the element recieving the focus\n */\n\nexport var getBlurEventRelatedTarget = function (event) {\n  return event.relatedTarget || document.activeElement;\n};","map":{"version":3,"mappings":"AAYA;AAAA;AAAA;EAGE,yBAAmBA,UAAnB,EAAuDC,MAAvD,EAA8E;IAA3D;MAAAD;IAA2B;;IAAS;MAAAC;IAAuB;;IAA3D;IAAoC;IAFvD,wBAAmB,KAAnB;IACA,oBAAe,KAAf;EACkF;;EAElFC;IACE,KAAKC,gBAAL,GAAwB,IAAxB;EACD,CAFD;;EAIAD;IACE,KAAKE,YAAL,GAAoB,IAApB;EACD,CAFD;;EAGF;AAAC,CAZD;;AAqCA,OAAM,SAAUC,iBAAV,CAA+BC,EAA/B,EAAyE;MAAxCN,UAAU;MAAEC,MAAM;EACvD,OAAO,IAAIC,eAAJ,CAAoBF,UAApB,EAAgCC,MAAhC,CAAP;AACD;AAED,OAAM,SAAUM,sBAAV,CAA2CC,OAA3C,EAA8FP,MAA9F,EAAwG;EAC5G,IAAI,CAACO,OAAL,EAAc;IACZ;EACD;;EACD,IAAMC,KAAK,GAAGJ,iBAAiB,CAAC;IAAEL,UAAU,EAAE,KAAd;IAAqBC,MAAM;EAA3B,CAAD,CAA/B;EACAO,OAAO,CAACC,KAAD,CAAP;AACD;AAED,OAAM,SAAUC,mBAAV,CACJF,OADI,EAEJP,MAFI,EAGJU,WAHI,EAGsC;EAE1C,IAAI,CAACH,OAAL,EAAc;IACZ,OAAO,KAAP;EACD;;EACD,IAAMC,KAAK,GAAGJ,iBAAiB,CAAC;IAAEL,UAAU,EAAE,IAAd;IAAoBC,MAAM;EAA1B,CAAD,CAA/B;EACAO,OAAO,CAACC,KAAD,CAAP;;EACA,IAAIA,KAAK,CAACN,gBAAN,IAA0BQ,WAA9B,EAA2C;IACzCA,WAAW,CAACC,cAAZ;EACD;;EACD,IAAIH,KAAK,CAACL,YAAN,IAAsBO,WAA1B,EAAuC;IACrCA,WAAW,CAACE,eAAZ;EACD;;EACD,OAAOJ,KAAK,CAACN,gBAAb;AACD;AAED,OAAM,SAAUW,iBAAV,CAA4BN,OAA5B,EAA4EO,UAA5E,EAA2G;EAC/G,OAAOL,mBAAmB,CACxBF,OADwB,EAExB;IACEQ,OAAO,EAAED,UAAU,CAACC,OADtB;IAEEC,GAAG,EAAEF,UAAU,CAACE,GAFlB;IAGEC,OAAO,EAAEH,UAAU,CAACG,OAHtB;IAIEC,QAAQ,EAAEJ,UAAU,CAACI,QAJvB;IAKEC,MAAM,EAAEL,UAAU,CAACK,MALrB;IAMEC,OAAO,EAAEN,UAAU,CAACM;EANtB,CAFwB,EAUxBN,UAVwB,CAA1B;AAYD;;AAED,IAAMO,YAAY,GAAG,UAACC,CAAD,EAA0C;EAC7D,OAAQA,CAAsB,CAACC,MAAvB,KAAkCC,SAA1C;AACD,CAFD;;AAIA,OAAM,SAAUC,gBAAV,CAA2BjB,KAA3B,EAAyE;EAC7E,OACEA,KAAK,KACJ,CAACa,YAAY,CAACb,KAAD,CAAb,IAAwBA,KAAK,CAACe,MAAN,KAAiB,CADrC,CAAL,IAEA,CAACf,KAAK,CAACS,OAFP,IAGA,CAACT,KAAK,CAACW,MAHP,IAIA,CAACX,KAAK,CAACU,QAJP,IAKA,CAACV,KAAK,CAACY,OANT;AAQD;AAED;;;;;;;;;AAQA,OAAO,IAAMM,yBAAyB,GAAG,UAAClB,KAAD,EAAkB;EACzD,OAAQA,KAAK,CAACmB,aAAN,IAAuBC,QAAQ,CAACC,aAAxC;AACD,CAFM","names":["cancelable","detail","CustomEventStub","defaultPrevented","cancelBubble","createCustomEvent","_a","fireNonCancelableEvent","handler","event","fireCancelableEvent","sourceEvent","preventDefault","stopPropagation","fireKeyboardEvent","reactEvent","keyCode","key","ctrlKey","shiftKey","altKey","metaKey","isMouseEvent","e","button","undefined","isPlainLeftClick","getBlurEventRelatedTarget","relatedTarget","document","activeElement"],"sourceRoot":"","sources":["../../../../src/internal/events/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\n// This is a part of our public types API. We cannot change this in the current major version\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type NonCancelableEventHandler<Detail = {}> = (event: NonCancelableCustomEvent<Detail>) => void;\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type CancelableEventHandler<Detail = {}> = (event: CustomEvent<Detail>) => void;\n\nexport type NonCancelableCustomEvent<DetailType> = Omit<CustomEvent<DetailType>, 'preventDefault'>;\n\nclass CustomEventStub<T> {\n  defaultPrevented = false;\n  cancelBubble = false;\n  constructor(public cancelable: boolean = false, public detail: T | null = null) {}\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n  stopPropagation() {\n    this.cancelBubble = true;\n  }\n}\n\nexport interface BaseKeyDetail {\n  keyCode: number;\n  key: string;\n  ctrlKey: boolean;\n  shiftKey: boolean;\n  altKey: boolean;\n  metaKey: boolean;\n}\n\nexport interface ClickDetail {\n  button: number;\n  ctrlKey: boolean;\n  shiftKey: boolean;\n  altKey: boolean;\n  metaKey: boolean;\n}\n\nexport interface BaseNavigationDetail {\n  href: string | undefined;\n  external?: boolean;\n  target?: string;\n}\n\nexport function createCustomEvent<T>({ cancelable, detail }: CustomEventInit<T>): CustomEvent<T> {\n  return new CustomEventStub(cancelable, detail) as CustomEvent;\n}\n\nexport function fireNonCancelableEvent<T = null>(handler: NonCancelableEventHandler<T> | undefined, detail?: T) {\n  if (!handler) {\n    return;\n  }\n  const event = createCustomEvent({ cancelable: false, detail });\n  handler(event);\n}\n\nexport function fireCancelableEvent<T>(\n  handler: CancelableEventHandler<T> | undefined,\n  detail: T,\n  sourceEvent?: React.SyntheticEvent | Event\n) {\n  if (!handler) {\n    return false;\n  }\n  const event = createCustomEvent({ cancelable: true, detail });\n  handler(event);\n  if (event.defaultPrevented && sourceEvent) {\n    sourceEvent.preventDefault();\n  }\n  if (event.cancelBubble && sourceEvent) {\n    sourceEvent.stopPropagation();\n  }\n  return event.defaultPrevented;\n}\n\nexport function fireKeyboardEvent(handler: CancelableEventHandler<BaseKeyDetail>, reactEvent: React.KeyboardEvent) {\n  return fireCancelableEvent(\n    handler,\n    {\n      keyCode: reactEvent.keyCode,\n      key: reactEvent.key,\n      ctrlKey: reactEvent.ctrlKey,\n      shiftKey: reactEvent.shiftKey,\n      altKey: reactEvent.altKey,\n      metaKey: reactEvent.metaKey,\n    },\n    reactEvent\n  );\n}\n\nconst isMouseEvent = (e: React.MouseEvent | React.KeyboardEvent): e is React.MouseEvent => {\n  return (e as React.MouseEvent).button !== undefined;\n};\n\nexport function isPlainLeftClick(event?: React.MouseEvent | React.KeyboardEvent) {\n  return (\n    event &&\n    (!isMouseEvent(event) || event.button === 0) &&\n    !event.ctrlKey &&\n    !event.altKey &&\n    !event.shiftKey &&\n    !event.metaKey\n  );\n}\n\n/**\n * Returns the element the focus is going to, when a blur event is fired.\n * IE11 does not support `realtedTarget` on blur FocusEvent's. However, it\n * moves the focus before the blur event is fired, so we can get the needed\n * element by accessing `document.activeElement`\n * @param event FocusEvent - native focus event\n * @returns Node | null - the element recieving the focus\n */\nexport const getBlurEventRelatedTarget = (event: FocusEvent): Node | null => {\n  return (event.relatedTarget || document.activeElement) as Node | null;\n};\n"]},"metadata":{},"sourceType":"module"}