{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMemo } from 'react';\nimport { generateUniqueId, useUniqueId } from '../../../hooks/use-unique-id';\nexport var useIds = function (_a) {\n  var hasSelectedOption = _a.hasSelectedOption;\n  return {\n    selectedOptionId: useMemo(function () {\n      return hasSelectedOption ? generateUniqueId() : undefined;\n    }, [hasSelectedOption]),\n    menuId: useUniqueId('option-list')\n  };\n};\nexport var getOptionId = function (menuId, index) {\n  if (index < 0) {\n    return undefined;\n  }\n\n  return \"\".concat(menuId, \"-option-\").concat(index);\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,8BAA9C;AAUA,OAAO,IAAMC,MAAM,GAAW,UAACC,EAAD,EAAsB;MAAnBC,iBAAiB;EAChD,OAAO;IACLC,gBAAgB,EAAEN,OAAO,CAAC;MAAM,OAACK,iBAAiB,GAAGJ,gBAAgB,EAAnB,GAAwBM,SAA1C;IAAoD,CAA3D,EAA6D,CAACF,iBAAD,CAA7D,CADpB;IAELG,MAAM,EAAEN,WAAW,CAAC,aAAD;EAFd,CAAP;AAID,CALM;AAOP,OAAO,IAAMO,WAAW,GAAG,UAACD,MAAD,EAAiBE,KAAjB,EAA8B;EACvD,IAAIA,KAAK,GAAG,CAAZ,EAAe;IACb,OAAOH,SAAP;EACD;;EACD,OAAO,UAAGC,MAAH,EAAS,UAAT,EAASG,MAAT,CAAoBD,KAApB,CAAP;AACD,CALM","names":["useMemo","generateUniqueId","useUniqueId","useIds","_a","hasSelectedOption","selectedOptionId","undefined","menuId","getOptionId","index","concat"],"sourceRoot":"","sources":["../../../../../../src/internal/components/options-list/utils/use-ids.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMemo } from 'react';\nimport { generateUniqueId, useUniqueId } from '../../../hooks/use-unique-id';\n\ninterface UseIds {\n  (inputProps: { hasSelectedOption: boolean }): {\n    highlightedOptionId?: string;\n    selectedOptionId?: string;\n    menuId: string;\n  };\n}\n\nexport const useIds: UseIds = ({ hasSelectedOption }) => {\n  return {\n    selectedOptionId: useMemo(() => (hasSelectedOption ? generateUniqueId() : undefined), [hasSelectedOption]),\n    menuId: useUniqueId('option-list'),\n  };\n};\n\nexport const getOptionId = (menuId: string, index: number) => {\n  if (index < 0) {\n    return undefined;\n  }\n  return `${menuId}-option-${index}`;\n};\n"]},"metadata":{},"sourceType":"module"}