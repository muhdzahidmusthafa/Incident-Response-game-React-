{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport InternalLink from '../../../link/internal';\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { fireNonCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\nimport styles from './styles.css.js';\n\nfunction DropdownStatus(_a) {\n  var children = _a.children;\n  return React.createElement(\"div\", {\n    className: styles.root\n  }, children);\n}\n\nexport var useDropdownStatus = function (_a) {\n  var statusType = _a.statusType,\n      empty = _a.empty,\n      loadingText = _a.loadingText,\n      finishedText = _a.finishedText,\n      errorText = _a.errorText,\n      recoveryText = _a.recoveryText,\n      isEmpty = _a.isEmpty,\n      isNoMatch = _a.isNoMatch,\n      noMatch = _a.noMatch,\n      onRecoveryClick = _a.onRecoveryClick;\n  var linkRef = useRef(null);\n\n  var focusRecoveryLink = function () {\n    var _a;\n\n    return (_a = linkRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n\n  var previousStatusType = usePrevious(statusType);\n  var statusResult = {\n    isSticky: true,\n    content: null,\n    focusRecoveryLink: focusRecoveryLink\n  };\n\n  if (statusType === 'loading') {\n    statusResult.content = React.createElement(InternalStatusIndicator, {\n      type: 'loading'\n    }, loadingText);\n  } else if (statusType === 'error') {\n    statusResult.content = React.createElement(React.Fragment, null, React.createElement(InternalStatusIndicator, {\n      type: \"error\",\n      __animate: previousStatusType !== 'error'\n    }, errorText), ' ', recoveryText && React.createElement(InternalLink, {\n      ref: linkRef,\n      onFollow: function () {\n        return fireNonCancelableEvent(onRecoveryClick);\n      },\n      variant: \"recovery\",\n      className: styles.recovery\n    }, recoveryText));\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n\n  return statusResult;\n};\nexport default DropdownStatus;","map":{"version":3,"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AAEA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,SAAoCC,sBAApC,QAAkE,cAAlE;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;;AAiBA,SAASC,cAAT,CAAwBC,EAAxB,EAAmE;MAAzCC,QAAQ;EAChC,OAAOT;IAAKU,SAAS,EAAEJ,MAAM,CAACK;EAAvB,GAA8BF,QAA9B,CAAP;AACD;;AAqBD,OAAO,IAAMG,iBAAiB,GAAsB,UAACJ,EAAD,EAWnD;MAVCK,UAAU;MACVC,KAAK;MACLC,WAAW;MACXC,YAAY;MACZC,SAAS;MACTC,YAAY;MACZC,OAAO;MACPC,SAAS;MACTC,OAAO;MACPC,eAAe;EAEf,IAAMC,OAAO,GAAGtB,MAAM,CAAuB,IAAvB,CAAtB;;EACA,IAAMuB,iBAAiB,GAAG;IAAA;;IAAM,oBAAO,CAACC,OAAR,MAAe,IAAf,IAAejB,aAAf,GAAe,MAAf,GAAeA,GAAEkB,KAAF,EAAf;EAAwB,CAAxD;;EACA,IAAMC,kBAAkB,GAAGtB,WAAW,CAACQ,UAAD,CAAtC;EAEA,IAAMe,YAAY,GAAyB;IAAEC,QAAQ,EAAE,IAAZ;IAAkBC,OAAO,EAAE,IAA3B;IAAiCN,iBAAiB;EAAlD,CAA3C;;EAEA,IAAIX,UAAU,KAAK,SAAnB,EAA8B;IAC5Be,YAAY,CAACE,OAAb,GAAuB9B,oBAACG,uBAAD,EAAwB;MAAC4B,IAAI,EAAE;IAAP,CAAxB,EAA2ChB,WAA3C,CAAvB;EACD,CAFD,MAEO,IAAIF,UAAU,KAAK,OAAnB,EAA4B;IACjCe,YAAY,CAACE,OAAb,GACE9B,0CACEA,oBAACG,uBAAD,EAAwB;MAAC4B,IAAI,EAAC,OAAN;MAAcC,SAAS,EAAEL,kBAAkB,KAAK;IAAhD,CAAxB,EACGV,SADH,CADF,EAG6B,GAH7B,EAIGC,YAAY,IACXlB,oBAACE,YAAD,EAAa;MACX+B,GAAG,EAAEV,OADM;MAEXW,QAAQ,EAAE;QAAM,6BAAsB,CAACZ,eAAD,CAAtB;MAAuC,CAF5C;MAGXa,OAAO,EAAC,UAHG;MAIXzB,SAAS,EAAEJ,MAAM,CAAC8B;IAJP,CAAb,EAMGlB,YANH,CALJ,CADF;EAiBD,CAlBM,MAkBA,IAAIC,OAAO,IAAIL,KAAf,EAAsB;IAC3Bc,YAAY,CAACE,OAAb,GAAuBhB,KAAvB;EACD,CAFM,MAEA,IAAIM,SAAS,IAAIC,OAAjB,EAA0B;IAC/BO,YAAY,CAACE,OAAb,GAAuBT,OAAvB;EACD,CAFM,MAEA,IAAIR,UAAU,KAAK,UAAf,IAA6BG,YAAjC,EAA+C;IACpDY,YAAY,CAACE,OAAb,GAAuBd,YAAvB;IACAY,YAAY,CAACC,QAAb,GAAwB,KAAxB;EACD;;EAED,OAAOD,YAAP;AACD,CAhDM;AAkDP,eAAerB,cAAf","names":["React","useRef","InternalLink","InternalStatusIndicator","fireNonCancelableEvent","usePrevious","styles","DropdownStatus","_a","children","className","root","useDropdownStatus","statusType","empty","loadingText","finishedText","errorText","recoveryText","isEmpty","isNoMatch","noMatch","onRecoveryClick","linkRef","focusRecoveryLink","current","focus","previousStatusType","statusResult","isSticky","content","type","__animate","ref","onFollow","variant","recovery"],"sourceRoot":"","sources":["../../../../../src/internal/components/dropdown-status/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { LinkProps } from '../../../link/interfaces';\nimport InternalLink from '../../../link/internal';\n\nimport InternalStatusIndicator from '../../../status-indicator/internal';\nimport { NonCancelableEventHandler, fireNonCancelableEvent } from '../../events';\nimport { usePrevious } from '../../hooks/use-previous';\n\nimport { DropdownStatusProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport { DropdownStatusProps };\n\nexport interface DropdownStatusPropsExtended extends DropdownStatusProps {\n  isEmpty?: boolean;\n  isNoMatch?: boolean;\n  noMatch?: React.ReactNode;\n  /**\n   * Called when the user clicks the recovery button placed at the\n   * bottom of the dropdown list in the error state. Use this to\n   * retry a failed request or provide another option for the user\n   * to recover from the error.\n   */\n  onRecoveryClick?: NonCancelableEventHandler;\n}\n\nfunction DropdownStatus({ children }: { children: React.ReactNode }) {\n  return <div className={styles.root}>{children}</div>;\n}\n\ntype UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  noMatch,\n  onRecoveryClick,\n}: DropdownStatusPropsExtended) => DropdownStatusResult;\n\ninterface DropdownStatusResult {\n  isSticky: boolean;\n  content: React.ReactNode | null;\n  focusRecoveryLink: () => void;\n}\n\nexport const useDropdownStatus: UseDropdownStatus = ({\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  errorText,\n  recoveryText,\n  isEmpty,\n  isNoMatch,\n  noMatch,\n  onRecoveryClick,\n}) => {\n  const linkRef = useRef<LinkProps.Ref | null>(null);\n  const focusRecoveryLink = () => linkRef.current?.focus();\n  const previousStatusType = usePrevious(statusType);\n\n  const statusResult: DropdownStatusResult = { isSticky: true, content: null, focusRecoveryLink };\n\n  if (statusType === 'loading') {\n    statusResult.content = <InternalStatusIndicator type={'loading'}>{loadingText}</InternalStatusIndicator>;\n  } else if (statusType === 'error') {\n    statusResult.content = (\n      <>\n        <InternalStatusIndicator type=\"error\" __animate={previousStatusType !== 'error'}>\n          {errorText}\n        </InternalStatusIndicator>{' '}\n        {recoveryText && (\n          <InternalLink\n            ref={linkRef}\n            onFollow={() => fireNonCancelableEvent(onRecoveryClick)}\n            variant=\"recovery\"\n            className={styles.recovery}\n          >\n            {recoveryText}\n          </InternalLink>\n        )}\n      </>\n    );\n  } else if (isEmpty && empty) {\n    statusResult.content = empty;\n  } else if (isNoMatch && noMatch) {\n    statusResult.content = noMatch;\n  } else if (statusType === 'finished' && finishedText) {\n    statusResult.content = finishedText;\n    statusResult.isSticky = false;\n  }\n\n  return statusResult;\n};\n\nexport default DropdownStatus;\n"]},"metadata":{},"sourceType":"module"}