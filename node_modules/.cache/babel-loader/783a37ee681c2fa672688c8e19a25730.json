{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useLayoutEffect, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport styles from './styles.css.js';\nimport icons from './icons';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\nfunction iconSizeMap(height) {\n  if (height === null) {\n    // This is the best guess for the contextual height while server rendering.\n    return 'normal';\n  }\n\n  if (height >= 50) {\n    return 'large';\n  } else if (height >= 36) {\n    return 'big';\n  } else if (height >= 24) {\n    return 'medium';\n  } else if (height <= 16) {\n    return 'small';\n  } else {\n    return 'normal';\n  }\n}\n\nvar InternalIcon = function (_a) {\n  var name = _a.name,\n      _b = _a.size,\n      size = _b === void 0 ? 'normal' : _b,\n      _c = _a.variant,\n      variant = _c === void 0 ? 'normal' : _c,\n      url = _a.url,\n      alt = _a.alt,\n      svg = _a.svg,\n      badge = _a.badge,\n      _d = _a.__internalRootRef,\n      __internalRootRef = _d === void 0 ? null : _d,\n      props = __rest(_a, [\"name\", \"size\", \"variant\", \"url\", \"alt\", \"svg\", \"badge\", \"__internalRootRef\"]);\n\n  var iconRef = useRef(null); // To ensure a re-render is triggered on visual mode changes\n\n  useVisualRefresh(iconRef);\n\n  var _e = useState(null),\n      parentHeight = _e[0],\n      setParentHeight = _e[1];\n\n  var contextualSize = size === 'inherit';\n  var iconSize = contextualSize ? iconSizeMap(parentHeight) : size;\n  var inlineStyles = contextualSize && parentHeight !== null ? {\n    height: \"\".concat(parentHeight, \"px\")\n  } : {};\n  var baseProps = getBaseProps(props);\n  baseProps.className = clsx(baseProps.className, styles.icon, contextualSize && styles['icon-flex-height'], badge && styles.badge, !contextualSize && styles[\"size-\".concat(iconSize, \"-mapped-height\")], styles[\"size-\".concat(iconSize)], styles[\"variant-\".concat(variant)]); // Possible infinite loop is not a concern here because line\n  // height should not change without an external state update.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useLayoutEffect(function () {\n    if (!contextualSize || !iconRef.current) {\n      return;\n    }\n\n    var lineHeight = getComputedStyle(iconRef.current).lineHeight;\n    var newParentHeight = parseInt(lineHeight, 10);\n    setParentHeight(newParentHeight);\n  });\n  var mergedRef = useMergeRefs(iconRef, __internalRootRef);\n\n  if (svg) {\n    if (url) {\n      warnOnce('Icon', 'You have specified both `url` and `svg`. `svg` will take precedence and `url` will be ignored.');\n    }\n\n    return React.createElement(\"span\", __assign({}, baseProps, {\n      ref: mergedRef,\n      \"aria-hidden\": \"true\",\n      style: inlineStyles\n    }), svg);\n  }\n\n  if (url) {\n    return React.createElement(\"span\", __assign({}, baseProps, {\n      ref: mergedRef,\n      style: inlineStyles\n    }), React.createElement(\"img\", {\n      src: url,\n      alt: alt\n    }));\n  }\n\n  var validIcon = name && Object.prototype.hasOwnProperty.call(icons, name);\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    // dangerouslySetInnerHTML is safe here, as we control the content coming from `icons`\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: validIcon ? {\n      __html: icons[name]\n    } : undefined,\n    ref: mergedRef,\n    style: inlineStyles\n  }));\n};\n\nexport default InternalIcon;","map":{"version":3,"mappings":"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","names":["clsx","React","useLayoutEffect","useRef","useState","getBaseProps","warnOnce","styles","icons","useMergeRefs","useVisualRefresh","iconSizeMap","height","InternalIcon","_a","_b","size","_c","variant","url","alt","svg","badge","_d","__internalRootRef","props","iconRef","parentHeight","setParentHeight","contextualSize","iconSize","inlineStyles","baseProps","className","icon","current","getComputedStyle","lineHeight","newParentHeight","parseInt","mergedRef","ref","style","src","validIcon","name","Object","prototype","hasOwnProperty","call","dangerouslySetInnerHTML","__html","undefined"],"sourceRoot":"","sources":["../../../src/icon/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useLayoutEffect, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { warnOnce } from '../internal/logging';\nimport styles from './styles.css.js';\nimport icons from './icons';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { IconProps } from './interfaces';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\n\ntype InternalIconProps = IconProps &\n  InternalBaseComponentProps & {\n    badge?: boolean;\n  };\n\nfunction iconSizeMap(height: number | null) {\n  if (height === null) {\n    // This is the best guess for the contextual height while server rendering.\n    return 'normal';\n  }\n\n  if (height >= 50) {\n    return 'large';\n  } else if (height >= 36) {\n    return 'big';\n  } else if (height >= 24) {\n    return 'medium';\n  } else if (height <= 16) {\n    return 'small';\n  } else {\n    return 'normal';\n  }\n}\n\nconst InternalIcon = ({\n  name,\n  size = 'normal',\n  variant = 'normal',\n  url,\n  alt,\n  svg,\n  badge,\n  __internalRootRef = null,\n  ...props\n}: InternalIconProps) => {\n  const iconRef = useRef<HTMLElement>(null);\n  // To ensure a re-render is triggered on visual mode changes\n  useVisualRefresh(iconRef);\n  const [parentHeight, setParentHeight] = useState<number | null>(null);\n  const contextualSize = size === 'inherit';\n  const iconSize = contextualSize ? iconSizeMap(parentHeight) : size;\n  const inlineStyles = contextualSize && parentHeight !== null ? { height: `${parentHeight}px` } : {};\n  const baseProps = getBaseProps(props);\n\n  baseProps.className = clsx(\n    baseProps.className,\n    styles.icon,\n    contextualSize && styles['icon-flex-height'],\n    badge && styles.badge,\n    !contextualSize && styles[`size-${iconSize}-mapped-height`],\n    styles[`size-${iconSize}`],\n    styles[`variant-${variant}`]\n  );\n\n  // Possible infinite loop is not a concern here because line\n  // height should not change without an external state update.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(() => {\n    if (!contextualSize || !iconRef.current) {\n      return;\n    }\n    const { lineHeight } = getComputedStyle(iconRef.current);\n    const newParentHeight = parseInt(lineHeight, 10);\n    setParentHeight(newParentHeight);\n  });\n\n  const mergedRef = useMergeRefs(iconRef, __internalRootRef);\n\n  if (svg) {\n    if (url) {\n      warnOnce(\n        'Icon',\n        'You have specified both `url` and `svg`. `svg` will take precedence and `url` will be ignored.'\n      );\n    }\n    return (\n      <span {...baseProps} ref={mergedRef} aria-hidden=\"true\" style={inlineStyles}>\n        {svg}\n      </span>\n    );\n  }\n\n  if (url) {\n    return (\n      <span {...baseProps} ref={mergedRef} style={inlineStyles}>\n        <img src={url} alt={alt} />\n      </span>\n    );\n  }\n\n  const validIcon = name && Object.prototype.hasOwnProperty.call(icons, name);\n\n  return (\n    <span\n      {...baseProps}\n      // dangerouslySetInnerHTML is safe here, as we control the content coming from `icons`\n      // eslint-disable-next-line react/no-danger\n      dangerouslySetInnerHTML={validIcon ? { __html: icons[name] } : undefined}\n      ref={mergedRef}\n      style={inlineStyles}\n    />\n  );\n};\n\nexport { InternalIconProps };\nexport default InternalIcon;\n"]},"metadata":{},"sourceType":"module"}