{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, useLayoutEffect } from 'react';\nimport { AppLayoutContext } from '../context';\nimport { useContainerQuery } from '../../../internal/hooks/container-queries';\n/**\n * Observes the height of an element referenced by the returning ref and sets the value as overlapping\n * height for the surrounding AppLayout component.\n * @param props.disabled disables hook if not applicable\n * @returns ref to be measured as overlapping height\n */\n\nexport function useDynamicOverlap(props) {\n  var _a;\n\n  var disabled = (_a = props === null || props === void 0 ? void 0 : props.disabled) !== null && _a !== void 0 ? _a : false;\n  var setDynamicOverlapHeight = useContext(AppLayoutContext).setDynamicOverlapHeight;\n\n  var _b = useContainerQuery(function (rect) {\n    return rect.height;\n  }),\n      overlapContainerQuery = _b[0],\n      overlapElementRef = _b[1];\n\n  useLayoutEffect(function handleDynamicOverlapHeight() {\n    if (!disabled) {\n      setDynamicOverlapHeight(overlapContainerQuery !== null && overlapContainerQuery !== void 0 ? overlapContainerQuery : 0);\n    }\n\n    return function () {\n      if (!disabled) {\n        setDynamicOverlapHeight(0);\n      }\n    };\n  }, [disabled, overlapContainerQuery, setDynamicOverlapHeight]);\n  return overlapElementRef;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,eAArB,QAA4C,OAA5C;AAEA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,iBAAT,QAAkC,2CAAlC;AASA;;;;;;;AAMA,OAAM,SAAUC,iBAAV,CAA4BC,KAA5B,EAA0D;;;EAC9D,IAAMC,QAAQ,GAAG,WAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEA,QAAP,MAAe,IAAf,IAAeC,aAAf,GAAeA,EAAf,GAAmB,KAApC;EACQ,2BAAuB,GAAKP,UAAU,CAACE,gBAAD,CAAV,CAA4BM,uBAAxD;;EACF,SAA6CL,iBAAiB,CAAC,gBAAI;IAAI,WAAI,CAACM,MAAL;EAAW,CAApB,CAA9D;EAAA,IAACC,qBAAqB,QAAtB;EAAA,IAAwBC,iBAAiB,QAAzC;;EAENV,eAAe,CACb,SAASW,0BAAT,GAAmC;IACjC,IAAI,CAACN,QAAL,EAAe;MACbE,uBAAuB,CAACE,qBAAqB,SAArB,yBAAqB,WAArB,2BAAyB,CAA1B,CAAvB;IACD;;IAED,OAAO;MACL,IAAI,CAACJ,QAAL,EAAe;QACbE,uBAAuB,CAAC,CAAD,CAAvB;MACD;IACF,CAJD;EAKD,CAXY,EAYb,CAACF,QAAD,EAAWI,qBAAX,EAAkCF,uBAAlC,CAZa,CAAf;EAeA,OAAOG,iBAAP;AACD","names":["useContext","useLayoutEffect","AppLayoutContext","useContainerQuery","useDynamicOverlap","props","disabled","_a","setDynamicOverlapHeight","height","overlapContainerQuery","overlapElementRef","handleDynamicOverlapHeight"],"sourceRoot":"","sources":["../../../../../src/app-layout/visual-refresh/hooks/use-dynamic-overlap.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, useLayoutEffect } from 'react';\n\nimport { AppLayoutContext } from '../context';\nimport { useContainerQuery } from '../../../internal/hooks/container-queries';\n\nexport interface UseDynamicOverlapProps {\n  /**\n   * Disables hook if not needed. By default, `false`.\n   */\n  disabled?: boolean;\n}\n\n/**\n * Observes the height of an element referenced by the returning ref and sets the value as overlapping\n * height for the surrounding AppLayout component.\n * @param props.disabled disables hook if not applicable\n * @returns ref to be measured as overlapping height\n */\nexport function useDynamicOverlap(props?: UseDynamicOverlapProps) {\n  const disabled = props?.disabled ?? false;\n  const { setDynamicOverlapHeight } = useContext(AppLayoutContext);\n  const [overlapContainerQuery, overlapElementRef] = useContainerQuery(rect => rect.height);\n\n  useLayoutEffect(\n    function handleDynamicOverlapHeight() {\n      if (!disabled) {\n        setDynamicOverlapHeight(overlapContainerQuery ?? 0);\n      }\n\n      return () => {\n        if (!disabled) {\n          setDynamicOverlapHeight(0);\n        }\n      };\n    },\n    [disabled, overlapContainerQuery, setDynamicOverlapHeight]\n  );\n\n  return overlapElementRef;\n}\n"]},"metadata":{},"sourceType":"module"}