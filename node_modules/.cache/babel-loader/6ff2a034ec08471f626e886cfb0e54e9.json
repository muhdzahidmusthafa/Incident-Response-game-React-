{"ast":null,"code":"import { differenceInDays, add } from 'date-fns';\nimport { X_TICK_COUNT_RATIO, Y_TICK_COUNT_RATIO } from './constants'; // The number of ticks is currently defined by the length of the scale.\n// The x scale tends to have longer labels, so we're using less ticks for it.\n// These numbers are currently based on first impressions and might change in the future.\n// We might also open up an API in the future to control the amount of ticks displayed.\n\nexport function getXTickCount(width) {\n  return Math.ceil(width / X_TICK_COUNT_RATIO);\n}\nexport function getYTickCount(height) {\n  return Math.ceil(height / Y_TICK_COUNT_RATIO);\n}\nexport function createXTicks(scale, values) {\n  if (scale.isNumeric()) {\n    return scale.d3Scale.ticks(values);\n  } else if (scale.isTime()) {\n    var rawTicks = scale.d3Scale.ticks(values);\n    var domain = scale.d3Scale.domain();\n    return uniform(rawTicks, domain[domain.length - 1]);\n  } else {\n    return scale.d3Scale.domain();\n  }\n}\nexport function createYTicks(scale, values) {\n  var ticks = scale.d3Scale.ticks(values); // The logarithmic scale sometimes produces a very large amount of (major and minor) ticks,\n  // at which point we need to reduce them significantly for space.\n\n  if (scale.scaleType === 'log' && ticks.length > 10) {\n    return scale.d3Scale.ticks(3);\n  }\n\n  return ticks;\n}\n/**\n * Ensure uniformly-spaced ticks for 2-day intervals. d3-scale generates\n * ticks for even or odd numbers, which causes varying interval lengths\n * between months.\n */\n\nfunction uniform(ticks, max) {\n  if (ticks.length < 3 || !isMixedDayInterval(ticks)) {\n    return ticks;\n  }\n\n  return createTwoDayInterval(ticks[0], max);\n}\n\nfunction isMixedDayInterval(ticks) {\n  var oneDayInterval = false;\n  var twoDayInterval = false;\n\n  for (var i = 1; i < ticks.length; i++) {\n    oneDayInterval = oneDayInterval || isDayInterval(ticks[i - 1], ticks[i], 1);\n    twoDayInterval = twoDayInterval || isDayInterval(ticks[i - 1], ticks[i], 2);\n  }\n\n  return oneDayInterval && twoDayInterval;\n}\n\nfunction isDayInterval(a, b, difference) {\n  if (difference === void 0) {\n    difference = 1;\n  }\n\n  return Math.abs(differenceInDays(a, b)) === difference;\n}\n\nfunction createTwoDayInterval(start, max) {\n  var result = [];\n  var curr = start;\n\n  while (curr < max) {\n    result.push(curr);\n    curr = add(curr, {\n      days: 2\n    });\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAGA,SAASA,gBAAT,EAA2BC,GAA3B,QAAsC,UAAtC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,aAAvD,C,CAGA;AACA;AACA;AACA;;AACA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAAqC;EACzC,OAAOC,IAAI,CAACC,IAAL,CAAUF,KAAK,GAAGH,kBAAlB,CAAP;AACD;AACD,OAAM,SAAUM,aAAV,CAAwBC,MAAxB,EAAsC;EAC1C,OAAOH,IAAI,CAACC,IAAL,CAAUE,MAAM,GAAGN,kBAAnB,CAAP;AACD;AAED,OAAM,SAAUO,YAAV,CAAuBC,KAAvB,EAA0CC,MAA1C,EAAwD;EAC5D,IAAID,KAAK,CAACE,SAAN,EAAJ,EAAuB;IACrB,OAAOF,KAAK,CAACG,OAAN,CAAcC,KAAd,CAAoBH,MAApB,CAAP;EACD,CAFD,MAEO,IAAID,KAAK,CAACK,MAAN,EAAJ,EAAoB;IACzB,IAAMC,QAAQ,GAAGN,KAAK,CAACG,OAAN,CAAcC,KAAd,CAAoBH,MAApB,CAAjB;IACA,IAAMM,MAAM,GAAGP,KAAK,CAACG,OAAN,CAAcI,MAAd,EAAf;IACA,OAAOC,OAAO,CAACF,QAAD,EAAWC,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAjB,CAAd;EACD,CAJM,MAIA;IACL,OAAOT,KAAK,CAACG,OAAN,CAAcI,MAAd,EAAP;EACD;AACF;AAED,OAAM,SAAUG,YAAV,CAAuBV,KAAvB,EAAiDC,MAAjD,EAA+D;EACnE,IAAMG,KAAK,GAAGJ,KAAK,CAACG,OAAN,CAAcC,KAAd,CAAoBH,MAApB,CAAd,CADmE,CAGnE;EACA;;EACA,IAAID,KAAK,CAACW,SAAN,KAAoB,KAApB,IAA6BP,KAAK,CAACK,MAAN,GAAe,EAAhD,EAAoD;IAClD,OAAOT,KAAK,CAACG,OAAN,CAAcC,KAAd,CAAoB,CAApB,CAAP;EACD;;EAED,OAAOA,KAAP;AACD;AAED;;;;;;AAKA,SAASI,OAAT,CAAiBJ,KAAjB,EAAgCQ,GAAhC,EAAyC;EACvC,IAAIR,KAAK,CAACK,MAAN,GAAe,CAAf,IAAoB,CAACI,kBAAkB,CAACT,KAAD,CAA3C,EAAoD;IAClD,OAAOA,KAAP;EACD;;EAED,OAAOU,oBAAoB,CAACV,KAAK,CAAC,CAAD,CAAN,EAAWQ,GAAX,CAA3B;AACD;;AAED,SAASC,kBAAT,CAA4BT,KAA5B,EAAyC;EACvC,IAAIW,cAAc,GAAG,KAArB;EACA,IAAIC,cAAc,GAAG,KAArB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAAK,CAACK,MAA1B,EAAkCQ,CAAC,EAAnC,EAAuC;IACrCF,cAAc,GAAGA,cAAc,IAAIG,aAAa,CAACd,KAAK,CAACa,CAAC,GAAG,CAAL,CAAN,EAAeb,KAAK,CAACa,CAAD,CAApB,EAAyB,CAAzB,CAAhD;IACAD,cAAc,GAAGA,cAAc,IAAIE,aAAa,CAACd,KAAK,CAACa,CAAC,GAAG,CAAL,CAAN,EAAeb,KAAK,CAACa,CAAD,CAApB,EAAyB,CAAzB,CAAhD;EACD;;EACD,OAAOF,cAAc,IAAIC,cAAzB;AACD;;AAED,SAASE,aAAT,CAAuBC,CAAvB,EAAgCC,CAAhC,EAAyCC,UAAzC,EAAuD;EAAd;IAAAA;EAAc;;EACrD,OAAO1B,IAAI,CAAC2B,GAAL,CAASjC,gBAAgB,CAAC8B,CAAD,EAAIC,CAAJ,CAAzB,MAAqCC,UAA5C;AACD;;AAED,SAASP,oBAAT,CAA8BS,KAA9B,EAA2CX,GAA3C,EAAoD;EAClD,IAAMY,MAAM,GAAW,EAAvB;EACA,IAAIC,IAAI,GAAGF,KAAX;;EACA,OAAOE,IAAI,GAAGb,GAAd,EAAmB;IACjBY,MAAM,CAACE,IAAP,CAAYD,IAAZ;IACAA,IAAI,GAAGnC,GAAG,CAACmC,IAAD,EAAO;MAAEE,IAAI,EAAE;IAAR,CAAP,CAAV;EACD;;EACD,OAAOH,MAAP;AACD","names":["differenceInDays","add","X_TICK_COUNT_RATIO","Y_TICK_COUNT_RATIO","getXTickCount","width","Math","ceil","getYTickCount","height","createXTicks","scale","values","isNumeric","d3Scale","ticks","isTime","rawTicks","domain","uniform","length","createYTicks","scaleType","max","isMixedDayInterval","createTwoDayInterval","oneDayInterval","twoDayInterval","i","isDayInterval","a","b","difference","abs","start","result","curr","push","days"],"sourceRoot":"","sources":["../../../../../src/internal/components/cartesian-chart/ticks.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartScale, NumericChartScale } from '../../components/cartesian-chart/scales';\nimport { differenceInDays, add } from 'date-fns';\nimport { X_TICK_COUNT_RATIO, Y_TICK_COUNT_RATIO } from './constants';\nimport { ChartDataTypes } from './interfaces';\n\n// The number of ticks is currently defined by the length of the scale.\n// The x scale tends to have longer labels, so we're using less ticks for it.\n// These numbers are currently based on first impressions and might change in the future.\n// We might also open up an API in the future to control the amount of ticks displayed.\nexport function getXTickCount(width: number) {\n  return Math.ceil(width / X_TICK_COUNT_RATIO);\n}\nexport function getYTickCount(height: number) {\n  return Math.ceil(height / Y_TICK_COUNT_RATIO);\n}\n\nexport function createXTicks(scale: ChartScale, values: number): ChartDataTypes[] {\n  if (scale.isNumeric()) {\n    return scale.d3Scale.ticks(values);\n  } else if (scale.isTime()) {\n    const rawTicks = scale.d3Scale.ticks(values) as Date[];\n    const domain = scale.d3Scale.domain() as Date[];\n    return uniform(rawTicks, domain[domain.length - 1]);\n  } else {\n    return scale.d3Scale.domain();\n  }\n}\n\nexport function createYTicks(scale: NumericChartScale, values: number): number[] {\n  const ticks = scale.d3Scale.ticks(values);\n\n  // The logarithmic scale sometimes produces a very large amount of (major and minor) ticks,\n  // at which point we need to reduce them significantly for space.\n  if (scale.scaleType === 'log' && ticks.length > 10) {\n    return scale.d3Scale.ticks(3);\n  }\n\n  return ticks;\n}\n\n/**\n * Ensure uniformly-spaced ticks for 2-day intervals. d3-scale generates\n * ticks for even or odd numbers, which causes varying interval lengths\n * between months.\n */\nfunction uniform(ticks: Date[], max: Date): Date[] {\n  if (ticks.length < 3 || !isMixedDayInterval(ticks)) {\n    return ticks;\n  }\n\n  return createTwoDayInterval(ticks[0], max);\n}\n\nfunction isMixedDayInterval(ticks: Date[]) {\n  let oneDayInterval = false;\n  let twoDayInterval = false;\n\n  for (let i = 1; i < ticks.length; i++) {\n    oneDayInterval = oneDayInterval || isDayInterval(ticks[i - 1], ticks[i], 1);\n    twoDayInterval = twoDayInterval || isDayInterval(ticks[i - 1], ticks[i], 2);\n  }\n  return oneDayInterval && twoDayInterval;\n}\n\nfunction isDayInterval(a: Date, b: Date, difference = 1) {\n  return Math.abs(differenceInDays(a, b)) === difference;\n}\n\nfunction createTwoDayInterval(start: Date, max: Date) {\n  const result: Date[] = [];\n  let curr = start;\n  while (curr < max) {\n    result.push(curr);\n    curr = add(curr, { days: 2 });\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}