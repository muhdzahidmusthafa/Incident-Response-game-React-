{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { Drawer } from './drawer';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nexport function ToolsAndSplitPanel(_a) {\n  var _b;\n\n  var ariaLabels = _a.ariaLabels,\n      drawerWidth = _a.drawerWidth,\n      footerHeight = _a.footerHeight,\n      headerHeight = _a.headerHeight,\n      isHidden = _a.isHidden,\n      isMobile = _a.isMobile,\n      onToolsToggle = _a.onToolsToggle,\n      panelHeightStyle = _a.panelHeightStyle,\n      splitPanel = _a.splitPanel,\n      splitPanelContext = _a.splitPanelContext,\n      toggleRefs = _a.toggleRefs,\n      tools = _a.tools,\n      toolsHide = _a.toolsHide,\n      toolsOpen = _a.toolsOpen,\n      toolsWidth = _a.toolsWidth,\n      splitPanelOpen = _a.splitPanelOpen;\n  var splitPanelVisible = splitPanelOpen && Boolean(splitPanel);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    style: {\n      width: drawerWidth\n    }\n  }, React.createElement(\"div\", {\n    className: clsx(styles['panel-wrapper-outer'], (_b = {}, _b[styles.mobile] = isMobile, _b[styles.open] = toolsOpen, _b)),\n    style: __assign({}, isMobile ? {\n      top: headerHeight,\n      bottom: footerHeight\n    } : panelHeightStyle)\n  }, splitPanel && React.createElement(SplitPanelWrapper, {\n    context: splitPanelContext\n  }, splitPanel), !toolsHide && React.createElement(Drawer, {\n    type: \"tools\",\n    isMobile: isMobile,\n    width: toolsWidth,\n    isOpen: toolsOpen,\n    onToggle: onToolsToggle,\n    toggleRefs: toggleRefs,\n    isHidden: isHidden,\n    externalizedToggle: Boolean(splitPanel),\n    contentClassName: clsx(styles.tools, testutilStyles.tools),\n    closeClassName: clsx(styles['tools-close'], testutilStyles['tools-close']),\n    toggleClassName: clsx(styles['tools-toggle'], testutilStyles['tools-toggle']),\n    topOffset: headerHeight,\n    bottomOffset: footerHeight,\n    ariaLabels: ariaLabels,\n    extendRight: 0,\n    hasDividerWithSplitPanel: splitPanelVisible\n  }, tools))));\n}","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAA6BC,MAA7B,QAA2C,UAA3C;AAEA,SAASC,iBAAT,QAAkC,uBAAlC;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAmCA,OAAM,SAAUC,kBAAV,CAA6BC,EAA7B,EAiBoB;;;MAhBxBC,UAAU;MACVC,WAAW;MACXC,YAAY;MACZC,YAAY;MACZC,QAAQ;MACRC,QAAQ;MACRC,aAAa;MACbC,gBAAgB;MAChBC,UAAU;MACVC,iBAAiB;MACjBC,UAAU;MACVC,KAAK;MACLC,SAAS;MACTC,SAAS;MACTC,UAAU;MACVC,cAAc;EAEd,IAAMC,iBAAiB,GAAGD,cAAc,IAAIE,OAAO,CAACT,UAAD,CAAnD;EAEA,OACEf,0CACEA;IACEyB,KAAK,EAAE;MACLC,KAAK,EAAElB;IADF;EADT,GAKER;IACE2B,SAAS,EAAE5B,IAAI,CAACI,MAAM,CAAC,qBAAD,CAAP,GAA8ByB,SAC3CA,GAACzB,MAAM,CAAC0B,MAAR,IAAiBjB,QAD0B,EAE3CgB,GAACzB,MAAM,CAAC2B,IAAR,IAAeV,SAF4B,IAA9B,EADjB;IAKEK,KAAK,eACCb,QAAQ,GAAG;MAAEmB,GAAG,EAAErB,YAAP;MAAqBsB,MAAM,EAAEvB;IAA7B,CAAH,GAAiDK,gBAD1D;EALP,GASGC,UAAU,IAAIf,oBAACE,iBAAD,EAAkB;IAAC+B,OAAO,EAAEjB;EAAV,CAAlB,EAAgDD,UAAhD,CATjB,EAUG,CAACI,SAAD,IACCnB,oBAACC,MAAD,EAAO;IACLiC,IAAI,EAAC,OADA;IAELtB,QAAQ,EAAEA,QAFL;IAGLc,KAAK,EAAEL,UAHF;IAILc,MAAM,EAAEf,SAJH;IAKLgB,QAAQ,EAAEvB,aALL;IAMLI,UAAU,EAAEA,UANP;IAOLN,QAAQ,EAAEA,QAPL;IAQL0B,kBAAkB,EAAEb,OAAO,CAACT,UAAD,CARtB;IASLuB,gBAAgB,EAAEvC,IAAI,CAACI,MAAM,CAACe,KAAR,EAAed,cAAc,CAACc,KAA9B,CATjB;IAULqB,cAAc,EAAExC,IAAI,CAACI,MAAM,CAAC,aAAD,CAAP,EAAwBC,cAAc,CAAC,aAAD,CAAtC,CAVf;IAWLoC,eAAe,EAAEzC,IAAI,CAACI,MAAM,CAAC,cAAD,CAAP,EAAyBC,cAAc,CAAC,cAAD,CAAvC,CAXhB;IAYLqC,SAAS,EAAE/B,YAZN;IAaLgC,YAAY,EAAEjC,YAbT;IAcLF,UAAU,EAAEA,UAdP;IAeLoC,WAAW,EAAE,CAfR;IAgBLC,wBAAwB,EAAErB;EAhBrB,CAAP,EAkBGL,KAlBH,CAXJ,CALF,CADF,CADF;AA2CD","names":["clsx","React","Drawer","SplitPanelWrapper","styles","testutilStyles","ToolsAndSplitPanel","_a","ariaLabels","drawerWidth","footerHeight","headerHeight","isHidden","isMobile","onToolsToggle","panelHeightStyle","splitPanel","splitPanelContext","toggleRefs","tools","toolsHide","toolsOpen","toolsWidth","splitPanelOpen","splitPanelVisible","Boolean","style","width","className","_b","mobile","open","top","bottom","context","type","isOpen","onToggle","externalizedToggle","contentClassName","closeClassName","toggleClassName","topOffset","bottomOffset","extendRight","hasDividerWithSplitPanel"],"sourceRoot":"","sources":["../../../src/app-layout/tools-and-split-panel.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { DesktopDrawerProps, Drawer } from './drawer';\nimport { AppLayoutProps } from './interfaces';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { SplitPanelContextProps } from '../internal/context/split-panel-context';\n\ninterface ToolsAndSplitPanelProps {\n  toolsHide: boolean;\n  toolsOpen: boolean;\n  isHidden: DesktopDrawerProps['isHidden'];\n\n  splitPanelOpen: boolean;\n\n  drawerWidth: number;\n  toolsWidth: number;\n  splitPanelReportedSize: number;\n  closedDrawerWidth: number;\n\n  headerHeight: DesktopDrawerProps['topOffset'];\n  footerHeight: DesktopDrawerProps['bottomOffset'];\n  panelHeightStyle: ReturnType<typeof useContentHeight>['panelHeightStyle'];\n  contentHeightStyle: ReturnType<typeof useContentHeight>['contentHeightStyle'];\n\n  tools: React.ReactNode;\n  splitPanel?: React.ReactNode;\n  splitPanelContext: SplitPanelContextProps;\n\n  ariaLabels: AppLayoutProps['ariaLabels'];\n\n  disableContentPaddings: AppLayoutProps['disableContentPaddings'];\n  isMobile: boolean;\n  isMotionEnabled: boolean;\n\n  onToolsToggle: DesktopDrawerProps['onToggle'];\n\n  toggleRefs: DesktopDrawerProps['toggleRefs'];\n}\n\nexport function ToolsAndSplitPanel({\n  ariaLabels,\n  drawerWidth,\n  footerHeight,\n  headerHeight,\n  isHidden,\n  isMobile,\n  onToolsToggle,\n  panelHeightStyle,\n  splitPanel,\n  splitPanelContext,\n  toggleRefs,\n  tools,\n  toolsHide,\n  toolsOpen,\n  toolsWidth,\n  splitPanelOpen,\n}: ToolsAndSplitPanelProps) {\n  const splitPanelVisible = splitPanelOpen && Boolean(splitPanel);\n\n  return (\n    <>\n      <div\n        style={{\n          width: drawerWidth,\n        }}\n      >\n        <div\n          className={clsx(styles['panel-wrapper-outer'], {\n            [styles.mobile]: isMobile,\n            [styles.open]: toolsOpen,\n          })}\n          style={{\n            ...(isMobile ? { top: headerHeight, bottom: footerHeight } : panelHeightStyle),\n          }}\n        >\n          {splitPanel && <SplitPanelWrapper context={splitPanelContext}>{splitPanel}</SplitPanelWrapper>}\n          {!toolsHide && (\n            <Drawer\n              type=\"tools\"\n              isMobile={isMobile}\n              width={toolsWidth}\n              isOpen={toolsOpen}\n              onToggle={onToolsToggle}\n              toggleRefs={toggleRefs}\n              isHidden={isHidden}\n              externalizedToggle={Boolean(splitPanel)}\n              contentClassName={clsx(styles.tools, testutilStyles.tools)}\n              closeClassName={clsx(styles['tools-close'], testutilStyles['tools-close'])}\n              toggleClassName={clsx(styles['tools-toggle'], testutilStyles['tools-toggle'])}\n              topOffset={headerHeight}\n              bottomOffset={footerHeight}\n              ariaLabels={ariaLabels}\n              extendRight={0}\n              hasDividerWithSplitPanel={splitPanelVisible}\n            >\n              {tools}\n            </Drawer>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}