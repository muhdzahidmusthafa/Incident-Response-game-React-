{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalCheckbox from '../../checkbox/internal';\nimport RadioButton from '../../radio-group/radio-button';\nimport styles from './styles.css.js';\nexport default function SelectionControl(_a) {\n  var selectionType = _a.selectionType,\n      _b = _a.indeterminate,\n      indeterminate = _b === void 0 ? false : _b,\n      onShiftToggle = _a.onShiftToggle,\n      onFocusUp = _a.onFocusUp,\n      onFocusDown = _a.onFocusDown,\n      name = _a.name,\n      ariaLabel = _a.ariaLabel,\n      sharedProps = __rest(_a, [\"selectionType\", \"indeterminate\", \"onShiftToggle\", \"onFocusUp\", \"onFocusDown\", \"name\", \"ariaLabel\"]);\n\n  var controlId = useUniqueId();\n  var isMultiSelection = selectionType === 'multi';\n\n  var setShiftState = function (event) {\n    if (isMultiSelection) {\n      onShiftToggle && onShiftToggle(event.shiftKey);\n    }\n  };\n\n  var onMouseDownHandler = function (event) {\n    setShiftState(event);\n\n    if (isMultiSelection) {\n      // To overcome an issue\n      // If you shift+click or ctrl+click on a label for a checkbox, checkbox is not checked.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=559506\n      event.preventDefault();\n    }\n  }; // native checkboxes do not have focus move via keyboard, we implement it here programmatically\n\n\n  var handleKeyDown = function (event) {\n    setShiftState(event);\n\n    if (isMultiSelection) {\n      if (event.keyCode === KeyCode.up) {\n        event.preventDefault();\n        onFocusUp && onFocusUp(event);\n      }\n\n      if (event.keyCode === KeyCode.down) {\n        event.preventDefault();\n        onFocusDown && onFocusDown(event);\n      }\n    }\n  };\n\n  var handleClick = function (event) {\n    var target = event.currentTarget;\n    var nativeInput = target.tagName === 'INPUT' ? target : target.querySelector('input'); // Clicking on input, does not focus it on Firefox (AWSUI-11345)\n\n    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();\n  };\n\n  var selector = isMultiSelection ? React.createElement(InternalCheckbox, __assign({}, sharedProps, {\n    controlId: controlId,\n    withoutLabel: true,\n    indeterminate: indeterminate\n  })) : React.createElement(RadioButton, __assign({}, sharedProps, {\n    controlId: controlId,\n    withoutLabel: true,\n    name: name,\n    value: '',\n    label: ''\n  }));\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    onKeyDown: handleKeyDown,\n    onKeyUp: setShiftState,\n    onMouseDown: onMouseDownHandler,\n    onMouseUp: setShiftState,\n    onClick: handleClick,\n    htmlFor: controlId,\n    className: clsx(styles.label, styles.root),\n    \"aria-label\": ariaLabel\n  }, selector), React.createElement(\"span\", {\n    className: clsx(styles.stud),\n    \"aria-hidden\": true\n  }, \"\\u00A0\"));\n}","map":{"version":3,"mappings":"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","names":["clsx","React","KeyCode","useUniqueId","InternalCheckbox","RadioButton","styles","SelectionControl","_a","_b","indeterminate","onShiftToggle","onFocusUp","onFocusDown","name","ariaLabel","sharedProps","controlId","isMultiSelection","selectionType","setShiftState","event","shiftKey","onMouseDownHandler","preventDefault","handleKeyDown","keyCode","up","down","handleClick","target","currentTarget","nativeInput","tagName","querySelector","focus","selector","__assign","withoutLabel","value","label","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onClick","htmlFor","className","root","stud"],"sourceRoot":"","sources":["../../../../src/table/selection-control/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { KeyboardEvent, KeyboardEventHandler, MouseEvent } from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalCheckbox from '../../checkbox/internal';\nimport RadioButton from '../../radio-group/radio-button';\n\nimport { TableProps } from '../interfaces';\nimport styles from './styles.css.js';\n\nexport interface SelectionControlProps {\n  selectionType: TableProps['selectionType'];\n  checked: boolean;\n  disabled: boolean;\n  name: string;\n  indeterminate?: boolean;\n  onChange?: () => void;\n  onShiftToggle?(shiftPressed: boolean): void;\n  onFocusUp?: KeyboardEventHandler;\n  onFocusDown?: KeyboardEventHandler;\n  ariaLabel?: string;\n  tabIndex?: -1;\n}\n\nexport default function SelectionControl({\n  selectionType,\n  indeterminate = false,\n  onShiftToggle,\n  onFocusUp,\n  onFocusDown,\n  name,\n  ariaLabel,\n  ...sharedProps\n}: SelectionControlProps) {\n  const controlId = useUniqueId();\n  const isMultiSelection = selectionType === 'multi';\n\n  const setShiftState = (event: KeyboardEvent | MouseEvent) => {\n    if (isMultiSelection) {\n      onShiftToggle && onShiftToggle(event.shiftKey);\n    }\n  };\n\n  const onMouseDownHandler = (event: MouseEvent) => {\n    setShiftState(event);\n    if (isMultiSelection) {\n      // To overcome an issue\n      // If you shift+click or ctrl+click on a label for a checkbox, checkbox is not checked.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=559506\n      event.preventDefault();\n    }\n  };\n\n  // native checkboxes do not have focus move via keyboard, we implement it here programmatically\n  const handleKeyDown = (event: KeyboardEvent) => {\n    setShiftState(event);\n    if (isMultiSelection) {\n      if (event.keyCode === KeyCode.up) {\n        event.preventDefault();\n        onFocusUp && onFocusUp(event);\n      }\n      if (event.keyCode === KeyCode.down) {\n        event.preventDefault();\n        onFocusDown && onFocusDown(event);\n      }\n    }\n  };\n\n  const handleClick = (event: MouseEvent) => {\n    const target = event.currentTarget;\n    const nativeInput = (target.tagName === 'INPUT' ? target : target.querySelector('input')) as HTMLInputElement;\n    // Clicking on input, does not focus it on Firefox (AWSUI-11345)\n    nativeInput?.focus();\n  };\n\n  const selector = isMultiSelection ? (\n    <InternalCheckbox {...sharedProps} controlId={controlId} withoutLabel={true} indeterminate={indeterminate} />\n  ) : (\n    <RadioButton {...sharedProps} controlId={controlId} withoutLabel={true} name={name} value={''} label={''} />\n  );\n\n  return (\n    <>\n      <label\n        onKeyDown={handleKeyDown}\n        onKeyUp={setShiftState}\n        onMouseDown={onMouseDownHandler}\n        onMouseUp={setShiftState}\n        onClick={handleClick}\n        htmlFor={controlId}\n        className={clsx(styles.label, styles.root)}\n        aria-label={ariaLabel}\n      >\n        {selector}\n      </label>\n      {/* HACK: IE11 collapses td's height to 0, if it contains only an absouletely positioned label */}\n      <span className={clsx(styles.stud)} aria-hidden={true}>\n        &nbsp;\n      </span>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}