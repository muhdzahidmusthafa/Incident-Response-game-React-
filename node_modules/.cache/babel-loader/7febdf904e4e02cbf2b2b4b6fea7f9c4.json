{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useRef, useState, useMemo } from 'react';\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalAutosuggest from '../autosuggest/internal';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { KeyCode } from '../internal/keycode';\nimport SelectToggle from '../token-group/toggle';\nimport { generateUniqueId } from '../internal/hooks/use-unique-id/index';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { Token } from './token';\nimport { getQueryActions, parseText, getAutosuggestOptions } from './controller';\nimport { useLoadItems } from './use-load-items';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nvar PropertyFilter = React.forwardRef(function (_a, ref) {\n  var disabled = _a.disabled,\n      i18nStrings = _a.i18nStrings,\n      countText = _a.countText,\n      query = _a.query,\n      hideOperations = _a.hideOperations,\n      onChange = _a.onChange,\n      filteringProperties = _a.filteringProperties,\n      filteringOptions = _a.filteringOptions,\n      customGroupsText = _a.customGroupsText,\n      _b = _a.disableFreeTextFiltering,\n      disableFreeTextFiltering = _b === void 0 ? false : _b,\n      onLoadItems = _a.onLoadItems,\n      virtualScroll = _a.virtualScroll,\n      customControl = _a.customControl,\n      filteringEmpty = _a.filteringEmpty,\n      filteringLoadingText = _a.filteringLoadingText,\n      filteringFinishedText = _a.filteringFinishedText,\n      filteringErrorText = _a.filteringErrorText,\n      filteringRecoveryText = _a.filteringRecoveryText,\n      filteringStatusType = _a.filteringStatusType,\n      asyncProperties = _a.asyncProperties,\n      tokenLimit = _a.tokenLimit,\n      expandToViewport = _a.expandToViewport,\n      rest = __rest(_a, [\"disabled\", \"i18nStrings\", \"countText\", \"query\", \"hideOperations\", \"onChange\", \"filteringProperties\", \"filteringOptions\", \"customGroupsText\", \"disableFreeTextFiltering\", \"onLoadItems\", \"virtualScroll\", \"customControl\", \"filteringEmpty\", \"filteringLoadingText\", \"filteringFinishedText\", \"filteringErrorText\", \"filteringRecoveryText\", \"filteringStatusType\", \"asyncProperties\", \"tokenLimit\", \"expandToViewport\"]);\n\n  var __internalRootRef = useBaseComponent('PropertyFilter').__internalRootRef;\n\n  var inputRef = useRef(null);\n  var preventFocus = useRef(false);\n  var baseProps = getBaseProps(rest);\n  useForwardFocus(ref, inputRef);\n  var tokens = query.tokens,\n      operation = query.operation;\n  var showResults = (tokens === null || tokens === void 0 ? void 0 : tokens.length) && !disabled;\n\n  var _c = getQueryActions(query, onChange, inputRef, preventFocus),\n      addToken = _c.addToken,\n      removeToken = _c.removeToken,\n      setToken = _c.setToken,\n      setOperation = _c.setOperation,\n      removeAllTokens = _c.removeAllTokens;\n\n  var _d = useState(''),\n      filteringText = _d[0],\n      setFilteringText = _d[1];\n\n  var parsedText = parseText(filteringText, filteringProperties, disableFreeTextFiltering);\n  var autosuggestOptions = getAutosuggestOptions(parsedText, filteringOptions, filteringProperties, customGroupsText, i18nStrings);\n\n  var createToken = function (currentText) {\n    var parsedText = parseText(currentText, filteringProperties, disableFreeTextFiltering);\n    var newToken;\n\n    switch (parsedText.step) {\n      case 'property':\n        {\n          newToken = {\n            propertyKey: parsedText.property.key,\n            operator: parsedText.operator,\n            value: parsedText.value\n          };\n          break;\n        }\n\n      case 'free-text':\n        {\n          newToken = {\n            operator: parsedText.operator || ':',\n            value: parsedText.value\n          };\n          break;\n        }\n\n      case 'operator':\n        {\n          newToken = {\n            operator: ':',\n            value: currentText\n          };\n          break;\n        }\n    }\n\n    if (disableFreeTextFiltering && !('propertyKey' in newToken)) {\n      return;\n    }\n\n    addToken(newToken);\n    setFilteringText('');\n  };\n\n  var ignoreKeyDown = useRef(false);\n\n  var handleKeyDown = function (event) {\n    if (filteringText && !ignoreKeyDown.current && event.detail.keyCode === KeyCode.enter) {\n      createToken(filteringText);\n    }\n  };\n\n  var getLoadMoreDetail = function (parsedText, filteringText) {\n    var loadMoreDetail = {\n      filteringProperty: undefined,\n      filteringText: filteringText,\n      filteringOperator: undefined\n    };\n\n    if (parsedText.step === 'property') {\n      loadMoreDetail.filteringProperty = parsedText.property;\n      loadMoreDetail.filteringText = parsedText.value;\n      loadMoreDetail.filteringOperator = parsedText.operator;\n    }\n\n    return loadMoreDetail;\n  };\n\n  var loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);\n  var inputLoadItemsHandlers = useLoadItems(onLoadItems, loadMoreDetail.filteringText, loadMoreDetail.filteringProperty, loadMoreDetail.filteringText, loadMoreDetail.filteringOperator);\n  var asyncProps = {\n    empty: filteringEmpty,\n    loadingText: filteringLoadingText,\n    finishedText: filteringFinishedText,\n    errorText: filteringErrorText,\n    recoveryText: filteringRecoveryText,\n    statusType: filteringStatusType\n  };\n  var asyncAutosuggestProps = !!filteringText.length || asyncProperties ? __assign(__assign({}, inputLoadItemsHandlers), asyncProps) : {};\n\n  var handleSelected = function (event) {\n    // The ignoreKeyDown flag makes sure `createToken` routine runs only once. Autosuggest's `onKeyDown` fires,\n    // when an item is selected from the list using \"enter\" key.\n    ignoreKeyDown.current = true;\n    setTimeout(function () {\n      ignoreKeyDown.current = false;\n    }, 0);\n    var option = event.detail;\n    var value = option.value || '';\n\n    if ('tokenValue' in option) {\n      createToken(option.tokenValue);\n      return;\n    } // create a token from the 'use' option\n\n\n    if (!('keepOpenOnSelect' in option)) {\n      createToken(value);\n      return;\n    } // stop dropdown from closing\n\n\n    event.preventDefault();\n    var loadMoreDetail = getLoadMoreDetail(parseText(value, filteringProperties, disableFreeTextFiltering), value);\n    fireNonCancelableEvent(onLoadItems, __assign(__assign({}, loadMoreDetail), {\n      firstPage: true,\n      samePage: false\n    }));\n  };\n\n  var _e = useState(false),\n      tokensExpanded = _e[0],\n      setTokensExpanded = _e[1];\n\n  var toggleExpandedTokens = function () {\n    return setTokensExpanded(!tokensExpanded);\n  };\n\n  var hasHiddenOptions = tokenLimit !== undefined && tokens.length > tokenLimit;\n  var slicedTokens = hasHiddenOptions && !tokensExpanded ? tokens.slice(0, tokenLimit) : tokens;\n  var controlId = useMemo(function () {\n    return generateUniqueId();\n  }, []);\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", {\n    className: styles['search-field']\n  }, customControl && React.createElement(\"div\", {\n    className: styles['custom-control']\n  }, customControl), React.createElement(InternalAutosuggest, __assign({\n    virtualScroll: virtualScroll,\n    enteredTextLabel: i18nStrings.enteredTextLabel,\n    ref: inputRef,\n    className: styles.input,\n    ariaLabel: i18nStrings.filteringAriaLabel,\n    placeholder: i18nStrings.filteringPlaceholder,\n    value: filteringText,\n    disabled: disabled,\n    onKeyDown: handleKeyDown\n  }, autosuggestOptions, {\n    onChange: function (event) {\n      return setFilteringText(event.detail.value);\n    },\n    empty: filteringEmpty\n  }, asyncAutosuggestProps, {\n    expandToViewport: expandToViewport,\n    __disableShowAll: true,\n    __dropdownWidth: 300,\n    __onOptionClick: handleSelected,\n    __onOpen: function (e) {\n      if (preventFocus.current) {\n        e.preventDefault();\n        preventFocus.current = false;\n      }\n    },\n    __hideEnteredTextOption: disableFreeTextFiltering && parsedText.step !== 'property'\n  })), React.createElement(\"span\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    className: clsx(styles.results, showResults && styles['results-visible'])\n  }, showResults ? countText : '')), tokens && tokens.length > 0 && React.createElement(\"div\", {\n    className: styles.tokens\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\",\n    id: controlId\n  }, slicedTokens.map(function (token, index) {\n    return React.createElement(Token, {\n      token: token,\n      first: index === 0,\n      operation: operation,\n      key: index,\n      removeToken: function () {\n        return removeToken(index);\n      },\n      setToken: function (newToken) {\n        return setToken(index, newToken);\n      },\n      setOperation: setOperation,\n      filteringOptions: filteringOptions,\n      filteringProperties: filteringProperties,\n      asyncProps: asyncProps,\n      onLoadItems: onLoadItems,\n      i18nStrings: i18nStrings,\n      asyncProperties: asyncProperties,\n      hideOperations: hideOperations,\n      customGroupsText: customGroupsText,\n      disableFreeTextFiltering: disableFreeTextFiltering,\n      disabled: disabled,\n      expandToViewport: expandToViewport\n    });\n  }), hasHiddenOptions && React.createElement(\"div\", {\n    className: styles['toggle-collapsed']\n  }, React.createElement(SelectToggle, {\n    controlId: controlId,\n    allHidden: tokenLimit === 0,\n    expanded: tokensExpanded,\n    numberOfHiddenOptions: tokens.length - slicedTokens.length,\n    i18nStrings: {\n      limitShowFewer: i18nStrings.tokenLimitShowFewer,\n      limitShowMore: i18nStrings.tokenLimitShowMore\n    },\n    onClick: toggleExpandedTokens\n  })), React.createElement(\"div\", {\n    className: styles.separator\n  }), React.createElement(InternalButton, {\n    onClick: removeAllTokens,\n    className: styles['remove-all'],\n    disabled: disabled\n  }, i18nStrings.clearFiltersText))));\n});\napplyDisplayName(PropertyFilter, 'PropertyFilter');\nexport default PropertyFilter;","map":{"version":3,"mappings":"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","names":["clsx","React","useRef","useState","useMemo","InternalSpaceBetween","InternalAutosuggest","InternalButton","getBaseProps","useForwardFocus","applyDisplayName","KeyCode","SelectToggle","generateUniqueId","fireNonCancelableEvent","Token","getQueryActions","parseText","getAutosuggestOptions","useLoadItems","styles","useBaseComponent","PropertyFilter","forwardRef","_a","ref","i18nStrings","countText","query","hideOperations","onChange","filteringProperties","filteringOptions","customGroupsText","_b","disableFreeTextFiltering","onLoadItems","virtualScroll","customControl","filteringEmpty","filteringLoadingText","filteringFinishedText","filteringErrorText","filteringRecoveryText","filteringStatusType","asyncProperties","tokenLimit","expandToViewport","rest","__internalRootRef","inputRef","preventFocus","baseProps","operation","showResults","length","disabled","addToken","removeToken","setToken","setOperation","removeAllTokens","filteringText","setFilteringText","parsedText","autosuggestOptions","createToken","currentText","newToken","step","propertyKey","property","key","operator","value","ignoreKeyDown","handleKeyDown","current","event","detail","keyCode","enter","getLoadMoreDetail","loadMoreDetail","filteringProperty","undefined","filteringOperator","inputLoadItemsHandlers","asyncProps","empty","loadingText","finishedText","errorText","recoveryText","statusType","asyncAutosuggestProps","__assign","handleSelected","setTimeout","option","tokenValue","preventDefault","firstPage","samePage","tokensExpanded","setTokensExpanded","toggleExpandedTokens","hasHiddenOptions","tokens","slicedTokens","slice","controlId","className","root","enteredTextLabel","input","ariaLabel","filteringAriaLabel","placeholder","filteringPlaceholder","onKeyDown","__disableShowAll","__dropdownWidth","__onOptionClick","__onOpen","e","__hideEnteredTextOption","results","size","direction","id","map","token","index","first","allHidden","expanded","numberOfHiddenOptions","limitShowFewer","tokenLimitShowFewer","limitShowMore","tokenLimitShowMore","onClick","separator","clearFiltersText"],"sourceRoot":"","sources":["../../../src/property-filter/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef, useState, useMemo } from 'react';\n\nimport InternalSpaceBetween from '../space-between/internal';\nimport InternalAutosuggest, { InternalAutosuggestProps } from '../autosuggest/internal';\nimport { InternalButton } from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { KeyCode } from '../internal/keycode';\nimport SelectToggle from '../token-group/toggle';\nimport { generateUniqueId } from '../internal/hooks/use-unique-id/index';\nimport { fireNonCancelableEvent } from '../internal/events';\n\nimport { PropertyFilterProps } from './interfaces';\nimport { Token } from './token';\nimport { getQueryActions, parseText, getAutosuggestOptions, ParsedText } from './controller';\nimport { useLoadItems } from './use-load-items';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\n\nexport { PropertyFilterProps };\n\nconst PropertyFilter = React.forwardRef(\n  (\n    {\n      disabled,\n      i18nStrings,\n      countText,\n      query,\n      hideOperations,\n      onChange,\n      filteringProperties,\n      filteringOptions,\n      customGroupsText,\n      disableFreeTextFiltering = false,\n      onLoadItems,\n      virtualScroll,\n      customControl,\n      filteringEmpty,\n      filteringLoadingText,\n      filteringFinishedText,\n      filteringErrorText,\n      filteringRecoveryText,\n      filteringStatusType,\n      asyncProperties,\n      tokenLimit,\n      expandToViewport,\n      ...rest\n    }: PropertyFilterProps,\n    ref: React.Ref<PropertyFilterProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent('PropertyFilter');\n    const inputRef = useRef<HTMLInputElement>(null);\n    const preventFocus = useRef<boolean>(false);\n    const baseProps = getBaseProps(rest);\n    useForwardFocus(ref, inputRef);\n    const { tokens, operation } = query;\n    const showResults = tokens?.length && !disabled;\n    const { addToken, removeToken, setToken, setOperation, removeAllTokens } = getQueryActions(\n      query,\n      onChange,\n      inputRef,\n      preventFocus\n    );\n    const [filteringText, setFilteringText] = useState<string>('');\n    const parsedText = parseText(filteringText, filteringProperties, disableFreeTextFiltering);\n    const autosuggestOptions = getAutosuggestOptions(\n      parsedText,\n      filteringOptions,\n      filteringProperties,\n      customGroupsText,\n      i18nStrings\n    );\n\n    const createToken = (currentText: string) => {\n      const parsedText = parseText(currentText, filteringProperties, disableFreeTextFiltering);\n      let newToken: PropertyFilterProps.Token;\n      switch (parsedText.step) {\n        case 'property': {\n          newToken = {\n            propertyKey: parsedText.property.key,\n            operator: parsedText.operator,\n            value: parsedText.value,\n          };\n          break;\n        }\n        case 'free-text': {\n          newToken = {\n            operator: parsedText.operator || ':',\n            value: parsedText.value,\n          };\n          break;\n        }\n        case 'operator': {\n          newToken = {\n            operator: ':',\n            value: currentText,\n          };\n          break;\n        }\n      }\n      if (disableFreeTextFiltering && !('propertyKey' in newToken)) {\n        return;\n      }\n      addToken(newToken);\n      setFilteringText('');\n    };\n    const ignoreKeyDown = useRef<boolean>(false);\n    const handleKeyDown: InternalAutosuggestProps['onKeyDown'] = event => {\n      if (filteringText && !ignoreKeyDown.current && event.detail.keyCode === KeyCode.enter) {\n        createToken(filteringText);\n      }\n    };\n    const getLoadMoreDetail = (parsedText: ParsedText, filteringText: string) => {\n      const loadMoreDetail: {\n        filteringProperty: PropertyFilterProps.FilteringProperty | undefined;\n        filteringText: string;\n        filteringOperator: PropertyFilterProps.ComparisonOperator | undefined;\n      } = {\n        filteringProperty: undefined,\n        filteringText,\n        filteringOperator: undefined,\n      };\n      if (parsedText.step === 'property') {\n        loadMoreDetail.filteringProperty = parsedText.property;\n        loadMoreDetail.filteringText = parsedText.value;\n        loadMoreDetail.filteringOperator = parsedText.operator;\n      }\n      return loadMoreDetail;\n    };\n    const loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);\n    const inputLoadItemsHandlers = useLoadItems(\n      onLoadItems,\n      loadMoreDetail.filteringText,\n      loadMoreDetail.filteringProperty,\n      loadMoreDetail.filteringText,\n      loadMoreDetail.filteringOperator\n    );\n    const asyncProps = {\n      empty: filteringEmpty,\n      loadingText: filteringLoadingText,\n      finishedText: filteringFinishedText,\n      errorText: filteringErrorText,\n      recoveryText: filteringRecoveryText,\n      statusType: filteringStatusType,\n    };\n    const asyncAutosuggestProps =\n      !!filteringText.length || asyncProperties\n        ? {\n            ...inputLoadItemsHandlers,\n            ...asyncProps,\n          }\n        : {};\n    const handleSelected: InternalAutosuggestProps['__onOptionClick'] = event => {\n      // The ignoreKeyDown flag makes sure `createToken` routine runs only once. Autosuggest's `onKeyDown` fires,\n      // when an item is selected from the list using \"enter\" key.\n      ignoreKeyDown.current = true;\n      setTimeout(() => {\n        ignoreKeyDown.current = false;\n      }, 0);\n      const { detail: option } = event;\n      const value = option.value || '';\n      if ('tokenValue' in option) {\n        createToken((option as { tokenValue: string }).tokenValue);\n        return;\n      }\n      // create a token from the 'use' option\n      if (!('keepOpenOnSelect' in option)) {\n        createToken(value);\n        return;\n      }\n\n      // stop dropdown from closing\n      event.preventDefault();\n      const loadMoreDetail = getLoadMoreDetail(parseText(value, filteringProperties, disableFreeTextFiltering), value);\n      fireNonCancelableEvent(onLoadItems, { ...loadMoreDetail, firstPage: true, samePage: false });\n    };\n    const [tokensExpanded, setTokensExpanded] = useState(false);\n    const toggleExpandedTokens = () => setTokensExpanded(!tokensExpanded);\n    const hasHiddenOptions = tokenLimit !== undefined && tokens.length > tokenLimit;\n    const slicedTokens = hasHiddenOptions && !tokensExpanded ? tokens.slice(0, tokenLimit) : tokens;\n    const controlId = useMemo(() => generateUniqueId(), []);\n    return (\n      <span {...baseProps} className={clsx(baseProps.className, styles.root)} ref={__internalRootRef}>\n        <div className={styles['search-field']}>\n          {customControl && <div className={styles['custom-control']}>{customControl}</div>}\n          <InternalAutosuggest\n            virtualScroll={virtualScroll}\n            enteredTextLabel={i18nStrings.enteredTextLabel}\n            ref={inputRef}\n            className={styles.input}\n            ariaLabel={i18nStrings.filteringAriaLabel}\n            placeholder={i18nStrings.filteringPlaceholder}\n            value={filteringText}\n            disabled={disabled}\n            onKeyDown={handleKeyDown}\n            {...autosuggestOptions}\n            onChange={event => setFilteringText(event.detail.value)}\n            empty={filteringEmpty}\n            {...asyncAutosuggestProps}\n            expandToViewport={expandToViewport}\n            __disableShowAll={true}\n            __dropdownWidth={300}\n            __onOptionClick={handleSelected}\n            __onOpen={e => {\n              if (preventFocus.current) {\n                e.preventDefault();\n                preventFocus.current = false;\n              }\n            }}\n            __hideEnteredTextOption={disableFreeTextFiltering && parsedText.step !== 'property'}\n          />\n          <span\n            aria-live=\"polite\"\n            aria-atomic=\"true\"\n            className={clsx(styles.results, showResults && styles['results-visible'])}\n          >\n            {showResults ? countText : ''}\n          </span>\n        </div>\n        {tokens && tokens.length > 0 && (\n          <div className={styles.tokens}>\n            <InternalSpaceBetween size=\"xs\" direction=\"horizontal\" id={controlId}>\n              {slicedTokens.map((token, index) => (\n                <Token\n                  token={token}\n                  first={index === 0}\n                  operation={operation}\n                  key={index}\n                  removeToken={() => removeToken(index)}\n                  setToken={(newToken: PropertyFilterProps.Token) => setToken(index, newToken)}\n                  setOperation={setOperation}\n                  filteringOptions={filteringOptions}\n                  filteringProperties={filteringProperties}\n                  asyncProps={asyncProps}\n                  onLoadItems={onLoadItems}\n                  i18nStrings={i18nStrings}\n                  asyncProperties={asyncProperties}\n                  hideOperations={hideOperations}\n                  customGroupsText={customGroupsText}\n                  disableFreeTextFiltering={disableFreeTextFiltering}\n                  disabled={disabled}\n                  expandToViewport={expandToViewport}\n                />\n              ))}\n              {hasHiddenOptions && (\n                <div className={styles['toggle-collapsed']}>\n                  <SelectToggle\n                    controlId={controlId}\n                    allHidden={tokenLimit === 0}\n                    expanded={tokensExpanded}\n                    numberOfHiddenOptions={tokens.length - slicedTokens.length}\n                    i18nStrings={{\n                      limitShowFewer: i18nStrings.tokenLimitShowFewer,\n                      limitShowMore: i18nStrings.tokenLimitShowMore,\n                    }}\n                    onClick={toggleExpandedTokens}\n                  />\n                </div>\n              )}\n              <div className={styles.separator} />\n              <InternalButton onClick={removeAllTokens} className={styles['remove-all']} disabled={disabled}>\n                {i18nStrings.clearFiltersText}\n              </InternalButton>\n            </InternalSpaceBetween>\n          </div>\n        )}\n      </span>\n    );\n  }\n);\n\napplyDisplayName(PropertyFilter, 'PropertyFilter');\nexport default PropertyFilter;\n"]},"metadata":{},"sourceType":"module"}