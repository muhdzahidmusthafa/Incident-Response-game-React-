{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport Tooltip from '../tooltip.js';\nimport useHiddenDescription from '../utils/use-hidden-description.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\n\nvar MobileExpandableCategoryElement = function (_a) {\n  var _b, _c, _d;\n\n  var item = _a.item,\n      onItemActivate = _a.onItemActivate,\n      onGroupToggle = _a.onGroupToggle,\n      targetItem = _a.targetItem,\n      isHighlighted = _a.isHighlighted,\n      isExpanded = _a.isExpanded,\n      highlightItem = _a.highlightItem,\n      disabled = _a.disabled,\n      variant = _a.variant;\n  var highlighted = isHighlighted(item);\n  var expanded = isExpanded(item);\n  var triggerRef = React.useRef(null);\n  useEffect(function () {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  var onClick = function (e) {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n\n  var onHover = function (event) {\n    event.preventDefault();\n    highlightItem(item);\n  };\n\n  var isDisabledWithReason = !!item.disabledReason && item.disabled;\n\n  var _e = useHiddenDescription(item.disabledReason),\n      targetProps = _e.targetProps,\n      descriptionEl = _e.descriptionEl;\n\n  var trigger = item.text && React.createElement(\"span\", __assign({\n    className: clsx(styles.header, styles['expandable-header'], styles[\"variant-\".concat(variant)], (_b = {}, _b[styles.highlighted] = highlighted, _b[styles['rolled-down']] = expanded, _b[styles.disabled] = disabled, _b)),\n    // We are using the roving tabindex technique to manage the focus state of the dropdown.\n    // The current element will always have tabindex=0 which means that it can be tabbed to,\n    // while all other items have tabindex=-1 so we can focus them when necessary.\n    tabIndex: highlighted ? 0 : -1,\n    ref: triggerRef\n  }, getMenuItemProps({\n    parent: true,\n    disabled: disabled,\n    expanded: expanded\n  }), isDisabledWithReason ? targetProps : {}), item.text, React.createElement(\"span\", {\n    className: clsx(styles['expand-icon'], (_c = {}, _c[styles['expand-icon-up']] = expanded, _c))\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\"\n  })));\n  var content;\n\n  if (isDisabledWithReason) {\n    content = React.createElement(React.Fragment, null, descriptionEl, React.createElement(Tooltip, {\n      content: item.disabledReason\n    }, trigger));\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = React.createElement(MobileExpandableGroup, {\n      open: expanded,\n      trigger: trigger\n    }, item.items && expanded && React.createElement(\"ul\", {\n      role: \"menu\",\n      \"aria-label\": item.text,\n      className: clsx(styles['items-list-container'])\n    }, React.createElement(ItemsList, {\n      items: item.items,\n      onItemActivate: onItemActivate,\n      onGroupToggle: onGroupToggle,\n      targetItem: targetItem,\n      isHighlighted: isHighlighted,\n      isExpanded: isExpanded,\n      highlightItem: highlightItem,\n      hasCategoryHeader: true,\n      variant: variant\n    })));\n  }\n\n  return React.createElement(\"li\", {\n    className: clsx(styles.category, styles[\"variant-\".concat(variant)], styles.expandable, (_d = {}, _d[styles.expanded] = expanded, _d[styles.disabled] = disabled, _d[styles.highlighted] = highlighted || expanded, _d[styles.expandable] = true, _d)),\n    role: \"presentation\",\n    onClick: onClick,\n    onMouseEnter: onHover,\n    onTouchStart: onHover,\n    \"data-testid\": item.id\n  }, content);\n};\n\nexport default MobileExpandableCategoryElement;","map":{"version":3,"mappings":"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","names":["React","useEffect","clsx","styles","InternalIcon","ItemsList","MobileExpandableGroup","Tooltip","useHiddenDescription","getMenuItemProps","MobileExpandableCategoryElement","_a","item","onItemActivate","onGroupToggle","targetItem","isHighlighted","isExpanded","highlightItem","disabled","variant","highlighted","expanded","triggerRef","useRef","current","focus","onClick","e","preventDefault","onHover","event","isDisabledWithReason","disabledReason","targetProps","descriptionEl","trigger","text","className","header","_b","tabIndex","ref","parent","_c","name","content","open","items","role","hasCategoryHeader","category","expandable","_d","onMouseEnter","onTouchStart","id"],"sourceRoot":"","sources":["../../../../src/button-dropdown/category-elements/mobile-expandable-category-element.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\n\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport MobileExpandableGroup from '../mobile-expandable-group/mobile-expandable-group';\nimport { CategoryProps } from '../interfaces';\nimport Tooltip from '../tooltip.js';\nimport useHiddenDescription from '../utils/use-hidden-description.js';\nimport { getMenuItemProps } from '../utils/menu-item.js';\n\nconst MobileExpandableCategoryElement = ({\n  item,\n  onItemActivate,\n  onGroupToggle,\n  targetItem,\n  isHighlighted,\n  isExpanded,\n  highlightItem,\n  disabled,\n  variant,\n}: CategoryProps) => {\n  const highlighted = isHighlighted(item);\n  const expanded = isExpanded(item);\n  const triggerRef = React.useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  const onClick = (e: React.MouseEvent) => {\n    if (!disabled) {\n      e.preventDefault();\n      onGroupToggle(item, e);\n    }\n  };\n\n  const onHover = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    highlightItem(item);\n  };\n\n  const isDisabledWithReason = !!item.disabledReason && item.disabled;\n  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);\n  const trigger = item.text && (\n    <span\n      className={clsx(styles.header, styles['expandable-header'], styles[`variant-${variant}`], {\n        [styles.highlighted]: highlighted,\n        [styles['rolled-down']]: expanded,\n        [styles.disabled]: disabled,\n      })}\n      // We are using the roving tabindex technique to manage the focus state of the dropdown.\n      // The current element will always have tabindex=0 which means that it can be tabbed to,\n      // while all other items have tabindex=-1 so we can focus them when necessary.\n      tabIndex={highlighted ? 0 : -1}\n      ref={triggerRef}\n      {...getMenuItemProps({ parent: true, disabled, expanded })}\n      {...(isDisabledWithReason ? targetProps : {})}\n    >\n      {item.text}\n      <span\n        className={clsx(styles['expand-icon'], {\n          [styles['expand-icon-up']]: expanded,\n        })}\n      >\n        <InternalIcon name=\"caret-down-filled\" />\n      </span>\n    </span>\n  );\n\n  let content: React.ReactNode;\n\n  if (isDisabledWithReason) {\n    content = (\n      <>\n        {descriptionEl}\n        <Tooltip content={item.disabledReason}>{trigger}</Tooltip>\n      </>\n    );\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = (\n      <MobileExpandableGroup open={expanded} trigger={trigger}>\n        {item.items && expanded && (\n          <ul role=\"menu\" aria-label={item.text} className={clsx(styles['items-list-container'])}>\n            <ItemsList\n              items={item.items}\n              onItemActivate={onItemActivate}\n              onGroupToggle={onGroupToggle}\n              targetItem={targetItem}\n              isHighlighted={isHighlighted}\n              isExpanded={isExpanded}\n              highlightItem={highlightItem}\n              hasCategoryHeader={true}\n              variant={variant}\n            />\n          </ul>\n        )}\n      </MobileExpandableGroup>\n    );\n  }\n\n  return (\n    <li\n      className={clsx(styles.category, styles[`variant-${variant}`], styles.expandable, {\n        [styles.expanded]: expanded,\n        [styles.disabled]: disabled,\n        [styles.highlighted]: highlighted || expanded,\n        [styles.expandable]: true,\n      })}\n      role=\"presentation\"\n      onClick={onClick}\n      onMouseEnter={onHover}\n      onTouchStart={onHover}\n      data-testid={item.id}\n    >\n      {content}\n    </li>\n  );\n};\n\nexport default MobileExpandableCategoryElement;\n"]},"metadata":{},"sourceType":"module"}