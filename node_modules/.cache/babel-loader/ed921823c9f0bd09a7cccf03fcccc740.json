{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef, useState } from 'react';\nimport Arrow from '../popover/arrow';\nimport PopoverContainer from '../popover/container';\nimport PopoverBody from '../popover/body';\nimport Portal from '../internal/components/portal';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\nimport { useReducedMotion } from '../internal/hooks/use-visual-mode';\nvar DEFAULT_OPEN_TIMEOUT_IN_MS = 120;\nexport default function Tooltip(_a) {\n  var children = _a.children,\n      content = _a.content,\n      _b = _a.position,\n      position = _b === void 0 ? 'right' : _b;\n  var ref = useRef(null);\n  var isReducedMotion = useReducedMotion(ref);\n\n  var _c = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS),\n      open = _c.open,\n      triggerProps = _c.triggerProps;\n\n  var portalClasses = usePortalModeClasses(ref);\n  return React.createElement(\"span\", __assign({\n    ref: ref\n  }, triggerProps), children, open && React.createElement(Portal, null, React.createElement(\"span\", {\n    className: portalClasses\n  }, React.createElement(PopoverContainer, {\n    position: position,\n    trackRef: ref,\n    arrow: function (position) {\n      return React.createElement(Arrow, {\n        position: position\n      });\n    },\n    renderWithPortal: true,\n    zIndex: 7000\n  }, React.createElement(PopoverBody, {\n    size: \"small\",\n    fixedWidth: false,\n    dismissButton: false,\n    dismissAriaLabel: undefined,\n    header: null,\n    onDismiss: function () {},\n    overflowVisible: \"both\"\n  }, React.createElement(\"span\", {\n    \"data-testid\": \"button-dropdown-disabled-reason\",\n    role: \"tooltip\"\n  }, content))))));\n}\n\nfunction useTooltipOpen(timeout) {\n  var handle = useRef();\n\n  var _a = useState(false),\n      isOpen = _a[0],\n      setIsOpen = _a[1];\n\n  var close = function () {\n    clearTimeout(handle.current);\n    setIsOpen(false);\n  };\n\n  var open = function () {\n    return setIsOpen(true);\n  };\n\n  var openDelayed = function () {\n    handle.current = setTimeout(open, timeout);\n  };\n\n  var onKeyDown = function (e) {\n    if (isOpen && isEscape(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n      close();\n    }\n  };\n\n  var onFocus = openDelayed;\n  var onBlur = close;\n  return {\n    open: isOpen,\n    triggerProps: {\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onKeyDown: onKeyDown\n    }\n  };\n}\n\nvar isEscape = function (key) {\n  return key === 'Escape' || key === 'Esc';\n};","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,IAAsCC,MAAtC,EAA8CC,QAA9C,QAA8D,OAA9D;AAEA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AAQA,IAAMC,0BAA0B,GAAG,GAAnC;AAEA,eAAc,SAAUC,OAAV,CAAkBC,EAAlB,EAAyE;MAArDC,QAAQ;MAAEC,OAAO;MAAEC;MAAAC,QAAQ,mBAAG,OAAH,GAAUD;EACrE,IAAME,GAAG,GAAGf,MAAM,CAAyB,IAAzB,CAAlB;EACA,IAAMgB,eAAe,GAAGT,gBAAgB,CAACQ,GAAD,CAAxC;;EACM,SAAyBE,cAAc,CAACD,eAAe,GAAG,CAAH,GAAOR,0BAAvB,CAAvC;EAAA,IAAEU,IAAI,UAAN;EAAA,IAAQC,YAAY,kBAApB;;EACN,IAAMC,aAAa,GAAGd,oBAAoB,CAACS,GAAD,CAA1C;EAEA,OACEhB;IAAMgB,GAAG,EAAEA;EAAX,GAAoBI,YAApB,GACGR,QADH,EAEGO,IAAI,IACHnB,oBAACM,MAAD,EAAO,IAAP,EACEN;IAAMsB,SAAS,EAAED;EAAjB,GACErB,oBAACI,gBAAD,EAAiB;IACfW,QAAQ,EAAEA,QADK;IAEfQ,QAAQ,EAAEP,GAFK;IAGfQ,KAAK,EAAE,oBAAQ;MAAI,2BAACrB,KAAD,EAAM;QAACY,QAAQ,EAAEA;MAAX,CAAN;IAA6B,CAHjC;IAIfU,gBAAgB,EAAE,IAJH;IAKfC,MAAM,EAAE;EALO,CAAjB,EAOE1B,oBAACK,WAAD,EAAY;IACVsB,IAAI,EAAC,OADK;IAEVC,UAAU,EAAE,KAFF;IAGVC,aAAa,EAAE,KAHL;IAIVC,gBAAgB,EAAEC,SAJR;IAKVC,MAAM,EAAE,IALE;IAMVC,SAAS,EAAE,aAAQ,CANT;IAOVC,eAAe,EAAC;EAPN,CAAZ,EASElC;IAAA,eAAkB,iCAAlB;IAAoDmC,IAAI,EAAC;EAAzD,GACGtB,OADH,CATF,CAPF,CADF,CADF,CAHJ,CADF;AAgCD;;AAED,SAASK,cAAT,CAAwBkB,OAAxB,EAAuC;EACrC,IAAMC,MAAM,GAAGpC,MAAM,EAArB;;EACM,SAAsBC,QAAQ,CAAC,KAAD,CAA9B;EAAA,IAACoC,MAAM,QAAP;EAAA,IAASC,SAAS,QAAlB;;EAEN,IAAMC,KAAK,GAAG;IACZC,YAAY,CAACJ,MAAM,CAACK,OAAR,CAAZ;IACAH,SAAS,CAAC,KAAD,CAAT;EACD,CAHD;;EAIA,IAAMpB,IAAI,GAAG;IAAM,gBAAS,CAAC,IAAD,CAAT;EAAe,CAAlC;;EACA,IAAMwB,WAAW,GAAG;IAClBN,MAAM,CAACK,OAAP,GAAiBE,UAAU,CAACzB,IAAD,EAAOiB,OAAP,CAA3B;EACD,CAFD;;EAGA,IAAMS,SAAS,GAAyB,aAAC;IACvC,IAAIP,MAAM,IAAIQ,QAAQ,CAACC,CAAC,CAACC,GAAH,CAAtB,EAA+B;MAC7BD,CAAC,CAACE,cAAF;MACAF,CAAC,CAACG,eAAF;MACAV,KAAK;IACN;EACF,CAND;;EAQA,IAAMW,OAAO,GAAGR,WAAhB;EACA,IAAMS,MAAM,GAAGZ,KAAf;EAEA,OAAO;IACLrB,IAAI,EAAEmB,MADD;IAELlB,YAAY,EAAE;MACZgC,MAAM,QADM;MAEZD,OAAO,SAFK;MAGZN,SAAS;IAHG;EAFT,CAAP;AAQD;;AAED,IAAMC,QAAQ,GAAG,UAACE,GAAD,EAAY;EAAK,UAAG,KAAK,QAAR,IAAoBA,GAAG,KAAK,KAA5B;AAAiC,CAAnE","names":["React","useRef","useState","Arrow","PopoverContainer","PopoverBody","Portal","usePortalModeClasses","useReducedMotion","DEFAULT_OPEN_TIMEOUT_IN_MS","Tooltip","_a","children","content","_b","position","ref","isReducedMotion","useTooltipOpen","open","triggerProps","portalClasses","className","trackRef","arrow","renderWithPortal","zIndex","size","fixedWidth","dismissButton","dismissAriaLabel","undefined","header","onDismiss","overflowVisible","role","timeout","handle","isOpen","setIsOpen","close","clearTimeout","current","openDelayed","setTimeout","onKeyDown","isEscape","e","key","preventDefault","stopPropagation","onFocus","onBlur"],"sourceRoot":"","sources":["../../../src/button-dropdown/tooltip.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { KeyboardEventHandler, useRef, useState } from 'react';\n\nimport Arrow from '../popover/arrow';\nimport PopoverContainer from '../popover/container';\nimport PopoverBody from '../popover/body';\nimport Portal from '../internal/components/portal';\nimport { usePortalModeClasses } from '../internal/hooks/use-portal-mode-classes';\nimport { useReducedMotion } from '../internal/hooks/use-visual-mode';\n\nexport interface TooltipProps {\n  children?: React.ReactNode;\n  content?: React.ReactNode;\n  position?: 'top' | 'right' | 'bottom' | 'left';\n}\n\nconst DEFAULT_OPEN_TIMEOUT_IN_MS = 120;\n\nexport default function Tooltip({ children, content, position = 'right' }: TooltipProps) {\n  const ref = useRef<HTMLSpanElement | null>(null);\n  const isReducedMotion = useReducedMotion(ref);\n  const { open, triggerProps } = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS);\n  const portalClasses = usePortalModeClasses(ref);\n\n  return (\n    <span ref={ref} {...triggerProps}>\n      {children}\n      {open && (\n        <Portal>\n          <span className={portalClasses}>\n            <PopoverContainer\n              position={position}\n              trackRef={ref}\n              arrow={position => <Arrow position={position} />}\n              renderWithPortal={true}\n              zIndex={7000}\n            >\n              <PopoverBody\n                size=\"small\"\n                fixedWidth={false}\n                dismissButton={false}\n                dismissAriaLabel={undefined}\n                header={null}\n                onDismiss={() => {}}\n                overflowVisible=\"both\"\n              >\n                <span data-testid=\"button-dropdown-disabled-reason\" role=\"tooltip\">\n                  {content}\n                </span>\n              </PopoverBody>\n            </PopoverContainer>\n          </span>\n        </Portal>\n      )}\n    </span>\n  );\n}\n\nfunction useTooltipOpen(timeout: number) {\n  const handle = useRef<number>();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const close = () => {\n    clearTimeout(handle.current);\n    setIsOpen(false);\n  };\n  const open = () => setIsOpen(true);\n  const openDelayed = () => {\n    handle.current = setTimeout(open, timeout);\n  };\n  const onKeyDown: KeyboardEventHandler = e => {\n    if (isOpen && isEscape(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n      close();\n    }\n  };\n\n  const onFocus = openDelayed;\n  const onBlur = close;\n\n  return {\n    open: isOpen,\n    triggerProps: {\n      onBlur,\n      onFocus,\n      onKeyDown,\n    },\n  };\n}\n\nconst isEscape = (key: string) => key === 'Escape' || key === 'Esc';\n"]},"metadata":{},"sourceType":"module"}