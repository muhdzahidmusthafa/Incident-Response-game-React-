{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { getBaseProps } from '../../base-component';\n\nvar SelectableItem = function (_a, ref) {\n  var _b;\n\n  var content = _a.children,\n      ariaSelected = _a.ariaSelected,\n      ariaChecked = _a.ariaChecked,\n      selected = _a.selected,\n      highlighted = _a.highlighted,\n      disabled = _a.disabled,\n      hasBackground = _a.hasBackground,\n      isParent = _a.isParent,\n      isChild = _a.isChild,\n      isKeyboard = _a.isKeyboard,\n      virtualPosition = _a.virtualPosition,\n      padBottom = _a.padBottom,\n      isNextSelected = _a.isNextSelected,\n      useInteractiveGroups = _a.useInteractiveGroups,\n      screenReaderContent = _a.screenReaderContent,\n      ariaPosinset = _a.ariaPosinset,\n      ariaSetsize = _a.ariaSetsize,\n      restProps = __rest(_a, [\"children\", \"ariaSelected\", \"ariaChecked\", \"selected\", \"highlighted\", \"disabled\", \"hasBackground\", \"isParent\", \"isChild\", \"isKeyboard\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"useInteractiveGroups\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\"]);\n\n  var _c = getBaseProps(restProps),\n      className = _c.className,\n      rest = __rest(_c, [\"className\"]);\n\n  var classNames = clsx(className, styles['selectable-item'], (_b = {}, _b[styles.selected] = selected, _b[styles.highlighted] = highlighted, _b[styles['has-background']] = hasBackground, _b[styles.parent] = isParent, _b[styles.child] = isChild, _b[styles['is-keyboard']] = isKeyboard, _b[styles.disabled] = disabled, _b[styles.virtual] = virtualPosition !== undefined, _b[styles['pad-bottom']] = padBottom, _b[styles['next-item-selected']] = isNextSelected, _b[styles.interactiveGroups] = useInteractiveGroups, _b));\n  var contentRef = useRef(null);\n  var screenReaderContentRef = useRef(null);\n  useLayoutEffect(function () {\n    // the state of aria-hidden and announcement is not set back because NVDA+Firefox would announce\n    // the item which lost highlight\n    // set aria-hidden true when there is announcement content, so that screen reader still announce\n    // meaningful content when navigate with screen reader cursor\n    // imperatively update to avoid announcement made multiple times when content updates\n    if (highlighted && screenReaderContent) {\n      if (contentRef.current) {\n        contentRef.current.setAttribute('aria-hidden', 'true');\n      }\n\n      if (screenReaderContentRef.current) {\n        screenReaderContentRef.current.textContent = screenReaderContent;\n      }\n    }\n  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);\n  var style = virtualPosition !== undefined ? {\n    transform: \"translateY(\".concat(virtualPosition, \"px)\")\n  } : undefined;\n  var a11yProperties = {\n    'aria-disabled': disabled\n  };\n\n  if (isParent && !useInteractiveGroups) {\n    a11yProperties['aria-hidden'] = true;\n  }\n\n  if (ariaSelected) {\n    a11yProperties['aria-selected'] = ariaSelected;\n  } // Safari+VO needs aria-checked for multi-selection. Otherwise it only announces selected option even though another option is highlighted.\n\n\n  if (ariaChecked) {\n    a11yProperties['aria-checked'] = ariaChecked;\n  }\n\n  if (ariaPosinset && ariaSetsize) {\n    a11yProperties['aria-posinset'] = ariaPosinset;\n    a11yProperties['aria-setsize'] = ariaSetsize;\n  }\n\n  return React.createElement(\"li\", __assign({\n    role: \"option\",\n    className: classNames,\n    style: style\n  }, a11yProperties, rest), React.createElement(\"div\", {\n    className: styles['option-content'],\n    ref: contentRef\n  }, content), React.createElement(\"div\", {\n    className: styles['measure-strut'],\n    ref: ref\n  }), React.createElement(\"div\", {\n    className: styles['screenreader-content'],\n    ref: screenReaderContentRef\n  }));\n};\n\nexport default React.forwardRef(SelectableItem);","map":{"version":3,"mappings":"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","names":["React","useRef","useLayoutEffect","clsx","styles","getBaseProps","SelectableItem","_a","ref","content","ariaSelected","ariaChecked","selected","highlighted","disabled","hasBackground","isParent","isChild","isKeyboard","virtualPosition","padBottom","isNextSelected","useInteractiveGroups","screenReaderContent","ariaPosinset","ariaSetsize","restProps","_c","className","rest","classNames","_b","parent","child","virtual","undefined","interactiveGroups","contentRef","screenReaderContentRef","current","setAttribute","textContent","style","transform","a11yProperties","role","forwardRef"],"sourceRoot":"","sources":["../../../../../src/internal/components/selectable-item/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useLayoutEffect } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { BaseComponentProps, getBaseProps } from '../../base-component';\n\nexport interface SelectableItemProps extends BaseComponentProps {\n  children: React.ReactNode;\n  ariaSelected?: boolean;\n  ariaChecked?: boolean;\n  selected?: boolean;\n  highlighted?: boolean;\n  disabled?: boolean;\n  hasBackground?: boolean;\n  isParent?: boolean;\n  isChild?: boolean;\n  isKeyboard?: boolean;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  isNextSelected?: boolean;\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n  ariaPosinset?: number;\n  ariaSetsize?: number;\n}\n\nconst SelectableItem = (\n  {\n    children: content,\n    ariaSelected,\n    ariaChecked,\n    selected,\n    highlighted,\n    disabled,\n    hasBackground,\n    isParent,\n    isChild,\n    isKeyboard,\n    virtualPosition,\n    padBottom,\n    isNextSelected,\n    useInteractiveGroups,\n    screenReaderContent,\n    ariaPosinset,\n    ariaSetsize,\n    ...restProps\n  }: SelectableItemProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const { className, ...rest } = getBaseProps(restProps);\n  const classNames = clsx(className, styles['selectable-item'], {\n    [styles.selected]: selected,\n    [styles.highlighted]: highlighted,\n    [styles['has-background']]: hasBackground,\n    [styles.parent]: isParent,\n    [styles.child]: isChild,\n    [styles['is-keyboard']]: isKeyboard,\n    [styles.disabled]: disabled,\n    [styles.virtual]: virtualPosition !== undefined,\n    [styles['pad-bottom']]: padBottom,\n    [styles['next-item-selected']]: isNextSelected,\n    [styles.interactiveGroups]: useInteractiveGroups,\n  });\n\n  const contentRef = useRef<HTMLDivElement>(null);\n  const screenReaderContentRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // the state of aria-hidden and announcement is not set back because NVDA+Firefox would announce\n    // the item which lost highlight\n    // set aria-hidden true when there is announcement content, so that screen reader still announce\n    // meaningful content when navigate with screen reader cursor\n    // imperatively update to avoid announcement made multiple times when content updates\n    if (highlighted && screenReaderContent) {\n      if (contentRef.current) {\n        contentRef.current.setAttribute('aria-hidden', 'true');\n      }\n      if (screenReaderContentRef.current) {\n        screenReaderContentRef.current.textContent = screenReaderContent;\n      }\n    }\n  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);\n\n  const style =\n    virtualPosition !== undefined\n      ? {\n          transform: `translateY(${virtualPosition}px)`,\n        }\n      : undefined;\n\n  const a11yProperties: Record<string, string | number | boolean | undefined> = {\n    'aria-disabled': disabled,\n  };\n\n  if (isParent && !useInteractiveGroups) {\n    a11yProperties['aria-hidden'] = true;\n  }\n\n  if (ariaSelected) {\n    a11yProperties['aria-selected'] = ariaSelected;\n  }\n\n  // Safari+VO needs aria-checked for multi-selection. Otherwise it only announces selected option even though another option is highlighted.\n  if (ariaChecked) {\n    a11yProperties['aria-checked'] = ariaChecked;\n  }\n\n  if (ariaPosinset && ariaSetsize) {\n    a11yProperties['aria-posinset'] = ariaPosinset;\n    a11yProperties['aria-setsize'] = ariaSetsize;\n  }\n\n  return (\n    <li role=\"option\" className={classNames} style={style} {...a11yProperties} {...rest}>\n      <div className={styles['option-content']} ref={contentRef}>\n        {content}\n      </div>\n      <div className={styles['measure-strut']} ref={ref} />\n      <div className={styles['screenreader-content']} ref={screenReaderContentRef}></div>\n    </li>\n  );\n};\n\nexport default React.forwardRef(SelectableItem);\n"]},"metadata":{},"sourceType":"module"}