{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { getBaseProps } from '../../base-component';\nimport { useVisualRefresh } from '../../hooks/use-visual-mode';\nimport styles from './styles.css.js'; // Can't use css variables for svg attributes\n\nexport var dimensionsByTheme = {\n  \"default\": {\n    viewBox: '0 0 14 14',\n    indeterminate: '2.5,7 11.5,7',\n    checked: '2.5,7 6,10 11,3',\n    xy: 0.5,\n    r: 1.5,\n    size: 13\n  },\n  refresh: {\n    viewBox: '0 0 16 16',\n    indeterminate: '3.5,8 12.5,8',\n    checked: '3.5,8 7,11 12,4',\n    xy: 1,\n    r: 2,\n    size: 14\n  }\n};\n\nvar CheckboxIcon = function (_a) {\n  var _b, _c;\n\n  var checked = _a.checked,\n      indeterminate = _a.indeterminate,\n      _d = _a.disabled,\n      disabled = _d === void 0 ? false : _d,\n      restProps = __rest(_a, [\"checked\", \"indeterminate\", \"disabled\"]);\n\n  var baseProps = getBaseProps(restProps);\n  var checkboxRef = useRef(null);\n  var theme = useVisualRefresh(checkboxRef) ? 'refresh' : 'default';\n  var dimensions = dimensionsByTheme[theme];\n  return React.createElement(\"svg\", __assign({\n    className: styles.root,\n    viewBox: dimensions.viewBox,\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    ref: checkboxRef\n  }, baseProps), React.createElement(\"rect\", {\n    className: clsx(styles['styled-box'], (_b = {}, _b[styles['styled-box-checked']] = checked, _b[styles['styled-box-indeterminate']] = indeterminate, _b[styles['styled-box-disabled']] = disabled, _b)),\n    x: dimensions.xy,\n    y: dimensions.xy,\n    rx: dimensions.r,\n    ry: dimensions.r,\n    width: dimensions.size,\n    height: dimensions.size\n  }), checked || indeterminate ? React.createElement(\"polyline\", {\n    className: clsx(styles['styled-line'], (_c = {}, _c[styles['styled-line-disabled']] = disabled, _c)),\n    points: indeterminate ? dimensions.indeterminate : dimensions.checked\n  }) : null);\n};\n\nexport default CheckboxIcon;","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAA6BC,YAA7B,QAAiD,sBAAjD;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAgBA;;AACA,OAAO,IAAMC,iBAAiB,GAA0D;EACtF,WAAS;IACPC,OAAO,EAAE,WADF;IAEPC,aAAa,EAAE,cAFR;IAGPC,OAAO,EAAE,iBAHF;IAIPC,EAAE,EAAE,GAJG;IAKPC,CAAC,EAAE,GALI;IAMPC,IAAI,EAAE;EANC,CAD6E;EAStFC,OAAO,EAAE;IACPN,OAAO,EAAE,WADF;IAEPC,aAAa,EAAE,cAFR;IAGPC,OAAO,EAAE,iBAHF;IAIPC,EAAE,EAAE,CAJG;IAKPC,CAAC,EAAE,CALI;IAMPC,IAAI,EAAE;EANC;AAT6E,CAAjF;;AAmBP,IAAME,YAAY,GAAG,UAACC,EAAD,EAA8E;;;EAA3E,WAAO,aAAP;EAAA,IAASP,aAAa,mBAAtB;EAAA,IAAwBQ,gBAAxB;EAAA,IAAwBC,QAAQ,mBAAG,KAAH,GAAQD,EAAxC;EAAA,IAA6CE,SAAS,cAAxD,wCAAwD,CAAtD;;EACtB,IAAMC,SAAS,GAAGhB,YAAY,CAACe,SAAD,CAA9B;EACA,IAAME,WAAW,GAAGlB,MAAM,CAAC,IAAD,CAA1B;EACA,IAAMmB,KAAK,GAAGjB,gBAAgB,CAACgB,WAAD,CAAhB,GAAgC,SAAhC,GAA4C,SAA1D;EACA,IAAME,UAAU,GAAGhB,iBAAiB,CAACe,KAAD,CAApC;EACA,OACEpB;IACEsB,SAAS,EAAElB,MAAM,CAACmB,IADpB;IAEEjB,OAAO,EAAEe,UAAU,CAACf,OAFtB;IAE6B,eACf,MAHd;IAIEkB,SAAS,EAAC,OAJZ;IAKEC,GAAG,EAAEN;EALP,GAMMD,SANN,GAQElB;IACEsB,SAAS,EAAEvB,IAAI,CAACK,MAAM,CAAC,YAAD,CAAP,GAAqBsB,SAClCA,GAACtB,MAAM,CAAC,oBAAD,CAAP,IAAgCI,OADE,EAElCkB,GAACtB,MAAM,CAAC,0BAAD,CAAP,IAAsCG,aAFJ,EAGlCmB,GAACtB,MAAM,CAAC,qBAAD,CAAP,IAAiCY,QAHC,IAArB,EADjB;IAMEW,CAAC,EAAEN,UAAU,CAACZ,EANhB;IAOEmB,CAAC,EAAEP,UAAU,CAACZ,EAPhB;IAQEoB,EAAE,EAAER,UAAU,CAACX,CARjB;IASEoB,EAAE,EAAET,UAAU,CAACX,CATjB;IAUEqB,KAAK,EAAEV,UAAU,CAACV,IAVpB;IAWEqB,MAAM,EAAEX,UAAU,CAACV;EAXrB,EARF,EAqBGH,OAAO,IAAID,aAAX,GACCP;IACEsB,SAAS,EAAEvB,IAAI,CAACK,MAAM,CAAC,aAAD,CAAP,GAAsB6B,SAAIA,GAAC7B,MAAM,CAAC,sBAAD,CAAP,IAAkCY,QAAtC,EAA8CiB,EAApE,EADjB;IAEEC,MAAM,EAAE3B,aAAa,GAAGc,UAAU,CAACd,aAAd,GAA8Bc,UAAU,CAACb;EAFhE,EADD,GAKG,IA1BN,CADF;AA8BD,CAnCD;;AAqCA,eAAeK,YAAf","names":["clsx","React","useRef","getBaseProps","useVisualRefresh","styles","dimensionsByTheme","viewBox","indeterminate","checked","xy","r","size","refresh","CheckboxIcon","_a","_d","disabled","restProps","baseProps","checkboxRef","theme","dimensions","className","root","focusable","ref","_b","x","y","rx","ry","width","height","_c","points"],"sourceRoot":"","sources":["../../../../../src/internal/components/checkbox-icon/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { BaseComponentProps, getBaseProps } from '../../base-component';\nimport { useVisualRefresh } from '../../hooks/use-visual-mode';\nimport styles from './styles.css.js';\n\nexport interface CheckboxIconProps extends BaseComponentProps {\n  checked?: boolean;\n  indeterminate?: boolean;\n  disabled?: boolean;\n}\nexport interface Dimension {\n  viewBox: string;\n  indeterminate: string;\n  checked: string;\n  xy: number;\n  r: number;\n  size: number;\n}\n\n// Can't use css variables for svg attributes\nexport const dimensionsByTheme: Record<NonNullable<'default' | 'refresh'>, Dimension> = {\n  default: {\n    viewBox: '0 0 14 14',\n    indeterminate: '2.5,7 11.5,7',\n    checked: '2.5,7 6,10 11,3',\n    xy: 0.5,\n    r: 1.5,\n    size: 13,\n  },\n  refresh: {\n    viewBox: '0 0 16 16',\n    indeterminate: '3.5,8 12.5,8',\n    checked: '3.5,8 7,11 12,4',\n    xy: 1,\n    r: 2,\n    size: 14,\n  },\n};\n\nconst CheckboxIcon = ({ checked, indeterminate, disabled = false, ...restProps }: CheckboxIconProps) => {\n  const baseProps = getBaseProps(restProps);\n  const checkboxRef = useRef(null);\n  const theme = useVisualRefresh(checkboxRef) ? 'refresh' : 'default';\n  const dimensions = dimensionsByTheme[theme];\n  return (\n    <svg\n      className={styles.root}\n      viewBox={dimensions.viewBox}\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      ref={checkboxRef}\n      {...baseProps}\n    >\n      <rect\n        className={clsx(styles['styled-box'], {\n          [styles['styled-box-checked']]: checked,\n          [styles['styled-box-indeterminate']]: indeterminate,\n          [styles['styled-box-disabled']]: disabled,\n        })}\n        x={dimensions.xy}\n        y={dimensions.xy}\n        rx={dimensions.r}\n        ry={dimensions.r}\n        width={dimensions.size}\n        height={dimensions.size}\n      />\n      {checked || indeterminate ? (\n        <polyline\n          className={clsx(styles['styled-line'], { [styles['styled-line-disabled']]: disabled })}\n          points={indeterminate ? dimensions.indeterminate : dimensions.checked}\n        />\n      ) : null}\n    </svg>\n  );\n};\n\nexport default CheckboxIcon;\n"]},"metadata":{},"sourceType":"module"}