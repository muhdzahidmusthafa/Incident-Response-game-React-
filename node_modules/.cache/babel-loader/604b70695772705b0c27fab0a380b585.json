{"ast":null,"code":"import _classCallCheck from\"/Users/firozahmed/PycharmProjects/incident-response/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/firozahmed/PycharmProjects/incident-response/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/firozahmed/PycharmProjects/incident-response/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/firozahmed/PycharmProjects/incident-response/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/firozahmed/PycharmProjects/incident-response/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{Link}from'react-router-dom';import constants from'../../globals/constants';import GameManager from'../../mechanics/GameManager';import{checkIfGameOver}from'../../mechanics/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var MenuList=/*#__PURE__*/function(_React$Component){_inherits(MenuList,_React$Component);var _super=_createSuper(MenuList);function MenuList(props){var _this;_classCallCheck(this,MenuList);_this=_super.call(this,props);_this.startNewGame=_this.startNewGame.bind(_assertThisInitialized(_this));_this.loadData=_this.loadData.bind(_assertThisInitialized(_this));return _this;}_createClass(MenuList,[{key:\"startNewGame\",value:function startNewGame(){var _this$props=this.props,startGame=_this$props.startGame,resetTextChoices=_this$props.resetTextChoices,resetVariables=_this$props.resetVariables;// Dispatch Redux actions\nstartGame();resetTextChoices();resetVariables();this.loadData();}},{key:\"loadData\",value:function loadData(){var _this$props2=this.props,loadModuleData=_this$props2.loadModuleData,setLoading=_this$props2.setLoading;// Check if text data is already loaded - only load if it's not\nif(!GameManager.checkIfModuleLoaded(constants.MODULE_INCIDENT)){// Set loading flag for GameLoadingContainer\nsetLoading(true);// Dispatch Redux action to load text data\nloadModuleData(constants.MODULE_INCIDENT);}}// Starting a new game should load everything from a default state (using\n// the startNewGame function). Resuming a game shouldn't need to load anything,\n// unless the state has been loaded from browser storage (after a hard page\n// refresh, or going to the page again after closing it). The text data is\n// too large to keep in browser storage, so it must be loaded again. \n},{key:\"render\",value:function render(){var _this$props3=this.props,gameStarted=_this$props3.gameStarted,currentNodeKey=_this$props3.currentNodeKey;var gameOver=checkIfGameOver(currentNodeKey);return/*#__PURE__*/_jsxs(\"div\",{className:\"menu-list\",children:[/*#__PURE__*/_jsx(\"h3\",{children:/*#__PURE__*/_jsx(Link,{to:\"/game\",onClick:this.startNewGame,children:\"New Game\"})}),gameStarted&&!gameOver&&/*#__PURE__*/_jsx(\"h3\",{children:/*#__PURE__*/_jsx(Link,{to:\"/game\",onClick:this.loadData,children:\"Resume Game\"})})]});}}]);return MenuList;}(React.Component);","map":{"version":3,"names":["React","Link","constants","GameManager","checkIfGameOver","MenuList","props","startNewGame","bind","loadData","startGame","resetTextChoices","resetVariables","loadModuleData","setLoading","checkIfModuleLoaded","MODULE_INCIDENT","gameStarted","currentNodeKey","gameOver","Component"],"sources":["/Users/firozahmed/PycharmProjects/incident-response/src/components/MenuPage/MenuList.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport constants from '../../globals/constants';\r\nimport GameManager from '../../mechanics/GameManager';\r\nimport { checkIfGameOver } from '../../mechanics/helpers';\r\n\r\nexport class MenuList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.startNewGame = this.startNewGame.bind(this);\r\n    this.loadData = this.loadData.bind(this);\r\n  }\r\n\r\n  startNewGame() {    \r\n    const {\r\n      startGame,\r\n      resetTextChoices,\r\n      resetVariables,\r\n    } = this.props;\r\n\r\n    // Dispatch Redux actions\r\n    startGame();\r\n    resetTextChoices();\r\n    resetVariables();\r\n   \r\n    \r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    const {\r\n      loadModuleData,\r\n      setLoading\r\n    } = this.props;\r\n\r\n    // Check if text data is already loaded - only load if it's not\r\n    if (!(GameManager.checkIfModuleLoaded(constants.MODULE_INCIDENT))) {\r\n      // Set loading flag for GameLoadingContainer\r\n      setLoading(true);\r\n      // Dispatch Redux action to load text data\r\n      loadModuleData(constants.MODULE_INCIDENT);\r\n    }\r\n  }\r\n\r\n  // Starting a new game should load everything from a default state (using\r\n  // the startNewGame function). Resuming a game shouldn't need to load anything,\r\n  // unless the state has been loaded from browser storage (after a hard page\r\n  // refresh, or going to the page again after closing it). The text data is\r\n  // too large to keep in browser storage, so it must be loaded again. \r\n  render() {\r\n    const { gameStarted, currentNodeKey } = this.props;\r\n    const gameOver = (checkIfGameOver(currentNodeKey));\r\n\r\n    return (\r\n      <div className=\"menu-list\">\r\n        <h3><Link to=\"/game\" onClick={ this.startNewGame }>New Game</Link></h3>\r\n        {gameStarted && !gameOver &&\r\n        <h3><Link to=\"/game\" onClick={ this.loadData }>Resume Game</Link></h3>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}"],"mappings":"k1BAAA,MAAOA,MAAP,KAAkB,OAAlB,CAEA,OAASC,IAAT,KAAqB,kBAArB,CAEA,MAAOC,UAAP,KAAsB,yBAAtB,CACA,MAAOC,YAAP,KAAwB,6BAAxB,CACA,OAASC,eAAT,KAAgC,yBAAhC,C,wFAEA,UAAaC,SAAb,gHACE,kBAAYC,KAAZ,CAAmB,0CACjB,uBAAMA,KAAN,EAEA,MAAKC,YAAL,CAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB,CACA,MAAKC,QAAL,CAAgB,MAAKA,QAAL,CAAcD,IAAd,+BAAhB,CAJiB,aAKlB,CANH,iDAQE,uBAAe,CACb,gBAII,KAAKF,KAJT,CACEI,SADF,aACEA,SADF,CAEEC,gBAFF,aAEEA,gBAFF,CAGEC,cAHF,aAGEA,cAHF,CAMA;AACAF,SAAS,GACTC,gBAAgB,GAChBC,cAAc,GAGd,KAAKH,QAAL,GACD,CAtBH,wBAwBE,mBAAW,CACT,iBAGI,KAAKH,KAHT,CACEO,cADF,cACEA,cADF,CAEEC,UAFF,cAEEA,UAFF,CAKA;AACA,GAAI,CAAEX,WAAW,CAACY,mBAAZ,CAAgCb,SAAS,CAACc,eAA1C,CAAN,CAAmE,CACjE;AACAF,UAAU,CAAC,IAAD,CAAV,CACA;AACAD,cAAc,CAACX,SAAS,CAACc,eAAX,CAAd,CACD,CACF,CAED;AACA;AACA;AACA;AACA;AA3CF,sBA4CE,iBAAS,CACP,iBAAwC,KAAKV,KAA7C,CAAQW,WAAR,cAAQA,WAAR,CAAqBC,cAArB,cAAqBA,cAArB,CACA,GAAMC,SAAQ,CAAIf,eAAe,CAACc,cAAD,CAAjC,CAEA,mBACE,aAAK,SAAS,CAAC,WAAf,wBACE,iCAAI,KAAC,IAAD,EAAM,EAAE,CAAC,OAAT,CAAiB,OAAO,CAAG,KAAKX,YAAhC,sBAAJ,EADF,CAEGU,WAAW,EAAI,CAACE,QAAhB,eACD,iCAAI,KAAC,IAAD,EAAM,EAAE,CAAC,OAAT,CAAiB,OAAO,CAAG,KAAKV,QAAhC,yBAAJ,EAHF,GADF,CAQD,CAxDH,sBAA8BT,KAAK,CAACoB,SAApC"},"metadata":{},"sourceType":"module"}