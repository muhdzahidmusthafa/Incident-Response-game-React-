{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { extractBucketName, validate } from './validation';\nexport function useVersionsFetch(fetchVersions) {\n  var _a = useState(false),\n      loading = _a[0],\n      setLoading = _a[1];\n\n  var _b = useState(''),\n      lastFetchedValue = _b[0],\n      setLastFetched = _b[1];\n\n  var _c = useState([]),\n      versions = _c[0],\n      setVersions = _c[1];\n\n  var loadVersions = function (uri) {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n\n    setLastFetched(uri);\n    var errorCode = validate(uri);\n\n    var _a = extractBucketName(uri),\n        bucketName = _a[0],\n        prefix = _a[1];\n\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n\n    setLoading(true);\n    var result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(function (versions) {\n      setLoading(false);\n      setVersions(versions.map(function (version) {\n        return {\n          value: version.VersionId,\n          label: version.LastModified\n        };\n      }));\n    }, function (err) {\n      if (!(err instanceof PromiseCancelledSignal)) {\n        setLoading(false);\n      }\n    });\n    return result;\n  };\n\n  return {\n    loading: loading,\n    versions: versions,\n    resetVersions: function () {\n      return setVersions([]);\n    },\n    // this function is a dependency of useEffect\n    loadVersions: useStableEventHandler(loadVersions)\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,qBAAT,QAAsC,+CAAtC;AACA,SAASC,eAAT,EAA0BC,sBAA1B,QAAwD,+BAAxD;AAEA,SAASC,iBAAT,EAA4BC,QAA5B,QAA4C,cAA5C;AAGA,OAAM,SAAUC,gBAAV,CAA2BC,aAA3B,EAAkF;EAChF,SAAwBP,QAAQ,CAAC,KAAD,CAAhC;EAAA,IAACQ,OAAO,QAAR;EAAA,IAAUC,UAAU,QAApB;;EACA,SAAqCT,QAAQ,CAAC,EAAD,CAA7C;EAAA,IAACU,gBAAgB,QAAjB;EAAA,IAAmBC,cAAc,QAAjC;;EACA,SAA0BX,QAAQ,CAA4B,EAA5B,CAAlC;EAAA,IAACY,QAAQ,QAAT;EAAA,IAAWC,WAAW,QAAtB;;EAEN,IAAMC,YAAY,GAAG,UAACC,GAAD,EAAY;IAC/B,IAAIA,GAAG,KAAKL,gBAAZ,EAA8B;MAC5B;IACD;;IACDC,cAAc,CAACI,GAAD,CAAd;IACA,IAAMC,SAAS,GAAGX,QAAQ,CAACU,GAAD,CAA1B;;IACM,SAAuBX,iBAAiB,CAACW,GAAD,CAAxC;IAAA,IAACE,UAAU,QAAX;IAAA,IAAaC,MAAM,QAAnB;;IACN,IAAIF,SAAS,IAAI,CAACC,UAAd,IAA4B,CAACC,MAA7B,IAAuCA,MAAM,CAACC,KAAP,CAAa,CAAC,CAAd,MAAqB,GAAhE,EAAqE;MACnE;IACD;;IACDV,UAAU,CAAC,IAAD,CAAV;IACA,IAAMW,MAAM,GAAGlB,eAAe,CAACK,aAAa,CAACU,UAAD,EAAaC,MAAb,CAAd,CAA9B;IACAE,MAAM,CAACC,OAAP,CAAeC,IAAf,CACE,oBAAQ;MACNb,UAAU,CAAC,KAAD,CAAV;MACAI,WAAW,CACTD,QAAQ,CAACW,GAAT,CAAa,mBAAO;QAAI,OAAC;UACvBC,KAAK,EAAEC,OAAO,CAACC,SADQ;UAEvBC,KAAK,EAAEF,OAAO,CAACG;QAFQ,CAAD;MAGtB,CAHF,CADS,CAAX;IAMD,CATH,EAUE,eAAG;MACD,IAAI,EAAEC,GAAG,YAAY1B,sBAAjB,CAAJ,EAA8C;QAC5CM,UAAU,CAAC,KAAD,CAAV;MACD;IACF,CAdH;IAgBA,OAAOW,MAAP;EACD,CA7BD;;EA+BA,OAAO;IACLZ,OAAO,SADF;IAELI,QAAQ,UAFH;IAGLkB,aAAa,EAAE;MAAM,kBAAW,CAAC,EAAD,CAAX;IAAe,CAH/B;IAIL;IACAhB,YAAY,EAAEb,qBAAqB,CAACa,YAAD;EAL9B,CAAP;AAOD","names":["useState","useStableEventHandler","makeCancellable","PromiseCancelledSignal","extractBucketName","validate","useVersionsFetch","fetchVersions","loading","setLoading","lastFetchedValue","setLastFetched","versions","setVersions","loadVersions","uri","errorCode","bucketName","prefix","slice","result","promise","then","map","value","version","VersionId","label","LastModified","err","resetVersions"],"sourceRoot":"","sources":["../../../../src/s3-resource-selector/s3-in-context/use-versions-fetch.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState } from 'react';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { makeCancellable, PromiseCancelledSignal } from '../../internal/utils/promises';\nimport { SelectProps } from '../../select/interfaces';\nimport { extractBucketName, validate } from './validation';\nimport { S3ResourceSelectorProps } from '../interfaces';\n\nexport function useVersionsFetch(fetchVersions: S3ResourceSelectorProps['fetchVersions']) {\n  const [loading, setLoading] = useState(false);\n  const [lastFetchedValue, setLastFetched] = useState('');\n  const [versions, setVersions] = useState<Array<SelectProps.Option>>([]);\n\n  const loadVersions = (uri: string) => {\n    if (uri === lastFetchedValue) {\n      return;\n    }\n    setLastFetched(uri);\n    const errorCode = validate(uri);\n    const [bucketName, prefix] = extractBucketName(uri);\n    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === '/') {\n      return;\n    }\n    setLoading(true);\n    const result = makeCancellable(fetchVersions(bucketName, prefix));\n    result.promise.then(\n      versions => {\n        setLoading(false);\n        setVersions(\n          versions.map(version => ({\n            value: version.VersionId,\n            label: version.LastModified,\n          }))\n        );\n      },\n      err => {\n        if (!(err instanceof PromiseCancelledSignal)) {\n          setLoading(false);\n        }\n      }\n    );\n    return result;\n  };\n\n  return {\n    loading,\n    versions,\n    resetVersions: () => setVersions([]),\n    // this function is a dependency of useEffect\n    loadVersions: useStableEventHandler(loadVersions),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}