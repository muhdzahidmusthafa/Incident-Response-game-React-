{"ast":null,"code":"import { useEffect, useMemo, useRef } from 'react';\nimport { findClosest, circleIndex, throttle } from './utils';\nimport { nodeContains } from '../../internal/utils/dom';\nimport { KeyCode } from '../../internal/keycode';\nimport { useReaction } from './async-store';\nimport computeChartProps from './compute-chart-props';\nimport createSeriesDecorator from './create-series-decorator';\nimport InteractionsStore from './interactions-store';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nvar MAX_HOVER_MARGIN = 6;\nvar SVG_HOVER_THROTTLE = 25; // Represents the core the chart logic, including the model of all allowed user interactions.\n\nexport default function useChartModel(_a) {\n  var allSeries = _a.externalSeries,\n      series = _a.visibleSeries,\n      setVisibleSeries = _a.setVisibleSeries,\n      highlightedSeries = _a.highlightedSeries,\n      setHighlightedSeries = _a.setHighlightedSeries,\n      xDomain = _a.xDomain,\n      yDomain = _a.yDomain,\n      xScaleType = _a.xScaleType,\n      yScaleType = _a.yScaleType,\n      height = _a.height,\n      width = _a.width; // Chart elements refs used in handlers.\n\n  var plotRef = useRef(null);\n  var containerRef = useRef(null);\n  var verticalMarkerRef = useRef(null);\n  var stableSetVisibleSeries = useStableEventHandler(setVisibleSeries);\n  var model = useMemo(function () {\n    // Compute scales, ticks and two-dimensional plots.\n    var computed = computeChartProps({\n      series: series,\n      xDomain: xDomain,\n      yDomain: yDomain,\n      xScaleType: xScaleType,\n      yScaleType: yScaleType,\n      height: height,\n      width: width\n    }); // A store for chart interactions that don't require plot recomputation.\n\n    var interactions = new InteractionsStore(series, computed.plot); // A series decorator to provide extra props such as color and marker type.\n\n    var getInternalSeries = createSeriesDecorator(allSeries); // A Callback for svg mouseover to hover the plot points.\n    // Throttling is necessary for a substantially smoother customer experience.\n\n    var onSVGMouseMoveThrottled = throttle(function (clientX, clientY) {\n      // No hover logic when the popover is pinned or no data available.\n      if (interactions.get().isPopoverPinned || !plotRef.current || interactions.plot.xy.length === 0) {\n        return;\n      }\n\n      var svgRect = plotRef.current.svg.getBoundingClientRect();\n      var offsetX = clientX - svgRect.left;\n      var offsetY = clientY - svgRect.top;\n      var closestX = findClosest(interactions.plot.xy, offsetX, function (xPoints) {\n        return xPoints[0].scaled.x;\n      });\n      var closestPoint = findClosest(closestX, offsetY, function (point) {\n        return point.scaled.y1;\n      }); // If close enough to the point - highlight the point and its column.\n      // If not - only highlight the closest column.\n\n      if (Math.abs(offsetX - closestPoint.scaled.x) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestPoint.scaled.y1) < MAX_HOVER_MARGIN) {\n        interactions.highlightPoint(closestPoint);\n      } else {\n        interactions.highlightX(closestX);\n      }\n    }, SVG_HOVER_THROTTLE);\n\n    var onSVGMouseMove = function (_a) {\n      var clientX = _a.clientX,\n          clientY = _a.clientY;\n      return onSVGMouseMoveThrottled(clientX, clientY);\n    }; // A callback for svg mouseout to clear all highlights.\n\n\n    var onSVGMouseOut = function (event) {\n      // Because the mouseover is throttled, in can occur slightly after the mouseout,\n      // neglecting its effect; cancelling the throttled function prevents that.\n      onSVGMouseMoveThrottled.cancel(); // No hover logic when the popover is pinned.\n\n      if (interactions.get().isPopoverPinned) {\n        return;\n      } // Check if the target is contained within svg to allow hovering on the popover body.\n\n\n      if (!nodeContains(plotRef.current.svg, event.relatedTarget)) {\n        interactions.clearHighlightedLegend();\n        interactions.clearHighlight();\n      }\n    }; // A callback for svg click to pin/unpin the popover.\n\n\n    var onSVGMouseDown = function () {\n      interactions.togglePopoverPin();\n    }; // A helper function to highlight the next or previous point within selected series.\n\n\n    var moveWithinSeries = function (direction) {\n      // Can only use motion when a particular point is highlighted.\n      var point = interactions.get().highlightedPoint;\n\n      if (!point) {\n        return;\n      } // Take the index of the currently highlighted series.\n\n\n      var sIndex = point.index.s; // Take the incremented(circularly) x-index of the currently highlighted point.\n\n      var xIndex = circleIndex(point.index.x + direction, [0, interactions.plot.xs.length - 1]); // Highlight the next point using x:s grouped data.\n\n      interactions.highlightPoint(interactions.plot.xs[xIndex][sIndex]);\n    }; // A helper function to highlight the next or previous point withing selected column.\n\n\n    var moveBetweenSeries = function (direction) {\n      // Can only use motion when a particular point is highlighted.\n      var point = interactions.get().highlightedPoint;\n\n      if (!point) {\n        return;\n      } // Take the index of the currently highlighted column.\n\n\n      var xIndex = point.index.x; // Take the incremented(circularly) y-index of the currently highlighted point.\n\n      var yIndex = circleIndex(point.index.y + direction, [0, interactions.plot.xy[xIndex].length - 1]); // Highlight the next point using x:y grouped data.\n\n      interactions.highlightPoint(interactions.plot.xy[xIndex][yIndex]);\n    }; // A callback for svg keydown to enable motions and popover pin with the keyboard.\n\n\n    var onSVGKeyDown = function (event) {\n      var keyCode = event.keyCode;\n\n      if (keyCode !== KeyCode.up && keyCode !== KeyCode.right && keyCode !== KeyCode.down && keyCode !== KeyCode.left && keyCode !== KeyCode.space && keyCode !== KeyCode.enter) {\n        return;\n      } // Preventing default fixes an issue in Safari+VO when VO additionally interprets arrow keys as its commands.\n\n\n      event.preventDefault(); // No keydown logic when the popover is pinned.\n\n      if (interactions.get().isPopoverPinned) {\n        return;\n      } // Move up/down.\n\n\n      if (keyCode === KeyCode.down || keyCode === KeyCode.up) {\n        moveBetweenSeries(keyCode === KeyCode.down ? -1 : 1);\n      } // Move left/right.\n      else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {\n        moveWithinSeries(keyCode === KeyCode.right ? 1 : -1);\n      } // Pin popover.\n      else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {\n        interactions.pinPopover();\n      }\n    }; // A callback for svg focus to highlight series.\n\n\n    var onSVGFocus = function (_event, trigger) {\n      // When focus is caused by a click event nothing is expected as clicks are handled separately.\n      // Otherwise, select the first series point.\n      if (trigger === 'keyboard') {\n        interactions.highlightFirstPoint();\n      }\n    }; // A callback for svg blur to clear all highlights unless the popover is pinned.\n\n\n    var onSVGBlur = function () {\n      // Pinned popover stays pinned even if the focus is lost.\n      // If blur is not caused by the popover, forget the previously highlighted point.\n      if (!interactions.get().isPopoverPinned) {\n        interactions.clearHighlight();\n      }\n    };\n\n    var onFilterSeries = function (series) {\n      stableSetVisibleSeries(series);\n    };\n\n    var onLegendHighlight = function (series) {\n      interactions.highlightSeries(series);\n    };\n\n    var onPopoverDismiss = function (outsideClick) {\n      interactions.unpinPopover(); // Return focus back to the application or plot (when no point is highlighted).\n\n      if (!outsideClick) {\n        // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n        setTimeout(function () {\n          if (interactions.get().highlightedPoint) {\n            plotRef.current.focusApplication();\n          } else {\n            interactions.clearHighlight();\n            plotRef.current.focusPlot();\n          }\n        }, 0);\n      }\n    };\n\n    var onContainerBlur = function () {\n      interactions.clearState();\n    };\n\n    return {\n      width: width,\n      height: height,\n      series: series,\n      allSeries: allSeries,\n      getInternalSeries: getInternalSeries,\n      computed: computed,\n      interactions: interactions,\n      handlers: {\n        onSVGMouseMove: onSVGMouseMove,\n        onSVGMouseOut: onSVGMouseOut,\n        onSVGMouseDown: onSVGMouseDown,\n        onSVGKeyDown: onSVGKeyDown,\n        onSVGFocus: onSVGFocus,\n        onSVGBlur: onSVGBlur,\n        onFilterSeries: onFilterSeries,\n        onLegendHighlight: onLegendHighlight,\n        onPopoverDismiss: onPopoverDismiss,\n        onContainerBlur: onContainerBlur\n      },\n      refs: {\n        plot: plotRef,\n        container: containerRef,\n        verticalMarker: verticalMarkerRef\n      }\n    };\n  }, [allSeries, series, xDomain, yDomain, xScaleType, yScaleType, height, width, stableSetVisibleSeries]); // Notify client when series highlight change.\n\n  useReaction(model.interactions, function (state) {\n    return state.highlightedSeries;\n  }, setHighlightedSeries); // Update interactions store when series highlight in a controlled way.\n\n  useEffect(function () {\n    if (highlightedSeries !== model.interactions.get().highlightedSeries) {\n      model.interactions.highlightSeries(highlightedSeries);\n    }\n  }, [model, highlightedSeries]);\n  return model;\n}","map":{"version":3,"mappings":"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","names":["useEffect","useMemo","useRef","findClosest","circleIndex","throttle","nodeContains","KeyCode","useReaction","computeChartProps","createSeriesDecorator","InteractionsStore","useStableEventHandler","MAX_HOVER_MARGIN","SVG_HOVER_THROTTLE","useChartModel","_a","allSeries","series","setVisibleSeries","highlightedSeries","setHighlightedSeries","xDomain","yDomain","xScaleType","yScaleType","height","width","plotRef","containerRef","verticalMarkerRef","stableSetVisibleSeries","model","computed","interactions","plot","getInternalSeries","onSVGMouseMoveThrottled","clientX","clientY","get","isPopoverPinned","current","xy","length","svgRect","svg","getBoundingClientRect","offsetX","left","offsetY","top","closestX","scaled","x","closestPoint","y1","Math","abs","highlightPoint","highlightX","onSVGMouseMove","onSVGMouseOut","event","cancel","relatedTarget","clearHighlightedLegend","clearHighlight","onSVGMouseDown","togglePopoverPin","moveWithinSeries","direction","point","highlightedPoint","sIndex","index","s","xIndex","xs","moveBetweenSeries","yIndex","y","onSVGKeyDown","keyCode","up","right","down","space","enter","preventDefault","pinPopover","onSVGFocus","_event","trigger","highlightFirstPoint","onSVGBlur","onFilterSeries","onLegendHighlight","highlightSeries","onPopoverDismiss","outsideClick","unpinPopover","setTimeout","focusApplication","focusPlot","onContainerBlur","clearState","handlers","refs","container","verticalMarker"],"sourceRoot":"","sources":["../../../../src/area-chart/model/use-chart-model.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AreaChartProps } from '../interfaces';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { findClosest, circleIndex, throttle } from './utils';\n\nimport { nodeContains } from '../../internal/utils/dom';\nimport { KeyCode } from '../../internal/keycode';\nimport { XDomain, XScaleType, YDomain, YScaleType } from '../../internal/components/cartesian-chart/interfaces';\nimport { useReaction } from './async-store';\nimport computeChartProps from './compute-chart-props';\nimport createSeriesDecorator from './create-series-decorator';\nimport InteractionsStore from './interactions-store';\nimport { useStableEventHandler } from '../../internal/hooks/use-stable-event-handler';\nimport { ChartModel } from './index';\nimport { ChartPlotRef } from '../../internal/components/chart-plot';\n\nconst MAX_HOVER_MARGIN = 6;\nconst SVG_HOVER_THROTTLE = 25;\n\ninterface UseChartModelProps<T extends AreaChartProps.DataTypes> {\n  externalSeries: readonly AreaChartProps.Series<T>[];\n  visibleSeries: readonly AreaChartProps.Series<T>[];\n  setVisibleSeries: (series: readonly AreaChartProps.Series<T>[]) => void;\n  highlightedSeries: null | AreaChartProps.Series<T>;\n  setHighlightedSeries: (series: null | AreaChartProps.Series<T>) => void;\n  xDomain?: XDomain<T>;\n  yDomain?: YDomain;\n  xScaleType: XScaleType;\n  yScaleType: YScaleType;\n  height: number;\n  width: number;\n}\n\n// Represents the core the chart logic, including the model of all allowed user interactions.\nexport default function useChartModel<T extends AreaChartProps.DataTypes>({\n  externalSeries: allSeries,\n  visibleSeries: series,\n  setVisibleSeries,\n  highlightedSeries,\n  setHighlightedSeries,\n  xDomain,\n  yDomain,\n  xScaleType,\n  yScaleType,\n  height,\n  width,\n}: UseChartModelProps<T>): ChartModel<T> {\n  // Chart elements refs used in handlers.\n  const plotRef = useRef<ChartPlotRef>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const verticalMarkerRef = useRef<SVGLineElement>(null);\n\n  const stableSetVisibleSeries = useStableEventHandler(setVisibleSeries);\n\n  const model = useMemo(() => {\n    // Compute scales, ticks and two-dimensional plots.\n    const computed = computeChartProps({\n      series,\n      xDomain,\n      yDomain,\n      xScaleType,\n      yScaleType,\n      height,\n      width,\n    });\n\n    // A store for chart interactions that don't require plot recomputation.\n    const interactions = new InteractionsStore(series, computed.plot);\n\n    // A series decorator to provide extra props such as color and marker type.\n    const getInternalSeries = createSeriesDecorator(allSeries);\n\n    // A Callback for svg mouseover to hover the plot points.\n    // Throttling is necessary for a substantially smoother customer experience.\n    const onSVGMouseMoveThrottled = throttle((clientX: number, clientY: number) => {\n      // No hover logic when the popover is pinned or no data available.\n      if (interactions.get().isPopoverPinned || !plotRef.current || interactions.plot.xy.length === 0) {\n        return;\n      }\n\n      const svgRect = plotRef.current.svg.getBoundingClientRect();\n      const offsetX = clientX - svgRect.left;\n      const offsetY = clientY - svgRect.top;\n\n      const closestX = findClosest(interactions.plot.xy, offsetX, xPoints => xPoints[0].scaled.x);\n      const closestPoint = findClosest(closestX, offsetY, point => point.scaled.y1);\n\n      // If close enough to the point - highlight the point and its column.\n      // If not - only highlight the closest column.\n      if (\n        Math.abs(offsetX - closestPoint.scaled.x) < MAX_HOVER_MARGIN &&\n        Math.abs(offsetY - closestPoint.scaled.y1) < MAX_HOVER_MARGIN\n      ) {\n        interactions.highlightPoint(closestPoint);\n      } else {\n        interactions.highlightX(closestX);\n      }\n    }, SVG_HOVER_THROTTLE);\n\n    const onSVGMouseMove = ({ clientX, clientY }: React.MouseEvent<SVGElement, MouseEvent>) =>\n      onSVGMouseMoveThrottled(clientX, clientY);\n\n    // A callback for svg mouseout to clear all highlights.\n    const onSVGMouseOut = (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n      // Because the mouseover is throttled, in can occur slightly after the mouseout,\n      // neglecting its effect; cancelling the throttled function prevents that.\n      onSVGMouseMoveThrottled.cancel();\n\n      // No hover logic when the popover is pinned.\n      if (interactions.get().isPopoverPinned) {\n        return;\n      }\n\n      // Check if the target is contained within svg to allow hovering on the popover body.\n      if (!nodeContains(plotRef.current!.svg, event.relatedTarget as Element)) {\n        interactions.clearHighlightedLegend();\n        interactions.clearHighlight();\n      }\n    };\n\n    // A callback for svg click to pin/unpin the popover.\n    const onSVGMouseDown = () => {\n      interactions.togglePopoverPin();\n    };\n\n    // A helper function to highlight the next or previous point within selected series.\n    const moveWithinSeries = (direction: -1 | 1) => {\n      // Can only use motion when a particular point is highlighted.\n      const point = interactions.get().highlightedPoint;\n      if (!point) {\n        return;\n      }\n\n      // Take the index of the currently highlighted series.\n      const sIndex = point.index.s;\n      // Take the incremented(circularly) x-index of the currently highlighted point.\n      const xIndex = circleIndex(point.index.x + direction, [0, interactions.plot.xs.length - 1]);\n      // Highlight the next point using x:s grouped data.\n      interactions.highlightPoint(interactions.plot.xs[xIndex][sIndex]);\n    };\n\n    // A helper function to highlight the next or previous point withing selected column.\n    const moveBetweenSeries = (direction: -1 | 1) => {\n      // Can only use motion when a particular point is highlighted.\n      const point = interactions.get().highlightedPoint;\n      if (!point) {\n        return;\n      }\n\n      // Take the index of the currently highlighted column.\n      const xIndex = point.index.x;\n      // Take the incremented(circularly) y-index of the currently highlighted point.\n      const yIndex = circleIndex(point.index.y + direction, [0, interactions.plot.xy[xIndex].length - 1]);\n      // Highlight the next point using x:y grouped data.\n      interactions.highlightPoint(interactions.plot.xy[xIndex][yIndex]);\n    };\n\n    // A callback for svg keydown to enable motions and popover pin with the keyboard.\n    const onSVGKeyDown = (event: React.KeyboardEvent) => {\n      const keyCode = event.keyCode;\n      if (\n        keyCode !== KeyCode.up &&\n        keyCode !== KeyCode.right &&\n        keyCode !== KeyCode.down &&\n        keyCode !== KeyCode.left &&\n        keyCode !== KeyCode.space &&\n        keyCode !== KeyCode.enter\n      ) {\n        return;\n      }\n\n      // Preventing default fixes an issue in Safari+VO when VO additionally interprets arrow keys as its commands.\n      event.preventDefault();\n\n      // No keydown logic when the popover is pinned.\n      if (interactions.get().isPopoverPinned) {\n        return;\n      }\n\n      // Move up/down.\n      if (keyCode === KeyCode.down || keyCode === KeyCode.up) {\n        moveBetweenSeries(keyCode === KeyCode.down ? -1 : 1);\n      }\n      // Move left/right.\n      else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {\n        moveWithinSeries(keyCode === KeyCode.right ? 1 : -1);\n      }\n      // Pin popover.\n      else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {\n        interactions.pinPopover();\n      }\n    };\n\n    // A callback for svg focus to highlight series.\n    const onSVGFocus = (_event: React.FocusEvent, trigger: 'mouse' | 'keyboard') => {\n      // When focus is caused by a click event nothing is expected as clicks are handled separately.\n      // Otherwise, select the first series point.\n      if (trigger === 'keyboard') {\n        interactions.highlightFirstPoint();\n      }\n    };\n\n    // A callback for svg blur to clear all highlights unless the popover is pinned.\n    const onSVGBlur = () => {\n      // Pinned popover stays pinned even if the focus is lost.\n      // If blur is not caused by the popover, forget the previously highlighted point.\n      if (!interactions.get().isPopoverPinned) {\n        interactions.clearHighlight();\n      }\n    };\n\n    const onFilterSeries = (series: readonly AreaChartProps.Series<T>[]) => {\n      stableSetVisibleSeries(series);\n    };\n\n    const onLegendHighlight = (series: null | AreaChartProps.Series<T>) => {\n      interactions.highlightSeries(series);\n    };\n\n    const onPopoverDismiss = (outsideClick?: boolean) => {\n      interactions.unpinPopover();\n\n      // Return focus back to the application or plot (when no point is highlighted).\n      if (!outsideClick) {\n        // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n        setTimeout(() => {\n          if (interactions.get().highlightedPoint) {\n            plotRef.current!.focusApplication();\n          } else {\n            interactions.clearHighlight();\n            plotRef.current!.focusPlot();\n          }\n        }, 0);\n      }\n    };\n\n    const onContainerBlur = () => {\n      interactions.clearState();\n    };\n\n    return {\n      width,\n      height,\n      series,\n      allSeries,\n      getInternalSeries,\n      computed,\n      interactions,\n      handlers: {\n        onSVGMouseMove,\n        onSVGMouseOut,\n        onSVGMouseDown,\n        onSVGKeyDown,\n        onSVGFocus,\n        onSVGBlur,\n        onFilterSeries,\n        onLegendHighlight,\n        onPopoverDismiss,\n        onContainerBlur,\n      },\n      refs: {\n        plot: plotRef,\n        container: containerRef,\n        verticalMarker: verticalMarkerRef,\n      },\n    };\n  }, [allSeries, series, xDomain, yDomain, xScaleType, yScaleType, height, width, stableSetVisibleSeries]);\n\n  // Notify client when series highlight change.\n  useReaction(model.interactions, state => state.highlightedSeries, setHighlightedSeries);\n\n  // Update interactions store when series highlight in a controlled way.\n  useEffect(() => {\n    if (highlightedSeries !== model.interactions.get().highlightedSeries) {\n      model.interactions.highlightSeries(highlightedSeries);\n    }\n  }, [model, highlightedSeries]);\n\n  return model;\n}\n"]},"metadata":{},"sourceType":"module"}