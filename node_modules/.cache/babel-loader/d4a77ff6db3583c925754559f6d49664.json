{"ast":null,"code":"import { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n/**\n * Creates a list of all bar (and mixed) groups in the series with their scaled positions.\n */\n\nexport default function makeScaledBarGroups(series, xScale, plotWidth, plotHeight, axis) {\n  if (!xScale.isCategorical()) {\n    return [];\n  }\n\n  return xScale.domain.map(function (x) {\n    var scaledX = xScale.d3Scale(x);\n    var isValid = typeof scaledX !== 'undefined' && isFinite(scaledX);\n    return {\n      x: x,\n      isValid: isValid,\n      hasData: series.some(function (_a) {\n        var series = _a.series; // If there is a threshold series, every valid group will have a data point.\n\n        if (isYThreshold(series)) {\n          return true;\n        } // X-thresholds do not have associated value.\n\n\n        if (isXThreshold(series)) {\n          return false;\n        }\n\n        if (isDataSeries(series)) {\n          return series.data.some(function (datum) {\n            return matchesX(datum.x, x);\n          });\n        }\n\n        return false;\n      }),\n      position: axis === 'x' ? {\n        x: 0,\n        y: isValid ? scaledX || 0 : 0,\n        width: plotWidth,\n        height: xScale.d3Scale.bandwidth()\n      } : {\n        x: isValid ? scaledX || 0 : 0,\n        y: 0,\n        width: xScale.d3Scale.bandwidth(),\n        height: plotHeight\n      }\n    };\n  });\n}","map":{"version":3,"mappings":"AAIA,SAASA,YAAT,EAAuBC,YAAvB,EAAqCC,YAArC,EAAmDC,QAAnD,QAAmE,SAAnE;AAcA;;;;AAGA,eAAc,SAAUC,mBAAV,CACZC,MADY,EAEZC,MAFY,EAGZC,SAHY,EAIZC,UAJY,EAKZC,IALY,EAKG;EAEf,IAAI,CAACH,MAAM,CAACI,aAAP,EAAL,EAA6B;IAC3B,OAAO,EAAP;EACD;;EAED,OAAQJ,MAAM,CAACK,MAAP,CAAmCC,GAAnC,CAAuC,aAAC;IAC9C,IAAMC,OAAO,GAAGP,MAAM,CAACQ,OAAP,CAAeC,CAAf,CAAhB;IACA,IAAMC,OAAO,GAAG,OAAOH,OAAP,KAAmB,WAAnB,IAAkCI,QAAQ,CAACJ,OAAD,CAA1D;IAEA,OAAO;MACLE,CAAC,GADI;MAELC,OAAO,SAFF;MAGLE,OAAO,EAAEb,MAAM,CAACc,IAAP,CAAY,UAACC,EAAD,EAAW;YAARf,MAAM,aAAE,CAC9B;;QACA,IAAIH,YAAY,CAACG,MAAD,CAAhB,EAA0B;UACxB,OAAO,IAAP;QACD,CAJ6B,CAK9B;;;QACA,IAAIJ,YAAY,CAACI,MAAD,CAAhB,EAA0B;UACxB,OAAO,KAAP;QACD;;QACD,IAAIL,YAAY,CAACK,MAAD,CAAhB,EAA0B;UACxB,OAAQA,MAAM,CAACgB,IAAP,CAA+DF,IAA/D,CAAoE,iBAAK;YAAI,eAAQ,CAACG,KAAK,CAACP,CAAP,EAAUA,CAAV,CAAR;UAAoB,CAAjG,CAAR;QACD;;QACD,OAAO,KAAP;MACD,CAbQ,CAHJ;MAiBLQ,QAAQ,EACNd,IAAI,KAAK,GAAT,GACI;QACEM,CAAC,EAAE,CADL;QAEES,CAAC,EAAER,OAAO,GAAGH,OAAO,IAAI,CAAd,GAAkB,CAF9B;QAGEY,KAAK,EAAElB,SAHT;QAIEmB,MAAM,EAAEpB,MAAM,CAACQ,OAAP,CAAea,SAAf;MAJV,CADJ,GAOI;QACEZ,CAAC,EAAEC,OAAO,GAAGH,OAAO,IAAI,CAAd,GAAkB,CAD9B;QAEEW,CAAC,EAAE,CAFL;QAGEC,KAAK,EAAEnB,MAAM,CAACQ,OAAP,CAAea,SAAf,EAHT;QAIED,MAAM,EAAElB;MAJV;IAzBD,CAAP;EAgCD,CApCO,CAAR;AAqCD","names":["isDataSeries","isXThreshold","isYThreshold","matchesX","makeScaledBarGroups","series","xScale","plotWidth","plotHeight","axis","isCategorical","domain","map","scaledX","d3Scale","x","isValid","isFinite","hasData","some","_a","data","datum","position","y","width","height","bandwidth"],"sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/make-scaled-bar-groups.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps } from './interfaces';\nimport { ChartScale } from '../internal/components/cartesian-chart/scales';\nimport { isDataSeries, isXThreshold, isYThreshold, matchesX } from './utils';\n\nexport interface ScaledBarGroup<T> {\n  x: T;\n  hasData: boolean;\n  isValid: boolean;\n  position: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\n/**\n * Creates a list of all bar (and mixed) groups in the series with their scaled positions.\n */\nexport default function makeScaledBarGroups<T extends ChartDataTypes>(\n  series: ReadonlyArray<InternalChartSeries<T>>,\n  xScale: ChartScale,\n  plotWidth: number,\n  plotHeight: number,\n  axis: 'x' | 'y'\n): ScaledBarGroup<T>[] {\n  if (!xScale.isCategorical()) {\n    return [];\n  }\n\n  return (xScale.domain as ReadonlyArray<T>).map(x => {\n    const scaledX = xScale.d3Scale(x);\n    const isValid = typeof scaledX !== 'undefined' && isFinite(scaledX);\n\n    return {\n      x,\n      isValid,\n      hasData: series.some(({ series }) => {\n        // If there is a threshold series, every valid group will have a data point.\n        if (isYThreshold(series)) {\n          return true;\n        }\n        // X-thresholds do not have associated value.\n        if (isXThreshold(series)) {\n          return false;\n        }\n        if (isDataSeries(series)) {\n          return (series.data as ReadonlyArray<MixedLineBarChartProps.Datum<T>>).some(datum => matchesX(datum.x, x));\n        }\n        return false;\n      }),\n      position:\n        axis === 'x'\n          ? {\n              x: 0,\n              y: isValid ? scaledX || 0 : 0,\n              width: plotWidth,\n              height: xScale.d3Scale.bandwidth(),\n            }\n          : {\n              x: isValid ? scaledX || 0 : 0,\n              y: 0,\n              width: xScale.d3Scale.bandwidth(),\n              height: plotHeight,\n            },\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}