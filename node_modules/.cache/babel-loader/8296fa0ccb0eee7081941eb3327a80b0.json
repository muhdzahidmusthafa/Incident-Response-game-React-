{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport OptionsList from '../internal/components/options-list';\nimport { scrollUntilVisible } from '../internal/utils/scrollable-containers';\nimport { getBaseProps } from '../internal/base-component';\nimport AutosuggestOption from './autosuggest-option';\nimport styles from './styles.css.js';\nexport var getOptionProps = function (index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus) {\n  var nativeAttributes = item === highlightedOption ? highlightedA11yProps : {};\n  var baseOptionProps = getBaseProps(nativeAttributes);\n  var isLastItem = index === filteredItems.length - 1;\n  var isNotEnteredTextItem = filteredItems.length > 1;\n  var padBottom = !hasDropdownStatus && isNotEnteredTextItem && isLastItem;\n  return __assign({\n    nativeAttributes: nativeAttributes,\n    padBottom: padBottom\n  }, baseOptionProps);\n};\n\nvar PlainList = function (_a) {\n  var handleLoadMore = _a.handleLoadMore,\n      filteredItems = _a.filteredItems,\n      usingMouse = _a.usingMouse,\n      menuProps = _a.menuProps,\n      highlightedOption = _a.highlightedOption,\n      highlightedIndex = _a.highlightedIndex,\n      enteredTextLabel = _a.enteredTextLabel,\n      highlightedA11yProps = _a.highlightedA11yProps,\n      hasDropdownStatus = _a.hasDropdownStatus,\n      highlightText = _a.highlightText,\n      listBottom = _a.listBottom,\n      screenReaderContent = _a.screenReaderContent;\n  var listRef = useRef(null);\n  useEffect(function () {\n    var _a;\n\n    var item = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(\"[data-mouse-target=\\\"\".concat(highlightedIndex, \"\\\"]\"));\n\n    if (!usingMouse.current && item) {\n      scrollUntilVisible(item);\n    }\n  }, [usingMouse, highlightedIndex]);\n  return React.createElement(OptionsList, __assign({}, menuProps, {\n    onLoadMore: handleLoadMore,\n    open: true,\n    ref: listRef,\n    // to prevent closing the list when clicking the scrollbar on IE11\n    nativeAttributes: {\n      unselectable: 'on'\n    }\n  }), filteredItems.map(function (item, index) {\n    var optionProps = getOptionProps(index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus);\n    return React.createElement(AutosuggestOption, __assign({\n      highlightText: highlightText,\n      option: item,\n      highlighted: item === highlightedOption,\n      key: index,\n      \"data-mouse-target\": index,\n      enteredTextLabel: enteredTextLabel,\n      screenReaderContent: screenReaderContent\n    }, optionProps));\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n};\n\nexport default PlainList;","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AAEA,OAAOC,WAAP,MAA8C,qCAA9C;AACA,SAASC,kBAAT,QAAmC,yCAAnC;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,OAAOC,iBAAP,MAA8B,sBAA9B;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AAiBA,OAAO,IAAMC,cAAc,GAAG,UAC5BC,KAD4B,EAE5BC,IAF4B,EAG5BC,aAH4B,EAI5BC,oBAJ4B,EAK5BC,iBAL4B,EAM5BC,iBAN4B,EAMD;EAE3B,IAAMC,gBAAgB,GAAGL,IAAI,KAAKG,iBAAT,GAA6BD,oBAA7B,GAAoD,EAA7E;EACA,IAAMI,eAAe,GAAGX,YAAY,CAACU,gBAAD,CAApC;EACA,IAAME,UAAU,GAAGR,KAAK,KAAKE,aAAa,CAACO,MAAd,GAAuB,CAApD;EACA,IAAMC,oBAAoB,GAAGR,aAAa,CAACO,MAAd,GAAuB,CAApD;EACA,IAAME,SAAS,GAAG,CAACN,iBAAD,IAAsBK,oBAAtB,IAA8CF,UAAhE;EAEA;IAASF,gBAAgB,kBAAzB;IAA2BK,SAAS;EAApC,GAAyCJ,eAAzC;AACD,CAfM;;AAiBP,IAAMK,SAAS,GAAG,UAACC,EAAD,EAaN;MAZVC,cAAc;MACdZ,aAAa;MACba,UAAU;MACVC,SAAS;MACTZ,iBAAiB;MACjBa,gBAAgB;MAChBC,gBAAgB;MAChBf,oBAAoB;MACpBE,iBAAiB;MACjBc,aAAa;MACbC,UAAU;MACVC,mBAAmB;EAEnB,IAAMC,OAAO,GAAG7B,MAAM,CAAmB,IAAnB,CAAtB;EAEAD,SAAS,CAAC;;;IACR,IAAMS,IAAI,GAAG,aAAO,CAACsB,OAAR,MAAe,IAAf,IAAeV,aAAf,GAAe,MAAf,GAAeA,GAAEW,aAAF,CAAgB,+BAAuBP,gBAAvB,EAAuC,KAAvC,CAAhB,CAA5B;;IACA,IAAI,CAACF,UAAU,CAACQ,OAAZ,IAAuBtB,IAA3B,EAAiC;MAC/BN,kBAAkB,CAACM,IAAD,CAAlB;IACD;EACF,CALQ,EAKN,CAACc,UAAD,EAAaE,gBAAb,CALM,CAAT;EAOA,OACE1B,oBAACG,WAAD,EAAY+B,aACNT,SADM,EACG;IACbU,UAAU,EAAEZ,cADC;IAEba,IAAI,EAAE,IAFO;IAGbC,GAAG,EAAEN,OAHQ;IAIb;IACAhB,gBAAgB,EAAE;MAAEuB,YAAY,EAAE;IAAhB;EALL,CADH,CAAZ,EAQG3B,aAAa,CAAC4B,GAAd,CAAkB,UAAC7B,IAAD,EAAOD,KAAP,EAAY;IAC7B,IAAM+B,WAAW,GAAGhC,cAAc,CAChCC,KADgC,EAEhCC,IAFgC,EAGhCC,aAHgC,EAIhCC,oBAJgC,EAKhCC,iBALgC,EAMhCC,iBANgC,CAAlC;IASA,OACEd,oBAACM,iBAAD,EAAkB4B;MAChBN,aAAa,EAAEA,aADC;MAEhBa,MAAM,EAAE/B,IAFQ;MAGhBgC,WAAW,EAAEhC,IAAI,KAAKG,iBAHN;MAIhB8B,GAAG,EAAElC,KAJW;MAIN,qBACSA,KALH;MAMhBkB,gBAAgB,EAAEA,gBANF;MAOhBG,mBAAmB,EAAEA;IAPL,GAQZU,WARY,CAAlB,CADF;EAYD,CAtBA,CARH,EA+BGX,UAAU,GACT7B;IAAI4C,IAAI,EAAC,QAAT;IAAkBC,SAAS,EAAEtC,MAAM,CAAC,aAAD;EAAnC,GACGsB,UADH,CADS,GAIP,IAnCN,CADF;AAuCD,CA9DD;;AAgEA,eAAeR,SAAf","names":["React","useEffect","useRef","OptionsList","scrollUntilVisible","getBaseProps","AutosuggestOption","styles","getOptionProps","index","item","filteredItems","highlightedA11yProps","highlightedOption","hasDropdownStatus","nativeAttributes","baseOptionProps","isLastItem","length","isNotEnteredTextItem","padBottom","PlainList","_a","handleLoadMore","usingMouse","menuProps","highlightedIndex","enteredTextLabel","highlightText","listBottom","screenReaderContent","listRef","current","querySelector","__assign","onLoadMore","open","ref","unselectable","map","optionProps","option","highlighted","key","role","className"],"sourceRoot":"","sources":["../../../src/autosuggest/plain-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\n\nimport OptionsList, { OptionsListProps } from '../internal/components/options-list';\nimport { scrollUntilVisible } from '../internal/utils/scrollable-containers';\nimport { getBaseProps } from '../internal/base-component';\n\nimport AutosuggestOption from './autosuggest-option';\nimport { AutosuggestProps, AutosuggestItem } from './interfaces';\nimport styles from './styles.css.js';\n\nexport interface ListProps {\n  menuProps: Omit<OptionsListProps, 'children'>;\n  handleLoadMore: () => void;\n  filteredItems: AutosuggestItem[];\n  usingMouse: React.MutableRefObject<boolean>;\n  highlightedOption?: AutosuggestItem;\n  highlightedIndex: number;\n  enteredTextLabel: AutosuggestProps.EnteredTextLabel;\n  highlightedA11yProps: Record<string, string | number | boolean>;\n  hasDropdownStatus?: boolean;\n  highlightText: string;\n  listBottom?: React.ReactNode;\n  screenReaderContent?: string;\n}\n\nexport const getOptionProps = (\n  index: number,\n  item: AutosuggestItem,\n  filteredItems: AutosuggestItem[],\n  highlightedA11yProps: ListProps['highlightedA11yProps'],\n  highlightedOption?: ListProps['highlightedOption'],\n  hasDropdownStatus?: boolean\n) => {\n  const nativeAttributes = item === highlightedOption ? highlightedA11yProps : {};\n  const baseOptionProps = getBaseProps(nativeAttributes);\n  const isLastItem = index === filteredItems.length - 1;\n  const isNotEnteredTextItem = filteredItems.length > 1;\n  const padBottom = !hasDropdownStatus && isNotEnteredTextItem && isLastItem;\n\n  return { nativeAttributes, padBottom, ...baseOptionProps };\n};\n\nconst PlainList = ({\n  handleLoadMore,\n  filteredItems,\n  usingMouse,\n  menuProps,\n  highlightedOption,\n  highlightedIndex,\n  enteredTextLabel,\n  highlightedA11yProps,\n  hasDropdownStatus,\n  highlightText,\n  listBottom,\n  screenReaderContent,\n}: ListProps) => {\n  const listRef = useRef<HTMLUListElement>(null);\n\n  useEffect(() => {\n    const item = listRef.current?.querySelector(`[data-mouse-target=\"${highlightedIndex}\"]`);\n    if (!usingMouse.current && item) {\n      scrollUntilVisible(item as HTMLElement);\n    }\n  }, [usingMouse, highlightedIndex]);\n\n  return (\n    <OptionsList\n      {...menuProps}\n      onLoadMore={handleLoadMore}\n      open={true}\n      ref={listRef}\n      // to prevent closing the list when clicking the scrollbar on IE11\n      nativeAttributes={{ unselectable: 'on' }}\n    >\n      {filteredItems.map((item, index) => {\n        const optionProps = getOptionProps(\n          index,\n          item,\n          filteredItems,\n          highlightedA11yProps,\n          highlightedOption,\n          hasDropdownStatus\n        );\n\n        return (\n          <AutosuggestOption\n            highlightText={highlightText}\n            option={item}\n            highlighted={item === highlightedOption}\n            key={index}\n            data-mouse-target={index}\n            enteredTextLabel={enteredTextLabel}\n            screenReaderContent={screenReaderContent}\n            {...optionProps}\n          />\n        );\n      })}\n      {listBottom ? (\n        <li role=\"option\" className={styles['list-bottom']}>\n          {listBottom}\n        </li>\n      ) : null}\n    </OptionsList>\n  );\n};\n\nexport default PlainList;\n"]},"metadata":{},"sourceType":"module"}