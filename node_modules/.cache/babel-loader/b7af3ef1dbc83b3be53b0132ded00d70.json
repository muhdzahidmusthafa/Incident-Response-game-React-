{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useCallback, useRef, useState } from 'react';\nimport styles from './styles.css.js';\nimport Calendar from './calendar';\nimport { normalizeLocale } from './calendar/utils/locales';\nimport { getDateLabel } from './calendar/utils/intl';\nimport { memoizedDate } from './calendar/utils/date';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport Dropdown from '../internal/components/dropdown';\nimport DateInput from '../internal/components/date-input';\nimport { getBaseProps } from '../internal/base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name.js';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { useFocusTracker } from '../internal/hooks/use-focus-tracker.js';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { InternalButton } from '../button/internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport FocusLock from '../internal/components/focus-lock';\nimport { useDatePicker } from './use-date-picker.js';\nvar DatePicker = React.forwardRef(function (_a, ref) {\n  var _b = _a.locale,\n      locale = _b === void 0 ? '' : _b,\n      startOfWeek = _a.startOfWeek,\n      isDateEnabled = _a.isDateEnabled,\n      nextMonthAriaLabel = _a.nextMonthAriaLabel,\n      previousMonthAriaLabel = _a.previousMonthAriaLabel,\n      todayAriaLabel = _a.todayAriaLabel,\n      _c = _a.placeholder,\n      placeholder = _c === void 0 ? '' : _c,\n      _d = _a.value,\n      value = _d === void 0 ? '' : _d,\n      _e = _a.readOnly,\n      readOnly = _e === void 0 ? false : _e,\n      _f = _a.disabled,\n      disabled = _f === void 0 ? false : _f,\n      onBlur = _a.onBlur,\n      _g = _a.autoFocus,\n      autoFocus = _g === void 0 ? false : _g,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      name = _a.name,\n      ariaLabel = _a.ariaLabel,\n      ariaRequired = _a.ariaRequired,\n      ariaLabelledby = _a.ariaLabelledby,\n      ariaDescribedby = _a.ariaDescribedby,\n      controlId = _a.controlId,\n      invalid = _a.invalid,\n      openCalendarAriaLabel = _a.openCalendarAriaLabel,\n      expandToViewport = _a.expandToViewport,\n      rest = __rest(_a, [\"locale\", \"startOfWeek\", \"isDateEnabled\", \"nextMonthAriaLabel\", \"previousMonthAriaLabel\", \"todayAriaLabel\", \"placeholder\", \"value\", \"readOnly\", \"disabled\", \"onBlur\", \"autoFocus\", \"onChange\", \"onFocus\", \"name\", \"ariaLabel\", \"ariaRequired\", \"ariaLabelledby\", \"ariaDescribedby\", \"controlId\", \"invalid\", \"openCalendarAriaLabel\", \"expandToViewport\"]);\n\n  var __internalRootRef = useBaseComponent('DatePicker').__internalRootRef;\n\n  var _h = useDatePicker({\n    value: value,\n    onChange: onChange\n  }),\n      defaultDisplayedDate = _h.defaultDisplayedDate,\n      displayedDate = _h.displayedDate,\n      setDisplayedDate = _h.setDisplayedDate,\n      selectedDate = _h.selectedDate,\n      onChangeMonthHandler = _h.onChangeMonthHandler,\n      onSelectDateHandler = _h.onSelectDateHandler;\n\n  var baseProps = getBaseProps(rest);\n\n  var _j = useState(false),\n      isDropDownOpen = _j[0],\n      setIsDropDownOpen = _j[1];\n\n  var normalizedLocale = normalizeLocale('DatePicker', locale !== null && locale !== void 0 ? locale : '');\n  var internalInputRef = useRef(null);\n  var buttonRef = useRef(null);\n  useForwardFocus(ref, internalInputRef);\n  var rootRef = useRef(null);\n  var dropdownId = useUniqueId('calender');\n  var mergedRef = useMergeRefs(rootRef, __internalRootRef);\n  useFocusTracker({\n    rootRef: rootRef,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    viewportId: expandToViewport ? dropdownId : ''\n  });\n  var onDropdownCloseHandler = useCallback(function () {\n    setDisplayedDate(defaultDisplayedDate);\n    setIsDropDownOpen(false);\n  }, [defaultDisplayedDate, setDisplayedDate, setIsDropDownOpen]);\n\n  var onButtonClickHandler = function () {\n    if (!isDropDownOpen) {\n      setIsDropDownOpen(true);\n    }\n  };\n\n  var onWrapperKeyDownHandler = function (event) {\n    var _a;\n\n    if (event.keyCode === KeyCode.escape && isDropDownOpen) {\n      (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      setIsDropDownOpen(false);\n    }\n  };\n\n  var onInputChangeHandler = function (event) {\n    fireNonCancelableEvent(onChange, {\n      value: event.detail.value\n    });\n  };\n\n  var onInputBlurHandler = function () {\n    if (!isDropDownOpen) {\n      setDisplayedDate(defaultDisplayedDate);\n      setIsDropDownOpen(false);\n    }\n  };\n\n  var DateInputElement = React.createElement(\"div\", {\n    className: styles['date-picker-trigger']\n  }, React.createElement(\"div\", {\n    className: styles['date-picker-input']\n  }, React.createElement(DateInput, {\n    name: name,\n    invalid: invalid,\n    controlId: controlId,\n    ariaLabelledby: ariaLabelledby,\n    ariaDescribedby: ariaDescribedby,\n    ariaLabel: ariaLabel,\n    ariaRequired: ariaRequired,\n    value: value,\n    autoComplete: false,\n    disableBrowserAutocorrect: true,\n    disableAutocompleteOnBlur: isDropDownOpen,\n    disabled: disabled,\n    readOnly: readOnly,\n    onChange: onInputChangeHandler,\n    onBlur: onInputBlurHandler,\n    placeholder: placeholder,\n    ref: internalInputRef,\n    autoFocus: autoFocus\n  })), React.createElement(\"div\", null, React.createElement(InternalButton, {\n    iconName: \"calendar\",\n    className: styles['open-calendar-button'],\n    onClick: onButtonClickHandler,\n    ref: buttonRef,\n    ariaLabel: openCalendarAriaLabel && openCalendarAriaLabel(value.length === 10 ? getDateLabel(normalizedLocale, memoizedDate('value', value)) : null),\n    disabled: disabled || readOnly,\n    formAction: \"none\"\n  })));\n  baseProps.className = clsx(baseProps.className, styles.root, styles['date-picker-container']);\n\n  if (readOnly || disabled) {\n    return React.createElement(\"div\", __assign({}, baseProps), DateInputElement);\n  }\n\n  checkControlled('DatePicker', 'value', value, 'onChange', onChange);\n\n  var handleMouseDown = function (event) {\n    // prevent currently focused element from losing it\n    event.preventDefault();\n  };\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    ref: mergedRef,\n    onKeyDown: onWrapperKeyDownHandler\n  }), React.createElement(Dropdown, {\n    stretchWidth: true,\n    stretchHeight: true,\n    open: isDropDownOpen,\n    onDropdownClose: onDropdownCloseHandler,\n    onMouseDown: handleMouseDown,\n    trigger: DateInputElement,\n    expandToViewport: expandToViewport,\n    scrollable: false,\n    dropdownId: dropdownId\n  }, isDropDownOpen && React.createElement(FocusLock, {\n    autoFocus: true\n  }, React.createElement(Calendar, {\n    selectedDate: memoizedDate('value', selectedDate),\n    displayedDate: memoizedDate('displayed', displayedDate),\n    locale: normalizedLocale,\n    startOfWeek: startOfWeek,\n    isDateEnabled: isDateEnabled ? isDateEnabled : function () {\n      return true;\n    },\n    nextMonthLabel: nextMonthAriaLabel,\n    previousMonthLabel: previousMonthAriaLabel,\n    todayAriaLabel: todayAriaLabel,\n    onChangeMonth: onChangeMonthHandler,\n    onSelectDate: function (e) {\n      var _a;\n\n      onSelectDateHandler(e);\n      (_a = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      setIsDropDownOpen(false);\n    }\n  }))));\n});\napplyDisplayName(DatePicker, 'DatePicker');\nexport default DatePicker;","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,IAAqBC,WAArB,EAAkCC,MAAlC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,gBAAT,QAAiC,yCAAjC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,eAAT,QAAgC,wCAAhC;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AAEA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,YAAT,QAA6B,kCAA7B;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAIA,IAAMC,UAAU,GAAGxB,KAAK,CAACyB,UAAN,CACjB,UACEC,EADF,EA2BEC,GA3BF,EA2B+B;EAzB3B;EAAA,UAAM,mBAAG,EAAH,GAAKC,EAAX;EAAA,IACAC,WAAW,iBADX;EAAA,IAEAC,aAAa,mBAFb;EAAA,IAGAC,kBAAkB,wBAHlB;EAAA,IAIAC,sBAAsB,4BAJtB;EAAA,IAKAC,cAAc,oBALd;EAAA,IAMAC,mBANA;EAAA,IAMAC,WAAW,mBAAG,EAAH,GAAKD,EANhB;EAAA,IAOAE,aAPA;EAAA,IAOAC,KAAK,mBAAG,EAAH,GAAKD,EAPV;EAAA,IAQAE,gBARA;EAAA,IAQAC,QAAQ,mBAAG,KAAH,GAAQD,EARhB;EAAA,IASAE,gBATA;EAAA,IASAC,QAAQ,mBAAG,KAAH,GAAQD,EAThB;EAAA,IAUAE,MAAM,YAVN;EAAA,IAWAC,iBAXA;EAAA,IAWAC,SAAS,mBAAG,KAAH,GAAQD,EAXjB;EAAA,IAYAE,QAAQ,cAZR;EAAA,IAaAC,OAAO,aAbP;EAAA,IAcAC,IAAI,UAdJ;EAAA,IAeAC,SAAS,eAfT;EAAA,IAgBAC,YAAY,kBAhBZ;EAAA,IAiBAC,cAAc,oBAjBd;EAAA,IAkBAC,eAAe,qBAlBf;EAAA,IAmBAC,SAAS,eAnBT;EAAA,IAoBAC,OAAO,aApBP;EAAA,IAqBAC,qBAAqB,2BArBrB;EAAA,IAsBAC,gBAAgB,sBAtBhB;EAAA,IAuBGC,IAAI,cAxBT,yVAwBS,CAvBP;;EA2BM,qBAAiB,GAAKrC,gBAAgB,CAAC,YAAD,CAAhB,CAA8BsC,iBAApD;;EAEF,SAOFlC,aAAa,CAAC;IAChBc,KAAK,OADW;IAEhBQ,QAAQ;EAFQ,CAAD,CAPX;EAAA,IACJa,oBAAoB,0BADhB;EAAA,IAEJC,aAAa,mBAFT;EAAA,IAGJC,gBAAgB,sBAHZ;EAAA,IAIJC,YAAY,kBAJR;EAAA,IAKJC,oBAAoB,0BALhB;EAAA,IAMJC,mBAAmB,yBANf;;EAYN,IAAMC,SAAS,GAAGnD,YAAY,CAAC2C,IAAD,CAA9B;;EACM,SAAsCrD,QAAQ,CAAU,KAAV,CAA9C;EAAA,IAAC8D,cAAc,QAAf;EAAA,IAAiBC,iBAAiB,QAAlC;;EACN,IAAMC,gBAAgB,GAAG7D,eAAe,CAAC,YAAD,EAAe8D,MAAM,SAAN,UAAM,WAAN,YAAU,EAAzB,CAAxC;EAEA,IAAMC,gBAAgB,GAAGnE,MAAM,CAAmB,IAAnB,CAA/B;EACA,IAAMoE,SAAS,GAAGpE,MAAM,CAAkB,IAAlB,CAAxB;EACAe,eAAe,CAACU,GAAD,EAAM0C,gBAAN,CAAf;EAEA,IAAME,OAAO,GAAGrE,MAAM,CAAiB,IAAjB,CAAtB;EACA,IAAMsE,UAAU,GAAGpD,WAAW,CAAC,UAAD,CAA9B;EACA,IAAMqD,SAAS,GAAGpD,YAAY,CAACkD,OAAD,EAAUd,iBAAV,CAA9B;EAEAzC,eAAe,CAAC;IAAEuD,OAAO,SAAT;IAAW7B,MAAM,QAAjB;IAAmBI,OAAO,SAA1B;IAA4B4B,UAAU,EAAEnB,gBAAgB,GAAGiB,UAAH,GAAgB;EAAxE,CAAD,CAAf;EAEA,IAAMG,sBAAsB,GAAG1E,WAAW,CAAC;IACzC2D,gBAAgB,CAACF,oBAAD,CAAhB;IACAQ,iBAAiB,CAAC,KAAD,CAAjB;EACD,CAHyC,EAGvC,CAACR,oBAAD,EAAuBE,gBAAvB,EAAyCM,iBAAzC,CAHuC,CAA1C;;EAKA,IAAMU,oBAAoB,GAAG;IAC3B,IAAI,CAACX,cAAL,EAAqB;MACnBC,iBAAiB,CAAC,IAAD,CAAjB;IACD;EACF,CAJD;;EAMA,IAAMW,uBAAuB,GAAG,UAACC,KAAD,EAA2C;;;IACzE,IAAIA,KAAK,CAACC,OAAN,KAAkBtE,OAAO,CAACuE,MAA1B,IAAoCf,cAAxC,EAAwD;MACtD,eAAS,CAACgB,OAAV,MAAiB,IAAjB,IAAiBvD,aAAjB,GAAiB,MAAjB,GAAiBA,GAAEwD,KAAF,EAAjB;MACAhB,iBAAiB,CAAC,KAAD,CAAjB;IACD;EACF,CALD;;EAOA,IAAMiB,oBAAoB,GAA2B,iBAAK;IACxDzE,sBAAsB,CAACmC,QAAD,EAAW;MAAER,KAAK,EAAEyC,KAAK,CAACM,MAAN,CAAa/C;IAAtB,CAAX,CAAtB;EACD,CAFD;;EAIA,IAAMgD,kBAAkB,GAAyB;IAC/C,IAAI,CAACpB,cAAL,EAAqB;MACnBL,gBAAgB,CAACF,oBAAD,CAAhB;MACAQ,iBAAiB,CAAC,KAAD,CAAjB;IACD;EACF,CALD;;EAOA,IAAMoB,gBAAgB,GACpBtF;IAAKuF,SAAS,EAAEnF,MAAM,CAAC,qBAAD;EAAtB,GACEJ;IAAKuF,SAAS,EAAEnF,MAAM,CAAC,mBAAD;EAAtB,GACEJ,oBAACY,SAAD,EAAU;IACRmC,IAAI,EAAEA,IADE;IAERM,OAAO,EAAEA,OAFD;IAGRD,SAAS,EAAEA,SAHH;IAIRF,cAAc,EAAEA,cAJR;IAKRC,eAAe,EAAEA,eALT;IAMRH,SAAS,EAAEA,SANH;IAORC,YAAY,EAAEA,YAPN;IAQRZ,KAAK,EAAEA,KARC;IASRmD,YAAY,EAAE,KATN;IAURC,yBAAyB,EAAE,IAVnB;IAWRC,yBAAyB,EAAEzB,cAXnB;IAYRxB,QAAQ,EAAEA,QAZF;IAaRF,QAAQ,EAAEA,QAbF;IAcRM,QAAQ,EAAEsC,oBAdF;IAeRzC,MAAM,EAAE2C,kBAfA;IAgBRlD,WAAW,EAAEA,WAhBL;IAiBRR,GAAG,EAAE0C,gBAjBG;IAkBRzB,SAAS,EAAEA;EAlBH,CAAV,CADF,CADF,EAuBE5C,iCACEA,oBAACkB,cAAD,EAAe;IACbyE,QAAQ,EAAC,UADI;IAEbJ,SAAS,EAAEnF,MAAM,CAAC,sBAAD,CAFJ;IAGbwF,OAAO,EAAEhB,oBAHI;IAIbjD,GAAG,EAAE2C,SAJQ;IAKbtB,SAAS,EACPM,qBAAqB,IACrBA,qBAAqB,CACnBjB,KAAK,CAACwD,MAAN,KAAiB,EAAjB,GAAsBtF,YAAY,CAAC4D,gBAAD,EAAmB3D,YAAY,CAAC,OAAD,EAAU6B,KAAV,CAA/B,CAAlC,GAAqF,IADlE,CAPV;IAWbI,QAAQ,EAAEA,QAAQ,IAAIF,QAXT;IAYbuD,UAAU,EAAC;EAZE,CAAf,CADF,CAvBF,CADF;EA2CA9B,SAAS,CAACuB,SAAV,GAAsBxF,IAAI,CAACiE,SAAS,CAACuB,SAAX,EAAsBnF,MAAM,CAAC2F,IAA7B,EAAmC3F,MAAM,CAAC,uBAAD,CAAzC,CAA1B;;EAEA,IAAImC,QAAQ,IAAIE,QAAhB,EAA0B;IACxB,OAAOzC,wCAASgE,SAAT,GAAqBsB,gBAArB,CAAP;EACD;;EAEDvE,eAAe,CAAC,YAAD,EAAe,OAAf,EAAwBsB,KAAxB,EAA+B,UAA/B,EAA2CQ,QAA3C,CAAf;;EAEA,IAAMmD,eAAe,GAAG,UAAClB,KAAD,EAAwB;IAC9C;IACAA,KAAK,CAACmB,cAAN;EACD,CAHD;;EAKA,OACEjG,wCAASgE,SAAT,EAAkB;IAAErC,GAAG,EAAE8C,SAAP;IAAkByB,SAAS,EAAErB;EAA7B,CAAlB,GACE7E,oBAACW,QAAD,EAAS;IACPwF,YAAY,EAAE,IADP;IAEPC,aAAa,EAAE,IAFR;IAGPC,IAAI,EAAEpC,cAHC;IAIPqC,eAAe,EAAE3B,sBAJV;IAKP4B,WAAW,EAAEP,eALN;IAMPQ,OAAO,EAAElB,gBANF;IAOP/B,gBAAgB,EAAEA,gBAPX;IAQPkD,UAAU,EAAE,KARL;IASPjC,UAAU,EAAEA;EATL,CAAT,EAWGP,cAAc,IACbjE,oBAACsB,SAAD,EAAU;IAACsB,SAAS,EAAE;EAAZ,CAAV,EACE5C,oBAACK,QAAD,EAAS;IACPwD,YAAY,EAAErD,YAAY,CAAC,OAAD,EAAUqD,YAAV,CADnB;IAEPF,aAAa,EAAEnD,YAAY,CAAC,WAAD,EAAcmD,aAAd,CAFpB;IAGPS,MAAM,EAAED,gBAHD;IAIPtC,WAAW,EAAEA,WAJN;IAKPC,aAAa,EAAEA,aAAa,GAAGA,aAAH,GAAmB;MAAM;IAAI,CALlD;IAMP4E,cAAc,EAAE3E,kBANT;IAOP4E,kBAAkB,EAAE3E,sBAPb;IAQPC,cAAc,EAAEA,cART;IASP2E,aAAa,EAAE9C,oBATR;IAUP+C,YAAY,EAAE,aAAC;;;MACb9C,mBAAmB,CAAC+C,CAAD,CAAnB;MACA,eAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAE7B,OAAX,MAAkB,IAAlB,IAAkBvD,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEwD,KAAF,EAAlB;MACAhB,iBAAiB,CAAC,KAAD,CAAjB;IACD;EAdM,CAAT,CADF,CAZJ,CADF,CADF;AAoCD,CAnLgB,CAAnB;AAsLApD,gBAAgB,CAACU,UAAD,EAAa,YAAb,CAAhB;AACA,eAAeA,UAAf","names":["clsx","React","useCallback","useRef","useState","styles","Calendar","normalizeLocale","getDateLabel","memoizedDate","KeyCode","fireNonCancelableEvent","Dropdown","DateInput","getBaseProps","applyDisplayName","checkControlled","useFocusTracker","useForwardFocus","InternalButton","useBaseComponent","useUniqueId","useMergeRefs","FocusLock","useDatePicker","DatePicker","forwardRef","_a","ref","_b","startOfWeek","isDateEnabled","nextMonthAriaLabel","previousMonthAriaLabel","todayAriaLabel","_c","placeholder","_d","value","_e","readOnly","_f","disabled","onBlur","_g","autoFocus","onChange","onFocus","name","ariaLabel","ariaRequired","ariaLabelledby","ariaDescribedby","controlId","invalid","openCalendarAriaLabel","expandToViewport","rest","__internalRootRef","defaultDisplayedDate","displayedDate","setDisplayedDate","selectedDate","onChangeMonthHandler","onSelectDateHandler","baseProps","isDropDownOpen","setIsDropDownOpen","normalizedLocale","locale","internalInputRef","buttonRef","rootRef","dropdownId","mergedRef","viewportId","onDropdownCloseHandler","onButtonClickHandler","onWrapperKeyDownHandler","event","keyCode","escape","current","focus","onInputChangeHandler","detail","onInputBlurHandler","DateInputElement","className","autoComplete","disableBrowserAutocorrect","disableAutocompleteOnBlur","iconName","onClick","length","formAction","root","handleMouseDown","preventDefault","onKeyDown","stretchWidth","stretchHeight","open","onDropdownClose","onMouseDown","trigger","scrollable","nextMonthLabel","previousMonthLabel","onChangeMonth","onSelectDate","e"],"sourceRoot":"","sources":["../../../src/date-picker/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { Ref, useCallback, useRef, useState } from 'react';\nimport styles from './styles.css.js';\nimport { DatePickerProps } from './interfaces';\nimport Calendar from './calendar';\nimport { normalizeLocale } from './calendar/utils/locales';\nimport { getDateLabel } from './calendar/utils/intl';\nimport { memoizedDate } from './calendar/utils/date';\nimport { InputProps } from '../input/interfaces';\nimport { KeyCode } from '../internal/keycode';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport Dropdown from '../internal/components/dropdown';\nimport DateInput from '../internal/components/date-input';\nimport { getBaseProps } from '../internal/base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name.js';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport { useFocusTracker } from '../internal/hooks/use-focus-tracker.js';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport FocusLock from '../internal/components/focus-lock';\nimport { useDatePicker } from './use-date-picker.js';\n\nexport { DatePickerProps };\n\nconst DatePicker = React.forwardRef(\n  (\n    {\n      locale = '',\n      startOfWeek,\n      isDateEnabled,\n      nextMonthAriaLabel,\n      previousMonthAriaLabel,\n      todayAriaLabel,\n      placeholder = '',\n      value = '',\n      readOnly = false,\n      disabled = false,\n      onBlur,\n      autoFocus = false,\n      onChange,\n      onFocus,\n      name,\n      ariaLabel,\n      ariaRequired,\n      ariaLabelledby,\n      ariaDescribedby,\n      controlId,\n      invalid,\n      openCalendarAriaLabel,\n      expandToViewport,\n      ...rest\n    }: DatePickerProps,\n    ref: Ref<DatePickerProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent('DatePicker');\n\n    const {\n      defaultDisplayedDate,\n      displayedDate,\n      setDisplayedDate,\n      selectedDate,\n      onChangeMonthHandler,\n      onSelectDateHandler,\n    } = useDatePicker({\n      value,\n      onChange,\n    });\n\n    const baseProps = getBaseProps(rest);\n    const [isDropDownOpen, setIsDropDownOpen] = useState<boolean>(false);\n    const normalizedLocale = normalizeLocale('DatePicker', locale ?? '');\n\n    const internalInputRef = useRef<HTMLInputElement>(null);\n    const buttonRef = useRef<ButtonProps.Ref>(null);\n    useForwardFocus(ref, internalInputRef);\n\n    const rootRef = useRef<HTMLDivElement>(null);\n    const dropdownId = useUniqueId('calender');\n    const mergedRef = useMergeRefs(rootRef, __internalRootRef);\n\n    useFocusTracker({ rootRef, onBlur, onFocus, viewportId: expandToViewport ? dropdownId : '' });\n\n    const onDropdownCloseHandler = useCallback(() => {\n      setDisplayedDate(defaultDisplayedDate);\n      setIsDropDownOpen(false);\n    }, [defaultDisplayedDate, setDisplayedDate, setIsDropDownOpen]);\n\n    const onButtonClickHandler = () => {\n      if (!isDropDownOpen) {\n        setIsDropDownOpen(true);\n      }\n    };\n\n    const onWrapperKeyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.keyCode === KeyCode.escape && isDropDownOpen) {\n        buttonRef.current?.focus();\n        setIsDropDownOpen(false);\n      }\n    };\n\n    const onInputChangeHandler: InputProps['onChange'] = event => {\n      fireNonCancelableEvent(onChange, { value: event.detail.value });\n    };\n\n    const onInputBlurHandler: InputProps['onBlur'] = () => {\n      if (!isDropDownOpen) {\n        setDisplayedDate(defaultDisplayedDate);\n        setIsDropDownOpen(false);\n      }\n    };\n\n    const DateInputElement = (\n      <div className={styles['date-picker-trigger']}>\n        <div className={styles['date-picker-input']}>\n          <DateInput\n            name={name}\n            invalid={invalid}\n            controlId={controlId}\n            ariaLabelledby={ariaLabelledby}\n            ariaDescribedby={ariaDescribedby}\n            ariaLabel={ariaLabel}\n            ariaRequired={ariaRequired}\n            value={value}\n            autoComplete={false}\n            disableBrowserAutocorrect={true}\n            disableAutocompleteOnBlur={isDropDownOpen}\n            disabled={disabled}\n            readOnly={readOnly}\n            onChange={onInputChangeHandler}\n            onBlur={onInputBlurHandler}\n            placeholder={placeholder}\n            ref={internalInputRef}\n            autoFocus={autoFocus}\n          />\n        </div>\n        <div>\n          <InternalButton\n            iconName=\"calendar\"\n            className={styles['open-calendar-button']}\n            onClick={onButtonClickHandler}\n            ref={buttonRef}\n            ariaLabel={\n              openCalendarAriaLabel &&\n              openCalendarAriaLabel(\n                value.length === 10 ? getDateLabel(normalizedLocale, memoizedDate('value', value)) : null\n              )\n            }\n            disabled={disabled || readOnly}\n            formAction=\"none\"\n          />\n        </div>\n      </div>\n    );\n\n    baseProps.className = clsx(baseProps.className, styles.root, styles['date-picker-container']);\n\n    if (readOnly || disabled) {\n      return <div {...baseProps}>{DateInputElement}</div>;\n    }\n\n    checkControlled('DatePicker', 'value', value, 'onChange', onChange);\n\n    const handleMouseDown = (event: React.MouseEvent) => {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    };\n\n    return (\n      <div {...baseProps} ref={mergedRef} onKeyDown={onWrapperKeyDownHandler}>\n        <Dropdown\n          stretchWidth={true}\n          stretchHeight={true}\n          open={isDropDownOpen}\n          onDropdownClose={onDropdownCloseHandler}\n          onMouseDown={handleMouseDown}\n          trigger={DateInputElement}\n          expandToViewport={expandToViewport}\n          scrollable={false}\n          dropdownId={dropdownId}\n        >\n          {isDropDownOpen && (\n            <FocusLock autoFocus={true}>\n              <Calendar\n                selectedDate={memoizedDate('value', selectedDate)}\n                displayedDate={memoizedDate('displayed', displayedDate)}\n                locale={normalizedLocale}\n                startOfWeek={startOfWeek}\n                isDateEnabled={isDateEnabled ? isDateEnabled : () => true}\n                nextMonthLabel={nextMonthAriaLabel}\n                previousMonthLabel={previousMonthAriaLabel}\n                todayAriaLabel={todayAriaLabel}\n                onChangeMonth={onChangeMonthHandler}\n                onSelectDate={e => {\n                  onSelectDateHandler(e);\n                  buttonRef?.current?.focus();\n                  setIsDropDownOpen(false);\n                }}\n              />\n            </FocusLock>\n          )}\n        </Dropdown>\n      </div>\n    );\n  }\n);\n\napplyDisplayName(DatePicker, 'DatePicker');\nexport default DatePicker;\n"]},"metadata":{},"sourceType":"module"}