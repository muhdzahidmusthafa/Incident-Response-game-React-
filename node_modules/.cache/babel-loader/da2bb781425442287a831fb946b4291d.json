{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport Dropdown from '../../internal/components/dropdown';\nimport useHiddenDescription from '../utils/use-hidden-description';\nimport Tooltip from '../tooltip.js';\nimport { getMenuItemProps } from '../utils/menu-item';\n\nvar ExpandableCategoryElement = function (_a) {\n  var _b, _c;\n\n  var item = _a.item,\n      onItemActivate = _a.onItemActivate,\n      onGroupToggle = _a.onGroupToggle,\n      targetItem = _a.targetItem,\n      isHighlighted = _a.isHighlighted,\n      isExpanded = _a.isExpanded,\n      highlightItem = _a.highlightItem,\n      disabled = _a.disabled,\n      expandToViewport = _a.expandToViewport,\n      variant = _a.variant;\n  var highlighted = isHighlighted(item);\n  var expanded = isExpanded(item);\n  var triggerRef = React.useRef(null);\n  var ref = useRef(null);\n  useEffect(function () {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  var onClick = function (event) {\n    var _a;\n\n    if (!disabled) {\n      event.preventDefault();\n      onGroupToggle(item, event);\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  };\n\n  var onHover = function (event) {\n    event.preventDefault();\n    highlightItem(item);\n  };\n\n  var isDisabledWithReason = !!item.disabledReason && item.disabled;\n\n  var _d = useHiddenDescription(item.disabledReason),\n      targetProps = _d.targetProps,\n      descriptionEl = _d.descriptionEl;\n\n  var trigger = item.text && React.createElement(\"span\", __assign({\n    className: clsx(styles.header, styles['expandable-header'], styles[\"variant-\".concat(variant)], (_b = {}, _b[styles.disabled] = disabled, _b[styles.highlighted] = highlighted, _b)),\n    // We are using the roving tabindex technique to manage the focus state of the dropdown.\n    // The current element will always have tabindex=0 which means that it can be tabbed to,\n    // while all other items have tabindex=-1 so we can focus them when necessary.\n    tabIndex: highlighted ? 0 : -1,\n    ref: triggerRef\n  }, getMenuItemProps({\n    parent: true,\n    expanded: expanded,\n    disabled: disabled\n  }), isDisabledWithReason ? targetProps : {}), item.text, React.createElement(\"span\", {\n    className: clsx(styles['expand-icon'], styles['expand-icon-right'])\n  }, React.createElement(InternalIcon, {\n    name: \"caret-down-filled\"\n  })));\n  var content; // If the category element is disabled, we do not render a dropdown.\n  // Screenreaders are confused by additional sections\n\n  if (isDisabledWithReason) {\n    content = React.createElement(Tooltip, {\n      content: item.disabledReason\n    }, trigger, descriptionEl);\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = React.createElement(Dropdown, {\n      open: expanded,\n      stretchWidth: false,\n      interior: true,\n      expandToViewport: expandToViewport,\n      trigger: trigger\n    }, item.items && expanded && React.createElement(\"ul\", {\n      role: \"menu\",\n      \"aria-label\": item.text,\n      className: clsx(styles['items-list-container'])\n    }, React.createElement(ItemsList, {\n      items: item.items,\n      onItemActivate: onItemActivate,\n      onGroupToggle: onGroupToggle,\n      targetItem: targetItem,\n      isHighlighted: isHighlighted,\n      isExpanded: isExpanded,\n      highlightItem: highlightItem,\n      variant: variant\n    })));\n  }\n\n  return React.createElement(\"li\", {\n    className: clsx(styles.category, styles[\"variant-\".concat(variant)], styles.expandable, (_c = {}, _c[styles.expanded] = expanded, _c[styles.disabled] = disabled, _c[styles.highlighted] = highlighted, _c)),\n    role: \"presentation\",\n    \"data-testid\": item.id,\n    ref: ref,\n    onClick: onClick,\n    onMouseEnter: onHover,\n    onTouchStart: onHover\n  }, content);\n};\n\nexport default ExpandableCategoryElement;","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AAEA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,IAAMC,yBAAyB,GAAG,UAACC,EAAD,EAWlB;;;MAVdC,IAAI;MACJC,cAAc;MACdC,aAAa;MACbC,UAAU;MACVC,aAAa;MACbC,UAAU;MACVC,aAAa;MACbC,QAAQ;MACRC,gBAAgB;MAChBC,OAAO;EAEP,IAAMC,WAAW,GAAGN,aAAa,CAACJ,IAAD,CAAjC;EACA,IAAMW,QAAQ,GAAGN,UAAU,CAACL,IAAD,CAA3B;EACA,IAAMY,UAAU,GAAGzB,KAAK,CAACE,MAAN,CAA8B,IAA9B,CAAnB;EACA,IAAMwB,GAAG,GAAGxB,MAAM,CAAgB,IAAhB,CAAlB;EAEAD,SAAS,CAAC;IACR,IAAIwB,UAAU,CAACE,OAAX,IAAsBJ,WAAtB,IAAqC,CAACC,QAA1C,EAAoD;MAClDC,UAAU,CAACE,OAAX,CAAmBC,KAAnB;IACD;EACF,CAJQ,EAIN,CAACJ,QAAD,EAAWD,WAAX,CAJM,CAAT;;EAMA,IAAMM,OAAO,GAA4B,iBAAK;;;IAC5C,IAAI,CAACT,QAAL,EAAe;MACbU,KAAK,CAACC,cAAN;MACAhB,aAAa,CAACF,IAAD,EAAOiB,KAAP,CAAb;MACA,gBAAU,CAACH,OAAX,MAAkB,IAAlB,IAAkBf,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEgB,KAAF,EAAlB;IACD;EACF,CAND;;EAQA,IAAMI,OAAO,GAAG,UAACF,KAAD,EAA4B;IAC1CA,KAAK,CAACC,cAAN;IACAZ,aAAa,CAACN,IAAD,CAAb;EACD,CAHD;;EAKA,IAAMoB,oBAAoB,GAAG,CAAC,CAACpB,IAAI,CAACqB,cAAP,IAAyBrB,IAAI,CAACO,QAA3D;;EACM,SAAiCZ,oBAAoB,CAACK,IAAI,CAACqB,cAAN,CAArD;EAAA,IAAEC,WAAW,iBAAb;EAAA,IAAeC,aAAa,mBAA5B;;EACN,IAAMC,OAAO,GAAGxB,IAAI,CAACyB,IAAL,IACdtC;IACEuC,SAAS,EAAEpC,IAAI,CAACC,MAAM,CAACoC,MAAR,EAAgBpC,MAAM,CAAC,mBAAD,CAAtB,EAA6CA,MAAM,CAAC,kBAAWkB,OAAX,CAAD,CAAnD,GAAyEmB,SACtFA,GAACrC,MAAM,CAACgB,QAAR,IAAmBA,QADmE,EAEtFqB,GAACrC,MAAM,CAACmB,WAAR,IAAsBA,WAFgE,IAAzE,EADjB;IAKE;IACA;IACA;IACAmB,QAAQ,EAAEnB,WAAW,GAAG,CAAH,GAAO,CAAC,CAR/B;IASEG,GAAG,EAAED;EATP,GAUMf,gBAAgB,CAAC;IAAEiC,MAAM,EAAE,IAAV;IAAgBnB,QAAQ,UAAxB;IAA0BJ,QAAQ;EAAlC,CAAD,CAVtB,EAWOa,oBAAoB,GAAGE,WAAH,GAAiB,EAX5C,GAaGtB,IAAI,CAACyB,IAbR,EAcEtC;IAAMuC,SAAS,EAAEpC,IAAI,CAACC,MAAM,CAAC,aAAD,CAAP,EAAwBA,MAAM,CAAC,mBAAD,CAA9B;EAArB,GACEJ,oBAACK,YAAD,EAAa;IAACuC,IAAI,EAAC;EAAN,CAAb,CADF,CAdF,CADF;EAqBA,IAAIC,OAAJ,CAhDc,CAiDd;EACA;;EACA,IAAIZ,oBAAJ,EAA0B;IACxBY,OAAO,GACL7C,oBAACS,OAAD,EAAQ;MAACoC,OAAO,EAAEhC,IAAI,CAACqB;IAAf,CAAR,EACGG,OADH,EAEGD,aAFH,CADF;EAMD,CAPD,MAOO,IAAIhB,QAAJ,EAAc;IACnByB,OAAO,GAAGR,OAAV;EACD,CAFM,MAEA;IACLQ,OAAO,GACL7C,oBAACO,QAAD,EAAS;MACPuC,IAAI,EAAEtB,QADC;MAEPuB,YAAY,EAAE,KAFP;MAGPC,QAAQ,EAAE,IAHH;MAIP3B,gBAAgB,EAAEA,gBAJX;MAKPgB,OAAO,EAAEA;IALF,CAAT,EAOGxB,IAAI,CAACoC,KAAL,IAAczB,QAAd,IACCxB;MAAIkD,IAAI,EAAC,MAAT;MAAe,cAAarC,IAAI,CAACyB,IAAjC;MAAuCC,SAAS,EAAEpC,IAAI,CAACC,MAAM,CAAC,sBAAD,CAAP;IAAtD,GACEJ,oBAACM,SAAD,EAAU;MACR2C,KAAK,EAAEpC,IAAI,CAACoC,KADJ;MAERnC,cAAc,EAAEA,cAFR;MAGRC,aAAa,EAAEA,aAHP;MAIRC,UAAU,EAAEA,UAJJ;MAKRC,aAAa,EAAEA,aALP;MAMRC,UAAU,EAAEA,UANJ;MAORC,aAAa,EAAEA,aAPP;MAQRG,OAAO,EAAEA;IARD,CAAV,CADF,CARJ,CADF;EAwBD;;EAED,OACEtB;IACEuC,SAAS,EAAEpC,IAAI,CAACC,MAAM,CAAC+C,QAAR,EAAkB/C,MAAM,CAAC,kBAAWkB,OAAX,CAAD,CAAxB,EAAgDlB,MAAM,CAACgD,UAAvD,GAAiEC,SAC9EA,GAACjD,MAAM,CAACoB,QAAR,IAAmBA,QAD2D,EAE9E6B,GAACjD,MAAM,CAACgB,QAAR,IAAmBA,QAF2D,EAG9EiC,GAACjD,MAAM,CAACmB,WAAR,IAAsBA,WAHwD,IAAjE,EADjB;IAME2B,IAAI,EAAC,cANP;IAMqB,eACNrC,IAAI,CAACyC,EAPpB;IAQE5B,GAAG,EAAEA,GARP;IASEG,OAAO,EAAEA,OATX;IAUE0B,YAAY,EAAEvB,OAVhB;IAWEwB,YAAY,EAAExB;EAXhB,GAaGa,OAbH,CADF;AAiBD,CAnHD;;AAqHA,eAAelC,yBAAf","names":["React","useEffect","useRef","clsx","styles","InternalIcon","ItemsList","Dropdown","useHiddenDescription","Tooltip","getMenuItemProps","ExpandableCategoryElement","_a","item","onItemActivate","onGroupToggle","targetItem","isHighlighted","isExpanded","highlightItem","disabled","expandToViewport","variant","highlighted","expanded","triggerRef","ref","current","focus","onClick","event","preventDefault","onHover","isDisabledWithReason","disabledReason","targetProps","descriptionEl","trigger","text","className","header","_b","tabIndex","parent","name","content","open","stretchWidth","interior","items","role","category","expandable","_c","id","onMouseEnter","onTouchStart"],"sourceRoot":"","sources":["../../../../src/button-dropdown/category-elements/expandable-category-element.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\n\nimport InternalIcon from '../../icon/internal';\nimport ItemsList from '../items-list';\nimport Dropdown from '../../internal/components/dropdown';\nimport { CategoryProps } from '../interfaces';\nimport useHiddenDescription from '../utils/use-hidden-description';\nimport Tooltip from '../tooltip.js';\nimport { getMenuItemProps } from '../utils/menu-item';\n\nconst ExpandableCategoryElement = ({\n  item,\n  onItemActivate,\n  onGroupToggle,\n  targetItem,\n  isHighlighted,\n  isExpanded,\n  highlightItem,\n  disabled,\n  expandToViewport,\n  variant,\n}: CategoryProps) => {\n  const highlighted = isHighlighted(item);\n  const expanded = isExpanded(item);\n  const triggerRef = React.useRef<HTMLSpanElement>(null);\n  const ref = useRef<HTMLLIElement>(null);\n\n  useEffect(() => {\n    if (triggerRef.current && highlighted && !expanded) {\n      triggerRef.current.focus();\n    }\n  }, [expanded, highlighted]);\n\n  const onClick: React.MouseEventHandler = event => {\n    if (!disabled) {\n      event.preventDefault();\n      onGroupToggle(item, event);\n      triggerRef.current?.focus();\n    }\n  };\n\n  const onHover = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    highlightItem(item);\n  };\n\n  const isDisabledWithReason = !!item.disabledReason && item.disabled;\n  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);\n  const trigger = item.text && (\n    <span\n      className={clsx(styles.header, styles['expandable-header'], styles[`variant-${variant}`], {\n        [styles.disabled]: disabled,\n        [styles.highlighted]: highlighted,\n      })}\n      // We are using the roving tabindex technique to manage the focus state of the dropdown.\n      // The current element will always have tabindex=0 which means that it can be tabbed to,\n      // while all other items have tabindex=-1 so we can focus them when necessary.\n      tabIndex={highlighted ? 0 : -1}\n      ref={triggerRef}\n      {...getMenuItemProps({ parent: true, expanded, disabled })}\n      {...(isDisabledWithReason ? targetProps : {})}\n    >\n      {item.text}\n      <span className={clsx(styles['expand-icon'], styles['expand-icon-right'])}>\n        <InternalIcon name=\"caret-down-filled\" />\n      </span>\n    </span>\n  );\n\n  let content: React.ReactNode;\n  // If the category element is disabled, we do not render a dropdown.\n  // Screenreaders are confused by additional sections\n  if (isDisabledWithReason) {\n    content = (\n      <Tooltip content={item.disabledReason}>\n        {trigger}\n        {descriptionEl}\n      </Tooltip>\n    );\n  } else if (disabled) {\n    content = trigger;\n  } else {\n    content = (\n      <Dropdown\n        open={expanded}\n        stretchWidth={false}\n        interior={true}\n        expandToViewport={expandToViewport}\n        trigger={trigger}\n      >\n        {item.items && expanded && (\n          <ul role=\"menu\" aria-label={item.text} className={clsx(styles['items-list-container'])}>\n            <ItemsList\n              items={item.items}\n              onItemActivate={onItemActivate}\n              onGroupToggle={onGroupToggle}\n              targetItem={targetItem}\n              isHighlighted={isHighlighted}\n              isExpanded={isExpanded}\n              highlightItem={highlightItem}\n              variant={variant}\n            />\n          </ul>\n        )}\n      </Dropdown>\n    );\n  }\n\n  return (\n    <li\n      className={clsx(styles.category, styles[`variant-${variant}`], styles.expandable, {\n        [styles.expanded]: expanded,\n        [styles.disabled]: disabled,\n        [styles.highlighted]: highlighted,\n      })}\n      role=\"presentation\"\n      data-testid={item.id}\n      ref={ref}\n      onClick={onClick}\n      onMouseEnter={onHover}\n      onTouchStart={onHover}\n    >\n      {content}\n    </li>\n  );\n};\n\nexport default ExpandableCategoryElement;\n"]},"metadata":{},"sourceType":"module"}