{"ast":null,"code":"function makeSlotId(prop, formFieldId, propName) {\n  if (!prop) {\n    return undefined;\n  }\n\n  return \"\".concat(formFieldId, \"-\").concat(propName);\n}\n\nexport function getSlotIds(formFieldId, label, description, constraintText, errorText) {\n  var ids = {\n    label: makeSlotId(label, formFieldId, 'label'),\n    description: makeSlotId(description, formFieldId, 'description'),\n    constraint: makeSlotId(constraintText, formFieldId, 'constraint'),\n    error: makeSlotId(errorText, formFieldId, 'error')\n  };\n  return ids;\n}\nexport function getAriaDescribedBy(_a) {\n  var error = _a.error,\n      description = _a.description,\n      constraint = _a.constraint;\n  var describedByAttributes = [error, description, constraint].filter(function (e) {\n    return !!e;\n  });\n  var describedBy = describedByAttributes.length ? describedByAttributes.join(' ') : undefined;\n  return describedBy;\n}\nexport function getGridDefinition(stretch, secondaryControlPresent, isRefresh) {\n  var columns;\n\n  if (stretch) {\n    columns = [{\n      colspan: 12\n    }, {\n      colspan: 12\n    }];\n  } else if (isRefresh) {\n    columns = [{\n      colspan: {\n        \"default\": 12,\n        xs: 8\n      }\n    }, {\n      colspan: {\n        \"default\": 12,\n        xs: 4\n      }\n    }];\n  } else {\n    columns = [{\n      colspan: {\n        \"default\": 12,\n        xs: 9\n      }\n    }, {\n      colspan: {\n        \"default\": 12,\n        xs: 3\n      }\n    }];\n  }\n\n  if (!secondaryControlPresent) {\n    return [columns[0]];\n  }\n\n  return columns;\n}","map":{"version":3,"mappings":"AAWA,SAASA,UAAT,CAAoBC,IAApB,EAA2CC,WAA3C,EAAgEC,QAAhE,EAAgF;EAC9E,IAAI,CAACF,IAAL,EAAW;IACT,OAAOG,SAAP;EACD;;EAED,OAAO,UAAGF,WAAH,EAAc,GAAd,EAAcG,MAAd,CAAkBF,QAAlB,CAAP;AACD;;AAED,OAAM,SAAUG,UAAV,CACJJ,WADI,EAEJK,KAFI,EAGJC,WAHI,EAIJC,cAJI,EAKJC,SALI,EAKuB;EAE3B,IAAMC,GAAG,GAAiB;IACxBJ,KAAK,EAAEP,UAAU,CAACO,KAAD,EAAQL,WAAR,EAAqB,OAArB,CADO;IAExBM,WAAW,EAAER,UAAU,CAACQ,WAAD,EAAcN,WAAd,EAA2B,aAA3B,CAFC;IAGxBU,UAAU,EAAEZ,UAAU,CAACS,cAAD,EAAiBP,WAAjB,EAA8B,YAA9B,CAHE;IAIxBW,KAAK,EAAEb,UAAU,CAACU,SAAD,EAAYR,WAAZ,EAAyB,OAAzB;EAJO,CAA1B;EAOA,OAAOS,GAAP;AACD;AAED,OAAM,SAAUG,kBAAV,CAA6BC,EAA7B,EAA6E;MAA9CF,KAAK;MAAEL,WAAW;MAAEI,UAAU;EACjE,IAAMI,qBAAqB,GAAG,CAACH,KAAD,EAAQL,WAAR,EAAqBI,UAArB,EAAiCK,MAAjC,CAAwC,aAAC;IAAI,QAAC,CAACC,CAAF;EAAG,CAAhD,CAA9B;EACA,IAAMC,WAAW,GAAGH,qBAAqB,CAACI,MAAtB,GAA+BJ,qBAAqB,CAACK,IAAtB,CAA2B,GAA3B,CAA/B,GAAiEjB,SAArF;EACA,OAAOe,WAAP;AACD;AAED,OAAM,SAAUG,iBAAV,CAA4BC,OAA5B,EAA8CC,uBAA9C,EAAgFC,SAAhF,EAAkG;EACtG,IAAIC,OAAJ;;EAEA,IAAIH,OAAJ,EAAa;IACXG,OAAO,GAAG,CAAC;MAAEC,OAAO,EAAE;IAAX,CAAD,EAAkB;MAAEA,OAAO,EAAE;IAAX,CAAlB,CAAV;EACD,CAFD,MAEO,IAAIF,SAAJ,EAAe;IACpBC,OAAO,GAAG,CAAC;MAAEC,OAAO,EAAE;QAAE,WAAS,EAAX;QAAeC,EAAE,EAAE;MAAnB;IAAX,CAAD,EAAsC;MAAED,OAAO,EAAE;QAAE,WAAS,EAAX;QAAeC,EAAE,EAAE;MAAnB;IAAX,CAAtC,CAAV;EACD,CAFM,MAEA;IACLF,OAAO,GAAG,CAAC;MAAEC,OAAO,EAAE;QAAE,WAAS,EAAX;QAAeC,EAAE,EAAE;MAAnB;IAAX,CAAD,EAAsC;MAAED,OAAO,EAAE;QAAE,WAAS,EAAX;QAAeC,EAAE,EAAE;MAAnB;IAAX,CAAtC,CAAV;EACD;;EAED,IAAI,CAACJ,uBAAL,EAA8B;IAC5B,OAAO,CAACE,OAAO,CAAC,CAAD,CAAR,CAAP;EACD;;EAED,OAAOA,OAAP;AACD","names":["makeSlotId","prop","formFieldId","propName","undefined","concat","getSlotIds","label","description","constraintText","errorText","ids","constraint","error","getAriaDescribedBy","_a","describedByAttributes","filter","e","describedBy","length","join","getGridDefinition","stretch","secondaryControlPresent","isRefresh","columns","colspan","xs"],"sourceRoot":"","sources":["../../../src/form-field/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GridProps } from '../grid/interfaces';\n\ninterface FormFieldIds {\n  label?: string;\n  description?: string;\n  constraint?: string;\n  error?: string;\n}\n\nfunction makeSlotId(prop: React.ReactNode, formFieldId: string, propName: string): string | undefined {\n  if (!prop) {\n    return undefined;\n  }\n\n  return `${formFieldId}-${propName}`;\n}\n\nexport function getSlotIds(\n  formFieldId: string,\n  label?: React.ReactNode,\n  description?: React.ReactNode,\n  constraintText?: React.ReactNode,\n  errorText?: React.ReactNode\n) {\n  const ids: FormFieldIds = {\n    label: makeSlotId(label, formFieldId, 'label'),\n    description: makeSlotId(description, formFieldId, 'description'),\n    constraint: makeSlotId(constraintText, formFieldId, 'constraint'),\n    error: makeSlotId(errorText, formFieldId, 'error'),\n  };\n\n  return ids;\n}\n\nexport function getAriaDescribedBy({ error, description, constraint }: FormFieldIds) {\n  const describedByAttributes = [error, description, constraint].filter(e => !!e);\n  const describedBy = describedByAttributes.length ? describedByAttributes.join(' ') : undefined;\n  return describedBy;\n}\n\nexport function getGridDefinition(stretch: boolean, secondaryControlPresent: boolean, isRefresh: boolean) {\n  let columns: Array<{ colspan: GridProps.BreakpointMapping | number }>;\n\n  if (stretch) {\n    columns = [{ colspan: 12 }, { colspan: 12 }];\n  } else if (isRefresh) {\n    columns = [{ colspan: { default: 12, xs: 8 } }, { colspan: { default: 12, xs: 4 } }];\n  } else {\n    columns = [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }];\n  }\n\n  if (!secondaryControlPresent) {\n    return [columns[0]];\n  }\n\n  return columns;\n}\n"]},"metadata":{},"sourceType":"module"}