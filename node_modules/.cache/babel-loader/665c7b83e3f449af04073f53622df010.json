{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nimport { getColumnKey } from './utils';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport { warnOnce } from '../internal/logging';\nexport var DEFAULT_WIDTH = 120;\nvar SELECTION_CELL_WIDTH = 54;\n\nfunction checkProperty(column, name) {\n  var value = column[name];\n\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce('Table', \"resizableColumns feature requires \".concat(name, \" property to be a number, got \").concat(value, \". The component may work incorrectly.\"));\n  }\n}\n\nexport function checkColumnWidths(columnDefinitions) {\n  for (var _i = 0, columnDefinitions_1 = columnDefinitions; _i < columnDefinitions_1.length; _i++) {\n    var column = columnDefinitions_1[_i];\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\n\nfunction readWidths(headerEl, columnDefinitions, hasSelection) {\n  var result = {};\n\n  for (var index = 0; index < columnDefinitions.length; index++) {\n    var column = columnDefinitions[index];\n    var id = getColumnKey(columnDefinitions[index], index);\n    var width = column.width || 0;\n    var minWidth = column.minWidth || width || DEFAULT_WIDTH;\n\n    if (!width && // read width from the DOM if it is missing in the config\n    index !== columnDefinitions.length - 1 // skip reading for the last column, because it expands to fully fit the container\n    ) {\n      var colIndex = hasSelection ? index + 2 : index + 1;\n      var colEl = headerEl.querySelector(\".\".concat(headerCellStyles['header-cell'], \":nth-child(\").concat(colIndex, \")\"));\n      width = colEl.getBoundingClientRect().width;\n    }\n\n    result[id] = Math.max(width, minWidth);\n  }\n\n  return result;\n}\n\nfunction updateWidths(columnDefinitions, oldWidths, newWidth, colIndex) {\n  var _a;\n\n  var definition = columnDefinitions[colIndex];\n  var id = getColumnKey(definition, colIndex);\n  var minWidth = typeof definition.minWidth === 'number' ? definition.minWidth : DEFAULT_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n\n  if (oldWidths[id] === newWidth) {\n    return oldWidths;\n  }\n\n  return __assign(__assign({}, oldWidths), (_a = {}, _a[id] = newWidth, _a));\n}\n\nvar WidthsContext = createContext({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: function () {}\n});\nexport function ColumnWidthsProvider(_a) {\n  var tableRef = _a.tableRef,\n      visibleColumnDefinitions = _a.visibleColumnDefinitions,\n      resizableColumns = _a.resizableColumns,\n      hasSelection = _a.hasSelection,\n      children = _a.children;\n  var visibleColumns = useRef(null);\n\n  var _b = useState({}),\n      columnWidths = _b[0],\n      setColumnWidths = _b[1];\n\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n\n    var lastVisible = visibleColumns.current;\n\n    if (lastVisible) {\n      var _loop_1 = function (index) {\n        var column = visibleColumnDefinitions[index];\n        var id = getColumnKey(column, index);\n\n        if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {\n          setColumnWidths(function (columnWidths) {\n            var _a;\n\n            return __assign(__assign({}, columnWidths), (_a = {}, _a[id] = column.width || DEFAULT_WIDTH, _a));\n          });\n        }\n      };\n\n      for (var index = 0; index < visibleColumnDefinitions.length; index++) {\n        _loop_1(index);\n      }\n    }\n\n    visibleColumns.current = visibleColumnDefinitions.map(function (column) {\n      return column.id;\n    });\n  }, [columnWidths, resizableColumns, visibleColumnDefinitions]);\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n\n    setColumnWidths(function () {\n      return readWidths(tableRef.current, visibleColumnDefinitions, hasSelection);\n    }); // This code is intended to run only at the first render and should not re-run when table props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateColumn(colIndex, newWidth) {\n    setColumnWidths(function (columnWidths) {\n      return updateWidths(visibleColumnDefinitions, columnWidths, newWidth, colIndex);\n    });\n  }\n\n  var totalWidth = visibleColumnDefinitions.reduce(function (total, column, index) {\n    return total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH);\n  }, 0);\n\n  if (hasSelection) {\n    totalWidth += SELECTION_CELL_WIDTH;\n  }\n\n  return React.createElement(WidthsContext.Provider, {\n    value: {\n      columnWidths: columnWidths,\n      totalWidth: totalWidth,\n      updateColumn: updateColumn\n    }\n  }, children);\n}\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","createContext","useContext","getColumnKey","headerCellStyles","warnOnce","DEFAULT_WIDTH","SELECTION_CELL_WIDTH","checkProperty","column","name","value","concat","checkColumnWidths","columnDefinitions","_i","readWidths","headerEl","hasSelection","result","index","length","id","width","minWidth","colIndex","colEl","querySelector","getBoundingClientRect","Math","max","updateWidths","oldWidths","newWidth","definition","_a","WidthsContext","totalWidth","columnWidths","updateColumn","ColumnWidthsProvider","tableRef","visibleColumnDefinitions","resizableColumns","children","visibleColumns","setColumnWidths","lastVisible","current","indexOf","map","reduce","total","Provider","useColumnWidths"],"sourceRoot":"","sources":["../../../src/table/use-column-widths.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nimport { TableProps } from './interfaces';\nimport { getColumnKey } from './utils';\nimport headerCellStyles from './header-cell/styles.css.js';\nimport { warnOnce } from '../internal/logging';\n\nexport const DEFAULT_WIDTH = 120;\nconst SELECTION_CELL_WIDTH = 54;\n\nfunction checkProperty(column: TableProps.ColumnDefinition<any>, name: 'width' | 'minWidth') {\n  const value = column[name];\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce(\n      'Table',\n      `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`\n    );\n  }\n}\n\nexport function checkColumnWidths(columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>) {\n  for (const column of columnDefinitions) {\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\n\nfunction readWidths(\n  headerEl: HTMLElement,\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>,\n  hasSelection: boolean\n) {\n  const result: Record<string, number> = {};\n  for (let index = 0; index < columnDefinitions.length; index++) {\n    const column = columnDefinitions[index];\n    const id = getColumnKey(columnDefinitions[index], index);\n    let width = (column.width as number) || 0;\n    const minWidth = (column.minWidth as number) || width || DEFAULT_WIDTH;\n    if (\n      !width && // read width from the DOM if it is missing in the config\n      index !== columnDefinitions.length - 1 // skip reading for the last column, because it expands to fully fit the container\n    ) {\n      const colIndex = hasSelection ? index + 2 : index + 1;\n      const colEl = headerEl.querySelector<HTMLElement>(`.${headerCellStyles['header-cell']}:nth-child(${colIndex})`)!;\n      width = colEl.getBoundingClientRect().width;\n    }\n    result[id] = Math.max(width, minWidth);\n  }\n  return result;\n}\n\nfunction updateWidths(\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>,\n  oldWidths: Record<string, number>,\n  newWidth: number,\n  colIndex: number\n) {\n  const definition = columnDefinitions[colIndex];\n  const id = getColumnKey(definition, colIndex);\n  const minWidth = typeof definition.minWidth === 'number' ? definition.minWidth : DEFAULT_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n  if (oldWidths[id] === newWidth) {\n    return oldWidths;\n  }\n  return { ...oldWidths, [id]: newWidth };\n}\n\ninterface WidthsContext {\n  totalWidth: number;\n  columnWidths: Record<string, number>;\n  updateColumn: (colIndex: number, newWidth: number) => void;\n}\n\nconst WidthsContext = createContext<WidthsContext>({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: () => {},\n});\n\ninterface WidthProviderProps {\n  tableRef: React.MutableRefObject<HTMLElement | null>;\n  visibleColumnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<any>>;\n  resizableColumns: boolean | undefined;\n  hasSelection: boolean;\n  children: React.ReactNode;\n}\n\nexport function ColumnWidthsProvider({\n  tableRef,\n  visibleColumnDefinitions,\n  resizableColumns,\n  hasSelection,\n  children,\n}: WidthProviderProps) {\n  const visibleColumns = useRef<(string | undefined)[] | null>(null);\n  const [columnWidths, setColumnWidths] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    const lastVisible = visibleColumns.current;\n    if (lastVisible) {\n      for (let index = 0; index < visibleColumnDefinitions.length; index++) {\n        const column = visibleColumnDefinitions[index];\n        const id = getColumnKey(column, index);\n        if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {\n          setColumnWidths(columnWidths => ({ ...columnWidths, [id]: (column.width as number) || DEFAULT_WIDTH }));\n        }\n      }\n    }\n    visibleColumns.current = visibleColumnDefinitions.map(column => column.id);\n  }, [columnWidths, resizableColumns, visibleColumnDefinitions]);\n\n  useEffect(() => {\n    if (!resizableColumns) {\n      return;\n    }\n    setColumnWidths(() => readWidths(tableRef.current!, visibleColumnDefinitions, hasSelection));\n    // This code is intended to run only at the first render and should not re-run when table props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function updateColumn(colIndex: number, newWidth: number) {\n    setColumnWidths(columnWidths => updateWidths(visibleColumnDefinitions, columnWidths, newWidth, colIndex));\n  }\n\n  let totalWidth = visibleColumnDefinitions.reduce(\n    (total, column, index) => total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH),\n    0\n  );\n  if (hasSelection) {\n    totalWidth += SELECTION_CELL_WIDTH;\n  }\n\n  return <WidthsContext.Provider value={{ columnWidths, totalWidth, updateColumn }}>{children}</WidthsContext.Provider>;\n}\n\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}\n"]},"metadata":{},"sourceType":"module"}