{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\nvar Textarea = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var value = _a.value,\n      _c = _a.autoComplete,\n      autoComplete = _c === void 0 ? true : _c,\n      disabled = _a.disabled,\n      readOnly = _a.readOnly,\n      disableBrowserAutocorrect = _a.disableBrowserAutocorrect,\n      disableBrowserSpellcheck = _a.disableBrowserSpellcheck,\n      onKeyDown = _a.onKeyDown,\n      onKeyUp = _a.onKeyUp,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      ariaRequired = _a.ariaRequired,\n      name = _a.name,\n      rows = _a.rows,\n      placeholder = _a.placeholder,\n      autoFocus = _a.autoFocus,\n      ariaLabel = _a.ariaLabel,\n      rest = __rest(_a, [\"value\", \"autoComplete\", \"disabled\", \"readOnly\", \"disableBrowserAutocorrect\", \"disableBrowserSpellcheck\", \"onKeyDown\", \"onKeyUp\", \"onChange\", \"onBlur\", \"onFocus\", \"ariaRequired\", \"name\", \"rows\", \"placeholder\", \"autoFocus\", \"ariaLabel\"]);\n\n  var __internalRootRef = useBaseComponent('Textarea').__internalRootRef;\n\n  var _d = useFormFieldContext(rest),\n      ariaLabelledby = _d.ariaLabelledby,\n      ariaDescribedby = _d.ariaDescribedby,\n      controlId = _d.controlId,\n      invalid = _d.invalid;\n\n  var baseProps = getBaseProps(rest);\n  var textareaRef = useRef(null);\n  useForwardFocus(ref, textareaRef);\n  var attributes = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-required': ariaRequired ? 'true' : undefined,\n    'aria-invalid': invalid ? 'true' : undefined,\n    name: name,\n    placeholder: placeholder,\n    autoFocus: autoFocus,\n    className: clsx(styles.textarea, (_b = {}, _b[styles['textarea-readonly']] = readOnly, _b[styles['textarea-invalid']] = invalid, _b)),\n    autoComplete: convertAutoComplete(autoComplete),\n    disabled: disabled,\n    readOnly: readOnly ? true : undefined,\n    rows: rows || 3,\n    onKeyDown: onKeyDown && function (event) {\n      return fireKeyboardEvent(onKeyDown, event);\n    },\n    onKeyUp: onKeyUp && function (event) {\n      return fireKeyboardEvent(onKeyUp, event);\n    },\n    // We set a default value on the component in order to force it into the controlled mode.\n    value: value || '',\n    onChange: onChange && function (event) {\n      return fireNonCancelableEvent(onChange, {\n        value: event.target.value\n      });\n    },\n    onBlur: onBlur && function () {\n      return fireNonCancelableEvent(onBlur);\n    },\n    onFocus: onFocus && function () {\n      return fireNonCancelableEvent(onFocus);\n    }\n  };\n\n  if (disableBrowserAutocorrect) {\n    attributes.autoCorrect = 'off';\n    attributes.autoCapitalize = 'off';\n  }\n\n  if (disableBrowserSpellcheck) {\n    attributes.spellCheck = 'false';\n  }\n\n  return React.createElement(\"span\", __assign({}, baseProps, {\n    className: clsx(styles.root, baseProps.className),\n    ref: __internalRootRef\n  }), React.createElement(\"textarea\", __assign({\n    ref: textareaRef,\n    id: controlId\n  }, attributes)));\n});\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;","map":{"version":3,"mappings":"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","names":["React","useRef","getBaseProps","fireKeyboardEvent","fireNonCancelableEvent","useFormFieldContext","useForwardFocus","clsx","styles","applyDisplayName","useBaseComponent","convertAutoComplete","Textarea","forwardRef","_a","ref","_c","autoComplete","disabled","readOnly","disableBrowserAutocorrect","disableBrowserSpellcheck","onKeyDown","onKeyUp","onChange","onBlur","onFocus","ariaRequired","name","rows","placeholder","autoFocus","ariaLabel","rest","__internalRootRef","ariaLabelledby","ariaDescribedby","controlId","invalid","baseProps","textareaRef","attributes","undefined","className","textarea","_b","event","value","target","autoCorrect","autoCapitalize","spellCheck","root","id"],"sourceRoot":"","sources":["../../../src/textarea/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useRef } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport { TextareaProps } from './interfaces';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { convertAutoComplete } from '../input/utils';\n\nexport { TextareaProps };\n\nconst Textarea = React.forwardRef(\n  (\n    {\n      value,\n      autoComplete = true,\n      disabled,\n      readOnly,\n      disableBrowserAutocorrect,\n      disableBrowserSpellcheck,\n      onKeyDown,\n      onKeyUp,\n      onChange,\n      onBlur,\n      onFocus,\n      ariaRequired,\n      name,\n      rows,\n      placeholder,\n      autoFocus,\n      ariaLabel,\n      ...rest\n    }: TextareaProps,\n    ref: Ref<TextareaProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent('Textarea');\n    const { ariaLabelledby, ariaDescribedby, controlId, invalid } = useFormFieldContext(rest);\n    const baseProps = getBaseProps(rest);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    useForwardFocus(ref, textareaRef);\n\n    const attributes: React.TextareaHTMLAttributes<HTMLTextAreaElement> = {\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby,\n      'aria-required': ariaRequired ? 'true' : undefined,\n      'aria-invalid': invalid ? 'true' : undefined,\n      name,\n      placeholder,\n      autoFocus,\n      className: clsx(styles.textarea, {\n        [styles['textarea-readonly']]: readOnly,\n        [styles['textarea-invalid']]: invalid,\n      }),\n      autoComplete: convertAutoComplete(autoComplete),\n      disabled,\n      readOnly: readOnly ? true : undefined,\n      rows: rows || 3,\n      onKeyDown: onKeyDown && (event => fireKeyboardEvent(onKeyDown, event)),\n      onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n      // We set a default value on the component in order to force it into the controlled mode.\n      value: value || '',\n      onChange: onChange && (event => fireNonCancelableEvent(onChange, { value: event.target.value })),\n      onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),\n      onFocus: onFocus && (() => fireNonCancelableEvent(onFocus)),\n    };\n\n    if (disableBrowserAutocorrect) {\n      attributes.autoCorrect = 'off';\n      attributes.autoCapitalize = 'off';\n    }\n\n    if (disableBrowserSpellcheck) {\n      attributes.spellCheck = 'false';\n    }\n\n    return (\n      <span {...baseProps} className={clsx(styles.root, baseProps.className)} ref={__internalRootRef}>\n        <textarea ref={textareaRef} id={controlId} {...attributes} />\n      </span>\n    );\n  }\n);\n\napplyDisplayName(Textarea, 'Textarea');\nexport default Textarea;\n"]},"metadata":{},"sourceType":"module"}