{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { applyDefaults } from './defaults';\nimport { Notifications } from './notifications';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport { useFocusControl } from './utils/use-focus-control';\nimport useWindowWidth from './utils/use-window-width';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { useStableEventHandler } from '../internal/hooks/use-stable-event-handler';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { CONSTRAINED_MAIN_PANEL_MIN_HEIGHT, CONSTRAINED_PAGE_HEIGHT, getSplitPanelDefaultSize, MAIN_PANEL_MIN_HEIGHT } from '../split-panel/utils/size-utils';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport ContentWrapper from './content-wrapper';\nimport { DarkHeader } from './dark-header';\nimport { isMotionDisabled } from '../internal/motion';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nimport { NavigationPanel } from './navigation-panel';\nimport { ToolsAndSplitPanel } from './tools-and-split-panel';\nimport { usePreviousFrameValue } from '../internal/hooks/use-previous-frame';\nimport useAppLayoutOffsets from './utils/use-content-width';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\nimport RefreshedAppLayout from './visual-refresh';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar AppLayout = React.forwardRef(function (_a, ref) {\n  var _b = _a.contentType,\n      contentType = _b === void 0 ? 'default' : _b,\n      _c = _a.headerSelector,\n      headerSelector = _c === void 0 ? '#b #h' : _c,\n      _d = _a.footerSelector,\n      footerSelector = _d === void 0 ? '#b #f' : _d,\n      rest = __rest(_a, [\"contentType\", \"headerSelector\", \"footerSelector\"]);\n\n  var __internalRootRef = useBaseComponent('AppLayout').__internalRootRef;\n\n  var isRefresh = useVisualRefresh(__internalRootRef); // This re-builds the props including the default values\n\n  var props = __assign({\n    contentType: contentType,\n    headerSelector: headerSelector,\n    footerSelector: footerSelector\n  }, rest);\n\n  var baseProps = getBaseProps(rest);\n  return React.createElement(\"div\", __assign({\n    ref: __internalRootRef\n  }, baseProps), isRefresh ? React.createElement(RefreshedAppLayout, __assign({}, props, {\n    ref: ref\n  })) : React.createElement(OldAppLayout, __assign({}, props, {\n    ref: ref\n  })));\n});\nvar OldAppLayout = React.forwardRef(function (_a, ref) {\n  var _b;\n\n  var _c;\n\n  var navigation = _a.navigation,\n      _d = _a.navigationWidth,\n      navigationWidth = _d === void 0 ? 280 : _d,\n      navigationHide = _a.navigationHide,\n      controlledNavigationOpen = _a.navigationOpen,\n      tools = _a.tools,\n      _e = _a.toolsWidth,\n      toolsWidth = _e === void 0 ? 290 : _e,\n      toolsHide = _a.toolsHide,\n      controlledToolsOpen = _a.toolsOpen,\n      breadcrumbs = _a.breadcrumbs,\n      notifications = _a.notifications,\n      stickyNotifications = _a.stickyNotifications,\n      contentHeader = _a.contentHeader,\n      disableContentHeaderOverlap = _a.disableContentHeaderOverlap,\n      content = _a.content,\n      _f = _a.contentType,\n      contentType = _f === void 0 ? 'default' : _f,\n      disableContentPaddings = _a.disableContentPaddings,\n      disableBodyScroll = _a.disableBodyScroll,\n      maxContentWidth = _a.maxContentWidth,\n      minContentWidth = _a.minContentWidth,\n      _g = _a.headerSelector,\n      headerSelector = _g === void 0 ? '#b #h' : _g,\n      _h = _a.footerSelector,\n      footerSelector = _h === void 0 ? '#b #f' : _h,\n      ariaLabels = _a.ariaLabels,\n      splitPanel = _a.splitPanel,\n      controlledSplitPanelSize = _a.splitPanelSize,\n      controlledSplitPanelOpen = _a.splitPanelOpen,\n      controlledSplitPanelPreferences = _a.splitPanelPreferences,\n      onSplitPanelPreferencesChange = _a.onSplitPanelPreferencesChange,\n      onSplitPanelResize = _a.onSplitPanelResize,\n      onSplitPanelToggle = _a.onSplitPanelToggle,\n      onNavigationChange = _a.onNavigationChange,\n      onToolsChange = _a.onToolsChange;\n\n  if (isDevelopment) {\n    if (controlledToolsOpen && toolsHide) {\n      warnOnce('AppLayout', \"You have enabled both the `toolsOpen` prop and the `toolsHide` prop. This is not supported. Set `toolsOpen` to `false` when you set `toolsHide` to `true`.\");\n    }\n  }\n\n  var rootRef = useRef(null);\n  var isMobile = useMobile();\n  var isMotionEnabled = rootRef.current ? !isMotionDisabled(rootRef.current) : false;\n  var defaults = applyDefaults(contentType, {\n    maxContentWidth: maxContentWidth,\n    minContentWidth: minContentWidth\n  }, false);\n  var darkStickyHeaderContentType = ['cards', 'table'].indexOf(contentType) > -1;\n\n  var _j = useControllable(controlledNavigationOpen, onNavigationChange, isMobile ? false : defaults.navigationOpen, {\n    componentName: 'AppLayout',\n    controlledProp: 'navigationOpen',\n    changeHandler: 'onNavigationChange'\n  }),\n      _k = _j[0],\n      navigationOpen = _k === void 0 ? false : _k,\n      setNavigationOpen = _j[1];\n\n  var _l = useControllable(controlledToolsOpen, onToolsChange, isMobile ? false : defaults.toolsOpen, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange'\n  }),\n      _m = _l[0],\n      toolsOpen = _m === void 0 ? false : _m,\n      setToolsOpen = _l[1];\n\n  var onNavigationToggle = useCallback(function (open) {\n    setNavigationOpen(open);\n    fireNonCancelableEvent(onNavigationChange, {\n      open: open\n    });\n  }, [setNavigationOpen, onNavigationChange]);\n  var onToolsToggle = useCallback(function (open) {\n    setToolsOpen(open);\n    fireNonCancelableEvent(onToolsChange, {\n      open: open\n    });\n  }, [setToolsOpen, onToolsChange]);\n\n  var onNavigationClick = function (event) {\n    var hasLink = findUpUntil(event.target, function (node) {\n      return node.tagName === 'A' && !!node.href;\n    });\n\n    if (hasLink) {\n      onNavigationToggle(false);\n    }\n  };\n\n  var navigationVisible = !navigationHide && navigationOpen;\n  var toolsVisible = !toolsHide && toolsOpen;\n\n  var _o = useContentHeight(headerSelector, footerSelector, disableBodyScroll),\n      contentHeightStyle = _o.contentHeightStyle,\n      headerHeight = _o.headerHeight,\n      footerHeight = _o.footerHeight,\n      panelHeightStyle = _o.panelHeightStyle;\n\n  var _p = useContainerQuery(function (rect) {\n    return rect.height;\n  }),\n      notificationsHeight = _p[0],\n      notificationsRef = _p[1];\n\n  var _q = useContainerQuery(function (rect) {\n    return splitPanel ? rect.height : 0;\n  }, [splitPanel]),\n      splitPanelHeaderHeight = _q[0],\n      splitPanelHeaderMeasureRef = _q[1];\n\n  var splitPanelHeaderRefObject = useRef(null);\n  var splitPanelHeaderRef = useMergeRefs(splitPanelHeaderMeasureRef, splitPanelHeaderRefObject);\n  var anyPanelOpen = navigationVisible || toolsVisible;\n  var hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n  var stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;\n\n  var _r = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, undefined, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelPreferences',\n    changeHandler: 'onSplitPanelPreferencesChange'\n  }),\n      splitPanelPreferences = _r[0],\n      setSplitPanelPreferences = _r[1];\n\n  var splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || 'bottom';\n\n  var _s = useContainerQuery(function (rect) {\n    return splitPanel ? rect.height : 0;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [splitPanel, splitPanelPosition]),\n      splitPanelHeight = _s[0],\n      splitPanelRef = _s[1];\n\n  var closedDrawerWidth = 40;\n  var effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n  var effectiveToolsWidth = toolsHide && (!splitPanel || (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== 'side') ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;\n  var defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n\n  var _t = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelSize',\n    changeHandler: 'onSplitPanelResize'\n  }),\n      _u = _t[0],\n      splitPanelSize = _u === void 0 ? defaultSplitPanelSize : _u,\n      setSplitPanelSize = _t[1];\n\n  var _v = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelOpen',\n    changeHandler: 'onSplitPanelToggle'\n  }),\n      _w = _v[0],\n      splitPanelOpen = _w === void 0 ? false : _w,\n      setSplitPanelOpen = _v[1];\n\n  var mainContentRef = useRef(null);\n  var legacyScrollRootRef = useRef(null);\n  var onSplitPanelPreferencesSet = useCallback(function (detail) {\n    setSplitPanelPreferences(detail);\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange]);\n  var onSplitPanelSizeSet = useCallback(function (detail) {\n    setSplitPanelSize(detail.size);\n    fireNonCancelableEvent(onSplitPanelResize, detail);\n  }, [setSplitPanelSize, onSplitPanelResize]);\n  var onToggle = useCallback(function () {\n    setSplitPanelOpen(!splitPanelOpen);\n    fireNonCancelableEvent(onSplitPanelToggle, {\n      open: !splitPanelOpen\n    });\n  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle]);\n  var getSplitPanelMaxWidth = useStableEventHandler(function () {\n    if (!mainContentRef.current || !defaults.minContentWidth) {\n      return NaN;\n    }\n\n    var width = parseInt(getComputedStyle(mainContentRef.current).width); // when disableContentPaddings is true there is less available space,\n    // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n\n    var contentPadding = disableContentPaddings ? 80 : 0;\n    var spaceAvailable = width - defaults.minContentWidth - contentPadding;\n    var spaceTaken = finalSplitPanePosition === 'side' ? splitPanelSize : 0;\n    return Math.max(0, spaceTaken + spaceAvailable);\n  });\n  var getSplitPanelMaxHeight = useStableEventHandler(function () {\n    if (typeof document === 'undefined') {\n      return 0; // render the split panel in its minimum possible size\n    } else if (disableBodyScroll && legacyScrollRootRef.current) {\n      var availableHeight = legacyScrollRootRef.current.clientHeight;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    } else {\n      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n    }\n  });\n\n  var _x = useState(false),\n      isForcedPosition = _x[0],\n      setIsForcedPosition = _x[1];\n\n  var finalSplitPanePosition = isForcedPosition ? 'bottom' : splitPanelPosition;\n  var splitPaneAvailableOnTheSide = Boolean(splitPanel) && finalSplitPanePosition === 'side';\n  var splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;\n  var toggleButtonsBarWidth = 0;\n  var windowWidth = useWindowWidth();\n\n  var _y = useAppLayoutOffsets(rootRef.current),\n      leftOffset = _y.left,\n      rightOffset = _y.right;\n\n  var contentWidthWithSplitPanel = windowWidth - leftOffset - rightOffset - effectiveToolsWidth - effectiveNavigationWidth - (disableContentPaddings ? 0 : toggleButtonsBarWidth);\n  useEffect(function () {\n    var contentWidth = contentWidthWithSplitPanel - splitPanelSize;\n    setIsForcedPosition(isMobile || (defaults.minContentWidth || 0) > contentWidth); // This is a workaround to avoid a forced position due to splitPanelSize, which is\n    // user controlled variable.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contentWidthWithSplitPanel, defaults.minContentWidth, isMobile]);\n  var navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n  var toolsClosedWidth = toolsHide || isMobile ? 0 : closedDrawerWidth;\n\n  var _z = useState(),\n      splitPanelLastInteraction = _z[0],\n      setSplitPanelLastInteraction = _z[1];\n\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction(splitPanelOpen ? {\n      type: 'open'\n    } : {\n      type: 'close'\n    });\n  }, [splitPanelOpen]);\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction({\n      type: 'position'\n    });\n  }, [splitPanelPosition]);\n  var contentMaxWidthStyle = !isMobile ? {\n    maxWidth: defaults.maxContentWidth\n  } : undefined;\n\n  var _0 = useState(0),\n      splitPanelReportedSize = _0[0],\n      setSplitPanelReportedSize = _0[1];\n\n  var splitPanelContext = {\n    topOffset: headerHeight + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight || 0 : 0),\n    bottomOffset: footerHeight,\n    leftOffset: leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n    rightOffset: rightOffset + (isMobile ? 0 : !toolsHide && toolsOpen ? toolsWidth : toolsClosedWidth),\n    position: finalSplitPanePosition,\n    size: splitPanelSize,\n    getMaxWidth: getSplitPanelMaxWidth,\n    getMaxHeight: getSplitPanelMaxHeight,\n    getHeader: function () {\n      return splitPanelHeaderRefObject.current;\n    },\n    disableContentPaddings: disableContentPaddings,\n    contentWidthStyles: contentMaxWidthStyle,\n    isOpen: splitPanelOpen,\n    isMobile: isMobile,\n    isRefresh: false,\n    isForcedPosition: isForcedPosition,\n    lastInteraction: splitPanelLastInteraction,\n    splitPanelRef: splitPanelRef,\n    splitPanelHeaderRef: splitPanelHeaderRef,\n    onResize: onSplitPanelSizeSet,\n    onToggle: onToggle,\n    onPreferencesChange: onSplitPanelPreferencesSet,\n    reportSize: setSplitPanelReportedSize\n  };\n  var contentWrapperProps = {\n    navigationPadding: navigationHide || !!navigationOpen,\n    toolsPadding: // tools padding is displayed in one of the three cases\n    // 1. Nothing on the that screen edge (no tools panel and no split panel)\n    toolsHide && (!splitPanel || finalSplitPanePosition !== 'side') || // 2. Tools panel is present and open\n    toolsVisible || // 3. Split panel is open in side position\n    splitPanelOpenOnTheSide,\n    isMobile: isMobile\n  };\n  var navigationRefs = useFocusControl(navigationOpen);\n  var toolsRefs = useFocusControl(toolsOpen);\n  useImperativeHandle(ref, function () {\n    return {\n      openTools: function () {\n        return onToolsToggle(true);\n      },\n      closeNavigationIfNecessary: function () {\n        if (isMobile) {\n          onNavigationToggle(false);\n        }\n      }\n    };\n  }, [isMobile, onNavigationToggle, onToolsToggle]);\n  var splitPanelBottomOffset = (_c = !splitPanel || finalSplitPanePosition !== 'bottom' ? undefined : splitPanelOpen ? splitPanelHeight : splitPanelHeaderHeight) !== null && _c !== void 0 ? _c : undefined;\n  var contentWidthStyles = !isMobile ? {\n    minWidth: defaults.minContentWidth,\n    maxWidth: defaults.maxContentWidth\n  } : undefined;\n  var isToolsDrawerHidden = disableContentPaddings;\n\n  var toolsDrawerWidth = function () {\n    if (isMobile) {\n      return 0;\n    }\n\n    var toolsPanelWidth = toolsHide ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;\n    var splitPanelWidth = !splitPanel || finalSplitPanePosition !== 'side' ? 0 : splitPanelOpen ? splitPanelReportedSize : closedDrawerWidth;\n    return toolsPanelWidth + splitPanelWidth;\n  }();\n\n  var navigationDrawerWidth = function () {\n    if (isMobile) {\n      return 0;\n    }\n\n    return effectiveNavigationWidth;\n  }();\n\n  var contentHeaderProps = {\n    isMobile: isMobile,\n    navigationWidth: effectiveNavigationWidth,\n    toolsWidth: disableContentPaddings ? 0 : toolsDrawerWidth ? toolsDrawerWidth : isToolsDrawerHidden ? toggleButtonsBarWidth : 0\n  };\n  var previousContentWidth = usePreviousFrameValue(contentWidthWithSplitPanel - (splitPanelOpenOnTheSide ? splitPanelReportedSize : 0));\n\n  var contentScaleX = function () {\n    if (isMobile || !isMotionEnabled || !disableContentPaddings || !previousContentWidth) {\n      return undefined;\n    }\n  }();\n\n  return React.createElement(\"div\", {\n    className: clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll']),\n    ref: rootRef\n  }, React.createElement(\"div\", {\n    className: styles['layout-wrapper'],\n    style: contentHeightStyle\n  }, isMobile && (!toolsHide || !navigationHide || breadcrumbs) && React.createElement(MobileToolbar, {\n    anyPanelOpen: anyPanelOpen,\n    toggleRefs: {\n      navigation: navigationRefs.toggle,\n      tools: toolsRefs.toggle\n    },\n    topOffset: headerHeight,\n    ariaLabels: ariaLabels,\n    navigationHide: navigationHide,\n    toolsHide: toolsHide,\n    onNavigationOpen: function () {\n      return onNavigationToggle(true);\n    },\n    onToolsOpen: function () {\n      return onToolsToggle(true);\n    },\n    unfocusable: anyPanelOpen\n  }, breadcrumbs), React.createElement(\"div\", {\n    className: clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])\n  }, !navigationHide && React.createElement(NavigationPanel, {\n    ariaLabels: ariaLabels,\n    footerHeight: footerHeight,\n    headerHeight: headerHeight,\n    isHidden: disableContentPaddings,\n    isMobile: isMobile,\n    isMotionEnabled: isMotionEnabled,\n    navigation: navigation,\n    navigationDrawerWidth: navigationDrawerWidth,\n    navigationOpen: navigationOpen,\n    onClick: isMobile ? onNavigationClick : undefined,\n    onNavigationToggle: onNavigationToggle,\n    panelHeightStyle: panelHeightStyle,\n    toggleRefs: navigationRefs,\n    navigationWidth: navigationWidth\n  }), React.createElement(\"main\", {\n    ref: legacyScrollRootRef,\n    className: clsx(styles['layout-main'], (_b = {}, _b[styles['layout-main-scrollable']] = disableBodyScroll, _b[testutilStyles['disable-body-scroll-root']] = disableBodyScroll, _b[styles.unfocusable] = isMobile && anyPanelOpen, _b))\n  }, React.createElement(\"div\", {\n    style: {\n      marginBottom: splitPanelBottomOffset,\n      transform: contentScaleX ? \"scaleX(\".concat(contentScaleX, \")\") : undefined\n    }\n  }, notifications && React.createElement(DarkHeader, __assign({}, contentHeaderProps, {\n    topOffset: disableBodyScroll ? 0 : headerHeight,\n    sticky: !isMobile && darkStickyHeaderContentType && stickyNotifications\n  }), React.createElement(Notifications, {\n    testUtilsClassName: clsx(styles.notifications, testutilStyles.notifications),\n    labels: ariaLabels,\n    topOffset: headerHeight,\n    sticky: !isMobile && stickyNotifications,\n    ref: notificationsRef,\n    isMobile: isMobile,\n    navigationPadding: contentWrapperProps.navigationPadding,\n    toolsPadding: contentWrapperProps.toolsPadding,\n    contentWidthStyles: contentWidthStyles\n  }, notifications)), (!isMobile && breadcrumbs || contentHeader) && React.createElement(DarkHeader, __assign({}, contentHeaderProps), React.createElement(ContentWrapper, __assign({}, contentWrapperProps, {\n    contentWidthStyles: contentWidthStyles\n  }), !isMobile && breadcrumbs && React.createElement(\"div\", {\n    className: clsx(styles.breadcrumbs, testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'], darkStickyHeaderContentType && styles['breadcrumbs-desktop-sticky-header'])\n  }, breadcrumbs), contentHeader && React.createElement(\"div\", {\n    className: clsx(styles['content-header-wrapper'], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles['content-extra-top-padding'], !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'], !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped'])\n  }, contentHeader))), React.createElement(ContentWrapper, __assign({}, contentWrapperProps, {\n    ref: mainContentRef,\n    disablePaddings: disableContentPaddings,\n    // eslint-disable-next-line react/forbid-component-props\n    className: clsx(!disableContentPaddings && styles['content-wrapper'], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles['content-extra-top-padding'], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles['content-wrapper-first-child'])\n  }), React.createElement(\"div\", {\n    className: clsx(styles.content, testutilStyles.content, !disableContentHeaderOverlap && contentHeader && styles['content-overlapped']),\n    style: contentWidthStyles\n  }, React.createElement(AppLayoutContext.Provider, {\n    value: {\n      stickyOffsetTop: (disableBodyScroll ? 0 : headerHeight) + (stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),\n      stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0)\n    }\n  }, content)))), finalSplitPanePosition === 'bottom' && React.createElement(SplitPanelWrapper, {\n    context: splitPanelContext\n  }, splitPanel)), React.createElement(ToolsAndSplitPanel, {\n    splitPanel: finalSplitPanePosition === 'side' ? splitPanel : undefined,\n    ariaLabels: ariaLabels,\n    closedDrawerWidth: closedDrawerWidth,\n    contentHeightStyle: contentHeightStyle,\n    disableContentPaddings: disableContentPaddings,\n    drawerWidth: toolsDrawerWidth,\n    footerHeight: footerHeight,\n    headerHeight: headerHeight,\n    isHidden: isToolsDrawerHidden,\n    isMobile: isMobile,\n    isMotionEnabled: isMotionEnabled,\n    onToolsToggle: onToolsToggle,\n    panelHeightStyle: panelHeightStyle,\n    splitPanelContext: splitPanelContext,\n    splitPanelOpen: splitPanelOpenOnTheSide,\n    splitPanelReportedSize: splitPanelReportedSize,\n    toggleRefs: toolsRefs,\n    tools: tools,\n    toolsHide: Boolean(toolsHide),\n    toolsOpen: toolsOpen,\n    toolsWidth: toolsWidth\n  }))));\n});\napplyDisplayName(AppLayout, 'AppLayout');\nexport default AppLayout;","map":{"version":3,"mappings":"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","names":["clsx","React","useCallback","useEffect","useImperativeHandle","useRef","useState","getBaseProps","useControllable","useMobile","fireNonCancelableEvent","applyDefaults","Notifications","MobileToolbar","SplitPanelWrapper","useFocusControl","useWindowWidth","useContentHeight","styles","testutilStyles","findUpUntil","AppLayoutContext","useContainerQuery","useStableEventHandler","applyDisplayName","CONSTRAINED_MAIN_PANEL_MIN_HEIGHT","CONSTRAINED_PAGE_HEIGHT","getSplitPanelDefaultSize","MAIN_PANEL_MIN_HEIGHT","useBaseComponent","useVisualRefresh","ContentWrapper","DarkHeader","isMotionDisabled","useEffectOnUpdate","NavigationPanel","ToolsAndSplitPanel","usePreviousFrameValue","useAppLayoutOffsets","isDevelopment","warnOnce","RefreshedAppLayout","useMergeRefs","AppLayout","forwardRef","_a","ref","_b","_c","headerSelector","_d","footerSelector","rest","__internalRootRef","isRefresh","props","contentType","baseProps","__assign","OldAppLayout","navigation","navigationWidth","navigationHide","controlledNavigationOpen","tools","_e","toolsWidth","toolsHide","controlledToolsOpen","breadcrumbs","notifications","stickyNotifications","contentHeader","disableContentHeaderOverlap","content","_f","disableContentPaddings","disableBodyScroll","maxContentWidth","minContentWidth","_g","_h","ariaLabels","splitPanel","controlledSplitPanelSize","controlledSplitPanelOpen","controlledSplitPanelPreferences","onSplitPanelPreferencesChange","onSplitPanelResize","onSplitPanelToggle","onNavigationChange","onToolsChange","rootRef","isMobile","isMotionEnabled","current","defaults","darkStickyHeaderContentType","indexOf","navigationOpen","componentName","controlledProp","changeHandler","_k","setNavigationOpen","toolsOpen","_m","setToolsOpen","onNavigationToggle","open","onToolsToggle","onNavigationClick","event","hasLink","target","tagName","node","href","navigationVisible","toolsVisible","contentHeightStyle","headerHeight","footerHeight","panelHeightStyle","height","notificationsHeight","notificationsRef","rect","splitPanelHeaderHeight","splitPanelHeaderMeasureRef","splitPanelHeaderRefObject","splitPanelHeaderRef","anyPanelOpen","hasRenderedNotifications","stickyNotificationsHeight","undefined","splitPanelPreferences","setSplitPanelPreferences","splitPanelPosition","position","splitPanelHeight","splitPanelRef","closedDrawerWidth","effectiveNavigationWidth","effectiveToolsWidth","defaultSplitPanelSize","_u","splitPanelSize","setSplitPanelSize","_w","splitPanelOpen","setSplitPanelOpen","mainContentRef","legacyScrollRootRef","onSplitPanelPreferencesSet","detail","onSplitPanelSizeSet","size","onToggle","getSplitPanelMaxWidth","NaN","width","parseInt","getComputedStyle","contentPadding","spaceAvailable","spaceTaken","finalSplitPanePosition","Math","max","getSplitPanelMaxHeight","document","availableHeight","clientHeight","documentElement","isForcedPosition","setIsForcedPosition","splitPaneAvailableOnTheSide","Boolean","splitPanelOpenOnTheSide","toggleButtonsBarWidth","windowWidth","leftOffset","rightOffset","contentWidthWithSplitPanel","contentWidth","navigationClosedWidth","toolsClosedWidth","splitPanelLastInteraction","setSplitPanelLastInteraction","type","contentMaxWidthStyle","maxWidth","splitPanelReportedSize","setSplitPanelReportedSize","splitPanelContext","topOffset","bottomOffset","getMaxWidth","getMaxHeight","getHeader","contentWidthStyles","isOpen","lastInteraction","onResize","onPreferencesChange","reportSize","contentWrapperProps","navigationPadding","toolsPadding","navigationRefs","toolsRefs","openTools","closeNavigationIfNecessary","splitPanelBottomOffset","minWidth","isToolsDrawerHidden","toolsDrawerWidth","toolsPanelWidth","splitPanelWidth","navigationDrawerWidth","contentHeaderProps","previousContentWidth","contentScaleX","className","root","style","toggleRefs","toggle","onNavigationOpen","onToolsOpen","unfocusable","layout","isHidden","onClick","marginBottom","transform","sticky","testUtilsClassName","labels","disablePaddings","Provider","value","stickyOffsetTop","stickyOffsetBottom","context","drawerWidth"],"sourceRoot":"","sources":["../../../src/app-layout/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { applyDefaults } from './defaults';\nimport { AppLayoutProps } from './interfaces';\nimport { Notifications } from './notifications';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport { useFocusControl } from './utils/use-focus-control';\nimport useWindowWidth from './utils/use-window-width';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { useContainerQuery } from '../internal/hooks/container-queries';\nimport { useStableEventHandler } from '../internal/hooks/use-stable-event-handler';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { SplitPanelContextProps, SplitPanelLastInteraction } from '../internal/context/split-panel-context';\nimport {\n  CONSTRAINED_MAIN_PANEL_MIN_HEIGHT,\n  CONSTRAINED_PAGE_HEIGHT,\n  getSplitPanelDefaultSize,\n  MAIN_PANEL_MIN_HEIGHT,\n} from '../split-panel/utils/size-utils';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport ContentWrapper, { ContentWrapperProps } from './content-wrapper';\nimport { DarkHeader, DarkHeaderProps } from './dark-header';\nimport { isMotionDisabled } from '../internal/motion';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nimport { NavigationPanel } from './navigation-panel';\nimport { ToolsAndSplitPanel } from './tools-and-split-panel';\nimport { usePreviousFrameValue } from '../internal/hooks/use-previous-frame';\nimport useAppLayoutOffsets from './utils/use-content-width';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\n\nimport RefreshedAppLayout from './visual-refresh';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nexport { AppLayoutProps };\n\nconst AppLayout = React.forwardRef(\n  (\n    { contentType = 'default', headerSelector = '#b #h', footerSelector = '#b #f', ...rest }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent<HTMLDivElement>('AppLayout');\n    const isRefresh = useVisualRefresh(__internalRootRef);\n\n    // This re-builds the props including the default values\n    const props = { contentType, headerSelector, footerSelector, ...rest };\n\n    const baseProps = getBaseProps(rest);\n\n    return (\n      <div ref={__internalRootRef} {...baseProps}>\n        {isRefresh ? <RefreshedAppLayout {...props} ref={ref} /> : <OldAppLayout {...props} ref={ref} />}\n      </div>\n    );\n  }\n);\n\nconst OldAppLayout = React.forwardRef(\n  (\n    {\n      navigation,\n      navigationWidth = 280,\n      navigationHide,\n      navigationOpen: controlledNavigationOpen,\n      tools,\n      toolsWidth = 290,\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      contentHeader,\n      disableContentHeaderOverlap,\n      content,\n      contentType = 'default',\n      disableContentPaddings,\n      disableBodyScroll,\n      maxContentWidth,\n      minContentWidth,\n      headerSelector = '#b #h',\n      footerSelector = '#b #f',\n      ariaLabels,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      onSplitPanelResize,\n      onSplitPanelToggle,\n      onNavigationChange,\n      onToolsChange,\n    }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    if (isDevelopment) {\n      if (controlledToolsOpen && toolsHide) {\n        warnOnce(\n          'AppLayout',\n          `You have enabled both the \\`toolsOpen\\` prop and the \\`toolsHide\\` prop. This is not supported. Set \\`toolsOpen\\` to \\`false\\` when you set \\`toolsHide\\` to \\`true\\`.`\n        );\n      }\n    }\n    const rootRef = useRef<HTMLDivElement>(null);\n    const isMobile = useMobile();\n    const isMotionEnabled = rootRef.current ? !isMotionDisabled(rootRef.current) : false;\n\n    const defaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, false);\n    const darkStickyHeaderContentType = ['cards', 'table'].indexOf(contentType) > -1;\n    const [navigationOpen = false, setNavigationOpen] = useControllable(\n      controlledNavigationOpen,\n      onNavigationChange,\n      isMobile ? false : defaults.navigationOpen,\n      { componentName: 'AppLayout', controlledProp: 'navigationOpen', changeHandler: 'onNavigationChange' }\n    );\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(\n      controlledToolsOpen,\n      onToolsChange,\n      isMobile ? false : defaults.toolsOpen,\n      { componentName: 'AppLayout', controlledProp: 'toolsOpen', changeHandler: 'onToolsChange' }\n    );\n\n    const onNavigationToggle = useCallback(\n      (open: boolean) => {\n        setNavigationOpen(open);\n        fireNonCancelableEvent(onNavigationChange, { open });\n      },\n      [setNavigationOpen, onNavigationChange]\n    );\n    const onToolsToggle = useCallback(\n      (open: boolean) => {\n        setToolsOpen(open);\n        fireNonCancelableEvent(onToolsChange, { open });\n      },\n      [setToolsOpen, onToolsChange]\n    );\n    const onNavigationClick = (event: React.MouseEvent) => {\n      const hasLink = findUpUntil(\n        event.target as HTMLElement,\n        node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n      );\n      if (hasLink) {\n        onNavigationToggle(false);\n      }\n    };\n\n    const navigationVisible = !navigationHide && navigationOpen;\n    const toolsVisible = !toolsHide && toolsOpen;\n\n    const { contentHeightStyle, headerHeight, footerHeight, panelHeightStyle } = useContentHeight(\n      headerSelector,\n      footerSelector,\n      disableBodyScroll\n    );\n    const [notificationsHeight, notificationsRef] = useContainerQuery(rect => rect.height);\n    const [splitPanelHeaderHeight, splitPanelHeaderMeasureRef] = useContainerQuery(\n      rect => (splitPanel ? rect.height : 0),\n      [splitPanel]\n    );\n    const splitPanelHeaderRefObject = useRef(null);\n    const splitPanelHeaderRef = useMergeRefs(splitPanelHeaderMeasureRef, splitPanelHeaderRefObject);\n    const anyPanelOpen = navigationVisible || toolsVisible;\n    const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n    const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n    const splitPanelPosition = splitPanelPreferences?.position || 'bottom';\n\n    const [splitPanelHeight, splitPanelRef] = useContainerQuery(\n      rect => (splitPanel ? rect.height : 0),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [splitPanel, splitPanelPosition]\n    );\n\n    const closedDrawerWidth = 40;\n    const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n    const effectiveToolsWidth =\n      toolsHide && (!splitPanel || splitPanelPreferences?.position !== 'side')\n        ? 0\n        : toolsOpen\n        ? toolsWidth\n        : closedDrawerWidth;\n\n    const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n    const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      defaultSplitPanelSize,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelSize',\n        changeHandler: 'onSplitPanelResize',\n      }\n    );\n\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const mainContentRef = useRef<HTMLDivElement>(null);\n    const legacyScrollRootRef = useRef<HTMLElement>(null);\n\n    const onSplitPanelPreferencesSet = useCallback(\n      (detail: { position: 'side' | 'bottom' }) => {\n        setSplitPanelPreferences(detail);\n        fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n      },\n      [setSplitPanelPreferences, onSplitPanelPreferencesChange]\n    );\n    const onSplitPanelSizeSet = useCallback(\n      (detail: { size: number }) => {\n        setSplitPanelSize(detail.size);\n        fireNonCancelableEvent(onSplitPanelResize, detail);\n      },\n      [setSplitPanelSize, onSplitPanelResize]\n    );\n    const onToggle = useCallback(() => {\n      setSplitPanelOpen(!splitPanelOpen);\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle]);\n\n    const getSplitPanelMaxWidth = useStableEventHandler(() => {\n      if (!mainContentRef.current || !defaults.minContentWidth) {\n        return NaN;\n      }\n\n      const width = parseInt(getComputedStyle(mainContentRef.current).width);\n      // when disableContentPaddings is true there is less available space,\n      // so we subtract space-scaled-2x-xxxl * 2 for left and right padding\n      const contentPadding = disableContentPaddings ? 80 : 0;\n      const spaceAvailable = width - defaults.minContentWidth - contentPadding;\n      const spaceTaken = finalSplitPanePosition === 'side' ? splitPanelSize : 0;\n      return Math.max(0, spaceTaken + spaceAvailable);\n    });\n\n    const getSplitPanelMaxHeight = useStableEventHandler(() => {\n      if (typeof document === 'undefined') {\n        return 0; // render the split panel in its minimum possible size\n      } else if (disableBodyScroll && legacyScrollRootRef.current) {\n        const availableHeight = legacyScrollRootRef.current.clientHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      } else {\n        const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT\n          ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT\n          : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      }\n    });\n\n    const [isForcedPosition, setIsForcedPosition] = useState(false);\n    const finalSplitPanePosition = isForcedPosition ? 'bottom' : splitPanelPosition;\n\n    const splitPaneAvailableOnTheSide = Boolean(splitPanel) && finalSplitPanePosition === 'side';\n    const splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;\n\n    const toggleButtonsBarWidth = 0;\n\n    const windowWidth = useWindowWidth();\n    const { left: leftOffset, right: rightOffset } = useAppLayoutOffsets(rootRef.current);\n    const contentWidthWithSplitPanel =\n      windowWidth -\n      leftOffset -\n      rightOffset -\n      effectiveToolsWidth -\n      effectiveNavigationWidth -\n      (disableContentPaddings ? 0 : toggleButtonsBarWidth);\n\n    useEffect(() => {\n      const contentWidth = contentWidthWithSplitPanel - splitPanelSize;\n      setIsForcedPosition(isMobile || (defaults.minContentWidth || 0) > contentWidth);\n      // This is a workaround to avoid a forced position due to splitPanelSize, which is\n      // user controlled variable.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contentWidthWithSplitPanel, defaults.minContentWidth, isMobile]);\n\n    const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n    const toolsClosedWidth = toolsHide || isMobile ? 0 : closedDrawerWidth;\n\n    const [splitPanelLastInteraction, setSplitPanelLastInteraction] = useState<undefined | SplitPanelLastInteraction>();\n    useEffectOnUpdate(\n      () => setSplitPanelLastInteraction(splitPanelOpen ? { type: 'open' } : { type: 'close' }),\n      [splitPanelOpen]\n    );\n    useEffectOnUpdate(() => setSplitPanelLastInteraction({ type: 'position' }), [splitPanelPosition]);\n\n    const contentMaxWidthStyle = !isMobile ? { maxWidth: defaults.maxContentWidth } : undefined;\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n\n    const splitPanelContext: SplitPanelContextProps = {\n      topOffset: headerHeight + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight || 0 : 0),\n      bottomOffset: footerHeight,\n      leftOffset:\n        leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n      rightOffset: rightOffset + (isMobile ? 0 : !toolsHide && toolsOpen ? toolsWidth : toolsClosedWidth),\n      position: finalSplitPanePosition,\n      size: splitPanelSize,\n      getMaxWidth: getSplitPanelMaxWidth,\n      getMaxHeight: getSplitPanelMaxHeight,\n      getHeader: () => splitPanelHeaderRefObject.current,\n      disableContentPaddings,\n      contentWidthStyles: contentMaxWidthStyle,\n      isOpen: splitPanelOpen,\n      isMobile,\n      isRefresh: false,\n      isForcedPosition,\n      lastInteraction: splitPanelLastInteraction,\n      splitPanelRef,\n      splitPanelHeaderRef,\n      onResize: onSplitPanelSizeSet,\n      onToggle,\n      onPreferencesChange: onSplitPanelPreferencesSet,\n      reportSize: setSplitPanelReportedSize,\n    };\n\n    const contentWrapperProps: ContentWrapperProps = {\n      navigationPadding: navigationHide || !!navigationOpen,\n      toolsPadding:\n        // tools padding is displayed in one of the three cases\n        // 1. Nothing on the that screen edge (no tools panel and no split panel)\n        (toolsHide && (!splitPanel || finalSplitPanePosition !== 'side')) ||\n        // 2. Tools panel is present and open\n        toolsVisible ||\n        // 3. Split panel is open in side position\n        splitPanelOpenOnTheSide,\n      isMobile,\n    };\n\n    const navigationRefs = useFocusControl(navigationOpen);\n    const toolsRefs = useFocusControl(toolsOpen);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        openTools: () => onToolsToggle(true),\n        closeNavigationIfNecessary: () => {\n          if (isMobile) {\n            onNavigationToggle(false);\n          }\n        },\n      }),\n      [isMobile, onNavigationToggle, onToolsToggle]\n    );\n\n    const splitPanelBottomOffset =\n      (!splitPanel || finalSplitPanePosition !== 'bottom'\n        ? undefined\n        : splitPanelOpen\n        ? splitPanelHeight\n        : splitPanelHeaderHeight) ?? undefined;\n\n    const contentWidthStyles = !isMobile\n      ? { minWidth: defaults.minContentWidth, maxWidth: defaults.maxContentWidth }\n      : undefined;\n\n    const isToolsDrawerHidden = disableContentPaddings;\n\n    const toolsDrawerWidth = (() => {\n      if (isMobile) {\n        return 0;\n      }\n\n      const toolsPanelWidth = toolsHide ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;\n      const splitPanelWidth =\n        !splitPanel || finalSplitPanePosition !== 'side'\n          ? 0\n          : splitPanelOpen\n          ? splitPanelReportedSize\n          : closedDrawerWidth;\n\n      return toolsPanelWidth + splitPanelWidth;\n    })();\n\n    const navigationDrawerWidth = (() => {\n      if (isMobile) {\n        return 0;\n      }\n\n      return effectiveNavigationWidth;\n    })();\n\n    const contentHeaderProps: DarkHeaderProps = {\n      isMobile,\n      navigationWidth: effectiveNavigationWidth,\n      toolsWidth: disableContentPaddings\n        ? 0\n        : toolsDrawerWidth\n        ? toolsDrawerWidth\n        : isToolsDrawerHidden\n        ? toggleButtonsBarWidth\n        : 0,\n    };\n\n    const previousContentWidth = usePreviousFrameValue(\n      contentWidthWithSplitPanel - (splitPanelOpenOnTheSide ? splitPanelReportedSize : 0)\n    );\n\n    const contentScaleX = (() => {\n      if (isMobile || !isMotionEnabled || !disableContentPaddings || !previousContentWidth) {\n        return undefined;\n      }\n    })();\n\n    return (\n      <div\n        className={clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll'])}\n        ref={rootRef}\n      >\n        <div className={styles['layout-wrapper']} style={contentHeightStyle}>\n          {isMobile && (!toolsHide || !navigationHide || breadcrumbs) && (\n            <MobileToolbar\n              anyPanelOpen={anyPanelOpen}\n              toggleRefs={{ navigation: navigationRefs.toggle, tools: toolsRefs.toggle }}\n              topOffset={headerHeight}\n              ariaLabels={ariaLabels}\n              navigationHide={navigationHide}\n              toolsHide={toolsHide}\n              onNavigationOpen={() => onNavigationToggle(true)}\n              onToolsOpen={() => onToolsToggle(true)}\n              unfocusable={anyPanelOpen}\n            >\n              {breadcrumbs}\n            </MobileToolbar>\n          )}\n          <div className={clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])}>\n            {!navigationHide && (\n              <NavigationPanel\n                ariaLabels={ariaLabels}\n                footerHeight={footerHeight}\n                headerHeight={headerHeight}\n                isHidden={disableContentPaddings}\n                isMobile={isMobile}\n                isMotionEnabled={isMotionEnabled}\n                navigation={navigation}\n                navigationDrawerWidth={navigationDrawerWidth}\n                navigationOpen={navigationOpen}\n                onClick={isMobile ? onNavigationClick : undefined}\n                onNavigationToggle={onNavigationToggle}\n                panelHeightStyle={panelHeightStyle}\n                toggleRefs={navigationRefs}\n                navigationWidth={navigationWidth}\n              />\n            )}\n            <main\n              ref={legacyScrollRootRef}\n              className={clsx(styles['layout-main'], {\n                [styles['layout-main-scrollable']]: disableBodyScroll,\n                [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n                [styles.unfocusable]: isMobile && anyPanelOpen,\n              })}\n            >\n              <div\n                style={{\n                  marginBottom: splitPanelBottomOffset,\n                  transform: contentScaleX ? `scaleX(${contentScaleX})` : undefined,\n                }}\n              >\n                {notifications && (\n                  <DarkHeader\n                    {...contentHeaderProps}\n                    topOffset={disableBodyScroll ? 0 : headerHeight}\n                    sticky={!isMobile && darkStickyHeaderContentType && stickyNotifications}\n                  >\n                    <Notifications\n                      testUtilsClassName={clsx(styles.notifications, testutilStyles.notifications)}\n                      labels={ariaLabels}\n                      topOffset={headerHeight}\n                      sticky={!isMobile && stickyNotifications}\n                      ref={notificationsRef}\n                      isMobile={isMobile}\n                      navigationPadding={contentWrapperProps.navigationPadding}\n                      toolsPadding={contentWrapperProps.toolsPadding}\n                      contentWidthStyles={contentWidthStyles}\n                    >\n                      {notifications}\n                    </Notifications>\n                  </DarkHeader>\n                )}\n                {((!isMobile && breadcrumbs) || contentHeader) && (\n                  <DarkHeader {...contentHeaderProps}>\n                    <ContentWrapper {...contentWrapperProps} contentWidthStyles={contentWidthStyles}>\n                      {!isMobile && breadcrumbs && (\n                        <div\n                          className={clsx(\n                            styles.breadcrumbs,\n                            testutilStyles.breadcrumbs,\n                            styles['breadcrumbs-desktop'],\n                            darkStickyHeaderContentType && styles['breadcrumbs-desktop-sticky-header']\n                          )}\n                        >\n                          {breadcrumbs}\n                        </div>\n                      )}\n                      {contentHeader && (\n                        <div\n                          className={clsx(\n                            styles['content-header-wrapper'],\n                            !hasRenderedNotifications &&\n                              (isMobile || !breadcrumbs) &&\n                              styles['content-extra-top-padding'],\n                            !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'],\n                            !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped']\n                          )}\n                        >\n                          {contentHeader}\n                        </div>\n                      )}\n                    </ContentWrapper>\n                  </DarkHeader>\n                )}\n                <ContentWrapper\n                  {...contentWrapperProps}\n                  ref={mainContentRef}\n                  disablePaddings={disableContentPaddings}\n                  // eslint-disable-next-line react/forbid-component-props\n                  className={clsx(\n                    !disableContentPaddings && styles['content-wrapper'],\n                    !disableContentPaddings &&\n                      (isMobile || !breadcrumbs) &&\n                      !contentHeader &&\n                      styles['content-extra-top-padding'],\n                    !hasRenderedNotifications &&\n                      !breadcrumbs &&\n                      !isMobile &&\n                      !contentHeader &&\n                      styles['content-wrapper-first-child']\n                  )}\n                >\n                  <div\n                    className={clsx(\n                      styles.content,\n                      testutilStyles.content,\n                      !disableContentHeaderOverlap && contentHeader && styles['content-overlapped']\n                    )}\n                    style={contentWidthStyles}\n                  >\n                    <AppLayoutContext.Provider\n                      value={{\n                        stickyOffsetTop:\n                          (disableBodyScroll ? 0 : headerHeight) +\n                          (stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),\n                        stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0),\n                      }}\n                    >\n                      {content}\n                    </AppLayoutContext.Provider>\n                  </div>\n                </ContentWrapper>\n              </div>\n              {finalSplitPanePosition === 'bottom' && (\n                <SplitPanelWrapper context={splitPanelContext}>{splitPanel}</SplitPanelWrapper>\n              )}\n            </main>\n\n            <ToolsAndSplitPanel\n              splitPanel={finalSplitPanePosition === 'side' ? splitPanel : undefined}\n              ariaLabels={ariaLabels}\n              closedDrawerWidth={closedDrawerWidth}\n              contentHeightStyle={contentHeightStyle}\n              disableContentPaddings={disableContentPaddings}\n              drawerWidth={toolsDrawerWidth}\n              footerHeight={footerHeight}\n              headerHeight={headerHeight}\n              isHidden={isToolsDrawerHidden}\n              isMobile={isMobile}\n              isMotionEnabled={isMotionEnabled}\n              onToolsToggle={onToolsToggle}\n              panelHeightStyle={panelHeightStyle}\n              splitPanelContext={splitPanelContext}\n              splitPanelOpen={splitPanelOpenOnTheSide}\n              splitPanelReportedSize={splitPanelReportedSize}\n              toggleRefs={toolsRefs}\n              tools={tools}\n              toolsHide={Boolean(toolsHide)}\n              toolsOpen={toolsOpen}\n              toolsWidth={toolsWidth}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\napplyDisplayName(AppLayout, 'AppLayout');\nexport default AppLayout;\n"]},"metadata":{},"sourceType":"module"}