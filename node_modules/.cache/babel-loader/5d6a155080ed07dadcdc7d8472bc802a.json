{"ast":null,"code":"var testIndexMap = new WeakMap(); //retrieves the test indexes of the option for the findOption and findOptionInGroup test-utils\n\nexport var getTestOptionIndexes = function (item) {\n  return testIndexMap.get(item);\n};\nexport var generateTestIndexes = function (filteredItems, getParentGroup) {\n  var throughIndex = 1;\n  var groupIndex = 0;\n  var inGroupIndex = 1;\n  var currentGroup = null;\n  filteredItems.forEach(function (item) {\n    if (!('type' in item)) {\n      testIndexMap.set(item, {\n        throughIndex: throughIndex++\n      });\n    } else if (item.type === 'child') {\n      var parentGroup = getParentGroup(item);\n\n      if (parentGroup && parentGroup !== currentGroup) {\n        currentGroup = parentGroup;\n        inGroupIndex = 1;\n        testIndexMap.set(item, {\n          throughIndex: throughIndex++,\n          groupIndex: ++groupIndex,\n          inGroupIndex: inGroupIndex++\n        });\n      } else {\n        testIndexMap.set(item, {\n          throughIndex: throughIndex++,\n          groupIndex: groupIndex,\n          inGroupIndex: inGroupIndex++\n        });\n      }\n    }\n  });\n};","map":{"version":3,"mappings":"AAUA,IAAMA,YAAY,GAAG,IAAIC,OAAJ,EAArB,C,CACA;;AACA,OAAO,IAAMC,oBAAoB,GAAG,UAAqBC,IAArB,EAA4B;EAAK,mBAAY,CAACC,GAAb,CAAiBD,IAAjB;AAAsB,CAApF;AACP,OAAO,IAAME,mBAAmB,GAAG,UACjCC,aADiC,EAEjCC,cAFiC,EAES;EAE1C,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,UAAU,GAAG,CAAjB;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,YAAY,GAAa,IAA7B;EACAL,aAAa,CAACM,OAAd,CAAsB,gBAAI;IACxB,IAAI,EAAE,UAAUT,IAAZ,CAAJ,EAAuB;MACrBH,YAAY,CAACa,GAAb,CAAiBV,IAAjB,EAAuB;QAAEK,YAAY,EAAEA,YAAY;MAA5B,CAAvB;IACD,CAFD,MAEO,IAAIL,IAAI,CAACW,IAAL,KAAc,OAAlB,EAA2B;MAChC,IAAMC,WAAW,GAAGR,cAAc,CAACJ,IAAD,CAAlC;;MACA,IAAIY,WAAW,IAAIA,WAAW,KAAKJ,YAAnC,EAAiD;QAC/CA,YAAY,GAAGI,WAAf;QACAL,YAAY,GAAG,CAAf;QACAV,YAAY,CAACa,GAAb,CAAiBV,IAAjB,EAAuB;UACrBK,YAAY,EAAEA,YAAY,EADL;UAErBC,UAAU,EAAE,EAAEA,UAFO;UAGrBC,YAAY,EAAEA,YAAY;QAHL,CAAvB;MAKD,CARD,MAQO;QACLV,YAAY,CAACa,GAAb,CAAiBV,IAAjB,EAAuB;UAAEK,YAAY,EAAEA,YAAY,EAA5B;UAAgCC,UAAU,YAA1C;UAA4CC,YAAY,EAAEA,YAAY;QAAtE,CAAvB;MACD;IACF;EACF,CAjBD;AAkBD,CA1BM","names":["testIndexMap","WeakMap","getTestOptionIndexes","item","get","generateTestIndexes","filteredItems","getParentGroup","throughIndex","groupIndex","inGroupIndex","currentGroup","forEach","set","type","parentGroup"],"sourceRoot":"","sources":["../../../../../../src/internal/components/options-list/utils/test-indexes.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\ninterface ListItem {\n  type?: string;\n}\ninterface TestIndexes {\n  throughIndex?: number;\n  groupIndex?: number;\n  inGroupIndex?: number;\n}\nconst testIndexMap = new WeakMap<ListItem, TestIndexes>();\n//retrieves the test indexes of the option for the findOption and findOptionInGroup test-utils\nexport const getTestOptionIndexes = <T extends ListItem>(item: T) => testIndexMap.get(item);\nexport const generateTestIndexes = <T extends ListItem>(\n  filteredItems: ReadonlyArray<T>,\n  getParentGroup: (item: T) => T | undefined\n) => {\n  let throughIndex = 1;\n  let groupIndex = 0;\n  let inGroupIndex = 1;\n  let currentGroup: T | null = null;\n  filteredItems.forEach(item => {\n    if (!('type' in item)) {\n      testIndexMap.set(item, { throughIndex: throughIndex++ });\n    } else if (item.type === 'child') {\n      const parentGroup = getParentGroup(item);\n      if (parentGroup && parentGroup !== currentGroup) {\n        currentGroup = parentGroup;\n        inGroupIndex = 1;\n        testIndexMap.set(item, {\n          throughIndex: throughIndex++,\n          groupIndex: ++groupIndex,\n          inGroupIndex: inGroupIndex++,\n        });\n      } else {\n        testIndexMap.set(item, { throughIndex: throughIndex++, groupIndex, inGroupIndex: inGroupIndex++ });\n      }\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}