{"ast":null,"code":"export var connectOptionsByValue = function (options, selectedOptions) {\n  return (selectedOptions || []).map(function (selectedOption) {\n    for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n      var dropdownOption = options_1[_i];\n\n      if (dropdownOption.type !== 'parent' && dropdownOption.option.value === selectedOption.value) {\n        return dropdownOption;\n      }\n    }\n\n    return {\n      option: selectedOption\n    };\n  });\n};\nexport var findOptionIndex = function (options, option) {\n  for (var index = 0; index < options.length; index++) {\n    var __option = options[index];\n\n    if (__option === option || __option.value === option.value) {\n      return index;\n    }\n  }\n\n  return -1;\n};","map":{"version":3,"mappings":"AAIA,OAAO,IAAMA,qBAAqB,GAAG,UACnCC,OADmC,EAEnCC,eAFmC,EAEa;EAEhD,OAAO,CAACA,eAAe,IAAI,EAApB,EAAwBC,GAAxB,CAA4B,0BAAc;IAC/C,KAA6B,+BAA7B,EAA6BC,qBAA7B,EAA6BA,IAA7B,EAAsC;MAAjC,IAAMC,cAAc,gBAApB;;MACH,IACEA,cAAc,CAACC,IAAf,KAAwB,QAAxB,IACCD,cAAc,CAACE,MAAf,CAA2CC,KAA3C,KAAqDC,cAAc,CAACD,KAFvE,EAGE;QACA,OAAOH,cAAP;MACD;IACF;;IACD,OAAO;MAAEE,MAAM,EAAEE;IAAV,CAAP;EACD,CAVM,CAAP;AAWD,CAfM;AAiBP,OAAO,IAAMC,eAAe,GAAG,UAACT,OAAD,EAA2CM,MAA3C,EAAmE;EAChG,KAAK,IAAII,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,OAAO,CAACW,MAApC,EAA4CD,KAAK,EAAjD,EAAqD;IACnD,IAAME,QAAQ,GAAGZ,OAAO,CAACU,KAAD,CAAxB;;IACA,IAAIE,QAAQ,KAAKN,MAAb,IAAuBM,QAAQ,CAACL,KAAT,KAAmBD,MAAM,CAACC,KAArD,EAA4D;MAC1D,OAAOG,KAAP;IACD;EACF;;EACD,OAAO,CAAC,CAAR;AACD,CARM","names":["connectOptionsByValue","options","selectedOptions","map","_i","dropdownOption","type","option","value","selectedOption","findOptionIndex","index","length","__option"],"sourceRoot":"","sources":["../../../../src/select/utils/connect-options.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DropdownOption, OptionDefinition } from '../../internal/components/option/interfaces';\n\nexport const connectOptionsByValue = (\n  options: ReadonlyArray<DropdownOption>,\n  selectedOptions: ReadonlyArray<OptionDefinition>\n): ReadonlyArray<DropdownOption> => {\n  return (selectedOptions || []).map(selectedOption => {\n    for (const dropdownOption of options) {\n      if (\n        dropdownOption.type !== 'parent' &&\n        (dropdownOption.option as OptionDefinition).value === selectedOption.value\n      ) {\n        return dropdownOption;\n      }\n    }\n    return { option: selectedOption };\n  });\n};\n\nexport const findOptionIndex = (options: ReadonlyArray<OptionDefinition>, option: OptionDefinition) => {\n  for (let index = 0; index < options.length; index++) {\n    const __option = options[index];\n    if (__option === option || __option.value === option.value) {\n      return index;\n    }\n  }\n  return -1;\n};\n"]},"metadata":{},"sourceType":"module"}