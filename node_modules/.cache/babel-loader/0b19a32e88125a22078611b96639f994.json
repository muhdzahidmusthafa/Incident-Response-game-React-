{"ast":null,"code":"import { __assign, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport clsx from 'clsx';\nimport React, { useImperativeHandle, useRef } from 'react';\nimport styles from './styles.css.js';\nimport { getCardsPerRow } from './cards-layout-helper';\nimport { getBaseProps } from '../internal/base-component';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport ToolsHeader from '../table/tools-header';\nimport { getItemKey } from '../table/utils';\nimport { focusMarkers, useFocusMove, useSelection } from '../table/use-selection';\nimport SelectionControl from '../table/selection-control';\nimport InternalContainer from '../container/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport stickyScrolling from '../table/sticky-scrolling';\nimport { useSupportsStickyHeader } from '../container/use-sticky-header';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nvar Cards = React.forwardRef(function (_a, ref) {\n  var _b = _a.items,\n      items = _b === void 0 ? [] : _b,\n      cardDefinition = _a.cardDefinition,\n      _c = _a.cardsPerRow,\n      cardsPerRow = _c === void 0 ? [] : _c,\n      header = _a.header,\n      filter = _a.filter,\n      pagination = _a.pagination,\n      preferences = _a.preferences,\n      empty = _a.empty,\n      loading = _a.loading,\n      loadingText = _a.loadingText,\n      trackBy = _a.trackBy,\n      selectedItems = _a.selectedItems,\n      selectionType = _a.selectionType,\n      isItemDisabled = _a.isItemDisabled,\n      onSelectionChange = _a.onSelectionChange,\n      ariaLabels = _a.ariaLabels,\n      visibleSections = _a.visibleSections,\n      stickyHeader = _a.stickyHeader,\n      stickyHeaderVerticalOffset = _a.stickyHeaderVerticalOffset,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'container' : _d,\n      rest = __rest(_a, [\"items\", \"cardDefinition\", \"cardsPerRow\", \"header\", \"filter\", \"pagination\", \"preferences\", \"empty\", \"loading\", \"loadingText\", \"trackBy\", \"selectedItems\", \"selectionType\", \"isItemDisabled\", \"onSelectionChange\", \"ariaLabels\", \"visibleSections\", \"stickyHeader\", \"stickyHeaderVerticalOffset\", \"variant\"]);\n\n  var __internalRootRef = useBaseComponent('Cards').__internalRootRef;\n\n  var baseProps = getBaseProps(rest);\n  var isRefresh = useVisualRefresh(__internalRootRef);\n  var computedVariant = isRefresh ? variant : 'container';\n\n  var _e = useContainerQuery(function (_a) {\n    var width = _a.width;\n    return getCardsPerRow(width, cardsPerRow);\n  }, [cardsPerRow]),\n      columns = _e[0],\n      measureRef = _e[1];\n\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);\n\n  var _f = useSelection({\n    items: items,\n    trackBy: trackBy,\n    selectedItems: selectedItems,\n    selectionType: selectionType,\n    isItemDisabled: isItemDisabled,\n    onSelectionChange: onSelectionChange,\n    ariaLabels: ariaLabels\n  }),\n      isItemSelected = _f.isItemSelected,\n      getItemSelectionProps = _f.getItemSelectionProps,\n      updateShiftToggle = _f.updateShiftToggle;\n\n  var hasToolsHeader = header || filter || pagination || preferences;\n  var headerRef = useRef(null);\n\n  var _g = stickyScrolling(refObject, headerRef),\n      scrollToTop = _g.scrollToTop,\n      scrollToItem = _g.scrollToItem;\n\n  stickyHeader = useSupportsStickyHeader() && stickyHeader;\n\n  var onCardFocus = function (event) {\n    if (stickyHeader) {\n      scrollToItem(event.currentTarget);\n    }\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      scrollToTop: function () {\n        if (stickyHeader) {\n          scrollToTop();\n        }\n      }\n    };\n  }, [stickyHeader, scrollToTop]);\n  var status;\n\n  if (loading) {\n    status = React.createElement(\"div\", {\n      className: styles.loading\n    }, React.createElement(InternalStatusIndicator, {\n      type: \"loading\"\n    }, loadingText));\n  } else if (empty && !items.length) {\n    status = React.createElement(\"div\", {\n      className: styles.empty\n    }, empty);\n  }\n\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef\n  }), React.createElement(InternalContainer, {\n    header: hasToolsHeader && React.createElement(\"div\", {\n      className: clsx(styles.header, isRefresh && styles['header-refresh'], styles[\"header-variant-\".concat(computedVariant)])\n    }, React.createElement(ToolsHeader, {\n      header: header,\n      filter: filter,\n      pagination: pagination,\n      preferences: preferences\n    })),\n    disableContentPaddings: true,\n    disableHeaderPaddings: computedVariant === 'full-page',\n    variant: computedVariant === 'container' ? 'cards' : computedVariant,\n    __stickyHeader: stickyHeader,\n    __stickyOffset: stickyHeaderVerticalOffset,\n    __headerRef: headerRef\n  }, React.createElement(\"div\", {\n    className: clsx(hasToolsHeader && styles['has-header'])\n  }, status !== null && status !== void 0 ? status : React.createElement(CardsList, {\n    items: items,\n    cardDefinition: cardDefinition,\n    trackBy: trackBy,\n    selectionType: selectionType,\n    columns: columns,\n    isItemSelected: isItemSelected,\n    getItemSelectionProps: getItemSelectionProps,\n    visibleSections: visibleSections,\n    updateShiftToggle: updateShiftToggle,\n    onFocus: onCardFocus\n  }))));\n});\nexport default Cards;\n\nvar CardsList = function (_a) {\n  var items = _a.items,\n      cardDefinition = _a.cardDefinition,\n      trackBy = _a.trackBy,\n      selectionType = _a.selectionType,\n      columns = _a.columns,\n      isItemSelected = _a.isItemSelected,\n      getItemSelectionProps = _a.getItemSelectionProps,\n      visibleSections = _a.visibleSections,\n      updateShiftToggle = _a.updateShiftToggle,\n      onFocus = _a.onFocus;\n  var selectable = !!selectionType;\n\n  var _b = useFocusMove(selectionType, items.length),\n      moveFocusDown = _b.moveFocusDown,\n      moveFocusUp = _b.moveFocusUp;\n\n  var visibleSectionsDefinition = cardDefinition.sections || [];\n  visibleSectionsDefinition = visibleSections ? visibleSectionsDefinition.filter(function (section) {\n    return section.id && visibleSections.indexOf(section.id) !== -1;\n  }) : visibleSectionsDefinition;\n  return React.createElement(\"ol\", __assign({\n    className: clsx(styles.list, styles[\"list-grid-\".concat(columns || 1)])\n  }, focusMarkers && focusMarkers.root), items.map(function (item, index) {\n    var _a;\n\n    return React.createElement(\"li\", __assign({\n      className: clsx(styles.card, (_a = {}, _a[styles['card-selectable']] = selectable, _a[styles['card-selected']] = selectable && isItemSelected(item), _a)),\n      key: getItemKey(trackBy, item, index),\n      onFocus: onFocus\n    }, focusMarkers && focusMarkers.item), React.createElement(\"div\", {\n      className: styles['card-inner']\n    }, React.createElement(\"div\", {\n      className: styles['card-header']\n    }, React.createElement(\"span\", {\n      className: styles['card-header-inner']\n    }, cardDefinition.header ? cardDefinition.header(item) : ''), selectable && React.createElement(\"div\", {\n      className: styles['selection-control']\n    }, React.createElement(SelectionControl, __assign({\n      onFocusDown: moveFocusDown,\n      onFocusUp: moveFocusUp,\n      onShiftToggle: updateShiftToggle\n    }, getItemSelectionProps(item))))), visibleSectionsDefinition.map(function (_a, index) {\n      var _b = _a.width,\n          width = _b === void 0 ? 100 : _b,\n          header = _a.header,\n          content = _a.content,\n          id = _a.id;\n      return React.createElement(\"div\", {\n        key: id || index,\n        className: styles.section,\n        style: {\n          width: \"\".concat(width, \"%\")\n        }\n      }, header ? React.createElement(\"div\", {\n        className: styles['section-header']\n      }, header) : '', content ? React.createElement(\"div\", {\n        className: styles['section-content']\n      }, content(item)) : '');\n    })));\n  }));\n};\n\napplyDisplayName(Cards, 'Cards');","map":{"version":3,"mappings":"0CAAA;AACA;;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,IAAmCC,mBAAnC,EAAwDC,MAAxD,QAAsE,OAAtE;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,iBAAT,QAAkC,yDAAlC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,YAArC,QAAyD,wBAAzD;AACA,OAAOC,gBAAP,MAAwD,4BAAxD;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,uBAAP,MAAoC,8BAApC;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,uBAAT,QAAwC,gCAAxC;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,YAAT,QAA6B,kCAA7B;AAIA,IAAMC,KAAK,GAAGrB,KAAK,CAACsB,UAAN,CAAiB,UAC7BC,EAD6B,EAwB7BC,GAxB6B,EAwBC;EAtB5B;EAAA,SAAK,mBAAG,EAAH,GAAKC,EAAV;EAAA,IACAC,cAAc,oBADd;EAAA,IAEAC,mBAFA;EAAA,IAEAC,WAAW,mBAAG,EAAH,GAAKD,EAFhB;EAAA,IAGAE,MAAM,YAHN;EAAA,IAIAC,MAAM,YAJN;EAAA,IAKAC,UAAU,gBALV;EAAA,IAMAC,WAAW,iBANX;EAAA,IAOAC,KAAK,WAPL;EAAA,IAQAC,OAAO,aARP;EAAA,IASAC,WAAW,iBATX;EAAA,IAUAC,OAAO,aAVP;EAAA,IAWAC,aAAa,mBAXb;EAAA,IAYAC,aAAa,mBAZb;EAAA,IAaAC,cAAc,oBAbd;EAAA,IAcAC,iBAAiB,uBAdjB;EAAA,IAeAC,UAAU,gBAfV;EAAA,IAgBAC,eAAe,qBAhBf;EAAA,IAiBAC,YAAY,kBAjBZ;EAAA,IAkBAC,0BAA0B,gCAlB1B;EAAA,IAmBAC,eAnBA;EAAA,IAmBAC,OAAO,mBAAG,WAAH,GAAcD,EAnBrB;EAAA,IAoBGE,IAAI,cArBT,4SAqBS,CApBP;;EAwBM,qBAAiB,GAAK7B,gBAAgB,CAAC,OAAD,CAAhB,CAAyB8B,iBAA/C;;EACR,IAAMC,SAAS,GAAG5C,YAAY,CAAC0C,IAAD,CAA9B;EACA,IAAMG,SAAS,GAAG/B,gBAAgB,CAAC6B,iBAAD,CAAlC;EACA,IAAMG,eAAe,GAAGD,SAAS,GAAGJ,OAAH,GAAa,WAA9C;;EAEM,SAAwBxC,iBAAiB,CAC7C,UAACiB,EAAD,EAAU;QAAP6B,KAAK;IAAO,qBAAc,CAACA,KAAD,EAAQxB,WAAR,CAAd;EAAkC,CADJ,EAE7C,CAACA,WAAD,CAF6C,CAAzC;EAAA,IAACyB,OAAO,QAAR;EAAA,IAAUC,UAAU,QAApB;;EAIN,IAAMC,SAAS,GAAGrD,MAAM,CAAC,IAAD,CAAxB;EACA,IAAMsD,SAAS,GAAGpC,YAAY,CAACkC,UAAD,EAAaC,SAAb,EAAwBP,iBAAxB,CAA9B;;EAEM,SAA+DrC,YAAY,CAAC;IAChF8C,KAAK,OAD2E;IAEhFrB,OAAO,SAFyE;IAGhFC,aAAa,eAHmE;IAIhFC,aAAa,eAJmE;IAKhFC,cAAc,gBALkE;IAMhFC,iBAAiB,mBAN+D;IAOhFC,UAAU;EAPsE,CAAD,CAA3E;EAAA,IAAEiB,cAAc,oBAAhB;EAAA,IAAkBC,qBAAqB,2BAAvC;EAAA,IAAyCC,iBAAiB,uBAA1D;;EASN,IAAMC,cAAc,GAAGhC,MAAM,IAAIC,MAAV,IAAoBC,UAApB,IAAkCC,WAAzD;EACA,IAAM8B,SAAS,GAAG5D,MAAM,CAAiB,IAAjB,CAAxB;;EACM,SAAgCc,eAAe,CAACuC,SAAD,EAAYO,SAAZ,CAA/C;EAAA,IAAEC,WAAW,iBAAb;EAAA,IAAeC,YAAY,kBAA3B;;EACNrB,YAAY,GAAG1B,uBAAuB,MAAM0B,YAA5C;;EACA,IAAMsB,WAAW,GAAmC,iBAAK;IACvD,IAAItB,YAAJ,EAAkB;MAChBqB,YAAY,CAACE,KAAK,CAACC,aAAP,CAAZ;IACD;EACF,CAJD;;EAKAlE,mBAAmB,CACjBuB,GADiB,EAEjB;IAAM,OAAC;MACLuC,WAAW,EAAE;QACX,IAAIpB,YAAJ,EAAkB;UAChBoB,WAAW;QACZ;MACF;IALI,CAAD;EAMJ,CARe,EASjB,CAACpB,YAAD,EAAeoB,WAAf,CATiB,CAAnB;EAWA,IAAIK,MAAJ;;EACA,IAAIlC,OAAJ,EAAa;IACXkC,MAAM,GACJpE;MAAKqE,SAAS,EAAElE,MAAM,CAAC+B;IAAvB,GACElC,oBAACc,uBAAD,EAAwB;MAACwD,IAAI,EAAC;IAAN,CAAxB,EAAyCnC,WAAzC,CADF,CADF;EAKD,CAND,MAMO,IAAIF,KAAK,IAAI,CAACwB,KAAK,CAACc,MAApB,EAA4B;IACjCH,MAAM,GAAGpE;MAAKqE,SAAS,EAAElE,MAAM,CAAC8B;IAAvB,GAA+BA,KAA/B,CAAT;EACD;;EAED,OACEjC,wCAASiD,SAAT,EAAkB;IAAEoB,SAAS,EAAEtE,IAAI,CAACkD,SAAS,CAACoB,SAAX,EAAsBlE,MAAM,CAACqE,IAA7B,CAAjB;IAAqDhD,GAAG,EAAEgC;EAA1D,CAAlB,GACExD,oBAACa,iBAAD,EAAkB;IAChBgB,MAAM,EACJgC,cAAc,IACZ7D;MACEqE,SAAS,EAAEtE,IAAI,CACbI,MAAM,CAAC0B,MADM,EAEbqB,SAAS,IAAI/C,MAAM,CAAC,gBAAD,CAFN,EAGbA,MAAM,CAAC,yBAAkBgD,eAAlB,CAAD,CAHO;IADjB,GAOEnD,oBAACO,WAAD,EAAY;MAACsB,MAAM,EAAEA,MAAT;MAAiBC,MAAM,EAAEA,MAAzB;MAAiCC,UAAU,EAAEA,UAA7C;MAAyDC,WAAW,EAAEA;IAAtE,CAAZ,CAPF,CAHY;IAchByC,sBAAsB,EAAE,IAdR;IAehBC,qBAAqB,EAAEvB,eAAe,KAAK,WAf3B;IAgBhBL,OAAO,EAAEK,eAAe,KAAK,WAApB,GAAkC,OAAlC,GAA4CA,eAhBrC;IAiBhBwB,cAAc,EAAEhC,YAjBA;IAkBhBiC,cAAc,EAAEhC,0BAlBA;IAmBhBiC,WAAW,EAAEf;EAnBG,CAAlB,EAqBE9D;IAAKqE,SAAS,EAAEtE,IAAI,CAAC8D,cAAc,IAAI1D,MAAM,CAAC,YAAD,CAAzB;EAApB,GACGiE,MAAM,SAAN,UAAM,WAAN,YACCpE,oBAAC8E,SAAD,EAAU;IACRrB,KAAK,EAAEA,KADC;IAER/B,cAAc,EAAEA,cAFR;IAGRU,OAAO,EAAEA,OAHD;IAIRE,aAAa,EAAEA,aAJP;IAKRe,OAAO,EAAEA,OALD;IAMRK,cAAc,EAAEA,cANR;IAORC,qBAAqB,EAAEA,qBAPf;IAQRjB,eAAe,EAAEA,eART;IASRkB,iBAAiB,EAAEA,iBATX;IAURmB,OAAO,EAAEd;EAVD,CAAV,CAFJ,CArBF,CADF,CADF;AA0CD,CAxHa,CAAd;AA0HA,eAAe5C,KAAf;;AAEA,IAAMyD,SAAS,GAAG,UAAKvD,EAAL,EAiBjB;MAhBCkC,KAAK;MACL/B,cAAc;MACdU,OAAO;MACPE,aAAa;MACbe,OAAO;MACPK,cAAc;MACdC,qBAAqB;MACrBjB,eAAe;MACfkB,iBAAiB;MACjBmB,OAAO;EAQP,IAAMC,UAAU,GAAG,CAAC,CAAC1C,aAArB;;EACM,SAAiC5B,YAAY,CAAC4B,aAAD,EAAgBmB,KAAK,CAACc,MAAtB,CAA7C;EAAA,IAAEU,aAAa,mBAAf;EAAA,IAAiBC,WAAW,iBAA5B;;EAEN,IAAIC,yBAAyB,GAAGzD,cAAc,CAAC0D,QAAf,IAA2B,EAA3D;EACAD,yBAAyB,GAAGzC,eAAe,GACvCyC,yBAAyB,CAACrD,MAA1B,CACE,UAACuD,OAAD,EAAyC;IAAK,cAAO,CAACC,EAAR,IAAc5C,eAAe,CAAC6C,OAAhB,CAAwBF,OAAO,CAACC,EAAhC,MAAwC,CAAC,CAAvD;EAAwD,CADxG,CADuC,GAIvCH,yBAJJ;EAMA,OACEnF;IAAIqE,SAAS,EAAEtE,IAAI,CAACI,MAAM,CAACqF,IAAR,EAAcrF,MAAM,CAAC,oBAAakD,OAAO,IAAI,CAAxB,CAAD,CAApB;EAAnB,GAA4E5C,YAAY,IAAIA,YAAY,CAAC+D,IAAzG,GACGf,KAAK,CAACgC,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP,EAAY;;;IAAK,OAC1B3F;MACEqE,SAAS,EAAEtE,IAAI,CAACI,MAAM,CAACyF,IAAR,GAAYrE,SACzBA,GAACpB,MAAM,CAAC,iBAAD,CAAP,IAA6B6E,UADJ,EAEzBzD,GAACpB,MAAM,CAAC,eAAD,CAAP,IAA2B6E,UAAU,IAAItB,cAAc,CAACgC,IAAD,CAF9B,IAAZ,EADjB;MAKEG,GAAG,EAAErF,UAAU,CAAC4B,OAAD,EAAUsD,IAAV,EAAgBC,KAAhB,CALjB;MAMEZ,OAAO,EAAEA;IANX,GAOOtE,YAAY,IAAIA,YAAY,CAACiF,IAPpC,GASE1F;MAAKqE,SAAS,EAAElE,MAAM,CAAC,YAAD;IAAtB,GACEH;MAAKqE,SAAS,EAAElE,MAAM,CAAC,aAAD;IAAtB,GACEH;MAAMqE,SAAS,EAAElE,MAAM,CAAC,mBAAD;IAAvB,GACGuB,cAAc,CAACG,MAAf,GAAwBH,cAAc,CAACG,MAAf,CAAsB6D,IAAtB,CAAxB,GAAsD,EADzD,CADF,EAIGV,UAAU,IACThF;MAAKqE,SAAS,EAAElE,MAAM,CAAC,mBAAD;IAAtB,GACEH,oBAACY,gBAAD,EAAiBkF;MACfC,WAAW,EAAEd,aADE;MAEfe,SAAS,EAAEd,WAFI;MAGfe,aAAa,EAAErC;IAHA,GAIXD,qBAAqB,CAAC+B,IAAD,CAJV,CAAjB,CADF,CALJ,CADF,EAgBGP,yBAAyB,CAACM,GAA1B,CAA8B,UAAClE,EAAD,EAAuCoE,KAAvC,EAA4C;UAAzClE;UAAA2B,KAAK,mBAAG,GAAH,GAAM3B;UAAEI,MAAM;UAAEqE,OAAO;UAAEZ,EAAE;MAAc,OAC9EtF;QAAK6F,GAAG,EAAEP,EAAE,IAAIK,KAAhB;QAAuBtB,SAAS,EAAElE,MAAM,CAACkF,OAAzC;QAAkDc,KAAK,EAAE;UAAE/C,KAAK,EAAE,UAAGA,KAAH,EAAQ,GAAR;QAAT;MAAzD,GACGvB,MAAM,GAAG7B;QAAKqE,SAAS,EAAElE,MAAM,CAAC,gBAAD;MAAtB,GAA2C0B,MAA3C,CAAH,GAA8D,EADvE,EAEGqE,OAAO,GAAGlG;QAAKqE,SAAS,EAAElE,MAAM,CAAC,iBAAD;MAAtB,GAA4C+F,OAAO,CAACR,IAAD,CAAnD,CAAH,GAAsE,EAFhF,CAD8E;IAK/E,CALA,CAhBH,CATF,CAD0B;EAkC3B,CAlCA,CADH,CADF;AAuCD,CAnED;;AAqEA3E,gBAAgB,CAACM,KAAD,EAAQ,OAAR,CAAhB","names":["clsx","React","useImperativeHandle","useRef","styles","getCardsPerRow","getBaseProps","useContainerQuery","ToolsHeader","getItemKey","focusMarkers","useFocusMove","useSelection","SelectionControl","InternalContainer","InternalStatusIndicator","applyDisplayName","stickyScrolling","useSupportsStickyHeader","useBaseComponent","useVisualRefresh","useMergeRefs","Cards","forwardRef","_a","ref","_b","cardDefinition","_c","cardsPerRow","header","filter","pagination","preferences","empty","loading","loadingText","trackBy","selectedItems","selectionType","isItemDisabled","onSelectionChange","ariaLabels","visibleSections","stickyHeader","stickyHeaderVerticalOffset","_d","variant","rest","__internalRootRef","baseProps","isRefresh","computedVariant","width","columns","measureRef","refObject","mergedRef","items","isItemSelected","getItemSelectionProps","updateShiftToggle","hasToolsHeader","headerRef","scrollToTop","scrollToItem","onCardFocus","event","currentTarget","status","className","type","length","root","disableContentPaddings","disableHeaderPaddings","__stickyHeader","__stickyOffset","__headerRef","CardsList","onFocus","selectable","moveFocusDown","moveFocusUp","visibleSectionsDefinition","sections","section","id","indexOf","list","map","item","index","card","key","__assign","onFocusDown","onFocusUp","onShiftToggle","content","style"],"sourceRoot":"","sources":["../../../src/cards/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { FocusEventHandler, useImperativeHandle, useRef } from 'react';\nimport { CardsForwardRefType, CardsProps } from './interfaces';\nimport styles from './styles.css.js';\nimport { getCardsPerRow } from './cards-layout-helper';\nimport { getBaseProps } from '../internal/base-component';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport ToolsHeader from '../table/tools-header';\nimport { getItemKey } from '../table/utils';\nimport { focusMarkers, useFocusMove, useSelection } from '../table/use-selection';\nimport SelectionControl, { SelectionControlProps } from '../table/selection-control';\nimport InternalContainer from '../container/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport stickyScrolling from '../table/sticky-scrolling';\nimport { useSupportsStickyHeader } from '../container/use-sticky-header';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nexport { CardsProps };\n\nconst Cards = React.forwardRef(function <T = any>(\n  {\n    items = [],\n    cardDefinition,\n    cardsPerRow = [],\n    header,\n    filter,\n    pagination,\n    preferences,\n    empty,\n    loading,\n    loadingText,\n    trackBy,\n    selectedItems,\n    selectionType,\n    isItemDisabled,\n    onSelectionChange,\n    ariaLabels,\n    visibleSections,\n    stickyHeader,\n    stickyHeaderVerticalOffset,\n    variant = 'container',\n    ...rest\n  }: CardsProps<T>,\n  ref: React.Ref<CardsProps.Ref>\n) {\n  const { __internalRootRef } = useBaseComponent('Cards');\n  const baseProps = getBaseProps(rest);\n  const isRefresh = useVisualRefresh(__internalRootRef);\n  const computedVariant = isRefresh ? variant : 'container';\n\n  const [columns, measureRef] = useContainerQuery<number>(\n    ({ width }) => getCardsPerRow(width, cardsPerRow),\n    [cardsPerRow]\n  );\n  const refObject = useRef(null);\n  const mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);\n\n  const { isItemSelected, getItemSelectionProps, updateShiftToggle } = useSelection({\n    items,\n    trackBy,\n    selectedItems,\n    selectionType,\n    isItemDisabled,\n    onSelectionChange,\n    ariaLabels,\n  });\n  const hasToolsHeader = header || filter || pagination || preferences;\n  const headerRef = useRef<HTMLDivElement>(null);\n  const { scrollToTop, scrollToItem } = stickyScrolling(refObject, headerRef);\n  stickyHeader = useSupportsStickyHeader() && stickyHeader;\n  const onCardFocus: FocusEventHandler<HTMLElement> = event => {\n    if (stickyHeader) {\n      scrollToItem(event.currentTarget);\n    }\n  };\n  useImperativeHandle(\n    ref,\n    () => ({\n      scrollToTop: () => {\n        if (stickyHeader) {\n          scrollToTop();\n        }\n      },\n    }),\n    [stickyHeader, scrollToTop]\n  );\n  let status;\n  if (loading) {\n    status = (\n      <div className={styles.loading}>\n        <InternalStatusIndicator type=\"loading\">{loadingText}</InternalStatusIndicator>\n      </div>\n    );\n  } else if (empty && !items.length) {\n    status = <div className={styles.empty}>{empty}</div>;\n  }\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={mergedRef}>\n      <InternalContainer\n        header={\n          hasToolsHeader && (\n            <div\n              className={clsx(\n                styles.header,\n                isRefresh && styles['header-refresh'],\n                styles[`header-variant-${computedVariant}`]\n              )}\n            >\n              <ToolsHeader header={header} filter={filter} pagination={pagination} preferences={preferences} />\n            </div>\n          )\n        }\n        disableContentPaddings={true}\n        disableHeaderPaddings={computedVariant === 'full-page'}\n        variant={computedVariant === 'container' ? 'cards' : computedVariant}\n        __stickyHeader={stickyHeader}\n        __stickyOffset={stickyHeaderVerticalOffset}\n        __headerRef={headerRef}\n      >\n        <div className={clsx(hasToolsHeader && styles['has-header'])}>\n          {status ?? (\n            <CardsList\n              items={items}\n              cardDefinition={cardDefinition}\n              trackBy={trackBy}\n              selectionType={selectionType}\n              columns={columns}\n              isItemSelected={isItemSelected}\n              getItemSelectionProps={getItemSelectionProps}\n              visibleSections={visibleSections}\n              updateShiftToggle={updateShiftToggle}\n              onFocus={onCardFocus}\n            />\n          )}\n        </div>\n      </InternalContainer>\n    </div>\n  );\n}) as CardsForwardRefType;\n\nexport default Cards;\n\nconst CardsList = <T,>({\n  items,\n  cardDefinition,\n  trackBy,\n  selectionType,\n  columns,\n  isItemSelected,\n  getItemSelectionProps,\n  visibleSections,\n  updateShiftToggle,\n  onFocus,\n}: Pick<CardsProps<T>, 'items' | 'cardDefinition' | 'trackBy' | 'selectionType' | 'visibleSections'> & {\n  columns: number | null;\n  isItemSelected: (item: T) => boolean;\n  getItemSelectionProps: (item: T) => SelectionControlProps;\n  updateShiftToggle: (state: boolean) => void;\n  onFocus: FocusEventHandler<HTMLElement>;\n}) => {\n  const selectable = !!selectionType;\n  const { moveFocusDown, moveFocusUp } = useFocusMove(selectionType, items.length);\n\n  let visibleSectionsDefinition = cardDefinition.sections || [];\n  visibleSectionsDefinition = visibleSections\n    ? visibleSectionsDefinition.filter(\n        (section: CardsProps.SectionDefinition<T>) => section.id && visibleSections.indexOf(section.id) !== -1\n      )\n    : visibleSectionsDefinition;\n\n  return (\n    <ol className={clsx(styles.list, styles[`list-grid-${columns || 1}`])} {...(focusMarkers && focusMarkers.root)}>\n      {items.map((item, index) => (\n        <li\n          className={clsx(styles.card, {\n            [styles['card-selectable']]: selectable,\n            [styles['card-selected']]: selectable && isItemSelected(item),\n          })}\n          key={getItemKey(trackBy, item, index)}\n          onFocus={onFocus}\n          {...(focusMarkers && focusMarkers.item)}\n        >\n          <div className={styles['card-inner']}>\n            <div className={styles['card-header']}>\n              <span className={styles['card-header-inner']}>\n                {cardDefinition.header ? cardDefinition.header(item) : ''}\n              </span>\n              {selectable && (\n                <div className={styles['selection-control']}>\n                  <SelectionControl\n                    onFocusDown={moveFocusDown}\n                    onFocusUp={moveFocusUp}\n                    onShiftToggle={updateShiftToggle}\n                    {...getItemSelectionProps(item)}\n                  />\n                </div>\n              )}\n            </div>\n            {visibleSectionsDefinition.map(({ width = 100, header, content, id }, index) => (\n              <div key={id || index} className={styles.section} style={{ width: `${width}%` }}>\n                {header ? <div className={styles['section-header']}>{header}</div> : ''}\n                {content ? <div className={styles['section-content']}>{content(item)}</div> : ''}\n              </div>\n            ))}\n          </div>\n        </li>\n      ))}\n    </ol>\n  );\n};\n\napplyDisplayName(Cards, 'Cards');\n"]},"metadata":{},"sourceType":"module"}