{"ast":null,"code":"var stateToIcon = {\n  sortable: 'caret-down',\n  ascending: 'caret-up-filled',\n  descending: 'caret-down-filled'\n};\nvar stateToAriaSort = {\n  sortable: 'none',\n  ascending: 'ascending',\n  descending: 'descending'\n};\nexport var getSortingStatus = function (sortable, sorted, descending, disabled) {\n  if (sorted) {\n    if (descending) {\n      return 'descending';\n    }\n\n    return 'ascending';\n  }\n\n  if (sortable && !disabled) {\n    return 'sortable';\n  }\n\n  return undefined;\n};\nexport var getSortingIconName = function (sortingState) {\n  return stateToIcon[sortingState];\n};\nexport var getAriaSort = function (sortingState) {\n  return stateToAriaSort[sortingState];\n};\nexport var isSorted = function (column, sortingColumn) {\n  return column === sortingColumn || column.sortingField !== undefined && column.sortingField === sortingColumn.sortingField || column.sortingComparator !== undefined && column.sortingComparator === sortingColumn.sortingComparator;\n};","map":{"version":3,"mappings":"AAKA,IAAMA,WAAW,GAAG;EAClBC,QAAQ,EAAE,YADQ;EAElBC,SAAS,EAAE,iBAFO;EAGlBC,UAAU,EAAE;AAHM,CAApB;AAKA,IAAMC,eAAe,GAAG;EACtBH,QAAQ,EAAE,MADY;EAEtBC,SAAS,EAAE,WAFW;EAGtBC,UAAU,EAAE;AAHU,CAAxB;AAMA,OAAO,IAAME,gBAAgB,GAAG,UAC9BJ,QAD8B,EAE9BK,MAF8B,EAG9BH,UAH8B,EAI9BI,QAJ8B,EAIb;EAEjB,IAAID,MAAJ,EAAY;IACV,IAAIH,UAAJ,EAAgB;MACd,OAAO,YAAP;IACD;;IACD,OAAO,WAAP;EACD;;EACD,IAAIF,QAAQ,IAAI,CAACM,QAAjB,EAA2B;IACzB,OAAO,UAAP;EACD;;EACD,OAAOC,SAAP;AACD,CAhBM;AAkBP,OAAO,IAAMC,kBAAkB,GAAG,UAACC,YAAD,EAA4B;EAAK,kBAAW,CAACA,YAAD,CAAX;AAAyB,CAArF;AACP,OAAO,IAAMC,WAAW,GAAG,UAACD,YAAD,EAA4B;EAAK,sBAAe,CAACA,YAAD,CAAf;AAA6B,CAAlF;AACP,OAAO,IAAME,QAAQ,GAAG,UAAIC,MAAJ,EAA4CC,aAA5C,EAAsF;EAC5G,aAAM,KAAKA,aAAX,IACCD,MAAM,CAACE,YAAP,KAAwBP,SAAxB,IAAqCK,MAAM,CAACE,YAAP,KAAwBD,aAAa,CAACC,YAD5E,IAECF,MAAM,CAACG,iBAAP,KAA6BR,SAA7B,IAA0CK,MAAM,CAACG,iBAAP,KAA6BF,aAAa,CAACE,iBAFtF;AAEwG,CAHnG","names":["stateToIcon","sortable","ascending","descending","stateToAriaSort","getSortingStatus","sorted","disabled","undefined","getSortingIconName","sortingState","getAriaSort","isSorted","column","sortingColumn","sortingField","sortingComparator"],"sourceRoot":"","sources":["../../../../src/table/header-cell/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { TableProps } from '../interfaces';\n\ntype SortingStatus = 'sortable' | 'ascending' | 'descending';\nconst stateToIcon = {\n  sortable: 'caret-down',\n  ascending: 'caret-up-filled',\n  descending: 'caret-down-filled',\n} as const;\nconst stateToAriaSort = {\n  sortable: 'none',\n  ascending: 'ascending',\n  descending: 'descending',\n} as const;\n\nexport const getSortingStatus = (\n  sortable: boolean,\n  sorted: boolean,\n  descending: boolean,\n  disabled: boolean\n): SortingStatus | undefined => {\n  if (sorted) {\n    if (descending) {\n      return 'descending';\n    }\n    return 'ascending';\n  }\n  if (sortable && !disabled) {\n    return 'sortable';\n  }\n  return undefined;\n};\n\nexport const getSortingIconName = (sortingState: SortingStatus) => stateToIcon[sortingState];\nexport const getAriaSort = (sortingState: SortingStatus) => stateToAriaSort[sortingState];\nexport const isSorted = <T>(column: TableProps.ColumnDefinition<T>, sortingColumn: TableProps.SortingColumn<T>) =>\n  column === sortingColumn ||\n  (column.sortingField !== undefined && column.sortingField === sortingColumn.sortingField) ||\n  (column.sortingComparator !== undefined && column.sortingComparator === sortingColumn.sortingComparator);\n"]},"metadata":{},"sourceType":"module"}