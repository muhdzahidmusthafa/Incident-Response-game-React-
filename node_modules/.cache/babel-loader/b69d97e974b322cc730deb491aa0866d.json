{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useRef } from 'react';\nimport clsx from 'clsx';\nimport { TICK_LENGTH, TICK_MARGIN } from './constants';\nimport styles from './styles.css.js';\nimport { formatTicks, getVisibleTicks } from './label-utils';\nvar OFFSET_PX = 12;\nexport default memo(LeftLabels); // Renders the visible tick labels on the left axis, as well as their grid lines.\n\nfunction LeftLabels(_a) {\n  var _b = _a.axis,\n      axis = _b === void 0 ? 'y' : _b,\n      width = _a.width,\n      height = _a.height,\n      scale = _a.scale,\n      ticks = _a.ticks,\n      tickFormatter = _a.tickFormatter,\n      title = _a.title,\n      ariaRoleDescription = _a.ariaRoleDescription;\n  var virtualTextRef = useRef(null);\n  var yOffset = axis === 'x' && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;\n  var cacheRef = useRef({});\n\n  var getLabelSpace = function (label) {\n    if (cacheRef.current[label] !== undefined) {\n      return cacheRef.current[label];\n    }\n\n    if (virtualTextRef.current && virtualTextRef.current.getBBox) {\n      virtualTextRef.current.textContent = label;\n      cacheRef.current[label] = virtualTextRef.current.getBBox().height;\n      return cacheRef.current[label];\n    }\n\n    return 0;\n  };\n\n  var formattedTicks = formatTicks({\n    ticks: ticks,\n    scale: scale,\n    getLabelSpace: getLabelSpace,\n    tickFormatter: tickFormatter\n  });\n\n  if (virtualTextRef.current) {\n    virtualTextRef.current.textContent = '';\n  }\n\n  var from = 0 - OFFSET_PX - yOffset;\n  var until = height + OFFSET_PX - yOffset;\n  var visibleTicks = getVisibleTicks(formattedTicks, from, until);\n  return React.createElement(\"g\", {\n    className: clsx(styles['labels-left']),\n    \"aria-label\": title,\n    role: \"list\",\n    \"aria-roledescription\": ariaRoleDescription,\n    \"aria-hidden\": true\n  }, visibleTicks.map(function (_a, index) {\n    var position = _a.position,\n        lines = _a.lines;\n    return isFinite(position) && React.createElement(\"g\", {\n      key: index,\n      role: \"listitem\",\n      transform: \"translate(0,\".concat(position + yOffset, \")\"),\n      className: clsx(styles.ticks, axis === 'x' ? styles['ticks--x'] : styles['ticks--y'])\n    }, axis === 'y' && React.createElement(\"line\", {\n      className: clsx(styles.grid, styles.ticks_line),\n      x1: -TICK_LENGTH,\n      y1: 0,\n      x2: width,\n      y2: 0,\n      \"aria-hidden\": \"true\"\n    }), React.createElement(\"text\", {\n      className: styles.ticks__text,\n      x: -(TICK_LENGTH + TICK_MARGIN),\n      y: 0\n    }, lines.join(' ')));\n  }), React.createElement(\"text\", {\n    ref: virtualTextRef,\n    x: 0,\n    y: 0,\n    style: {\n      visibility: 'hidden'\n    },\n    \"aria-hidden\": \"true\"\n  }));\n}","map":{"version":3,"mappings":"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","names":["React","memo","useRef","clsx","TICK_LENGTH","TICK_MARGIN","styles","formatTicks","getVisibleTicks","OFFSET_PX","LeftLabels","_a","_b","axis","width","height","scale","ticks","tickFormatter","title","ariaRoleDescription","virtualTextRef","yOffset","isCategorical","Math","max","d3Scale","bandwidth","cacheRef","getLabelSpace","label","current","undefined","getBBox","textContent","formattedTicks","from","until","visibleTicks","className","role","map","index","position","lines","key","transform","grid","ticks_line","x1","y1","x2","y2","ticks__text","x","y","join","ref","style","visibility"],"sourceRoot":"","sources":["../../../../../src/internal/components/cartesian-chart/left-labels.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { ChartScale, NumericChartScale } from './scales';\nimport { TICK_LENGTH, TICK_MARGIN } from './constants';\n\nimport styles from './styles.css.js';\nimport { formatTicks, getVisibleTicks } from './label-utils';\nimport { ChartDataTypes } from '../../../mixed-line-bar-chart/interfaces';\n\nconst OFFSET_PX = 12;\n\ninterface LeftLabelsProps {\n  axis?: 'x' | 'y';\n  width: number;\n  height: number;\n  scale: ChartScale | NumericChartScale;\n  ticks: readonly ChartDataTypes[];\n  tickFormatter?: (value: number) => string;\n  title?: string;\n  ariaRoleDescription?: string;\n}\n\nexport default memo(LeftLabels) as typeof LeftLabels;\n\n// Renders the visible tick labels on the left axis, as well as their grid lines.\nfunction LeftLabels({\n  axis = 'y',\n  width,\n  height,\n  scale,\n  ticks,\n  tickFormatter,\n  title,\n  ariaRoleDescription,\n}: LeftLabelsProps) {\n  const virtualTextRef = useRef<SVGTextElement>(null);\n\n  const yOffset = axis === 'x' && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;\n\n  const cacheRef = useRef<{ [label: string]: number }>({});\n  const getLabelSpace = (label: string) => {\n    if (cacheRef.current[label] !== undefined) {\n      return cacheRef.current[label];\n    }\n    if (virtualTextRef.current && virtualTextRef.current.getBBox) {\n      virtualTextRef.current.textContent = label;\n      cacheRef.current[label] = virtualTextRef.current.getBBox().height;\n      return cacheRef.current[label];\n    }\n    return 0;\n  };\n\n  const formattedTicks = formatTicks({ ticks, scale, getLabelSpace, tickFormatter });\n\n  if (virtualTextRef.current) {\n    virtualTextRef.current.textContent = '';\n  }\n\n  const from = 0 - OFFSET_PX - yOffset;\n  const until = height + OFFSET_PX - yOffset;\n  const visibleTicks = getVisibleTicks(formattedTicks, from, until);\n\n  return (\n    <g\n      className={clsx(styles['labels-left'])}\n      aria-label={title}\n      role=\"list\"\n      aria-roledescription={ariaRoleDescription}\n      aria-hidden={true}\n    >\n      {visibleTicks.map(\n        ({ position, lines }, index) =>\n          isFinite(position) && (\n            <g\n              key={index}\n              role=\"listitem\"\n              transform={`translate(0,${position + yOffset})`}\n              className={clsx(styles.ticks, axis === 'x' ? styles['ticks--x'] : styles['ticks--y'])}\n            >\n              {axis === 'y' && (\n                <line\n                  className={clsx(styles.grid, styles.ticks_line)}\n                  x1={-TICK_LENGTH}\n                  y1={0}\n                  x2={width}\n                  y2={0}\n                  aria-hidden=\"true\"\n                />\n              )}\n              <text className={styles.ticks__text} x={-(TICK_LENGTH + TICK_MARGIN)} y={0}>\n                {lines.join(' ')}\n              </text>\n            </g>\n          )\n      )}\n\n      <text ref={virtualTextRef} x={0} y={0} style={{ visibility: 'hidden' }} aria-hidden=\"true\"></text>\n    </g>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}