{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useContainerBreakpoints, useContainerQuery } from '../internal/hooks/container-queries';\nimport styles from './styles.css.js'; // A small buffer to make calculations more lenient against browser lag or padding adjustments.\n\nvar RESPONSIVENESS_BUFFER = 20;\nexport function useTopNavigation(_a) {\n  var identity = _a.identity,\n      search = _a.search,\n      utilities = _a.utilities; // Refs and breakpoints\n\n  var mainRef = useRef(null);\n  var virtualRef = useRef(null);\n\n  var _b = useContainerBreakpoints(['xxs', 's']),\n      breakpoint = _b[0],\n      breakpointRef = _b[1]; // Responsiveness state\n  // The component works by calculating the possible resize states that it can\n  // be in, and having a state variable to track which state we're currently in.\n\n\n  var hasSearch = !!search;\n  var hasTitleWithLogo = identity && !!identity.logo && !!identity.title;\n  var responsiveStates = useMemo(function () {\n    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);\n  }, [utilities, hasSearch, hasTitleWithLogo]); // To hide/show elements dynamically, we need to know how much space they take up,\n  // even if they're not being rendered. The top navigation elements are hidden/resized\n  // based on the available size or if a search bar is open, and they need to be available\n  // for calculations so we know where to toggle them. So we render a second, more stable\n  // top-nav off screen to do these calculations against.\n  //\n  // We can't \"affix\" these values to pixels because they can depend on spacing tokens.\n  // It's easier to render all of these utilities separately rather than figuring out\n  // spacing token values, icon sizes, text widths, etc.\n\n  var _c = useState(),\n      responsiveState = _c[0],\n      setResponsiveState = _c[1];\n\n  var recalculateFit = useCallback(function () {\n    var _a, _b, _c, _d;\n\n    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {\n      setResponsiveState(responsiveStates[0]);\n      return;\n    } // Get available width from the visible top navigation.\n\n\n    var availableWidth = getContentBoxWidth(mainRef.current.querySelector(\".\".concat(styles['padding-box'])));\n\n    if (availableWidth === 0) {\n      // Likely in an SSR or Jest situation.\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n\n    var sizeConfiguration = {\n      hasSearch: hasSearch,\n      availableWidth: availableWidth,\n      // Get widths from the hidden top navigation\n      fullIdentityWidth: virtualRef.current.querySelector(\".\".concat(styles.identity)).getBoundingClientRect().width,\n      titleWidth: (_b = (_a = virtualRef.current.querySelector(\".\".concat(styles.title))) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0,\n      searchSlotWidth: (_d = (_c = virtualRef.current.querySelector(\".\".concat(styles.search))) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect().width) !== null && _d !== void 0 ? _d : 0,\n      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"search\"]').getBoundingClientRect().width,\n      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(\".\".concat(styles.utilities))).paddingLeft || '0px'),\n      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(\"[data-utility-hide=\\\"false\\\"]\")).map(function (element) {\n        return element.getBoundingClientRect().width;\n      }),\n      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(\"[data-utility-hide=\\\"true\\\"]\")).map(function (element) {\n        return element.getBoundingClientRect().width;\n      }),\n      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"menu-trigger\"]').getBoundingClientRect().width\n    };\n    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));\n  }, [responsiveStates, hasSearch]);\n\n  var _d = useContainerQuery(function () {\n    recalculateFit();\n  }, [recalculateFit]),\n      containerQueryRef = _d[1]; // Due to being rendered in a portal, the virtual navigation isn't rendered\n  // at the same time as the main one.\n\n\n  var onVirtualMount = useCallback(function (element) {\n    virtualRef.current = element;\n    recalculateFit();\n  }, [recalculateFit]); // Search slot expansion on small screens\n\n  var _e = useState(true),\n      isSearchMinimized = _e[0],\n      setSearchMinimized = _e[1];\n\n  var isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch); // If the search was expanded, and then the screen resized so that the\n  // expansion is no longer necessary. So we implicitly minimize it.\n\n  useEffect(function () {\n    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {\n      setSearchMinimized(true);\n    }\n  }, [responsiveState]); // If the search is expanded after clicking on the search utility, move\n  // the focus to the input. Since this is a user-controlled slot, we're just\n  // assuming that it contains an input, though it's a pretty safe guess.\n\n  useEffect(function () {\n    var _a, _b;\n\n    if (isSearchExpanded) {\n      (_b = (_a = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(\".\".concat(styles.search, \" input\"))) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n  }, [isSearchExpanded, mainRef]);\n  var mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);\n  return {\n    mainRef: mergedMainRef,\n    virtualRef: onVirtualMount,\n    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],\n    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : 'default',\n    isSearchExpanded: !!isSearchExpanded,\n    onSearchUtilityClick: function () {\n      return setSearchMinimized(function (isSearchMinimized) {\n        return !isSearchMinimized;\n      });\n    }\n  };\n}\n/**\n * Get the width of the content box (assuming the element's box-sizing is border-box).\n */\n\nfunction getContentBoxWidth(element) {\n  var style = getComputedStyle(element);\n  return parseFloat(style.width || '0px') - parseFloat(style.paddingLeft || '0px') - parseFloat(style.paddingRight || '0px');\n}\n/**\n * Generates the series of responsive steps that can be performed on the header in order.\n */\n\n\nexport function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {\n  var states = [{}];\n\n  if (utilities.some(function (utility) {\n    return utility.text;\n  })) {\n    states.push({\n      hideUtilityText: true\n    });\n  }\n\n  if (canHideSearch) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: true\n    });\n  }\n\n  var hiddenUtilties = [];\n\n  for (var i = 0; i < utilities.length; i++) {\n    if (!utilities[i].disableUtilityCollapse) {\n      hiddenUtilties.push(i);\n      states.push({\n        hideUtilityText: true,\n        hideSearch: canHideSearch || undefined,\n        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined\n      });\n    }\n  }\n\n  if (canHideTitle) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: canHideSearch || undefined,\n      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      hideTitle: true\n    });\n  }\n\n  return states;\n}\n/**\n * Determines the best responsive state configuration of the top navigation, based on the given list of possible responsive states\n * and the current sizes of all elements inside the navigation bar.\n */\n\nexport function determineBestResponsiveState(possibleStates, sizes) {\n  var hasSearch = sizes.hasSearch,\n      availableWidth = sizes.availableWidth,\n      utilitiesLeftPadding = sizes.utilitiesLeftPadding,\n      fullIdentityWidth = sizes.fullIdentityWidth,\n      titleWidth = sizes.titleWidth,\n      searchSlotWidth = sizes.searchSlotWidth,\n      searchUtilityWidth = sizes.searchUtilityWidth,\n      utilityWithLabelWidths = sizes.utilityWithLabelWidths,\n      utilityWithoutLabelWidths = sizes.utilityWithoutLabelWidths,\n      menuTriggerUtilityWidth = sizes.menuTriggerUtilityWidth;\n\n  var _loop_1 = function (state) {\n    var searchWidth = hasSearch ? state.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;\n    var utilitiesWidth = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter(function (_width, i) {\n      return !state.hideUtilities || state.hideUtilities.indexOf(i) === -1;\n    }).reduce(function (sum, width) {\n      return sum + width;\n    }, 0);\n    var menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;\n    var identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;\n    var expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;\n\n    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {\n      return {\n        value: state\n      };\n    }\n  }; // Iterate through each state and calculate its expected required width.\n\n\n  for (var _i = 0, possibleStates_1 = possibleStates; _i < possibleStates_1.length; _i++) {\n    var state = possibleStates_1[_i];\n\n    var state_1 = _loop_1(state);\n\n    if (typeof state_1 === \"object\") return state_1.value;\n  } // If nothing matches, pick the smallest possible state.\n\n\n  return possibleStates[possibleStates.length - 1];\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useMemo","useRef","useState","useMergeRefs","useContainerBreakpoints","useContainerQuery","styles","RESPONSIVENESS_BUFFER","useTopNavigation","_a","identity","search","utilities","mainRef","virtualRef","breakpoint","breakpointRef","hasSearch","hasTitleWithLogo","logo","title","responsiveStates","generateResponsiveStateKeys","responsiveState","setResponsiveState","recalculateFit","current","availableWidth","getContentBoxWidth","querySelector","sizeConfiguration","fullIdentityWidth","getBoundingClientRect","width","titleWidth","_b","searchSlotWidth","_c","_d","searchUtilityWidth","utilitiesLeftPadding","parseFloat","getComputedStyle","paddingLeft","utilityWithLabelWidths","Array","prototype","slice","call","querySelectorAll","map","element","utilityWithoutLabelWidths","menuTriggerUtilityWidth","determineBestResponsiveState","containerQueryRef","onVirtualMount","isSearchMinimized","setSearchMinimized","isSearchExpanded","hideSearch","focus","mergedMainRef","onSearchUtilityClick","style","paddingRight","canHideSearch","canHideTitle","states","some","text","push","hideUtilityText","hiddenUtilties","i","length","disableUtilityCollapse","undefined","hideUtilities","hideTitle","possibleStates","sizes","state","searchWidth","utilitiesWidth","filter","_width","indexOf","reduce","sum","menuTriggerWidth","identityWidth","expectedInnerWidth","_i"],"sourceRoot":"","sources":["../../../src/top-navigation/use-top-navigation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\n\nimport { useContainerBreakpoints, useContainerQuery } from '../internal/hooks/container-queries';\nimport { TopNavigationProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport interface UseTopNavigationParams {\n  identity: TopNavigationProps['identity'];\n  search: TopNavigationProps['search'];\n  utilities: NonNullable<TopNavigationProps['utilities']>;\n}\n\nexport interface ResponsiveState {\n  hideUtilityText?: boolean;\n  hideSearch?: boolean;\n  hideUtilities?: number[];\n  hideTitle?: boolean;\n}\n\nexport interface TopNavigationSizeConfiguration {\n  hasSearch: boolean;\n  availableWidth: number;\n  utilitiesLeftPadding: number;\n  fullIdentityWidth: number;\n  titleWidth: number;\n  searchSlotWidth: number;\n  searchUtilityWidth: number;\n  utilityWithLabelWidths: number[];\n  utilityWithoutLabelWidths: number[];\n  menuTriggerUtilityWidth: number;\n}\n\nexport interface UseTopNavigation {\n  mainRef: React.Ref<HTMLDivElement>;\n  virtualRef: React.Ref<HTMLDivElement>;\n\n  responsiveState: ResponsiveState;\n  breakpoint: 'default' | 'xxs' | 's';\n  isSearchExpanded: boolean;\n  onSearchUtilityClick: () => void;\n}\n\n// A small buffer to make calculations more lenient against browser lag or padding adjustments.\nconst RESPONSIVENESS_BUFFER = 20;\n\nexport function useTopNavigation({ identity, search, utilities }: UseTopNavigationParams): UseTopNavigation {\n  // Refs and breakpoints\n  const mainRef = useRef<HTMLElement | null>(null);\n  const virtualRef = useRef<HTMLDivElement | null>(null);\n  const [breakpoint, breakpointRef] = useContainerBreakpoints(['xxs', 's']);\n\n  // Responsiveness state\n  // The component works by calculating the possible resize states that it can\n  // be in, and having a state variable to track which state we're currently in.\n  const hasSearch = !!search;\n  const hasTitleWithLogo = identity && !!identity.logo && !!identity.title;\n  const responsiveStates = useMemo<ReadonlyArray<ResponsiveState>>(() => {\n    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);\n  }, [utilities, hasSearch, hasTitleWithLogo]);\n\n  // To hide/show elements dynamically, we need to know how much space they take up,\n  // even if they're not being rendered. The top navigation elements are hidden/resized\n  // based on the available size or if a search bar is open, and they need to be available\n  // for calculations so we know where to toggle them. So we render a second, more stable\n  // top-nav off screen to do these calculations against.\n  //\n  // We can't \"affix\" these values to pixels because they can depend on spacing tokens.\n  // It's easier to render all of these utilities separately rather than figuring out\n  // spacing token values, icon sizes, text widths, etc.\n  const [responsiveState, setResponsiveState] = useState<ResponsiveState | undefined>();\n  const recalculateFit = useCallback(() => {\n    if (!mainRef?.current || !virtualRef.current) {\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n\n    // Get available width from the visible top navigation.\n    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles['padding-box']}`)!);\n    if (availableWidth === 0) {\n      // Likely in an SSR or Jest situation.\n      setResponsiveState(responsiveStates[0]);\n      return;\n    }\n\n    const sizeConfiguration = {\n      hasSearch,\n      availableWidth,\n\n      // Get widths from the hidden top navigation\n      fullIdentityWidth: virtualRef.current.querySelector(`.${styles.identity}`)!.getBoundingClientRect().width,\n      titleWidth: virtualRef.current.querySelector(`.${styles.title}`)?.getBoundingClientRect().width ?? 0,\n      searchSlotWidth: virtualRef.current.querySelector(`.${styles.search}`)?.getBoundingClientRect().width ?? 0,\n      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special=\"search\"]')!.getBoundingClientRect()\n        .width,\n      utilitiesLeftPadding: parseFloat(\n        getComputedStyle(virtualRef.current.querySelector(`.${styles.utilities}`)!).paddingLeft || '0px'\n      ),\n      utilityWithLabelWidths: Array.prototype.slice\n        .call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"false\"]`))\n        .map((element: Element) => element.getBoundingClientRect().width),\n      utilityWithoutLabelWidths: Array.prototype.slice\n        .call(virtualRef.current.querySelectorAll(`[data-utility-hide=\"true\"]`))\n        .map((element: Element) => element.getBoundingClientRect().width),\n      menuTriggerUtilityWidth: virtualRef.current\n        .querySelector('[data-utility-special=\"menu-trigger\"]')!\n        .getBoundingClientRect().width,\n    };\n    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));\n  }, [responsiveStates, hasSearch]);\n\n  const [, containerQueryRef] = useContainerQuery(() => {\n    recalculateFit();\n  }, [recalculateFit]);\n\n  // Due to being rendered in a portal, the virtual navigation isn't rendered\n  // at the same time as the main one.\n  const onVirtualMount = useCallback(\n    (element: HTMLDivElement | null) => {\n      virtualRef.current = element;\n      recalculateFit();\n    },\n    [recalculateFit]\n  );\n\n  // Search slot expansion on small screens\n  const [isSearchMinimized, setSearchMinimized] = useState(true);\n  const isSearchExpanded = !isSearchMinimized && hasSearch && responsiveState?.hideSearch;\n\n  // If the search was expanded, and then the screen resized so that the\n  // expansion is no longer necessary. So we implicitly minimize it.\n  useEffect(() => {\n    if (!responsiveState?.hideSearch) {\n      setSearchMinimized(true);\n    }\n  }, [responsiveState]);\n\n  // If the search is expanded after clicking on the search utility, move\n  // the focus to the input. Since this is a user-controlled slot, we're just\n  // assuming that it contains an input, though it's a pretty safe guess.\n  useEffect(() => {\n    if (isSearchExpanded) {\n      mainRef?.current?.querySelector<HTMLInputElement>(`.${styles.search} input`)?.focus();\n    }\n  }, [isSearchExpanded, mainRef]);\n\n  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);\n\n  return {\n    mainRef: mergedMainRef,\n    virtualRef: onVirtualMount,\n    responsiveState: responsiveState ?? responsiveStates[0],\n    breakpoint: breakpoint ?? 'default',\n    isSearchExpanded: !!isSearchExpanded,\n    onSearchUtilityClick: () => setSearchMinimized(isSearchMinimized => !isSearchMinimized),\n  };\n}\n\n/**\n * Get the width of the content box (assuming the element's box-sizing is border-box).\n */\nfunction getContentBoxWidth(element: Element): number {\n  const style = getComputedStyle(element);\n  return (\n    parseFloat(style.width || '0px') - parseFloat(style.paddingLeft || '0px') - parseFloat(style.paddingRight || '0px')\n  );\n}\n\n/**\n * Generates the series of responsive steps that can be performed on the header in order.\n */\nexport function generateResponsiveStateKeys(\n  utilities: ReadonlyArray<TopNavigationProps.Utility>,\n  canHideSearch: boolean,\n  canHideTitle: boolean\n): ReadonlyArray<ResponsiveState> {\n  const states: ResponsiveState[] = [{}];\n  if (utilities.some(utility => utility.text)) {\n    states.push({ hideUtilityText: true });\n  }\n  if (canHideSearch) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: true,\n    });\n  }\n  const hiddenUtilties = [];\n  for (let i = 0; i < utilities.length; i++) {\n    if (!utilities[i].disableUtilityCollapse) {\n      hiddenUtilties.push(i);\n      states.push({\n        hideUtilityText: true,\n        hideSearch: canHideSearch || undefined,\n        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      });\n    }\n  }\n  if (canHideTitle) {\n    states.push({\n      hideUtilityText: true,\n      hideSearch: canHideSearch || undefined,\n      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : undefined,\n      hideTitle: true,\n    });\n  }\n  return states;\n}\n\n/**\n * Determines the best responsive state configuration of the top navigation, based on the given list of possible responsive states\n * and the current sizes of all elements inside the navigation bar.\n */\nexport function determineBestResponsiveState(\n  possibleStates: ReadonlyArray<ResponsiveState>,\n  sizes: TopNavigationSizeConfiguration\n): ResponsiveState {\n  const {\n    hasSearch,\n    availableWidth,\n    utilitiesLeftPadding,\n    fullIdentityWidth,\n    titleWidth,\n    searchSlotWidth,\n    searchUtilityWidth,\n    utilityWithLabelWidths,\n    utilityWithoutLabelWidths,\n    menuTriggerUtilityWidth,\n  } = sizes;\n  // Iterate through each state and calculate its expected required width.\n  for (const state of possibleStates) {\n    const searchWidth = hasSearch ? (state.hideSearch ? searchUtilityWidth : searchSlotWidth) : 0;\n    const utilitiesWidth: number = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths)\n      .filter((_width, i) => !state.hideUtilities || state.hideUtilities.indexOf(i) === -1)\n      .reduce((sum, width) => sum + width, 0);\n    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;\n    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;\n    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;\n    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {\n      return state;\n    }\n  }\n\n  // If nothing matches, pick the smallest possible state.\n  return possibleStates[possibleStates.length - 1];\n}\n"]},"metadata":{},"sourceType":"module"}