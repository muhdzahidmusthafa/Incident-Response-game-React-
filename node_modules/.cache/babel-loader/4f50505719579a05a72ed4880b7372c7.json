{"ast":null,"code":"import { __assign } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from 'react';\nimport Item from '../parts/item';\nimport MutliselectItem from '../parts/multiselect-item';\nimport { getItemProps } from './get-item-props';\nexport var renderOptions = function (_a) {\n  var options = _a.options,\n      getOptionProps = _a.getOptionProps,\n      filteringValue = _a.filteringValue,\n      _b = _a.isKeyboard,\n      isKeyboard = _b === void 0 ? false : _b,\n      _c = _a.checkboxes,\n      checkboxes = _c === void 0 ? false : _c,\n      hasDropdownStatus = _a.hasDropdownStatus,\n      virtualItems = _a.virtualItems,\n      useInteractiveGroups = _a.useInteractiveGroups,\n      screenReaderContent = _a.screenReaderContent,\n      ariaSetsize = _a.ariaSetsize;\n  return options.map(function (option, index) {\n    var virtualItem = virtualItems && virtualItems[index];\n    var globalIndex = virtualItem ? virtualItem.index : index;\n    var props = getItemProps({\n      option: option,\n      index: globalIndex,\n      getOptionProps: getOptionProps,\n      filteringValue: filteringValue,\n      isKeyboard: isKeyboard,\n      checkboxes: checkboxes\n    });\n    var isLastItem = index === options.length - 1;\n    var padBottom = !hasDropdownStatus && isLastItem;\n    var ListItem = useInteractiveGroups ? MutliselectItem : Item;\n    return React.createElement(ListItem, __assign({\n      key: globalIndex\n    }, props, {\n      virtualPosition: virtualItem && virtualItem.start,\n      ref: virtualItem && virtualItem.measureRef,\n      padBottom: padBottom,\n      screenReaderContent: screenReaderContent,\n      ariaPosinset: globalIndex + 1,\n      ariaSetsize: ariaSetsize\n    }));\n  });\n};","map":{"version":3,"mappings":"kCAAA;AACA;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AAeA,OAAO,IAAMC,aAAa,GAAG,UAACC,EAAD,EAWT;MAVlBC,OAAO;MACPC,cAAc;MACdC,cAAc;MACdC;MAAAC,UAAU,mBAAG,KAAH,GAAQD;MAClBE;MAAAC,UAAU,mBAAG,KAAH,GAAQD;MAClBE,iBAAiB;MACjBC,YAAY;MACZC,oBAAoB;MACpBC,mBAAmB;MACnBC,WAAW;EAEX,OAAOX,OAAO,CAACY,GAAR,CAAY,UAACC,MAAD,EAASC,KAAT,EAAc;IAC/B,IAAMC,WAAW,GAAGP,YAAY,IAAIA,YAAY,CAACM,KAAD,CAAhD;IACA,IAAME,WAAW,GAAGD,WAAW,GAAGA,WAAW,CAACD,KAAf,GAAuBA,KAAtD;IACA,IAAMG,KAAK,GAAGpB,YAAY,CAAC;MACzBgB,MAAM,QADmB;MAEzBC,KAAK,EAAEE,WAFkB;MAGzBf,cAAc,gBAHW;MAIzBC,cAAc,gBAJW;MAKzBE,UAAU,YALe;MAMzBE,UAAU;IANe,CAAD,CAA1B;IASA,IAAMY,UAAU,GAAGJ,KAAK,KAAKd,OAAO,CAACmB,MAAR,GAAiB,CAA9C;IACA,IAAMC,SAAS,GAAG,CAACb,iBAAD,IAAsBW,UAAxC;IACA,IAAMG,QAAQ,GAAGZ,oBAAoB,GAAGb,eAAH,GAAqBD,IAA1D;IAEA,OACED,oBAAC2B,QAAD,EAASC;MACPC,GAAG,EAAEP;IADE,GAEHC,KAFG,EAEE;MACTO,eAAe,EAAET,WAAW,IAAIA,WAAW,CAACU,KADnC;MAETC,GAAG,EAAEX,WAAW,IAAIA,WAAW,CAACY,UAFvB;MAGTP,SAAS,EAAEA,SAHF;MAITV,mBAAmB,EAAEA,mBAJZ;MAKTkB,YAAY,EAAEZ,WAAW,GAAG,CALnB;MAMTL,WAAW,EAAEA;IANJ,CAFF,CAAT,CADF;EAYD,CA5BM,CAAP;AA6BD,CAzCM","names":["React","Item","MutliselectItem","getItemProps","renderOptions","_a","options","getOptionProps","filteringValue","_b","isKeyboard","_c","checkboxes","hasDropdownStatus","virtualItems","useInteractiveGroups","screenReaderContent","ariaSetsize","map","option","index","virtualItem","globalIndex","props","isLastItem","length","padBottom","ListItem","__assign","key","virtualPosition","start","ref","measureRef","ariaPosinset"],"sourceRoot":"","sources":["../../../../src/select/utils/render-options.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { VirtualItem } from 'react-virtual';\nimport Item from '../parts/item';\nimport MutliselectItem from '../parts/multiselect-item';\nimport { DropdownOption } from '../../internal/components/option/interfaces';\nimport { getItemProps } from './get-item-props';\n\nexport interface RenderOptionProps {\n  options: ReadonlyArray<DropdownOption>;\n  getOptionProps: any;\n  filteringValue: string;\n  isKeyboard?: boolean;\n  checkboxes?: boolean;\n  hasDropdownStatus?: boolean;\n  virtualItems?: VirtualItem[];\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n  ariaSetsize?: number;\n}\n\nexport const renderOptions = ({\n  options,\n  getOptionProps,\n  filteringValue,\n  isKeyboard = false,\n  checkboxes = false,\n  hasDropdownStatus,\n  virtualItems,\n  useInteractiveGroups,\n  screenReaderContent,\n  ariaSetsize,\n}: RenderOptionProps) => {\n  return options.map((option, index) => {\n    const virtualItem = virtualItems && virtualItems[index];\n    const globalIndex = virtualItem ? virtualItem.index : index;\n    const props = getItemProps({\n      option,\n      index: globalIndex,\n      getOptionProps,\n      filteringValue,\n      isKeyboard,\n      checkboxes,\n    });\n\n    const isLastItem = index === options.length - 1;\n    const padBottom = !hasDropdownStatus && isLastItem;\n    const ListItem = useInteractiveGroups ? MutliselectItem : Item;\n\n    return (\n      <ListItem\n        key={globalIndex}\n        {...props}\n        virtualPosition={virtualItem && virtualItem.start}\n        ref={virtualItem && virtualItem.measureRef}\n        padBottom={padBottom}\n        screenReaderContent={screenReaderContent}\n        ariaPosinset={globalIndex + 1}\n        ariaSetsize={ariaSetsize}\n      />\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}