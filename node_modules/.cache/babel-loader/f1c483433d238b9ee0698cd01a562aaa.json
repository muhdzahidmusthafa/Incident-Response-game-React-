{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getMatchingBreakpoint, mobileBreakpoint } from '../../breakpoints';\nimport { createSingletonState } from '../use-singleton-handler';\n\nfunction getIsMobile() {\n  if (typeof window === 'undefined') {\n    // assume desktop in server-rendering\n    return false;\n  }\n\n  if (window.matchMedia) {\n    /**\n     * Some browsers include the scrollbar width in their media query calculations, but\n     * some browsers don't. Thus we can't use `window.innerWidth` or\n     * `document.documentElement.clientWidth` to get a very accurate result (since we\n     * wouldn't know which one of them to use).\n     * Instead, we use the media query here in JS too.\n     */\n    return window.matchMedia(\"(max-width: \".concat(mobileBreakpoint, \"px)\")).matches;\n  }\n\n  return getMatchingBreakpoint(window.innerWidth, ['xs']) !== 'xs';\n}\n\nexport var useMobile = createSingletonState({\n  initialState: function () {\n    return getIsMobile();\n  },\n  factory: function (handler) {\n    var listener = function () {\n      return handler(getIsMobile());\n    };\n\n    window.addEventListener('resize', listener);\n    return function () {\n      window.removeEventListener('resize', listener);\n    };\n  }\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,qBAAT,EAAgCC,gBAAhC,QAAwD,mBAAxD;AACA,SAASC,oBAAT,QAAqC,0BAArC;;AAEA,SAASC,WAAT,GAAoB;EAClB,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;IACjC;IACA,OAAO,KAAP;EACD;;EAED,IAAIA,MAAM,CAACC,UAAX,EAAuB;IACrB;;;;;;;IAOA,OAAOD,MAAM,CAACC,UAAP,CAAkB,sBAAeJ,gBAAf,EAA+B,KAA/B,CAAlB,EAAwDK,OAA/D;EACD;;EAED,OAAON,qBAAqB,CAACI,MAAM,CAACG,UAAR,EAAoB,CAAC,IAAD,CAApB,CAArB,KAAqD,IAA5D;AACD;;AAED,OAAO,IAAMC,SAAS,GAAGN,oBAAoB,CAAU;EACrDO,YAAY,EAAE;IAAM,kBAAW,EAAX;EAAa,CADoB;EAErDC,OAAO,EAAE,mBAAO;IACd,IAAMC,QAAQ,GAAG;MAAM,cAAO,CAACR,WAAW,EAAZ,CAAP;IAAsB,CAA7C;;IACAC,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCD,QAAlC;IACA,OAAO;MACLP,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCF,QAArC;IACD,CAFD;EAGD;AARoD,CAAV,CAAtC","names":["getMatchingBreakpoint","mobileBreakpoint","createSingletonState","getIsMobile","window","matchMedia","matches","innerWidth","useMobile","initialState","factory","listener","addEventListener","removeEventListener"],"sourceRoot":"","sources":["../../../../../src/internal/hooks/use-mobile/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getMatchingBreakpoint, mobileBreakpoint } from '../../breakpoints';\nimport { createSingletonState } from '../use-singleton-handler';\n\nfunction getIsMobile() {\n  if (typeof window === 'undefined') {\n    // assume desktop in server-rendering\n    return false;\n  }\n\n  if (window.matchMedia) {\n    /**\n     * Some browsers include the scrollbar width in their media query calculations, but\n     * some browsers don't. Thus we can't use `window.innerWidth` or\n     * `document.documentElement.clientWidth` to get a very accurate result (since we\n     * wouldn't know which one of them to use).\n     * Instead, we use the media query here in JS too.\n     */\n    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;\n  }\n\n  return getMatchingBreakpoint(window.innerWidth, ['xs']) !== 'xs';\n}\n\nexport const useMobile = createSingletonState<boolean>({\n  initialState: () => getIsMobile(),\n  factory: handler => {\n    const listener = () => handler(getIsMobile());\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"module"}