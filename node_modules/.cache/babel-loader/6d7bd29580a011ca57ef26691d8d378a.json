{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport AreaSeries from './area-series';\nimport ThresholdSeries from './threshold-series';\nimport styles from '../styles.css.js';\nimport { useSelector } from '../model/async-store';\nexport default memo(DataSeries);\n\nfunction DataSeries(_a) {\n  var model = _a.model;\n  var chartAreaClipPath = useUniqueId('awsui-area-chart__chart-area-');\n  var highlightedX = useSelector(model.interactions, function (state) {\n    return state.highlightedX;\n  });\n  var highlightedSeries = useSelector(model.interactions, function (state) {\n    return state.highlightedSeries;\n  });\n  var useHighlightDimmed = !highlightedX; // Iterating series in the reversed order so that SVG paths overlap correctly.\n\n  var seriesData = [];\n\n  for (var seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {\n    if (model.computed.plot.sx[seriesIndex]) {\n      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: model.width,\n    height: model.height\n  }))), React.createElement(\"g\", {\n    role: \"group\"\n  }, seriesData.map(function (_a) {\n    var _b;\n\n    var series = _a[0],\n        data = _a[1];\n    var isHighlighted = series === highlightedSeries;\n    var isDimmed = !!highlightedSeries && !isHighlighted;\n    return React.createElement(\"g\", {\n      key: series.title,\n      role: \"group\",\n      \"aria-label\": series.title,\n      className: clsx(styles.series, styles[\"series--\".concat(series.type)], (_b = {}, _b[styles['series--highlighted']] = isHighlighted, _b[styles['series--dimmed']] = useHighlightDimmed && isDimmed, _b))\n    }, series.type === 'area' ? React.createElement(AreaSeries, {\n      data: data,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }) : React.createElement(ThresholdSeries, {\n      data: data,\n      xScale: model.computed.xScale,\n      color: model.getInternalSeries(series).color,\n      chartAreaClipPath: chartAreaClipPath\n    }));\n  })));\n}","map":{"version":3,"mappings":"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","names":["React","memo","clsx","useUniqueId","AreaSeries","ThresholdSeries","styles","useSelector","DataSeries","_a","model","chartAreaClipPath","highlightedX","interactions","highlightedSeries","useHighlightDimmed","seriesData","seriesIndex","series","length","computed","plot","sx","push","id","x","y","width","height","role","map","data","isHighlighted","isDimmed","key","title","className","type","_b","color","getInternalSeries","xScale"],"sourceRoot":"","sources":["../../../../src/area-chart/elements/data-series.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport AreaSeries from './area-series';\nimport ThresholdSeries from './threshold-series';\nimport { AreaChartProps } from '../interfaces';\nimport { ChartModel } from '../model';\n\nimport styles from '../styles.css.js';\nimport { useSelector } from '../model/async-store';\n\nexport default memo(DataSeries) as typeof DataSeries;\n\nfunction DataSeries<T extends AreaChartProps.DataTypes>({ model }: { model: ChartModel<T> }) {\n  const chartAreaClipPath = useUniqueId('awsui-area-chart__chart-area-');\n\n  const highlightedX = useSelector(model.interactions, state => state.highlightedX);\n  const highlightedSeries = useSelector(model.interactions, state => state.highlightedSeries);\n  const useHighlightDimmed = !highlightedX;\n\n  // Iterating series in the reversed order so that SVG paths overlap correctly.\n  const seriesData: [AreaChartProps.Series<T>, ChartModel.PlotPoint<T>[]][] = [];\n  for (let seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {\n    if (model.computed.plot.sx[seriesIndex]) {\n      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);\n    }\n  }\n\n  return (\n    <>\n      <defs aria-hidden=\"true\">\n        <clipPath id={chartAreaClipPath}>\n          <rect x={0} y={0} width={model.width} height={model.height} />\n        </clipPath>\n      </defs>\n      <g role=\"group\">\n        {seriesData.map(([series, data]) => {\n          const isHighlighted = series === highlightedSeries;\n          const isDimmed = !!highlightedSeries && !isHighlighted;\n\n          return (\n            <g\n              key={series.title}\n              role=\"group\"\n              aria-label={series.title}\n              className={clsx(styles.series, styles[`series--${series.type}`], {\n                [styles['series--highlighted']]: isHighlighted,\n                [styles['series--dimmed']]: useHighlightDimmed && isDimmed,\n              })}\n            >\n              {series.type === 'area' ? (\n                <AreaSeries\n                  data={data}\n                  color={model.getInternalSeries(series).color}\n                  chartAreaClipPath={chartAreaClipPath}\n                />\n              ) : (\n                <ThresholdSeries\n                  data={data}\n                  xScale={model.computed.xScale}\n                  color={model.getInternalSeries(series).color}\n                  chartAreaClipPath={chartAreaClipPath}\n                />\n              )}\n            </g>\n          );\n        })}\n      </g>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}