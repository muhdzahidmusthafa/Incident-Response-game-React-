{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\n\nexport default function Tools(_a) {\n  var children = _a.children;\n\n  var _b = useContext(AppLayoutContext),\n      ariaLabels = _b.ariaLabels,\n      handleSplitPanelClick = _b.handleSplitPanelClick,\n      handleToolsClick = _b.handleToolsClick,\n      hasDefaultToolsWidth = _b.hasDefaultToolsWidth,\n      isNavigationOpen = _b.isNavigationOpen,\n      isMobile = _b.isMobile,\n      isSplitPanelOpen = _b.isSplitPanelOpen,\n      isToolsOpen = _b.isToolsOpen,\n      splitPanel = _b.splitPanel,\n      tools = _b.tools,\n      toolsHide = _b.toolsHide,\n      toolsWidth = _b.toolsWidth,\n      isAnyPanelOpen = _b.isAnyPanelOpen,\n      navigationHide = _b.navigationHide;\n\n  var _c = useContext(SplitPanelContext),\n      splitPanelPosition = _c.position,\n      openButtonAriaLabel = _c.openButtonAriaLabel;\n\n  var hasSplitPanel = getSplitPanelStatus(splitPanel, splitPanelPosition);\n  var hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  var focusRefs = useFocusControl(isToolsOpen);\n\n  if (toolsHide && !hasSplitPanel) {\n    return null;\n  }\n\n  var isUnfocusable = isMobile && isAnyPanelOpen && isNavigationOpen && !navigationHide;\n  return React.createElement(Transition, {\n    \"in\": isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false\n  }, function (state, transitionEventsRef) {\n    var _a, _b, _c, _d;\n\n    var _e, _f, _g;\n\n    return React.createElement(\"div\", {\n      className: clsx(styles['tools-container'], (_a = {}, _a[testutilStyles['drawer-closed']] = !isToolsOpen, _a[styles.unfocusable] = isUnfocusable, _a)),\n      style: (_b = {}, _b[customCssProps.toolsAnimationStartingOpacity] = \"\".concat(hasSplitPanel && isSplitPanelOpen ? 1 : 0), // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.\n      _b[customCssProps.toolsWidth] = hasDefaultToolsWidth ? '' : \"\".concat(toolsWidth, \"px\"), _b)\n    }, children, !toolsHide && React.createElement(\"aside\", {\n      \"aria-hidden\": !isToolsOpen ? true : false,\n      \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _e !== void 0 ? _e : undefined,\n      className: clsx(styles.tools, (_c = {}, _c[styles.animating] = state === 'entering', _c[styles['has-tools-form-persistence']] = hasToolsFormPersistence, _c[styles['is-tools-open']] = isToolsOpen, _c), testutilStyles.tools),\n      ref: state !== 'exiting' ? transitionEventsRef : undefined\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, React.createElement(\"div\", {\n      className: clsx(styles['hide-tools'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _f !== void 0 ? _f : undefined,\n      iconName: isMobile ? 'close' : 'angle-right',\n      onClick: function () {\n        return handleToolsClick(false);\n      },\n      variant: \"icon\",\n      formAction: \"none\",\n      className: testutilStyles['tools-close'],\n      ref: focusRefs.close\n    })), tools)), !isMobile && React.createElement(\"aside\", {\n      \"aria-hidden\": !hasToolsForm ? true : false,\n      \"aria-label\": (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _g !== void 0 ? _g : undefined,\n      className: clsx(styles['show-tools'], (_d = {}, _d[styles.animating] = state === 'exiting', _d[styles['has-tools-form']] = hasToolsForm, _d[styles['has-tools-form-persistence']] = hasToolsFormPersistence, _d), splitPanelStyles.root),\n      ref: state === 'exiting' ? transitionEventsRef : undefined\n    }, !toolsHide && React.createElement(TriggerButton, {\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle,\n      iconName: \"status-info\",\n      onClick: function () {\n        return handleToolsClick(!isToolsOpen);\n      },\n      selected: hasSplitPanel && isToolsOpen,\n      className: testutilStyles['tools-toggle'],\n      ref: focusRefs.toggle\n    }), hasSplitPanel && React.createElement(TriggerButton, {\n      ariaLabel: openButtonAriaLabel,\n      iconName: \"view-vertical\",\n      onClick: function () {\n        return handleSplitPanelClick();\n      },\n      selected: hasSplitPanel && isSplitPanelOpen,\n      className: splitPanelStyles['open-button']\n    })));\n  });\n}\n/**\n * Determine the default state of the Tools component. Mobile viewports should be\n * closed by default under all circumstances. If the toolsOpen prop has not been\n * set then it should be closed as well. Otherwise, default to the toolsOpen prop.\n */\n\nexport function getToolsDefaultState(isMobile, stateFromProps) {\n  var isToolsOpen;\n\n  if (isMobile || stateFromProps === undefined) {\n    isToolsOpen = false;\n  } else {\n    isToolsOpen = stateFromProps;\n  }\n\n  return isToolsOpen;\n}\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\n\nfunction getSplitPanelStatus(splitPanel, splitPanelPosition) {\n  return splitPanel && splitPanelPosition === 'side' ? true : false;\n}\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\n\n\nfunction getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsForm = false;\n\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    } // The Split Panel button is needed\n\n\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    } // The Tools button is needed\n\n\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n\n  return hasToolsForm;\n}\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\n\n\nfunction getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {\n  var hasToolsFormPersistence = false; // Both Tools and Split Panel exist and one or both is open\n\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n\n  return hasToolsFormPersistence;\n}","map":{"version":3,"mappings":"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","names":["React","useContext","clsx","InternalButton","AppLayoutContext","SplitPanelContext","TriggerButton","styles","splitPanelStyles","testutilStyles","useFocusControl","Transition","customCssProps","Tools","_a","children","ariaLabels","handleSplitPanelClick","handleToolsClick","hasDefaultToolsWidth","isNavigationOpen","isMobile","isSplitPanelOpen","isToolsOpen","splitPanel","tools","toolsHide","toolsWidth","isAnyPanelOpen","navigationHide","splitPanelPosition","openButtonAriaLabel","hasSplitPanel","getSplitPanelStatus","hasToolsForm","getToolsFormStatus","hasToolsFormPersistence","getToolsFormPersistence","focusRefs","isUnfocusable","state","transitionEventsRef","className","unfocusable","style","_b","toolsAnimationStartingOpacity","_e","undefined","_c","animating","ref","ariaLabel","toolsClose","_f","iconName","onClick","variant","formAction","close","_g","_d","root","toolsToggle","selected","toggle","getToolsDefaultState","stateFromProps"],"sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/tools.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\ninterface ToolsProps {\n  children: React.ReactNode;\n}\n\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools({ children }: ToolsProps) {\n  const {\n    ariaLabels,\n    handleSplitPanelClick,\n    handleToolsClick,\n    hasDefaultToolsWidth,\n    isNavigationOpen,\n    isMobile,\n    isSplitPanelOpen,\n    isToolsOpen,\n    splitPanel,\n    tools,\n    toolsHide,\n    toolsWidth,\n    isAnyPanelOpen,\n    navigationHide,\n  } = useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition, openButtonAriaLabel } = useContext(SplitPanelContext);\n\n  const hasSplitPanel = getSplitPanelStatus(splitPanel, splitPanelPosition);\n  const hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n\n  const focusRefs = useFocusControl(isToolsOpen);\n\n  if (toolsHide && !hasSplitPanel) {\n    return null;\n  }\n\n  const isUnfocusable = isMobile && isAnyPanelOpen && isNavigationOpen && !navigationHide;\n\n  return (\n    <Transition in={isToolsOpen ?? false}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['tools-container'], {\n            [testutilStyles['drawer-closed']]: !isToolsOpen,\n            [styles.unfocusable]: isUnfocusable,\n          })}\n          style={{\n            [customCssProps.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,\n            // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.\n            [customCssProps.toolsWidth]: hasDefaultToolsWidth ? '' : `${toolsWidth}px`,\n          }}\n        >\n          {children}\n\n          {!toolsHide && (\n            <aside\n              aria-hidden={!isToolsOpen ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(\n                styles.tools,\n                {\n                  [styles.animating]: state === 'entering',\n                  [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n                  [styles['is-tools-open']]: isToolsOpen,\n                },\n                testutilStyles.tools\n              )}\n              ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            >\n              <div className={clsx(styles['animated-content'])}>\n                <div className={clsx(styles['hide-tools'])}>\n                  <InternalButton\n                    ariaLabel={ariaLabels?.toolsClose ?? undefined}\n                    iconName={isMobile ? 'close' : 'angle-right'}\n                    onClick={() => handleToolsClick(false)}\n                    variant=\"icon\"\n                    formAction=\"none\"\n                    className={testutilStyles['tools-close']}\n                    ref={focusRefs.close}\n                  />\n                </div>\n\n                {tools}\n              </div>\n            </aside>\n          )}\n\n          {!isMobile && (\n            <aside\n              aria-hidden={!hasToolsForm ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(\n                styles['show-tools'],\n                {\n                  [styles.animating]: state === 'exiting',\n                  [styles['has-tools-form']]: hasToolsForm,\n                  [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n                },\n                splitPanelStyles.root\n              )}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n            >\n              {!toolsHide && (\n                <TriggerButton\n                  ariaLabel={ariaLabels?.toolsToggle}\n                  iconName=\"status-info\"\n                  onClick={() => handleToolsClick(!isToolsOpen)}\n                  selected={hasSplitPanel && isToolsOpen}\n                  className={testutilStyles['tools-toggle']}\n                  ref={focusRefs.toggle}\n                />\n              )}\n\n              {hasSplitPanel && (\n                <TriggerButton\n                  ariaLabel={openButtonAriaLabel}\n                  iconName=\"view-vertical\"\n                  onClick={() => handleSplitPanelClick()}\n                  selected={hasSplitPanel && isSplitPanelOpen}\n                  className={splitPanelStyles['open-button']}\n                  // TODO should this button also get focus handling? (i.e. when the split panel is toggled)\n                />\n              )}\n            </aside>\n          )}\n        </div>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * Determine the default state of the Tools component. Mobile viewports should be\n * closed by default under all circumstances. If the toolsOpen prop has not been\n * set then it should be closed as well. Otherwise, default to the toolsOpen prop.\n */\nexport function getToolsDefaultState(isMobile: boolean, stateFromProps?: boolean) {\n  let isToolsOpen;\n\n  if (isMobile || stateFromProps === undefined) {\n    isToolsOpen = false;\n  } else {\n    isToolsOpen = stateFromProps;\n  }\n\n  return isToolsOpen;\n}\n\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\nfunction getSplitPanelStatus(splitPanel: React.ReactNode, splitPanelPosition: string) {\n  return splitPanel && splitPanelPosition === 'side' ? true : false;\n}\n\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(\n  hasSplitPanel: boolean,\n  isMobile: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsForm = false;\n\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n\n  return hasToolsForm;\n}\n\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(\n  hasSplitPanel: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsFormPersistence = false;\n\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n\n  return hasToolsFormPersistence;\n}\n"]},"metadata":{},"sourceType":"module"}